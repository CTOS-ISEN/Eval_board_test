
Tof_sensor_handling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f25c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  0800f3a0  0800f3a0  000103a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fba8  0800fba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fbb0  0800fbb0  00010bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fbb4  0800fbb4  00010bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  20000008  0800fbb8  00011008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004934  200001e0  0800fd90  000111e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20004b14  0800fd90  00011b14  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000111e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000400a0  00000000  00000000  00011210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005fd2  00000000  00000000  000512b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003710  00000000  00000000  00057288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002a93  00000000  00000000  0005a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007dca  00000000  00000000  0005d42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000332a3  00000000  00000000  000651f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fecb5  00000000  00000000  00098498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019714d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ff30  00000000  00000000  00197190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  001a70c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f384 	.word	0x0800f384

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800f384 	.word	0x0800f384

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d013      	beq.n	8000e88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00b      	beq.n	8000e88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e70:	e000      	b.n	8000e74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ea6:	f023 0218 	bic.w	r2, r3, #24
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ed0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ede:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e009      	b.n	8000f1a <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	60ba      	str	r2, [r7, #8]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff9a 	bl	8000e48 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf1      	blt.n	8000f06 <_write+0x12>
	}
	return len;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f002 ffa8 	bl	8003e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f8e2 	bl	80010fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f38:	f000 f956 	bl	80011e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fa5c 	bl	80013f8 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000f40:	f000 fa32 	bl	80013a8 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000f44:	f000 f9e4 	bl	8001310 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f48:	f000 f96c 	bl	8001224 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000f4c:	f000 f9b8 	bl	80012c0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	log_init(&huart1);
 8000f50:	4843      	ldr	r0, [pc, #268]	@ (8001060 <main+0x134>)
 8000f52:	f002 fe99 	bl	8003c88 <log_init>
	log_printf("\x1b[2J"); //clear screen
 8000f56:	4843      	ldr	r0, [pc, #268]	@ (8001064 <main+0x138>)
 8000f58:	f002 feba 	bl	8003cd0 <log_printf>
	log_printf("huart initialized\r\n");
 8000f5c:	4842      	ldr	r0, [pc, #264]	@ (8001068 <main+0x13c>)
 8000f5e:	f002 feb7 	bl	8003cd0 <log_printf>

	HAL_GPIO_WritePin(RST_GNSS_GPIO_Port, RST_GNSS_Pin, RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f68:	4840      	ldr	r0, [pc, #256]	@ (800106c <main+0x140>)
 8000f6a:	f003 fb29 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WKP_GNSS_GPIO_Port, WKP_GNSS_Pin, SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2120      	movs	r1, #32
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f76:	f003 fb23 	bl	80045c0 <HAL_GPIO_WritePin>
	log_init(&huart1);
 8000f7a:	4839      	ldr	r0, [pc, #228]	@ (8001060 <main+0x134>)
 8000f7c:	f002 fe84 	bl	8003c88 <log_init>

	MyInitLSM6DSO();
 8000f80:	f002 fec6 	bl	8003d10 <MyInitLSM6DSO>
	MyEnableLSM6DSO();
 8000f84:	f002 fef2 	bl	8003d6c <MyEnableLSM6DSO>
	MyInitLIS2MDL();
 8000f88:	f002 ff2a 	bl	8003de0 <MyInitLIS2MDL>
	MyEnableLIS2MDL();
 8000f8c:	f002 ff56 	bl	8003e3c <MyEnableLIS2MDL>

	HAL_TIM_Base_Start_IT(&htim16);
 8000f90:	4837      	ldr	r0, [pc, #220]	@ (8001070 <main+0x144>)
 8000f92:	f006 f93f 	bl	8007214 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000f96:	4837      	ldr	r0, [pc, #220]	@ (8001074 <main+0x148>)
 8000f98:	f006 f93c 	bl	8007214 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f9c:	f007 fbd0 	bl	8008740 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSend */
  MutexSendHandle = osMutexNew(&MutexSend_attributes);
 8000fa0:	4835      	ldr	r0, [pc, #212]	@ (8001078 <main+0x14c>)
 8000fa2:	f007 fda9 	bl	8008af8 <osMutexNew>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a34      	ldr	r2, [pc, #208]	@ (800107c <main+0x150>)
 8000faa:	6013      	str	r3, [r2, #0]

  /* creation of GNSSMutex */
  GNSSMutexHandle = osMutexNew(&GNSSMutex_attributes);
 8000fac:	4834      	ldr	r0, [pc, #208]	@ (8001080 <main+0x154>)
 8000fae:	f007 fda3 	bl	8008af8 <osMutexNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a33      	ldr	r2, [pc, #204]	@ (8001084 <main+0x158>)
 8000fb6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LSM6DSOData_Queue */
  LSM6DSOData_QueueHandle = osMessageQueueNew (16, sizeof(IMU_Data), &LSM6DSOData_Queue_attributes);
 8000fb8:	4a33      	ldr	r2, [pc, #204]	@ (8001088 <main+0x15c>)
 8000fba:	2124      	movs	r1, #36	@ 0x24
 8000fbc:	2010      	movs	r0, #16
 8000fbe:	f007 fea9 	bl	8008d14 <osMessageQueueNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <main+0x160>)
 8000fc6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc8:	4a31      	ldr	r2, [pc, #196]	@ (8001090 <main+0x164>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4831      	ldr	r0, [pc, #196]	@ (8001094 <main+0x168>)
 8000fce:	f007 fc16 	bl	80087fe <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a30      	ldr	r2, [pc, #192]	@ (8001098 <main+0x16c>)
 8000fd6:	6013      	str	r3, [r2, #0]

  /* creation of Ack_ToF_Data */
  Ack_ToF_DataHandle = osThreadNew(StartAck_ToF_Data, NULL, &Ack_ToF_Data_attributes);
 8000fd8:	4a30      	ldr	r2, [pc, #192]	@ (800109c <main+0x170>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4830      	ldr	r0, [pc, #192]	@ (80010a0 <main+0x174>)
 8000fde:	f007 fc0e 	bl	80087fe <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80010a4 <main+0x178>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* creation of SendData */
  SendDataHandle = osThreadNew(StartSendData, NULL, &SendData_attributes);
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80010a8 <main+0x17c>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	482f      	ldr	r0, [pc, #188]	@ (80010ac <main+0x180>)
 8000fee:	f007 fc06 	bl	80087fe <osThreadNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80010b0 <main+0x184>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* creation of Ack_LSM6DSO_Dat */
  Ack_LSM6DSO_DatHandle = osThreadNew(StartAck_LSM6DSO_Data, NULL, &Ack_LSM6DSO_Dat_attributes);
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80010b4 <main+0x188>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	482e      	ldr	r0, [pc, #184]	@ (80010b8 <main+0x18c>)
 8000ffe:	f007 fbfe 	bl	80087fe <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a2d      	ldr	r2, [pc, #180]	@ (80010bc <main+0x190>)
 8001006:	6013      	str	r3, [r2, #0]

  /* creation of SendDataLSM6 */
  SendDataLSM6Handle = osThreadNew(StartSendDataLSM6, NULL, &SendDataLSM6_attributes);
 8001008:	4a2d      	ldr	r2, [pc, #180]	@ (80010c0 <main+0x194>)
 800100a:	2100      	movs	r1, #0
 800100c:	482d      	ldr	r0, [pc, #180]	@ (80010c4 <main+0x198>)
 800100e:	f007 fbf6 	bl	80087fe <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a2c      	ldr	r2, [pc, #176]	@ (80010c8 <main+0x19c>)
 8001016:	6013      	str	r3, [r2, #0]

  /* creation of BackTaskGNSS */
  BackTaskGNSSHandle = osThreadNew(gnssBackground, NULL, &BackTaskGNSS_attributes);
 8001018:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <main+0x1a0>)
 800101a:	2100      	movs	r1, #0
 800101c:	482c      	ldr	r0, [pc, #176]	@ (80010d0 <main+0x1a4>)
 800101e:	f007 fbee 	bl	80087fe <osThreadNew>
 8001022:	4603      	mov	r3, r0
 8001024:	4a2b      	ldr	r2, [pc, #172]	@ (80010d4 <main+0x1a8>)
 8001026:	6013      	str	r3, [r2, #0]

  /* creation of ParserTaskGNSS */
  ParserTaskGNSSHandle = osThreadNew(DataParserTask, NULL, &ParserTaskGNSS_attributes);
 8001028:	4a2b      	ldr	r2, [pc, #172]	@ (80010d8 <main+0x1ac>)
 800102a:	2100      	movs	r1, #0
 800102c:	482b      	ldr	r0, [pc, #172]	@ (80010dc <main+0x1b0>)
 800102e:	f007 fbe6 	bl	80087fe <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a2a      	ldr	r2, [pc, #168]	@ (80010e0 <main+0x1b4>)
 8001036:	6013      	str	r3, [r2, #0]

  /* creation of printGPRMC */
  printGPRMCHandle = osThreadNew(startPrintGPRMC, NULL, &printGPRMC_attributes);
 8001038:	4a2a      	ldr	r2, [pc, #168]	@ (80010e4 <main+0x1b8>)
 800103a:	2100      	movs	r1, #0
 800103c:	482a      	ldr	r0, [pc, #168]	@ (80010e8 <main+0x1bc>)
 800103e:	f007 fbde 	bl	80087fe <osThreadNew>
 8001042:	4603      	mov	r3, r0
 8001044:	4a29      	ldr	r2, [pc, #164]	@ (80010ec <main+0x1c0>)
 8001046:	6013      	str	r3, [r2, #0]

  /* creation of printGPGGA */
  printGPGGAHandle = osThreadNew(startPrintGPGGA, NULL, &printGPGGA_attributes);
 8001048:	4a29      	ldr	r2, [pc, #164]	@ (80010f0 <main+0x1c4>)
 800104a:	2100      	movs	r1, #0
 800104c:	4829      	ldr	r0, [pc, #164]	@ (80010f4 <main+0x1c8>)
 800104e:	f007 fbd6 	bl	80087fe <osThreadNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a28      	ldr	r2, [pc, #160]	@ (80010f8 <main+0x1cc>)
 8001056:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001058:	f007 fb96 	bl	8008788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <main+0x130>
 8001060:	20000294 	.word	0x20000294
 8001064:	0800f44c 	.word	0x0800f44c
 8001068:	0800f454 	.word	0x0800f454
 800106c:	48000800 	.word	0x48000800
 8001070:	20000248 	.word	0x20000248
 8001074:	200001fc 	.word	0x200001fc
 8001078:	0800f74c 	.word	0x0800f74c
 800107c:	200008bc 	.word	0x200008bc
 8001080:	0800f75c 	.word	0x0800f75c
 8001084:	200008c0 	.word	0x200008c0
 8001088:	0800f734 	.word	0x0800f734
 800108c:	20000628 	.word	0x20000628
 8001090:	0800f5f0 	.word	0x0800f5f0
 8001094:	08001519 	.word	0x08001519
 8001098:	20000604 	.word	0x20000604
 800109c:	0800f614 	.word	0x0800f614
 80010a0:	08001529 	.word	0x08001529
 80010a4:	20000608 	.word	0x20000608
 80010a8:	0800f638 	.word	0x0800f638
 80010ac:	0800153b 	.word	0x0800153b
 80010b0:	2000060c 	.word	0x2000060c
 80010b4:	0800f65c 	.word	0x0800f65c
 80010b8:	0800154d 	.word	0x0800154d
 80010bc:	20000610 	.word	0x20000610
 80010c0:	0800f680 	.word	0x0800f680
 80010c4:	080015a1 	.word	0x080015a1
 80010c8:	20000614 	.word	0x20000614
 80010cc:	0800f6a4 	.word	0x0800f6a4
 80010d0:	08001645 	.word	0x08001645
 80010d4:	20000618 	.word	0x20000618
 80010d8:	0800f6c8 	.word	0x0800f6c8
 80010dc:	08001655 	.word	0x08001655
 80010e0:	2000061c 	.word	0x2000061c
 80010e4:	0800f6ec 	.word	0x0800f6ec
 80010e8:	08001667 	.word	0x08001667
 80010ec:	20000620 	.word	0x20000620
 80010f0:	0800f710 	.word	0x0800f710
 80010f4:	08001679 	.word	0x08001679
 80010f8:	20000624 	.word	0x20000624

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09a      	sub	sp, #104	@ 0x68
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2248      	movs	r2, #72	@ 0x48
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f00c f8ae 	bl	800d26c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800112c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001130:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	f023 0303 	bic.w	r3, r3, #3
 800113c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001146:	f004 f9ef 	bl	8005528 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fea3 	bl	8000e96 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <SystemClock_Config+0xe8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001158:	4a22      	ldr	r2, [pc, #136]	@ (80011e4 <SystemClock_Config+0xe8>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <SystemClock_Config+0xe8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800116c:	2327      	movs	r3, #39	@ 0x27
 800116e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001176:	2301      	movs	r3, #1
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001184:	2340      	movs	r3, #64	@ 0x40
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001188:	2300      	movs	r3, #0
 800118a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800118c:	2360      	movs	r3, #96	@ 0x60
 800118e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fd65 	bl	8005c68 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011a4:	f000 fab8 	bl	8001718 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80011a8:	236f      	movs	r3, #111	@ 0x6f
 80011aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011ac:	2302      	movs	r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 f8c1 	bl	8006350 <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80011d4:	f000 faa0 	bl	8001718 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011d8:	f005 feae 	bl	8006f38 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011dc:	bf00      	nop
 80011de:	3768      	adds	r7, #104	@ 0x68
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	58000400 	.word	0x58000400

080011e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	@ 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2250      	movs	r2, #80	@ 0x50
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00c f839 	bl	800d26c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80011fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011fe:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001204:	2300      	movs	r3, #0
 8001206:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4618      	mov	r0, r3
 800120c:	f005 fd1e 	bl	8006c4c <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001216:	f000 fa7f 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	@ 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001248:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_TIM2_Init+0x98>)
 800124c:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8001250:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999;
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <MX_TIM2_Init+0x98>)
 800125a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800125e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126c:	4813      	ldr	r0, [pc, #76]	@ (80012bc <MX_TIM2_Init+0x98>)
 800126e:	f005 ff7a 	bl	8007166 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001278:	f000 fa4e 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_TIM2_Init+0x98>)
 800128a:	f006 f918 	bl	80074be <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001294:	f000 fa40 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_TIM2_Init+0x98>)
 80012a6:	f006 fb07 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012b0:	f000 fa32 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001fc 	.word	0x200001fc

080012c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <MX_TIM16_Init+0x48>)
 80012c6:	4a11      	ldr	r2, [pc, #68]	@ (800130c <MX_TIM16_Init+0x4c>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31999;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_TIM16_Init+0x48>)
 80012cc:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80012d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <MX_TIM16_Init+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <MX_TIM16_Init+0x48>)
 80012da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_TIM16_Init+0x48>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <MX_TIM16_Init+0x48>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_TIM16_Init+0x48>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_TIM16_Init+0x48>)
 80012f4:	f005 ff37 	bl	8007166 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012fe:	f000 fa0b 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000248 	.word	0x20000248
 800130c:	40014400 	.word	0x40014400

08001310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001316:	4a23      	ldr	r2, [pc, #140]	@ (80013a4 <MX_USART1_UART_Init+0x94>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001358:	4811      	ldr	r0, [pc, #68]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800135a:	f006 fb4b 	bl	80079f4 <HAL_UART_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001364:	f000 f9d8 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800136c:	f007 f8a0 	bl	80084b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001376:	f000 f9cf 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800137e:	f007 f8d5 	bl	800852c <HAL_UARTEx_SetRxFifoThreshold>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001388:	f000 f9c6 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800138e:	f007 f856 	bl	800843e <HAL_UARTEx_DisableFifoMode>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001398:	f000 f9be 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000294 	.word	0x20000294
 80013a4:	40013800 	.word	0x40013800

080013a8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80013ac:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013ae:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <MX_USB_PCD_Init+0x4c>)
 80013b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013b4:	2208      	movs	r2, #8
 80013b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013ba:	2202      	movs	r2, #2
 80013bc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013d8:	2200      	movs	r2, #0
 80013da:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_USB_PCD_Init+0x48>)
 80013de:	f003 ffaa 	bl	8005336 <HAL_PCD_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80013e8:	f000 f996 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000328 	.word	0x20000328
 80013f4:	40006800 	.word	0x40006800

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140c:	2004      	movs	r0, #4
 800140e:	f7ff fd58 	bl	8000ec2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2002      	movs	r0, #2
 8001414:	f7ff fd55 	bl	8000ec2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff fd52 	bl	8000ec2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	2008      	movs	r0, #8
 8001420:	f7ff fd4f 	bl	8000ec2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GNSS_GPIO_Port, RST_GNSS_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800142a:	4838      	ldr	r0, [pc, #224]	@ (800150c <MX_GPIO_Init+0x114>)
 800142c:	f003 f8c8 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WKP_GNSS_Pin|VL53L4CX_XSHUT_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143a:	f003 f8c1 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2123      	movs	r1, #35	@ 0x23
 8001442:	4833      	ldr	r0, [pc, #204]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001444:	f003 f8bc 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_GNSS_Pin */
  GPIO_InitStruct.Pin = RST_GNSS_Pin;
 8001448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RST_GNSS_GPIO_Port, &GPIO_InitStruct);
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	482b      	ldr	r0, [pc, #172]	@ (800150c <MX_GPIO_Init+0x114>)
 8001460:	f002 fe60 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : WKP_GNSS_Pin VL53L4CX_XSHUT_Pin */
  GPIO_InitStruct.Pin = WKP_GNSS_Pin|VL53L4CX_XSHUT_Pin;
 8001464:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001468:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147e:	f002 fe51 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001482:	2310      	movs	r3, #16
 8001484:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001486:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800148a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	481d      	ldr	r0, [pc, #116]	@ (800150c <MX_GPIO_Init+0x114>)
 8001496:	f002 fe45 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800149a:	2323      	movs	r3, #35	@ 0x23
 800149c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4818      	ldr	r0, [pc, #96]	@ (8001510 <MX_GPIO_Init+0x118>)
 80014b0:	f002 fe38 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80014b4:	2301      	movs	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014be:	2301      	movs	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4813      	ldr	r0, [pc, #76]	@ (8001514 <MX_GPIO_Init+0x11c>)
 80014c8:	f002 fe2c 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80014cc:	2302      	movs	r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	480d      	ldr	r0, [pc, #52]	@ (8001514 <MX_GPIO_Init+0x11c>)
 80014de:	f002 fe21 	bl	8004124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2105      	movs	r1, #5
 80014e6:	2006      	movs	r0, #6
 80014e8:	f002 fdf4 	bl	80040d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014ec:	2006      	movs	r0, #6
 80014ee:	f002 fe0b 	bl	8004108 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2105      	movs	r1, #5
 80014f6:	200a      	movs	r0, #10
 80014f8:	f002 fdec 	bl	80040d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014fc:	200a      	movs	r0, #10
 80014fe:	f002 fe03 	bl	8004108 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	48000800 	.word	0x48000800
 8001510:	48000400 	.word	0x48000400
 8001514:	48000c00 	.word	0x48000c00

08001518 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001520:	2001      	movs	r0, #1
 8001522:	f007 face 	bl	8008ac2 <osDelay>
 8001526:	e7fb      	b.n	8001520 <StartDefaultTask+0x8>

08001528 <StartAck_ToF_Data>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAck_ToF_Data */
void StartAck_ToF_Data(void *argument)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAck_ToF_Data */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001530:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001534:	f007 fac5 	bl	8008ac2 <osDelay>
 8001538:	e7fa      	b.n	8001530 <StartAck_ToF_Data+0x8>

0800153a <StartSendData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendData */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001542:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001546:	f007 fabc 	bl	8008ac2 <osDelay>
 800154a:	e7fa      	b.n	8001542 <StartSendData+0x8>

0800154c <StartAck_LSM6DSO_Data>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAck_LSM6DSO_Data */
void StartAck_LSM6DSO_Data(void *argument)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	@ 0x30
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAck_LSM6DSO_Data */
	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	2100      	movs	r1, #0
 800155a:	2001      	movs	r0, #1
 800155c:	f007 fa30 	bl	80089c0 <osThreadFlagsWait>
		IMU_Data mov_data;
		MyGettingLSM6DSO(&(mov_data.Acc), &(mov_data.Gyr));
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	f103 020c 	add.w	r2, r3, #12
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fc08 	bl	8003d84 <MyGettingLSM6DSO>
		MyGettingLIS2MDL(&(mov_data.Mag));
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	3318      	adds	r3, #24
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fc68 	bl	8003e50 <MyGettingLIS2MDL>
				"Xgyro: %ld | Ygyro: %ld | Zgyro: %ld | Xacc: %ld | Yacc: %ld | Zacc: %ld\n",
				mov_data.axes_gyro.x, mov_data.axes_gyro.y,
				mov_data.axes_gyro.z, mov_data.axes_acce.x,
				mov_data.axes_acce.y, mov_data.axes_acce.z);
		printf("Get at : %ld\n", osKernelGetTickCount());*/
		osMessageQueuePut(LSM6DSOData_QueueHandle, &mov_data, 1, osWaitForever);
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <StartAck_LSM6DSO_Data+0x50>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f107 010c 	add.w	r1, r7, #12
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	2201      	movs	r2, #1
 800158e:	f007 fc35 	bl	8008dfc <osMessageQueuePut>
		osDelay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f007 fa95 	bl	8008ac2 <osDelay>
	for (;;) {
 8001598:	bf00      	nop
 800159a:	e7db      	b.n	8001554 <StartAck_LSM6DSO_Data+0x8>
 800159c:	20000628 	.word	0x20000628

080015a0 <StartSendDataLSM6>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendDataLSM6 */
void StartSendDataLSM6(void *argument)
{
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	b095      	sub	sp, #84	@ 0x54
 80015a4:	af06      	add	r7, sp, #24
 80015a6:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartSendDataLSM6 */
	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	2100      	movs	r1, #0
 80015ae:	2001      	movs	r0, #1
 80015b0:	f007 fa06 	bl	80089c0 <osThreadFlagsWait>
		osMutexAcquire(MutexSendHandle, osWaitForever);
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <StartSendDataLSM6+0x94>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	4618      	mov	r0, r3
 80015be:	f007 fb21 	bl	8008c04 <osMutexAcquire>
		IMU_Data send_data;
		while(osMessageQueueGetCount(LSM6DSOData_QueueHandle)>0) {
 80015c2:	e01f      	b.n	8001604 <StartSendDataLSM6+0x64>
			osMessageQueueGet(LSM6DSOData_QueueHandle, &send_data, (uint8_t*) 1,
 80015c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <StartSendDataLSM6+0x98>)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	f107 0114 	add.w	r1, r7, #20
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	2201      	movs	r2, #1
 80015d2:	f007 fc73 	bl	8008ebc <osMessageQueueGet>
					osWaitForever);
			log_printf(
 80015d6:	6a3e      	ldr	r6, [r7, #32]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015de:	6079      	str	r1, [r7, #4]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	69f9      	ldr	r1, [r7, #28]
 80015e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80015e8:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80015ea:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 80015ec:	9505      	str	r5, [sp, #20]
 80015ee:	9404      	str	r4, [sp, #16]
 80015f0:	9003      	str	r0, [sp, #12]
 80015f2:	9102      	str	r1, [sp, #8]
 80015f4:	9201      	str	r2, [sp, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	4631      	mov	r1, r6
 80015fe:	480f      	ldr	r0, [pc, #60]	@ (800163c <StartSendDataLSM6+0x9c>)
 8001600:	f002 fb66 	bl	8003cd0 <log_printf>
		while(osMessageQueueGetCount(LSM6DSOData_QueueHandle)>0) {
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <StartSendDataLSM6+0x98>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f007 fcb5 	bl	8008f78 <osMessageQueueGetCount>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1d7      	bne.n	80015c4 <StartSendDataLSM6+0x24>
					send_data.Gyr.z, send_data.Acc.x,
					send_data.Acc.y, send_data.Acc.z,
					send_data.Mag.x, send_data.Mag.y,
					send_data.Mag.z);
		}
		printf("Send at : %ld\n", osKernelGetTickCount());
 8001614:	f007 f8de 	bl	80087d4 <osKernelGetTickCount>
 8001618:	4603      	mov	r3, r0
 800161a:	4619      	mov	r1, r3
 800161c:	4808      	ldr	r0, [pc, #32]	@ (8001640 <StartSendDataLSM6+0xa0>)
 800161e:	f00b fca5 	bl	800cf6c <iprintf>
		osMutexRelease(MutexSendHandle);
 8001622:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <StartSendDataLSM6+0x94>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f007 fb37 	bl	8008c9a <osMutexRelease>
		osDelay(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f007 fa48 	bl	8008ac2 <osDelay>
	for (;;) {
 8001632:	e7b9      	b.n	80015a8 <StartSendDataLSM6+0x8>
 8001634:	200008bc 	.word	0x200008bc
 8001638:	20000628 	.word	0x20000628
 800163c:	0800f468 	.word	0x0800f468
 8001640:	0800f4e0 	.word	0x0800f4e0

08001644 <gnssBackground>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_gnssBackground */
void gnssBackground(void *argument)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gnssBackground */
	/* Infinite loop */
	for (;;) {
//		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
//		GNSS1A1_GNSS_BackgroundProcess(GNSS1A1_TESEO_LIV3F);
		osDelay(100);
 800164c:	2064      	movs	r0, #100	@ 0x64
 800164e:	f007 fa38 	bl	8008ac2 <osDelay>
 8001652:	e7fb      	b.n	800164c <gnssBackground+0x8>

08001654 <DataParserTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DataParserTask */
void DataParserTask(void *argument)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
//			}
//		}
//
//		GNSS1A1_GNSS_ReleaseMessage(GNSS1A1_TESEO_LIV3F, gnssMsg);

		osDelay(1000);
 800165c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001660:	f007 fa2f 	bl	8008ac2 <osDelay>
 8001664:	e7fa      	b.n	800165c <DataParserTask+0x8>

08001666 <startPrintGPRMC>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startPrintGPRMC */
void startPrintGPRMC(void *argument)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
		 parsed_GNSSData.gprmc_data.mag_var_dir);
		 }

		 log_printf("\n\n\r");
		 */
		osDelay(1000);
 800166e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001672:	f007 fa26 	bl	8008ac2 <osDelay>
 8001676:	e7fa      	b.n	800166e <startPrintGPRMC+0x8>

08001678 <startPrintGPGGA>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startPrintGPGGA */
void startPrintGPGGA(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
		 log_printf("Diff update:\t\t[ %d ]\n\r",
		 parsed_GNSSData.gpgga_data.update);

		 osMutexRelease(GNSSMutexHandle);
		 */
		osDelay(1000);
 8001680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001684:	f007 fa1d 	bl	8008ac2 <osDelay>
 8001688:	e7fa      	b.n	8001680 <startPrintGPGGA+0x8>
	...

0800168c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM16) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10c      	bne.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		osThreadFlagsSet(Ack_LSM6DSO_DatHandle, 1);
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2101      	movs	r1, #1
 80016a4:	4618      	mov	r0, r3
 80016a6:	f007 f93d 	bl	8008924 <osThreadFlagsSet>
		//osThreadFlagsSet(Ack_ToF_DataHandle,1);
		osThreadFlagsSet(BackTaskGNSSHandle, 1);
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f007 f937 	bl	8008924 <osThreadFlagsSet>
 80016b6:	e016      	b.n	80016e6 <HAL_TIM_PeriodElapsedCallback+0x5a>

	} else if (htim->Instance == TIM2) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c0:	d111      	bne.n	80016e6 <HAL_TIM_PeriodElapsedCallback+0x5a>
		osThreadFlagsSet(SendDataLSM6Handle, 1);
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2101      	movs	r1, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f007 f92b 	bl	8008924 <osThreadFlagsSet>
		osThreadFlagsSet(SendDataHandle, 1);
 80016ce:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f007 f925 	bl	8008924 <osThreadFlagsSet>
		osThreadFlagsSet(ParserTaskGNSSHandle, 1);
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2101      	movs	r1, #1
 80016e0:	4618      	mov	r0, r3
 80016e2:	f007 f91f 	bl	8008924 <osThreadFlagsSet>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0x68>
    HAL_IncTick();
 80016f0:	f002 fbe8 	bl	8003ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40014400 	.word	0x40014400
 8001700:	20000610 	.word	0x20000610
 8001704:	20000618 	.word	0x20000618
 8001708:	20000614 	.word	0x20000614
 800170c:	2000060c 	.word	0x2000060c
 8001710:	2000061c 	.word	0x2000061c
 8001714:	40014800 	.word	0x40014800

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <Error_Handler+0x8>

08001724 <LL_AHB2_GRP1_EnableClock>:
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001730:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001748:	68fb      	ldr	r3, [r7, #12]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001756:	b480      	push	{r7}
 8001758:	b085      	sub	sp, #20
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001762:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001764:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4313      	orrs	r3, r2
 800176c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001772:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4013      	ands	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001794:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4313      	orrs	r3, r2
 800179e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	210f      	movs	r1, #15
 80017c2:	f06f 0001 	mvn.w	r0, #1
 80017c6:	f002 fc85 	bl	80040d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e0:	d10b      	bne.n	80017fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017e2:	2001      	movs	r0, #1
 80017e4:	f7ff ffb7 	bl	8001756 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2105      	movs	r1, #5
 80017ec:	201c      	movs	r0, #28
 80017ee:	f002 fc71 	bl	80040d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017f2:	201c      	movs	r0, #28
 80017f4:	f002 fc88 	bl	8004108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017f8:	e010      	b.n	800181c <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM16)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <HAL_TIM_Base_MspInit+0x54>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d10b      	bne.n	800181c <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001804:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001808:	f7ff ffbe 	bl	8001788 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2105      	movs	r1, #5
 8001810:	2019      	movs	r0, #25
 8001812:	f002 fc5f 	bl	80040d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001816:	2019      	movs	r0, #25
 8001818:	f002 fc76 	bl	8004108 <HAL_NVIC_EnableIRQ>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40014400 	.word	0x40014400

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b09c      	sub	sp, #112	@ 0x70
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2250      	movs	r2, #80	@ 0x50
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00b fd0f 	bl	800d26c <memset>
  if(huart->Instance==USART1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <HAL_UART_MspInit+0x84>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d124      	bne.n	80018a2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001858:	2301      	movs	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4618      	mov	r0, r3
 8001866:	f005 f9f1 	bl	8006c4c <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001870:	f7ff ff52 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001874:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001878:	f7ff ff86 	bl	8001788 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	2002      	movs	r0, #2
 800187e:	f7ff ff51 	bl	8001724 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001882:	23c0      	movs	r3, #192	@ 0xc0
 8001884:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001892:	2307      	movs	r3, #7
 8001894:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800189a:	4619      	mov	r1, r3
 800189c:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <HAL_UART_MspInit+0x88>)
 800189e:	f002 fc41 	bl	8004124 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018a2:	bf00      	nop
 80018a4:	3770      	adds	r7, #112	@ 0x70
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40013800 	.word	0x40013800
 80018b0:	48000400 	.word	0x48000400

080018b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b09c      	sub	sp, #112	@ 0x70
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2250      	movs	r2, #80	@ 0x50
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00b fcc9 	bl	800d26c <memset>
  if(hpcd->Instance==USB)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1f      	ldr	r2, [pc, #124]	@ (800195c <HAL_PCD_MspInit+0xa8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d136      	bne.n	8001952 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80018ea:	2318      	movs	r3, #24
 80018ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80018ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80018f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80018fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001900:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001904:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001906:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800190a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4618      	mov	r0, r3
 8001912:	f005 f99b 	bl	8006c4c <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800191c:	f7ff fefc 	bl	8001718 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	2001      	movs	r0, #1
 8001922:	f7ff feff 	bl	8001724 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001926:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800192a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001938:	230a      	movs	r3, #10
 800193a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f002 fbed 	bl	8004124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800194a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800194e:	f7ff ff02 	bl	8001756 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8001952:	bf00      	nop
 8001954:	3770      	adds	r7, #112	@ 0x70
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40006800 	.word	0x40006800

08001960 <LL_APB2_GRP1_EnableClock>:
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800196e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4313      	orrs	r3, r2
 8001976:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001984:	68fb      	ldr	r3, [r7, #12]
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08e      	sub	sp, #56	@ 0x38
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	201a      	movs	r0, #26
 80019b0:	f002 fb90 	bl	80040d4 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80019b4:	201a      	movs	r0, #26
 80019b6:	f002 fba7 	bl	8004108 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80019ba:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80019be:	f7ff ffcf 	bl	8001960 <LL_APB2_GRP1_EnableClock>

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019c2:	f107 020c 	add.w	r2, r7, #12
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 feab 	bl	8006728 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019d2:	f004 fe93 	bl	80066fc <HAL_RCC_GetPCLK2Freq>
 80019d6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019da:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <HAL_InitTick+0xcc>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	3b01      	subs	r3, #1
 80019e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_InitTick+0xd0>)
 80019e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a68 <HAL_InitTick+0xd4>)
 80019ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <HAL_InitTick+0xd0>)
 80019ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019f2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80019f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <HAL_InitTick+0xd0>)
 80019f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <HAL_InitTick+0xd0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_InitTick+0xd0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001a06:	4817      	ldr	r0, [pc, #92]	@ (8001a64 <HAL_InitTick+0xd0>)
 8001a08:	f005 fbad 	bl	8007166 <HAL_TIM_Base_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001a12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11b      	bne.n	8001a52 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001a1a:	4812      	ldr	r0, [pc, #72]	@ (8001a64 <HAL_InitTick+0xd0>)
 8001a1c:	f005 fbfa 	bl	8007214 <HAL_TIM_Base_Start_IT>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001a26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d111      	bne.n	8001a52 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001a2e:	201a      	movs	r0, #26
 8001a30:	f002 fb6a 	bl	8004108 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b0f      	cmp	r3, #15
 8001a38:	d808      	bhi.n	8001a4c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	201a      	movs	r0, #26
 8001a40:	f002 fb48 	bl	80040d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a44:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_InitTick+0xd8>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e002      	b.n	8001a52 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8001a52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3738      	adds	r7, #56	@ 0x38
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	200008c4 	.word	0x200008c4
 8001a68:	40014800 	.word	0x40014800
 8001a6c:	2000000c 	.word	0x2000000c

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <NMI_Handler+0x4>

08001a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <MemManage_Handler+0x4>

08001a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f002 fda0 	bl	80045f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ab8:	2010      	movs	r0, #16
 8001aba:	f002 fd99 	bl	80045f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001aca:	f005 fbf1 	bl	80072b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000248 	.word	0x20000248

08001ad8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001ade:	f005 fbe7 	bl	80072b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200008c4 	.word	0x200008c4

08001aec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <TIM2_IRQHandler+0x10>)
 8001af2:	f005 fbdd 	bl	80072b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200001fc 	.word	0x200001fc

08001b00 <LL_AHB2_GRP1_EnableClock>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_APB1_GRP1_EnableClock>:
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_APB1_GRP1_DisableClock>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <BSP_I2C1_Init+0x70>)
 8001b98:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <BSP_I2C1_Init+0x74>)
 8001b9a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <BSP_I2C1_Init+0x78>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	4918      	ldr	r1, [pc, #96]	@ (8001c04 <BSP_I2C1_Init+0x78>)
 8001ba4:	600a      	str	r2, [r1, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d122      	bne.n	8001bf0 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001baa:	4814      	ldr	r0, [pc, #80]	@ (8001bfc <BSP_I2C1_Init+0x70>)
 8001bac:	f003 f850 	bl	8004c50 <HAL_I2C_GetState>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d11c      	bne.n	8001bf0 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001bb6:	4811      	ldr	r0, [pc, #68]	@ (8001bfc <BSP_I2C1_Init+0x70>)
 8001bb8:	f000 f8fe 	bl	8001db8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001bc2:	480e      	ldr	r0, [pc, #56]	@ (8001bfc <BSP_I2C1_Init+0x70>)
 8001bc4:	f000 f8b4 	bl	8001d30 <MX_I2C1_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001bce:	f06f 0307 	mvn.w	r3, #7
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	e00c      	b.n	8001bf0 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <BSP_I2C1_Init+0x70>)
 8001bda:	f003 fb15 	bl	8005208 <HAL_I2CEx_ConfigAnalogFilter>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001be4:	f06f 0307 	mvn.w	r3, #7
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e001      	b.n	8001bf0 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001bf0:	687b      	ldr	r3, [r7, #4]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000910 	.word	0x20000910
 8001c00:	40005400 	.word	0x40005400
 8001c04:	20000964 	.word	0x20000964

08001c08 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <BSP_I2C1_DeInit+0x48>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d014      	beq.n	8001c44 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <BSP_I2C1_DeInit+0x48>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	4a0b      	ldr	r2, [pc, #44]	@ (8001c50 <BSP_I2C1_DeInit+0x48>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <BSP_I2C1_DeInit+0x48>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10b      	bne.n	8001c44 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001c2c:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <BSP_I2C1_DeInit+0x4c>)
 8001c2e:	f000 f907 	bl	8001e40 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001c32:	4808      	ldr	r0, [pc, #32]	@ (8001c54 <BSP_I2C1_DeInit+0x4c>)
 8001c34:	f002 fd9a 	bl	800476c <HAL_I2C_DeInit>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001c3e:	f06f 0307 	mvn.w	r3, #7
 8001c42:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000964 	.word	0x20000964
 8001c54:	20000910 	.word	0x20000910

08001c58 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af04      	add	r7, sp, #16
 8001c5e:	60ba      	str	r2, [r7, #8]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4603      	mov	r3, r0
 8001c64:	81fb      	strh	r3, [r7, #14]
 8001c66:	460b      	mov	r3, r1
 8001c68:	81bb      	strh	r3, [r7, #12]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001c72:	89ba      	ldrh	r2, [r7, #12]
 8001c74:	89f9      	ldrh	r1, [r7, #14]
 8001c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2301      	movs	r3, #1
 8001c86:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <BSP_I2C1_WriteReg+0x60>)
 8001c88:	f002 fdb4 	bl	80047f4 <HAL_I2C_Mem_Write>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001c92:	4809      	ldr	r0, [pc, #36]	@ (8001cb8 <BSP_I2C1_WriteReg+0x60>)
 8001c94:	f002 ffea 	bl	8004c6c <HAL_I2C_GetError>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d103      	bne.n	8001ca6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001c9e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e002      	b.n	8001cac <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001ca6:	f06f 0303 	mvn.w	r3, #3
 8001caa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001cac:	697b      	ldr	r3, [r7, #20]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000910 	.word	0x20000910

08001cbc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af04      	add	r7, sp, #16
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	81fb      	strh	r3, [r7, #14]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	81bb      	strh	r3, [r7, #12]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001cd6:	89ba      	ldrh	r2, [r7, #12]
 8001cd8:	89f9      	ldrh	r1, [r7, #14]
 8001cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <BSP_I2C1_ReadReg+0x60>)
 8001cec:	f002 fe96 	bl	8004a1c <HAL_I2C_Mem_Read>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001cf6:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <BSP_I2C1_ReadReg+0x60>)
 8001cf8:	f002 ffb8 	bl	8004c6c <HAL_I2C_GetError>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d103      	bne.n	8001d0a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001d02:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e002      	b.n	8001d10 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d0a:	f06f 0303 	mvn.w	r3, #3
 8001d0e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001d10:	697b      	ldr	r3, [r7, #20]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000910 	.word	0x20000910

08001d20 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001d24:	f002 f8e2 	bl	8003eec <HAL_GetTick>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001db0 <MX_I2C1_Init+0x80>)
 8001d40:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B07CB4;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <MX_I2C1_Init+0x84>)
 8001d46:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f002 fc5f 	bl	8004636 <HAL_I2C_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d82:	2100      	movs	r1, #0
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f003 fa3f 	bl	8005208 <HAL_I2CEx_ConfigAnalogFilter>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001d94:	2100      	movs	r1, #0
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f003 fa81 	bl	800529e <HAL_I2CEx_ConfigDigitalFilter>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40005400 	.word	0x40005400
 8001db4:	00b07cb4 	.word	0x00b07cb4

08001db8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b09c      	sub	sp, #112	@ 0x70
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2250      	movs	r2, #80	@ 0x50
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00b fa4f 	bl	800d26c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dd2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 ff35 	bl	8006c4c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2002      	movs	r0, #2
 8001de4:	f7ff fe8c 	bl	8001b00 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dee:	2312      	movs	r3, #18
 8001df0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001dfe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e02:	4619      	mov	r1, r3
 8001e04:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <I2C1_MspInit+0x84>)
 8001e06:	f002 f98d 	bl	8004124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001e0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e10:	2312      	movs	r3, #18
 8001e12:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001e20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <I2C1_MspInit+0x84>)
 8001e28:	f002 f97c 	bl	8004124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e30:	f7ff fe7f 	bl	8001b32 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001e34:	bf00      	nop
 8001e36:	3770      	adds	r7, #112	@ 0x70
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	48000400 	.word	0x48000400

08001e40 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e48:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e4c:	f7ff fe8a 	bl	8001b64 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <I2C1_MspDeInit+0x2c>)
 8001e56:	f002 fad5 	bl	8004404 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001e5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e5e:	4803      	ldr	r0, [pc, #12]	@ (8001e6c <I2C1_MspDeInit+0x2c>)
 8001e60:	f002 fad0 	bl	8004404 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	48000400 	.word	0x48000400

08001e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e8a:	f00b fa97 	bl	800d3bc <__errno>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2216      	movs	r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
  return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_exit>:

void _exit (int status)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eb2:	bf00      	nop
 8001eb4:	e7fd      	b.n	8001eb2 <_exit+0x12>

08001eb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e00a      	b.n	8001ede <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec8:	f3af 8000 	nop.w
 8001ecc:	4601      	mov	r1, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	60ba      	str	r2, [r7, #8]
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbf0      	blt.n	8001ec8 <_read+0x12>
  }

  return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f18:	605a      	str	r2, [r3, #4]
  return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_isatty>:

int _isatty(int file)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f00b fa18 	bl	800d3bc <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20030000 	.word	0x20030000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000968 	.word	0x20000968
 8001fc0:	20004b18 	.word	0x20004b18

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001fc8:	4b24      	ldr	r3, [pc, #144]	@ (800205c <SystemInit+0x98>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	4a23      	ldr	r2, [pc, #140]	@ (800205c <SystemInit+0x98>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fec:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001ff0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ffc:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <SystemInit+0x9c>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800200a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800200e:	f023 0305 	bic.w	r3, r3, #5
 8002012:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800201e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800202e:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <SystemInit+0xa0>)
 8002030:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <SystemInit+0xa0>)
 8002038:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002044:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002048:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00
 8002060:	faf6fefb 	.word	0xfaf6fefb
 8002064:	22041000 	.word	0x22041000

08002068 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002068:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206c:	3304      	adds	r3, #4

0800206e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002070:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002072:	d3f9      	bcc.n	8002068 <CopyDataInit>
  bx lr
 8002074:	4770      	bx	lr

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002076:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002078:	3004      	adds	r0, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800207a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>
  bx lr
 800207e:	4770      	bx	lr

08002080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002080:	480c      	ldr	r0, [pc, #48]	@ (80020b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002082:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002084:	f7ff ff9e 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002088:	480b      	ldr	r0, [pc, #44]	@ (80020b8 <LoopForever+0x6>)
 800208a:	490c      	ldr	r1, [pc, #48]	@ (80020bc <LoopForever+0xa>)
 800208c:	4a0c      	ldr	r2, [pc, #48]	@ (80020c0 <LoopForever+0xe>)
 800208e:	2300      	movs	r3, #0
 8002090:	f7ff ffed 	bl	800206e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002094:	480b      	ldr	r0, [pc, #44]	@ (80020c4 <LoopForever+0x12>)
 8002096:	490c      	ldr	r1, [pc, #48]	@ (80020c8 <LoopForever+0x16>)
 8002098:	4a0c      	ldr	r2, [pc, #48]	@ (80020cc <LoopForever+0x1a>)
 800209a:	2300      	movs	r3, #0
 800209c:	f7ff ffe7 	bl	800206e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80020a0:	480b      	ldr	r0, [pc, #44]	@ (80020d0 <LoopForever+0x1e>)
 80020a2:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <LoopForever+0x22>)
 80020a4:	2300      	movs	r3, #0
 80020a6:	f7ff ffe8 	bl	800207a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020aa:	f00b f98d 	bl	800d3c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020ae:	f7fe ff3d 	bl	8000f2c <main>

080020b2 <LoopForever>:

LoopForever:
  b LoopForever
 80020b2:	e7fe      	b.n	80020b2 <LoopForever>
  ldr   r0, =_estack
 80020b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80020b8:	20000008 	.word	0x20000008
 80020bc:	200001e0 	.word	0x200001e0
 80020c0:	0800fbb8 	.word	0x0800fbb8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80020c4:	20030000 	.word	0x20030000
 80020c8:	20030000 	.word	0x20030000
 80020cc:	0800fd90 	.word	0x0800fd90
  INIT_BSS _sbss, _ebss
 80020d0:	200001e0 	.word	0x200001e0
 80020d4:	20004b14 	.word	0x20004b14

080020d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC1_IRQHandler>
	...

080020dc <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e067      	b.n	80021c8 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	7b1a      	ldrb	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a28      	ldr	r2, [pc, #160]	@ (80021d4 <LIS2MDL_RegisterBusIO+0xf8>)
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a27      	ldr	r2, [pc, #156]	@ (80021d8 <LIS2MDL_RegisterBusIO+0xfc>)
 800213a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e036      	b.n	80021c8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4798      	blx	r3
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e02c      	b.n	80021c8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d028      	beq.n	80021c8 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800217c:	2b00      	cmp	r3, #0
 800217e:	d123      	bne.n	80021c8 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10d      	bne.n	80021a4 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8002188:	2334      	movs	r3, #52	@ 0x34
 800218a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800218c:	7afb      	ldrb	r3, [r7, #11]
 800218e:	461a      	mov	r2, r3
 8002190:	2162      	movs	r1, #98	@ 0x62
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f984 	bl	80024a0 <LIS2MDL_Write_Reg>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d014      	beq.n	80021c8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e012      	b.n	80021ca <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d101      	bne.n	80021b0 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	e00c      	b.n	80021ca <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3320      	adds	r3, #32
 80021b4:	2101      	movs	r1, #1
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fd8c 	bl	8002cd4 <lis2mdl_i2c_interface_set>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	e000      	b.n	80021ca <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	080024f7 	.word	0x080024f7
 80021d8:	08002579 	.word	0x08002579

080021dc <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d144      	bne.n	8002276 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80021ec:	f107 0208 	add.w	r2, r7, #8
 80021f0:	2301      	movs	r3, #1
 80021f2:	2162      	movs	r1, #98	@ 0x62
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fa00 	bl	80025fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	e06c      	b.n	80022e0 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002206:	f107 020c 	add.w	r2, r7, #12
 800220a:	2301      	movs	r3, #1
 800220c:	2160      	movs	r1, #96	@ 0x60
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9f3 	bl	80025fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e05f      	b.n	80022e0 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8002220:	7a3b      	ldrb	r3, [r7, #8]
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8002228:	7a3b      	ldrb	r3, [r7, #8]
 800222a:	f36f 0341 	bfc	r3, #1, #1
 800222e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002230:	7b3b      	ldrb	r3, [r7, #12]
 8002232:	2202      	movs	r2, #2
 8002234:	f362 0301 	bfi	r3, r2, #0, #2
 8002238:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800223a:	7b3b      	ldrb	r3, [r7, #12]
 800223c:	f043 030c 	orr.w	r3, r3, #12
 8002240:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002242:	f107 0208 	add.w	r2, r7, #8
 8002246:	2301      	movs	r3, #1
 8002248:	2162      	movs	r1, #98	@ 0x62
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fb14 	bl	8002878 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	e041      	b.n	80022e0 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800225c:	f107 020c 	add.w	r2, r7, #12
 8002260:	2301      	movs	r3, #1
 8002262:	2160      	movs	r1, #96	@ 0x60
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fb07 	bl	8002878 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d032      	beq.n	80022d6 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	e034      	b.n	80022e0 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3320      	adds	r3, #32
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fc95 	bl	8002bac <lis2mdl_block_data_update_set>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e028      	b.n	80022e0 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3320      	adds	r3, #32
 8002292:	2102      	movs	r1, #2
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fc3d 	bl	8002b14 <lis2mdl_operating_mode_set>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	e01c      	b.n	80022e0 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3320      	adds	r3, #32
 80022aa:	2103      	movs	r1, #3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fc57 	bl	8002b60 <lis2mdl_data_rate_set>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	e010      	b.n	80022e0 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3320      	adds	r3, #32
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fcdf 	bl	8002c88 <lis2mdl_self_test_set>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	e004      	b.n	80022e0 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e032      	b.n	8002364 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d11d      	bne.n	8002342 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002306:	f107 020c 	add.w	r2, r7, #12
 800230a:	2301      	movs	r3, #1
 800230c:	2160      	movs	r1, #96	@ 0x60
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f973 	bl	80025fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	e021      	b.n	8002364 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002320:	7b3b      	ldrb	r3, [r7, #12]
 8002322:	f36f 0301 	bfc	r3, #0, #2
 8002326:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002328:	f107 020c 	add.w	r2, r7, #12
 800232c:	2301      	movs	r3, #1
 800232e:	2160      	movs	r1, #96	@ 0x60
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 faa1 	bl	8002878 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800233c:	f04f 33ff 	mov.w	r3, #4294967295
 8002340:	e010      	b.n	8002364 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3320      	adds	r3, #32
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fbe3 	bl	8002b14 <lis2mdl_operating_mode_set>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
 8002358:	e004      	b.n	8002364 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800237c:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d134      	bne.n	800240e <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80023a4:	f107 0218 	add.w	r2, r7, #24
 80023a8:	2306      	movs	r3, #6
 80023aa:	2168      	movs	r1, #104	@ 0x68
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f924 	bl	80025fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
 80023bc:	e06c      	b.n	8002498 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80023be:	7e7b      	ldrb	r3, [r7, #25]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80023c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	7e3a      	ldrb	r2, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80023d8:	7efb      	ldrb	r3, [r7, #27]
 80023da:	b21b      	sxth	r3, r3
 80023dc:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80023de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	7eba      	ldrb	r2, [r7, #26]
 80023ea:	4413      	add	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80023f2:	7f7b      	ldrb	r3, [r7, #29]
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80023f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	b29b      	uxth	r3, r3
 8002402:	7f3a      	ldrb	r2, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	b21b      	sxth	r3, r3
 800240a:	82bb      	strh	r3, [r7, #20]
 800240c:	e00d      	b.n	800242a <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3320      	adds	r3, #32
 8002412:	f107 0210 	add.w	r2, r7, #16
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fbed 	bl	8002bf8 <lis2mdl_magnetic_raw_get>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	e036      	b.n	8002498 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	4619      	mov	r1, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff9b 	bl	800236c <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002436:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002442:	edd7 7a03 	vldr	s15, [r7, #12]
 8002446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244e:	ee17 2a90 	vmov	r2, s15
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002456:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	edd7 7a03 	vldr	s15, [r7, #12]
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246e:	ee17 2a90 	vmov	r2, s15
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002476:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002482:	edd7 7a03 	vldr	s15, [r7, #12]
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248e:	ee17 2a90 	vmov	r2, s15
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
 80024ac:	4613      	mov	r3, r2
 80024ae:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d10b      	bne.n	80024d0 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80024b8:	1cba      	adds	r2, r7, #2
 80024ba:	78f9      	ldrb	r1, [r7, #3]
 80024bc:	2301      	movs	r3, #1
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f9da 	bl	8002878 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	e00e      	b.n	80024ee <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0020 	add.w	r0, r3, #32
 80024d6:	1cba      	adds	r2, r7, #2
 80024d8:	78f9      	ldrb	r1, [r7, #3]
 80024da:	2301      	movs	r3, #1
 80024dc:	f000 fb02 	bl	8002ae4 <lis2mdl_write_reg>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e000      	b.n	80024ee <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024f6:	b590      	push	{r4, r7, lr}
 80024f8:	b087      	sub	sp, #28
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	461a      	mov	r2, r3
 8002502:	460b      	mov	r3, r1
 8002504:	72fb      	strb	r3, [r7, #11]
 8002506:	4613      	mov	r3, r2
 8002508:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10e      	bne.n	8002534 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	695c      	ldr	r4, [r3, #20]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	7b1b      	ldrb	r3, [r3, #12]
 800251e:	4618      	mov	r0, r3
 8002520:	7afb      	ldrb	r3, [r7, #11]
 8002522:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002526:	b2db      	uxtb	r3, r3
 8002528:	4619      	mov	r1, r3
 800252a:	893b      	ldrh	r3, [r7, #8]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	47a0      	blx	r4
 8002530:	4603      	mov	r3, r0
 8002532:	e01d      	b.n	8002570 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d10b      	bne.n	8002554 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	695c      	ldr	r4, [r3, #20]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	7b1b      	ldrb	r3, [r3, #12]
 8002544:	4618      	mov	r0, r3
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	b299      	uxth	r1, r3
 800254a:	893b      	ldrh	r3, [r7, #8]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	47a0      	blx	r4
 8002550:	4603      	mov	r3, r0
 8002552:	e00d      	b.n	8002570 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	695c      	ldr	r4, [r3, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	7b1b      	ldrb	r3, [r3, #12]
 800255c:	4618      	mov	r0, r3
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	47a0      	blx	r4
 800256e:	4603      	mov	r3, r0
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd90      	pop	{r4, r7, pc}

08002578 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	461a      	mov	r2, r3
 8002584:	460b      	mov	r3, r1
 8002586:	72fb      	strb	r3, [r7, #11]
 8002588:	4613      	mov	r3, r2
 800258a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10e      	bne.n	80025b6 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	691c      	ldr	r4, [r3, #16]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	7b1b      	ldrb	r3, [r3, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	893b      	ldrh	r3, [r7, #8]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	47a0      	blx	r4
 80025b2:	4603      	mov	r3, r0
 80025b4:	e01d      	b.n	80025f2 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d10b      	bne.n	80025d6 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	691c      	ldr	r4, [r3, #16]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	7b1b      	ldrb	r3, [r3, #12]
 80025c6:	4618      	mov	r0, r3
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	b299      	uxth	r1, r3
 80025cc:	893b      	ldrh	r3, [r7, #8]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	47a0      	blx	r4
 80025d2:	4603      	mov	r3, r0
 80025d4:	e00d      	b.n	80025f2 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	691c      	ldr	r4, [r3, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	7b1b      	ldrb	r3, [r3, #12]
 80025de:	4618      	mov	r0, r3
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	893b      	ldrh	r3, [r7, #8]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	47a0      	blx	r4
 80025f0:	4603      	mov	r3, r0
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd90      	pop	{r4, r7, pc}

080025fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b08c      	sub	sp, #48	@ 0x30
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	461a      	mov	r2, r3
 8002606:	460b      	mov	r3, r1
 8002608:	72fb      	strb	r3, [r7, #11]
 800260a:	4613      	mov	r3, r2
 800260c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002614:	2340      	movs	r3, #64	@ 0x40
 8002616:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002620:	233d      	movs	r3, #61	@ 0x3d
 8002622:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002624:	2315      	movs	r3, #21
 8002626:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800262a:	2316      	movs	r3, #22
 800262c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8002630:	2317      	movs	r3, #23
 8002632:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8002636:	2314      	movs	r3, #20
 8002638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800263c:	2344      	movs	r3, #68	@ 0x44
 800263e:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002640:	2302      	movs	r3, #2
 8002642:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002646:	2339      	movs	r3, #57	@ 0x39
 8002648:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 800264c:	2301      	movs	r3, #1
 800264e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002652:	2329      	movs	r3, #41	@ 0x29
 8002654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002658:	231e      	movs	r3, #30
 800265a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8002664:	893b      	ldrh	r3, [r7, #8]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800266a:	2310      	movs	r3, #16
 800266c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002676:	2340      	movs	r3, #64	@ 0x40
 8002678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f103 0020 	add.w	r0, r3, #32
 8002682:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8002686:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800268a:	2301      	movs	r3, #1
 800268c:	f000 fa2a 	bl	8002ae4 <lis2mdl_write_reg>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	e0e9      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f103 0020 	add.w	r0, r3, #32
 80026a2:	f107 021f 	add.w	r2, r7, #31
 80026a6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80026aa:	2301      	movs	r3, #1
 80026ac:	f000 fa1a 	bl	8002ae4 <lis2mdl_write_reg>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e0d9      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f103 0020 	add.w	r0, r3, #32
 80026c2:	f107 020b 	add.w	r2, r7, #11
 80026c6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80026ca:	2301      	movs	r3, #1
 80026cc:	f000 fa0a 	bl	8002ae4 <lis2mdl_write_reg>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e0c9      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f103 0020 	add.w	r0, r3, #32
 80026e2:	f107 021d 	add.w	r2, r7, #29
 80026e6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 f9fa 	bl	8002ae4 <lis2mdl_write_reg>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	e0b9      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f103 0020 	add.w	r0, r3, #32
 8002702:	f107 021e 	add.w	r2, r7, #30
 8002706:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800270a:	2301      	movs	r3, #1
 800270c:	f000 f9ea 	bl	8002ae4 <lis2mdl_write_reg>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	e0a9      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f103 0020 	add.w	r0, r3, #32
 8002722:	f107 0220 	add.w	r2, r7, #32
 8002726:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800272a:	2301      	movs	r3, #1
 800272c:	f000 f9da 	bl	8002ae4 <lis2mdl_write_reg>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	e099      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f103 0020 	add.w	r0, r3, #32
 8002742:	f107 021c 	add.w	r2, r7, #28
 8002746:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800274a:	2301      	movs	r3, #1
 800274c:	f000 f9b2 	bl	8002ab4 <lis2mdl_read_reg>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	e089      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800275c:	7f3b      	ldrb	r3, [r7, #28]
 800275e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002762:	429a      	cmp	r2, r3
 8002764:	d102      	bne.n	800276c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002766:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800276a:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f103 0020 	add.w	r0, r3, #32
 8002772:	f107 021c 	add.w	r2, r7, #28
 8002776:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800277a:	2301      	movs	r3, #1
 800277c:	f000 f9b2 	bl	8002ae4 <lis2mdl_write_reg>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	e071      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f103 0020 	add.w	r0, r3, #32
 8002792:	f107 0214 	add.w	r2, r7, #20
 8002796:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800279a:	2306      	movs	r3, #6
 800279c:	f000 f98a 	bl	8002ab4 <lis2mdl_read_reg>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	e061      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f103 0020 	add.w	r0, r3, #32
 80027b2:	f107 021b 	add.w	r2, r7, #27
 80027b6:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80027ba:	2301      	movs	r3, #1
 80027bc:	f000 f97a 	bl	8002ab4 <lis2mdl_read_reg>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e051      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80027cc:	7efa      	ldrb	r2, [r7, #27]
 80027ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80027d2:	4013      	ands	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80027da:	429a      	cmp	r2, r3
 80027dc:	d1e6      	bne.n	80027ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f103 0020 	add.w	r0, r3, #32
 80027e4:	f107 021b 	add.w	r2, r7, #27
 80027e8:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80027ec:	2301      	movs	r3, #1
 80027ee:	f000 f961 	bl	8002ab4 <lis2mdl_read_reg>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	e038      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80027fe:	7efa      	ldrb	r2, [r7, #27]
 8002800:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002804:	4013      	ands	r3, r2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800280c:	429a      	cmp	r2, r3
 800280e:	d1e6      	bne.n	80027de <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f103 0020 	add.w	r0, r3, #32
 8002816:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800281a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800281e:	2301      	movs	r3, #1
 8002820:	f000 f960 	bl	8002ae4 <lis2mdl_write_reg>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	e01f      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f103 0020 	add.w	r0, r3, #32
 8002836:	893b      	ldrh	r3, [r7, #8]
 8002838:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	f000 f939 	bl	8002ab4 <lis2mdl_read_reg>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
 800284c:	e010      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f103 0020 	add.w	r0, r3, #32
 8002854:	f107 0220 	add.w	r2, r7, #32
 8002858:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800285c:	2301      	movs	r3, #1
 800285e:	f000 f941 	bl	8002ae4 <lis2mdl_write_reg>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
 800286c:	e000      	b.n	8002870 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3730      	adds	r7, #48	@ 0x30
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	@ 0x30
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	460b      	mov	r3, r1
 8002886:	72fb      	strb	r3, [r7, #11]
 8002888:	4613      	mov	r3, r2
 800288a:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002892:	2340      	movs	r3, #64	@ 0x40
 8002894:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 800289e:	233c      	movs	r3, #60	@ 0x3c
 80028a0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80028a2:	2315      	movs	r3, #21
 80028a4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80028a8:	2316      	movs	r3, #22
 80028aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80028ae:	2317      	movs	r3, #23
 80028b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80028b8:	2314      	movs	r3, #20
 80028ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80028be:	2344      	movs	r3, #68	@ 0x44
 80028c0:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80028c2:	2339      	movs	r3, #57	@ 0x39
 80028c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80028ce:	2329      	movs	r3, #41	@ 0x29
 80028d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80028d4:	231e      	movs	r3, #30
 80028d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80028e0:	2310      	movs	r3, #16
 80028e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80028ec:	2340      	movs	r3, #64	@ 0x40
 80028ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80028f2:	230e      	movs	r3, #14
 80028f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f103 0020 	add.w	r0, r3, #32
 80028fe:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8002902:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002906:	2301      	movs	r3, #1
 8002908:	f000 f8ec 	bl	8002ae4 <lis2mdl_write_reg>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e0c9      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f103 0020 	add.w	r0, r3, #32
 800291e:	f107 021f 	add.w	r2, r7, #31
 8002922:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8002926:	2301      	movs	r3, #1
 8002928:	f000 f8dc 	bl	8002ae4 <lis2mdl_write_reg>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	e0b9      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f103 0020 	add.w	r0, r3, #32
 800293e:	f107 020b 	add.w	r2, r7, #11
 8002942:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002946:	2301      	movs	r3, #1
 8002948:	f000 f8cc 	bl	8002ae4 <lis2mdl_write_reg>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
 8002956:	e0a9      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f103 0020 	add.w	r0, r3, #32
 800295e:	f107 021e 	add.w	r2, r7, #30
 8002962:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8002966:	2301      	movs	r3, #1
 8002968:	f000 f8bc 	bl	8002ae4 <lis2mdl_write_reg>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	e099      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f103 0020 	add.w	r0, r3, #32
 800297e:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8002982:	2301      	movs	r3, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f000 f8ad 	bl	8002ae4 <lis2mdl_write_reg>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	e08a      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f103 0020 	add.w	r0, r3, #32
 800299c:	f107 021d 	add.w	r2, r7, #29
 80029a0:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80029a4:	2301      	movs	r3, #1
 80029a6:	f000 f89d 	bl	8002ae4 <lis2mdl_write_reg>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	e07a      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f103 0020 	add.w	r0, r3, #32
 80029bc:	f107 0220 	add.w	r2, r7, #32
 80029c0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80029c4:	2301      	movs	r3, #1
 80029c6:	f000 f88d 	bl	8002ae4 <lis2mdl_write_reg>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	e06a      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f103 0020 	add.w	r0, r3, #32
 80029dc:	f107 021c 	add.w	r2, r7, #28
 80029e0:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80029e4:	2301      	movs	r3, #1
 80029e6:	f000 f865 	bl	8002ab4 <lis2mdl_read_reg>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	e05a      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80029f6:	7f3b      	ldrb	r3, [r7, #28]
 80029f8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d102      	bne.n	8002a06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002a00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a04:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f103 0020 	add.w	r0, r3, #32
 8002a0c:	f107 021c 	add.w	r2, r7, #28
 8002a10:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002a14:	2301      	movs	r3, #1
 8002a16:	f000 f865 	bl	8002ae4 <lis2mdl_write_reg>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295
 8002a24:	e042      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f103 0020 	add.w	r0, r3, #32
 8002a2c:	f107 0214 	add.w	r2, r7, #20
 8002a30:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8002a34:	2306      	movs	r3, #6
 8002a36:	f000 f83d 	bl	8002ab4 <lis2mdl_read_reg>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	e032      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f103 0020 	add.w	r0, r3, #32
 8002a4c:	f107 021b 	add.w	r2, r7, #27
 8002a50:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002a54:	2301      	movs	r3, #1
 8002a56:	f000 f82d 	bl	8002ab4 <lis2mdl_read_reg>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295
 8002a64:	e022      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8002a66:	7efa      	ldrb	r2, [r7, #27]
 8002a68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1e6      	bne.n	8002a46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f103 0020 	add.w	r0, r3, #32
 8002a7e:	f107 021b 	add.w	r2, r7, #27
 8002a82:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8002a86:	2301      	movs	r3, #1
 8002a88:	f000 f814 	bl	8002ab4 <lis2mdl_read_reg>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e009      	b.n	8002aac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8002a98:	7efa      	ldrb	r2, [r7, #27]
 8002a9a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d1e6      	bne.n	8002a78 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3730      	adds	r7, #48	@ 0x30
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	72fb      	strb	r3, [r7, #11]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685c      	ldr	r4, [r3, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68d8      	ldr	r0, [r3, #12]
 8002ad0:	893b      	ldrh	r3, [r7, #8]
 8002ad2:	7af9      	ldrb	r1, [r7, #11]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	47a0      	blx	r4
 8002ad8:	6178      	str	r0, [r7, #20]

  return ret;
 8002ada:	697b      	ldr	r3, [r7, #20]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd90      	pop	{r4, r7, pc}

08002ae4 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	460b      	mov	r3, r1
 8002af2:	72fb      	strb	r3, [r7, #11]
 8002af4:	4613      	mov	r3, r2
 8002af6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681c      	ldr	r4, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68d8      	ldr	r0, [r3, #12]
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	7af9      	ldrb	r1, [r7, #11]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	47a0      	blx	r4
 8002b08:	6178      	str	r0, [r7, #20]

  return ret;
 8002b0a:	697b      	ldr	r3, [r7, #20]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}

08002b14 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002b20:	f107 0208 	add.w	r2, r7, #8
 8002b24:	2301      	movs	r3, #1
 8002b26:	2160      	movs	r1, #96	@ 0x60
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffc3 	bl	8002ab4 <lis2mdl_read_reg>
 8002b2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	7a3b      	ldrb	r3, [r7, #8]
 8002b40:	f362 0301 	bfi	r3, r2, #0, #2
 8002b44:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002b46:	f107 0208 	add.w	r2, r7, #8
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	2160      	movs	r1, #96	@ 0x60
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffc8 	bl	8002ae4 <lis2mdl_write_reg>
 8002b54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002b6c:	f107 0208 	add.w	r2, r7, #8
 8002b70:	2301      	movs	r3, #1
 8002b72:	2160      	movs	r1, #96	@ 0x60
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff9d 	bl	8002ab4 <lis2mdl_read_reg>
 8002b7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10f      	bne.n	8002ba2 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	7a3b      	ldrb	r3, [r7, #8]
 8002b8c:	f362 0383 	bfi	r3, r2, #2, #2
 8002b90:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002b92:	f107 0208 	add.w	r2, r7, #8
 8002b96:	2301      	movs	r3, #1
 8002b98:	2160      	movs	r1, #96	@ 0x60
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffa2 	bl	8002ae4 <lis2mdl_write_reg>
 8002ba0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002bb8:	f107 0208 	add.w	r2, r7, #8
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	2162      	movs	r1, #98	@ 0x62
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff77 	bl	8002ab4 <lis2mdl_read_reg>
 8002bc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	7a3b      	ldrb	r3, [r7, #8]
 8002bd8:	f362 1304 	bfi	r3, r2, #4, #1
 8002bdc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002bde:	f107 0208 	add.w	r2, r7, #8
 8002be2:	2301      	movs	r3, #1
 8002be4:	2162      	movs	r1, #98	@ 0x62
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ff7c 	bl	8002ae4 <lis2mdl_write_reg>
 8002bec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8002c02:	f107 020c 	add.w	r2, r7, #12
 8002c06:	2306      	movs	r3, #6
 8002c08:	2168      	movs	r1, #104	@ 0x68
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ff52 	bl	8002ab4 <lis2mdl_read_reg>
 8002c10:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002c12:	7b7b      	ldrb	r3, [r7, #13]
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	7b3a      	ldrb	r2, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3302      	adds	r3, #2
 8002c38:	b212      	sxth	r2, r2
 8002c3a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	3302      	adds	r3, #2
 8002c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	7bba      	ldrb	r2, [r7, #14]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3302      	adds	r3, #2
 8002c54:	b212      	sxth	r2, r2
 8002c56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002c58:	7c7a      	ldrb	r2, [r7, #17]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	b212      	sxth	r2, r2
 8002c60:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3304      	adds	r3, #4
 8002c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	7c3a      	ldrb	r2, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	b212      	sxth	r2, r2
 8002c7c:	801a      	strh	r2, [r3, #0]

  return ret;
 8002c7e:	697b      	ldr	r3, [r7, #20]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002c94:	f107 0208 	add.w	r2, r7, #8
 8002c98:	2301      	movs	r3, #1
 8002c9a:	2162      	movs	r1, #98	@ 0x62
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff09 	bl	8002ab4 <lis2mdl_read_reg>
 8002ca2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	7a3b      	ldrb	r3, [r7, #8]
 8002cb4:	f362 0341 	bfi	r3, r2, #1, #1
 8002cb8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002cba:	f107 0208 	add.w	r2, r7, #8
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	2162      	movs	r1, #98	@ 0x62
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff0e 	bl	8002ae4 <lis2mdl_write_reg>
 8002cc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002ce0:	f107 0208 	add.w	r2, r7, #8
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	2162      	movs	r1, #98	@ 0x62
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff fee3 	bl	8002ab4 <lis2mdl_read_reg>
 8002cee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	7a3b      	ldrb	r3, [r7, #8]
 8002d00:	f362 1345 	bfi	r3, r2, #5, #1
 8002d04:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002d06:	f107 0208 	add.w	r2, r7, #8
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	2162      	movs	r1, #98	@ 0x62
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fee8 	bl	8002ae4 <lis2mdl_write_reg>
 8002d14:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d16:	68fb      	ldr	r3, [r7, #12]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e051      	b.n	8002de0 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	7b1a      	ldrb	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	699a      	ldr	r2, [r3, #24]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a1d      	ldr	r2, [pc, #116]	@ (8002dec <LSM6DSO_RegisterBusIO+0xcc>)
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002df0 <LSM6DSO_RegisterBusIO+0xd0>)
 8002d7e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e020      	b.n	8002de0 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4798      	blx	r3
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e016      	b.n	8002de0 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d112      	bne.n	8002de0 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10d      	bne.n	8002de0 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002dc4:	230c      	movs	r3, #12
 8002dc6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2112      	movs	r1, #18
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa23 	bl	800321a <LSM6DSO_Write_Reg>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
 8002dde:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002de0:	68fb      	ldr	r3, [r7, #12]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	0800329d 	.word	0x0800329d
 8002df0:	080032d3 	.word	0x080032d3

08002df4 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d00b      	beq.n	8002e1c <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3320      	adds	r3, #32
 8002e08:	2180      	movs	r1, #128	@ 0x80
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fe5f 	bl	8003ace <lsm6dso_i3c_disable_set>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	e06a      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
    }
  }

  /* Set main memory bank */
  if (LSM6DSO_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO_USER_BANK) != LSM6DSO_OK)
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fa16 	bl	8003250 <LSM6DSO_Set_Mem_Bank>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <LSM6DSO_Init+0x3c>
  {
    return LSM6DSO_ERROR;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e060      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3320      	adds	r3, #32
 8002e34:	2101      	movs	r1, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fe23 	bl	8003a82 <lsm6dso_auto_increment_set>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <LSM6DSO_Init+0x54>
  {
    return LSM6DSO_ERROR;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	e054      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3320      	adds	r3, #32
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fd44 	bl	80038dc <lsm6dso_block_data_update_set>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <LSM6DSO_Init+0x6c>
  {
    return LSM6DSO_ERROR;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	e048      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3320      	adds	r3, #32
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fe79 	bl	8003b5e <lsm6dso_fifo_mode_set>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <LSM6DSO_Init+0x84>
  {
    return LSM6DSO_ERROR;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	e03c      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3320      	adds	r3, #32
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 facc 	bl	8003424 <lsm6dso_xl_data_rate_set>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <LSM6DSO_Init+0xa4>
  {
    return LSM6DSO_ERROR;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	e02c      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3320      	adds	r3, #32
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fa62 	bl	8003368 <lsm6dso_xl_full_scale_set>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <LSM6DSO_Init+0xbc>
  {
    return LSM6DSO_ERROR;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002eae:	e020      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3320      	adds	r3, #32
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fc12 	bl	80036e8 <lsm6dso_gy_data_rate_set>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <LSM6DSO_Init+0xdc>
  {
    return LSM6DSO_ERROR;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e010      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3320      	adds	r3, #32
 8002ed4:	2106      	movs	r1, #6
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fb9e 	bl	8003618 <lsm6dso_gy_full_scale_set>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <LSM6DSO_Init+0xf4>
  {
    return LSM6DSO_ERROR;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	e004      	b.n	8002ef2 <LSM6DSO_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e014      	b.n	8002f3a <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f103 0220 	add.w	r2, r3, #32
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 fa80 	bl	8003424 <lsm6dso_xl_data_rate_set>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e004      	b.n	8002f3a <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3320      	adds	r3, #32
 8002f56:	f107 020b 	add.w	r2, r7, #11
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa29 	bl	80033b4 <lsm6dso_xl_full_scale_get>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8002f68:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6c:	e023      	b.n	8002fb6 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d81b      	bhi.n	8002fac <LSM6DSO_ACC_GetSensitivity+0x68>
 8002f74:	a201      	add	r2, pc, #4	@ (adr r2, 8002f7c <LSM6DSO_ACC_GetSensitivity+0x38>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002f9d 	.word	0x08002f9d
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8002f90:	601a      	str	r2, [r3, #0]
      break;
 8002f92:	e00f      	b.n	8002fb4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc4 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8002f98:	601a      	str	r2, [r3, #0]
      break;
 8002f9a:	e00b      	b.n	8002fb4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8002fa0:	601a      	str	r2, [r3, #0]
      break;
 8002fa2:	e007      	b.n	8002fb4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4a09      	ldr	r2, [pc, #36]	@ (8002fcc <LSM6DSO_ACC_GetSensitivity+0x88>)
 8002fa8:	601a      	str	r2, [r3, #0]
      break;
 8002faa:	e003      	b.n	8002fb4 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb0:	60fb      	str	r3, [r7, #12]
      break;
 8002fb2:	bf00      	nop
  }

  return ret;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	3d79db23 	.word	0x3d79db23
 8002fc4:	3df9db23 	.word	0x3df9db23
 8002fc8:	3e79db23 	.word	0x3e79db23
 8002fcc:	3ef9db23 	.word	0x3ef9db23

08002fd0 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	f107 0210 	add.w	r2, r7, #16
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fce4 	bl	80039b8 <lsm6dso_acceleration_raw_get>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	e03c      	b.n	8003076 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ff9e 	bl	8002f44 <LSM6DSO_ACC_GetSensitivity>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e030      	b.n	8003076 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003014:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003020:	edd7 7a03 	vldr	s15, [r7, #12]
 8003024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800302c:	ee17 2a90 	vmov	r2, s15
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800304c:	ee17 2a90 	vmov	r2, s15
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003054:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003060:	edd7 7a03 	vldr	s15, [r7, #12]
 8003064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800306c:	ee17 2a90 	vmov	r2, s15
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e014      	b.n	80030be <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 0220 	add.w	r2, r3, #32
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 fb20 	bl	80036e8 <lsm6dso_gy_data_rate_set>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	e004      	b.n	80030be <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3320      	adds	r3, #32
 80030da:	f107 020b 	add.w	r2, r7, #11
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fabf 	bl	8003664 <lsm6dso_gy_full_scale_get>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	e02d      	b.n	800314e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80030f2:	7afb      	ldrb	r3, [r7, #11]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d825      	bhi.n	8003144 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80030f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003100 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003125 	.word	0x08003125
 8003104:	0800311d 	.word	0x0800311d
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003145 	.word	0x08003145
 8003110:	08003135 	.word	0x08003135
 8003114:	08003145 	.word	0x08003145
 8003118:	0800313d 	.word	0x0800313d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4a0e      	ldr	r2, [pc, #56]	@ (8003158 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8003120:	601a      	str	r2, [r3, #0]
      break;
 8003122:	e013      	b.n	800314c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4a0d      	ldr	r2, [pc, #52]	@ (800315c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8003128:	601a      	str	r2, [r3, #0]
      break;
 800312a:	e00f      	b.n	800314c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4a0c      	ldr	r2, [pc, #48]	@ (8003160 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8003130:	601a      	str	r2, [r3, #0]
      break;
 8003132:	e00b      	b.n	800314c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4a0b      	ldr	r2, [pc, #44]	@ (8003164 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8003138:	601a      	str	r2, [r3, #0]
      break;
 800313a:	e007      	b.n	800314c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8003140:	601a      	str	r2, [r3, #0]
      break;
 8003142:	e003      	b.n	800314c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
 8003148:	60fb      	str	r3, [r7, #12]
      break;
 800314a:	bf00      	nop
  }

  return ret;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	408c0000 	.word	0x408c0000
 800315c:	410c0000 	.word	0x410c0000
 8003160:	418c0000 	.word	0x418c0000
 8003164:	420c0000 	.word	0x420c0000
 8003168:	428c0000 	.word	0x428c0000

0800316c <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3320      	adds	r3, #32
 8003180:	f107 0210 	add.w	r2, r7, #16
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fbce 	bl	8003928 <lsm6dso_angular_rate_raw_get>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <LSM6DSO_GYRO_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e03c      	b.n	8003212 <LSM6DSO_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ff92 	bl	80030c8 <LSM6DSO_GYRO_GetSensitivity>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <LSM6DSO_GYRO_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e030      	b.n	8003212 <LSM6DSO_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80031b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031b4:	ee07 3a90 	vmov	s15, r3
 80031b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c8:	ee17 2a90 	vmov	r2, s15
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80031d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e8:	ee17 2a90 	vmov	r2, s15
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80031f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003208:	ee17 2a90 	vmov	r2, s15
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	70fb      	strb	r3, [r7, #3]
 8003226:	4613      	mov	r3, r2
 8003228:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f103 0020 	add.w	r0, r3, #32
 8003230:	1cba      	adds	r2, r7, #2
 8003232:	78f9      	ldrb	r1, [r7, #3]
 8003234:	2301      	movs	r3, #1
 8003236:	f000 f87f 	bl	8003338 <lsm6dso_write_reg>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	e000      	b.n	8003248 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <LSM6DSO_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO_USER_BANK, 1 - LSM6DSO_SENSOR_HUB_BANK, 2 - LSM6DSO_EMBEDDED_FUNC_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Set_Mem_Bank(LSM6DSO_Object_t *pObj, uint8_t Val)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  lsm6dso_reg_access_t reg;

  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
        : (Val == 2U) ? LSM6DSO_EMBEDDED_FUNC_BANK
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d006      	beq.n	8003274 <LSM6DSO_Set_Mem_Bank+0x24>
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d101      	bne.n	8003270 <LSM6DSO_Set_Mem_Bank+0x20>
 800326c:	2302      	movs	r3, #2
 800326e:	e002      	b.n	8003276 <LSM6DSO_Set_Mem_Bank+0x26>
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <LSM6DSO_Set_Mem_Bank+0x26>
 8003274:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
 8003276:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO_USER_BANK;

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3320      	adds	r3, #32
 800327c:	7afa      	ldrb	r2, [r7, #11]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fbe1 	bl	8003a48 <lsm6dso_mem_bank_set>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <LSM6DSO_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO_ERROR;
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
 8003290:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	460b      	mov	r3, r1
 80032aa:	72fb      	strb	r3, [r7, #11]
 80032ac:	4613      	mov	r3, r2
 80032ae:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	695c      	ldr	r4, [r3, #20]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	7b1b      	ldrb	r3, [r3, #12]
 80032bc:	4618      	mov	r0, r3
 80032be:	7afb      	ldrb	r3, [r7, #11]
 80032c0:	b299      	uxth	r1, r3
 80032c2:	893b      	ldrh	r3, [r7, #8]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	47a0      	blx	r4
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd90      	pop	{r4, r7, pc}

080032d2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80032d2:	b590      	push	{r4, r7, lr}
 80032d4:	b087      	sub	sp, #28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	461a      	mov	r2, r3
 80032de:	460b      	mov	r3, r1
 80032e0:	72fb      	strb	r3, [r7, #11]
 80032e2:	4613      	mov	r3, r2
 80032e4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	691c      	ldr	r4, [r3, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	7b1b      	ldrb	r3, [r3, #12]
 80032f2:	4618      	mov	r0, r3
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	b299      	uxth	r1, r3
 80032f8:	893b      	ldrh	r3, [r7, #8]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	47a0      	blx	r4
 80032fe:	4603      	mov	r3, r0
}
 8003300:	4618      	mov	r0, r3
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	bd90      	pop	{r4, r7, pc}

08003308 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	461a      	mov	r2, r3
 8003314:	460b      	mov	r3, r1
 8003316:	72fb      	strb	r3, [r7, #11]
 8003318:	4613      	mov	r3, r2
 800331a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685c      	ldr	r4, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68d8      	ldr	r0, [r3, #12]
 8003324:	893b      	ldrh	r3, [r7, #8]
 8003326:	7af9      	ldrb	r1, [r7, #11]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	47a0      	blx	r4
 800332c:	6178      	str	r0, [r7, #20]

  return ret;
 800332e:	697b      	ldr	r3, [r7, #20]
}
 8003330:	4618      	mov	r0, r3
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd90      	pop	{r4, r7, pc}

08003338 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	461a      	mov	r2, r3
 8003344:	460b      	mov	r3, r1
 8003346:	72fb      	strb	r3, [r7, #11]
 8003348:	4613      	mov	r3, r2
 800334a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681c      	ldr	r4, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68d8      	ldr	r0, [r3, #12]
 8003354:	893b      	ldrh	r3, [r7, #8]
 8003356:	7af9      	ldrb	r1, [r7, #11]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	47a0      	blx	r4
 800335c:	6178      	str	r0, [r7, #20]

  return ret;
 800335e:	697b      	ldr	r3, [r7, #20]
}
 8003360:	4618      	mov	r0, r3
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}

08003368 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003374:	f107 0208 	add.w	r2, r7, #8
 8003378:	2301      	movs	r3, #1
 800337a:	2110      	movs	r1, #16
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ffc3 	bl	8003308 <lsm6dso_read_reg>
 8003382:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	b2da      	uxtb	r2, r3
 8003392:	7a3b      	ldrb	r3, [r7, #8]
 8003394:	f362 0383 	bfi	r3, r2, #2, #2
 8003398:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800339a:	f107 0208 	add.w	r2, r7, #8
 800339e:	2301      	movs	r3, #1
 80033a0:	2110      	movs	r1, #16
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffc8 	bl	8003338 <lsm6dso_write_reg>
 80033a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033aa:	68fb      	ldr	r3, [r7, #12]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80033be:	f107 0208 	add.w	r2, r7, #8
 80033c2:	2301      	movs	r3, #1
 80033c4:	2110      	movs	r1, #16
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ff9e 	bl	8003308 <lsm6dso_read_reg>
 80033cc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80033ce:	7a3b      	ldrb	r3, [r7, #8]
 80033d0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d81a      	bhi.n	8003410 <lsm6dso_xl_full_scale_get+0x5c>
 80033da:	a201      	add	r2, pc, #4	@ (adr r2, 80033e0 <lsm6dso_xl_full_scale_get+0x2c>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	080033f9 	.word	0x080033f9
 80033e8:	08003401 	.word	0x08003401
 80033ec:	08003409 	.word	0x08003409
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
      break;
 80033f6:	e00f      	b.n	8003418 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
      break;
 80033fe:	e00b      	b.n	8003418 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
      break;
 8003406:	e007      	b.n	8003418 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2203      	movs	r2, #3
 800340c:	701a      	strb	r2, [r3, #0]
      break;
 800340e:	e003      	b.n	8003418 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
      break;
 8003416:	bf00      	nop
  }

  return ret;
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop

08003424 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fbb5 	bl	8003baa <lsm6dso_fsm_enable_get>
 8003440:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <lsm6dso_xl_data_rate_set+0x28>
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	e0e0      	b.n	800360e <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800344c:	7b3b      	ldrb	r3, [r7, #12]
 800344e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003452:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8003454:	7b3b      	ldrb	r3, [r7, #12]
 8003456:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800345a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800345c:	4313      	orrs	r3, r2
 800345e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8003460:	7b3b      	ldrb	r3, [r7, #12]
 8003462:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003466:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8003468:	4313      	orrs	r3, r2
 800346a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800346c:	7b3b      	ldrb	r3, [r7, #12]
 800346e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003472:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8003474:	4313      	orrs	r3, r2
 8003476:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8003478:	7b3b      	ldrb	r3, [r7, #12]
 800347a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800347e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8003480:	4313      	orrs	r3, r2
 8003482:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8003484:	7b3b      	ldrb	r3, [r7, #12]
 8003486:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800348a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800348c:	4313      	orrs	r3, r2
 800348e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8003490:	7b3b      	ldrb	r3, [r7, #12]
 8003492:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003496:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8003498:	4313      	orrs	r3, r2
 800349a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800349c:	7b3b      	ldrb	r3, [r7, #12]
 800349e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80034a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80034a4:	4313      	orrs	r3, r2
 80034a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80034a8:	7b7b      	ldrb	r3, [r7, #13]
 80034aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80034b0:	4313      	orrs	r3, r2
 80034b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80034b4:	7b7b      	ldrb	r3, [r7, #13]
 80034b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80034bc:	4313      	orrs	r3, r2
 80034be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80034c0:	7b7b      	ldrb	r3, [r7, #13]
 80034c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80034c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80034cc:	7b7b      	ldrb	r3, [r7, #13]
 80034ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80034d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80034d8:	7b7b      	ldrb	r3, [r7, #13]
 80034da:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80034de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80034e0:	4313      	orrs	r3, r2
 80034e2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80034e4:	7b7b      	ldrb	r3, [r7, #13]
 80034e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80034ea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80034f0:	7b7b      	ldrb	r3, [r7, #13]
 80034f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80034f6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80034fc:	7b7b      	ldrb	r3, [r7, #13]
 80034fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003502:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8003504:	4313      	orrs	r3, r2
 8003506:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003508:	2b01      	cmp	r3, #1
 800350a:	d164      	bne.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800350c:	f107 030b 	add.w	r3, r7, #11
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fb6a 	bl	8003bec <lsm6dso_fsm_data_rate_get>
 8003518:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <lsm6dso_xl_data_rate_set+0x100>
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	e074      	b.n	800360e <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d852      	bhi.n	80035d0 <lsm6dso_xl_data_rate_set+0x1ac>
 800352a:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <lsm6dso_xl_data_rate_set+0x10c>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003571 	.word	0x08003571
 800353c:	0800359b 	.word	0x0800359b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800354a:	e044      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	75fb      	strb	r3, [r7, #23]
        break;
 8003550:	e041      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8003558:	2302      	movs	r3, #2
 800355a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800355c:	e03b      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d102      	bne.n	800356a <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8003564:	2302      	movs	r3, #2
 8003566:	75fb      	strb	r3, [r7, #23]
        break;
 8003568:	e035      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	75fb      	strb	r3, [r7, #23]
        break;
 800356e:	e032      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8003576:	2303      	movs	r3, #3
 8003578:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800357a:	e02c      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d102      	bne.n	8003588 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8003582:	2303      	movs	r3, #3
 8003584:	75fb      	strb	r3, [r7, #23]
        break;
 8003586:	e026      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d102      	bne.n	8003594 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800358e:	2303      	movs	r3, #3
 8003590:	75fb      	strb	r3, [r7, #23]
        break;
 8003592:	e020      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	75fb      	strb	r3, [r7, #23]
        break;
 8003598:	e01d      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80035a0:	2304      	movs	r3, #4
 80035a2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80035a4:	e017      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d102      	bne.n	80035b2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80035ac:	2304      	movs	r3, #4
 80035ae:	75fb      	strb	r3, [r7, #23]
        break;
 80035b0:	e011      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d102      	bne.n	80035be <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80035b8:	2304      	movs	r3, #4
 80035ba:	75fb      	strb	r3, [r7, #23]
        break;
 80035bc:	e00b      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d102      	bne.n	80035ca <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80035c4:	2304      	movs	r3, #4
 80035c6:	75fb      	strb	r3, [r7, #23]
        break;
 80035c8:	e005      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	75fb      	strb	r3, [r7, #23]
        break;
 80035ce:	e002      	b.n	80035d6 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	75fb      	strb	r3, [r7, #23]
        break;
 80035d4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80035d6:	f107 0208 	add.w	r2, r7, #8
 80035da:	2301      	movs	r3, #1
 80035dc:	2110      	movs	r1, #16
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fe92 	bl	8003308 <lsm6dso_read_reg>
 80035e4:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	7a3b      	ldrb	r3, [r7, #8]
 80035f0:	f362 1307 	bfi	r3, r2, #4, #4
 80035f4:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80035f6:	f107 0208 	add.w	r2, r7, #8
 80035fa:	2301      	movs	r3, #1
 80035fc:	2110      	movs	r1, #16
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fe9a 	bl	8003338 <lsm6dso_write_reg>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	613b      	str	r3, [r7, #16]

  return ret;
 800360c:	693b      	ldr	r3, [r7, #16]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop

08003618 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003624:	f107 0208 	add.w	r2, r7, #8
 8003628:	2301      	movs	r3, #1
 800362a:	2111      	movs	r1, #17
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fe6b 	bl	8003308 <lsm6dso_read_reg>
 8003632:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	b2da      	uxtb	r2, r3
 8003642:	7a3b      	ldrb	r3, [r7, #8]
 8003644:	f362 0343 	bfi	r3, r2, #1, #3
 8003648:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800364a:	f107 0208 	add.w	r2, r7, #8
 800364e:	2301      	movs	r3, #1
 8003650:	2111      	movs	r1, #17
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fe70 	bl	8003338 <lsm6dso_write_reg>
 8003658:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800366e:	f107 0208 	add.w	r2, r7, #8
 8003672:	2301      	movs	r3, #1
 8003674:	2111      	movs	r1, #17
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fe46 	bl	8003308 <lsm6dso_read_reg>
 800367c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800367e:	7a3b      	ldrb	r3, [r7, #8]
 8003680:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b06      	cmp	r3, #6
 8003688:	d824      	bhi.n	80036d4 <lsm6dso_gy_full_scale_get+0x70>
 800368a:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <lsm6dso_gy_full_scale_get+0x2c>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036ad 	.word	0x080036ad
 8003694:	080036b5 	.word	0x080036b5
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036d5 	.word	0x080036d5
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036d5 	.word	0x080036d5
 80036a8:	080036cd 	.word	0x080036cd
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e013      	b.n	80036dc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e00f      	b.n	80036dc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2202      	movs	r2, #2
 80036c0:	701a      	strb	r2, [r3, #0]
      break;
 80036c2:	e00b      	b.n	80036dc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	701a      	strb	r2, [r3, #0]
      break;
 80036ca:	e007      	b.n	80036dc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2206      	movs	r2, #6
 80036d0:	701a      	strb	r2, [r3, #0]
      break;
 80036d2:	e003      	b.n	80036dc <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
      break;
 80036da:	bf00      	nop
  }

  return ret;
 80036dc:	68fb      	ldr	r3, [r7, #12]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop

080036e8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa53 	bl	8003baa <lsm6dso_fsm_enable_get>
 8003704:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <lsm6dso_gy_data_rate_set+0x28>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	e0e0      	b.n	80038d2 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003710:	7b3b      	ldrb	r3, [r7, #12]
 8003712:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003716:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8003718:	7b3b      	ldrb	r3, [r7, #12]
 800371a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800371e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003720:	4313      	orrs	r3, r2
 8003722:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8003724:	7b3b      	ldrb	r3, [r7, #12]
 8003726:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800372a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800372c:	4313      	orrs	r3, r2
 800372e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8003730:	7b3b      	ldrb	r3, [r7, #12]
 8003732:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003736:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8003738:	4313      	orrs	r3, r2
 800373a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800373c:	7b3b      	ldrb	r3, [r7, #12]
 800373e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003742:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8003744:	4313      	orrs	r3, r2
 8003746:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8003748:	7b3b      	ldrb	r3, [r7, #12]
 800374a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800374e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8003750:	4313      	orrs	r3, r2
 8003752:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8003754:	7b3b      	ldrb	r3, [r7, #12]
 8003756:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800375a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800375c:	4313      	orrs	r3, r2
 800375e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8003760:	7b3b      	ldrb	r3, [r7, #12]
 8003762:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003766:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8003768:	4313      	orrs	r3, r2
 800376a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800376c:	7b7b      	ldrb	r3, [r7, #13]
 800376e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003772:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8003774:	4313      	orrs	r3, r2
 8003776:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8003778:	7b7b      	ldrb	r3, [r7, #13]
 800377a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800377e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8003780:	4313      	orrs	r3, r2
 8003782:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8003784:	7b7b      	ldrb	r3, [r7, #13]
 8003786:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800378a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800378c:	4313      	orrs	r3, r2
 800378e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8003790:	7b7b      	ldrb	r3, [r7, #13]
 8003792:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003796:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8003798:	4313      	orrs	r3, r2
 800379a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800379c:	7b7b      	ldrb	r3, [r7, #13]
 800379e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80037a8:	7b7b      	ldrb	r3, [r7, #13]
 80037aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80037b0:	4313      	orrs	r3, r2
 80037b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80037b4:	7b7b      	ldrb	r3, [r7, #13]
 80037b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80037bc:	4313      	orrs	r3, r2
 80037be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80037c0:	7b7b      	ldrb	r3, [r7, #13]
 80037c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d164      	bne.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80037d0:	f107 030b 	add.w	r3, r7, #11
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa08 	bl	8003bec <lsm6dso_fsm_data_rate_get>
 80037dc:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <lsm6dso_gy_data_rate_set+0x100>
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	e074      	b.n	80038d2 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d852      	bhi.n	8003894 <lsm6dso_gy_data_rate_set+0x1ac>
 80037ee:	a201      	add	r2, pc, #4	@ (adr r2, 80037f4 <lsm6dso_gy_data_rate_set+0x10c>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003805 	.word	0x08003805
 80037f8:	08003817 	.word	0x08003817
 80037fc:	08003835 	.word	0x08003835
 8003800:	0800385f 	.word	0x0800385f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800380e:	e044      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	75fb      	strb	r3, [r7, #23]
        break;
 8003814:	e041      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 800381c:	2302      	movs	r3, #2
 800381e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8003820:	e03b      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8003828:	2302      	movs	r3, #2
 800382a:	75fb      	strb	r3, [r7, #23]
        break;
 800382c:	e035      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	75fb      	strb	r3, [r7, #23]
        break;
 8003832:	e032      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800383a:	2303      	movs	r3, #3
 800383c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800383e:	e02c      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003846:	2303      	movs	r3, #3
 8003848:	75fb      	strb	r3, [r7, #23]
        break;
 800384a:	e026      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d102      	bne.n	8003858 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003852:	2303      	movs	r3, #3
 8003854:	75fb      	strb	r3, [r7, #23]
        break;
 8003856:	e020      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	75fb      	strb	r3, [r7, #23]
        break;
 800385c:	e01d      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003864:	2304      	movs	r3, #4
 8003866:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8003868:	e017      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d102      	bne.n	8003876 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003870:	2304      	movs	r3, #4
 8003872:	75fb      	strb	r3, [r7, #23]
        break;
 8003874:	e011      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d102      	bne.n	8003882 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800387c:	2304      	movs	r3, #4
 800387e:	75fb      	strb	r3, [r7, #23]
        break;
 8003880:	e00b      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d102      	bne.n	800388e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003888:	2304      	movs	r3, #4
 800388a:	75fb      	strb	r3, [r7, #23]
        break;
 800388c:	e005      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	75fb      	strb	r3, [r7, #23]
        break;
 8003892:	e002      	b.n	800389a <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	75fb      	strb	r3, [r7, #23]
        break;
 8003898:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800389a:	f107 0208 	add.w	r2, r7, #8
 800389e:	2301      	movs	r3, #1
 80038a0:	2111      	movs	r1, #17
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fd30 	bl	8003308 <lsm6dso_read_reg>
 80038a8:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	7a3b      	ldrb	r3, [r7, #8]
 80038b4:	f362 1307 	bfi	r3, r2, #4, #4
 80038b8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80038ba:	f107 0208 	add.w	r2, r7, #8
 80038be:	2301      	movs	r3, #1
 80038c0:	2111      	movs	r1, #17
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fd38 	bl	8003338 <lsm6dso_write_reg>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

  return ret;
 80038d0:	693b      	ldr	r3, [r7, #16]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop

080038dc <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80038e8:	f107 0208 	add.w	r2, r7, #8
 80038ec:	2301      	movs	r3, #1
 80038ee:	2112      	movs	r1, #18
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fd09 	bl	8003308 <lsm6dso_read_reg>
 80038f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	7a3b      	ldrb	r3, [r7, #8]
 8003908:	f362 1386 	bfi	r3, r2, #6, #1
 800390c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800390e:	f107 0208 	add.w	r2, r7, #8
 8003912:	2301      	movs	r3, #1
 8003914:	2112      	movs	r1, #18
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fd0e 	bl	8003338 <lsm6dso_write_reg>
 800391c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8003932:	f107 020c 	add.w	r2, r7, #12
 8003936:	2306      	movs	r3, #6
 8003938:	2122      	movs	r1, #34	@ 0x22
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fce4 	bl	8003308 <lsm6dso_read_reg>
 8003940:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003942:	7b7b      	ldrb	r3, [r7, #13]
 8003944:	b21a      	sxth	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003950:	b29b      	uxth	r3, r3
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	7b3a      	ldrb	r2, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	b21a      	sxth	r2, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	3302      	adds	r3, #2
 8003968:	b212      	sxth	r2, r2
 800396a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	3302      	adds	r3, #2
 8003970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003974:	b29b      	uxth	r3, r3
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	b29b      	uxth	r3, r3
 800397a:	7bba      	ldrb	r2, [r7, #14]
 800397c:	4413      	add	r3, r2
 800397e:	b29a      	uxth	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	3302      	adds	r3, #2
 8003984:	b212      	sxth	r2, r2
 8003986:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003988:	7c7a      	ldrb	r2, [r7, #17]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	3304      	adds	r3, #4
 800398e:	b212      	sxth	r2, r2
 8003990:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	3304      	adds	r3, #4
 8003996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800399a:	b29b      	uxth	r3, r3
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	b29b      	uxth	r3, r3
 80039a0:	7c3a      	ldrb	r2, [r7, #16]
 80039a2:	4413      	add	r3, r2
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	3304      	adds	r3, #4
 80039aa:	b212      	sxth	r2, r2
 80039ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80039ae:	697b      	ldr	r3, [r7, #20]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80039c2:	f107 020c 	add.w	r2, r7, #12
 80039c6:	2306      	movs	r3, #6
 80039c8:	2128      	movs	r1, #40	@ 0x28
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fc9c 	bl	8003308 <lsm6dso_read_reg>
 80039d0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80039d2:	7b7b      	ldrb	r3, [r7, #13]
 80039d4:	b21a      	sxth	r2, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	7b3a      	ldrb	r2, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	b21a      	sxth	r2, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	3302      	adds	r3, #2
 80039f8:	b212      	sxth	r2, r2
 80039fa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	3302      	adds	r3, #2
 8003a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	7bba      	ldrb	r2, [r7, #14]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	3302      	adds	r3, #2
 8003a14:	b212      	sxth	r2, r2
 8003a16:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003a18:	7c7a      	ldrb	r2, [r7, #17]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	b212      	sxth	r2, r2
 8003a20:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	7c3a      	ldrb	r2, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	b212      	sxth	r2, r2
 8003a3c:	801a      	strh	r2, [r3, #0]

  return ret;
 8003a3e:	697b      	ldr	r3, [r7, #20]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8003a54:	2300      	movs	r3, #0
 8003a56:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	7a3b      	ldrb	r3, [r7, #8]
 8003a62:	f362 1387 	bfi	r3, r2, #6, #2
 8003a66:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003a68:	f107 0208 	add.w	r2, r7, #8
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	2101      	movs	r1, #1
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fc61 	bl	8003338 <lsm6dso_write_reg>
 8003a76:	60f8      	str	r0, [r7, #12]

  return ret;
 8003a78:	68fb      	ldr	r3, [r7, #12]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003a8e:	f107 0208 	add.w	r2, r7, #8
 8003a92:	2301      	movs	r3, #1
 8003a94:	2112      	movs	r1, #18
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fc36 	bl	8003308 <lsm6dso_read_reg>
 8003a9c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10f      	bne.n	8003ac4 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	7a3b      	ldrb	r3, [r7, #8]
 8003aae:	f362 0382 	bfi	r3, r2, #2, #1
 8003ab2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003ab4:	f107 0208 	add.w	r2, r7, #8
 8003ab8:	2301      	movs	r3, #1
 8003aba:	2112      	movs	r1, #18
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fc3b 	bl	8003338 <lsm6dso_write_reg>
 8003ac2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b086      	sub	sp, #24
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003ada:	f107 020c 	add.w	r2, r7, #12
 8003ade:	2301      	movs	r3, #1
 8003ae0:	2118      	movs	r1, #24
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fc10 	bl	8003308 <lsm6dso_read_reg>
 8003ae8:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	09db      	lsrs	r3, r3, #7
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	7b3b      	ldrb	r3, [r7, #12]
 8003af8:	f362 0341 	bfi	r3, r2, #1, #1
 8003afc:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003afe:	f107 020c 	add.w	r2, r7, #12
 8003b02:	2301      	movs	r3, #1
 8003b04:	2118      	movs	r1, #24
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fc16 	bl	8003338 <lsm6dso_write_reg>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4413      	add	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <lsm6dso_i3c_disable_set+0x50>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	e01b      	b.n	8003b56 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8003b1e:	f107 0210 	add.w	r2, r7, #16
 8003b22:	2301      	movs	r3, #1
 8003b24:	2162      	movs	r1, #98	@ 0x62
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fbee 	bl	8003308 <lsm6dso_read_reg>
 8003b2c:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	7c3b      	ldrb	r3, [r7, #16]
 8003b38:	f362 03c4 	bfi	r3, r2, #3, #2
 8003b3c:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8003b3e:	f107 0210 	add.w	r2, r7, #16
 8003b42:	2301      	movs	r3, #1
 8003b44:	2162      	movs	r1, #98	@ 0x62
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fbf6 	bl	8003338 <lsm6dso_write_reg>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4413      	add	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

  return ret;
 8003b54:	697b      	ldr	r3, [r7, #20]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003b6a:	f107 0208 	add.w	r2, r7, #8
 8003b6e:	2301      	movs	r3, #1
 8003b70:	210a      	movs	r1, #10
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fbc8 	bl	8003308 <lsm6dso_read_reg>
 8003b78:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10f      	bne.n	8003ba0 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	7a3b      	ldrb	r3, [r7, #8]
 8003b8a:	f362 0302 	bfi	r3, r2, #0, #3
 8003b8e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003b90:	f107 0208 	add.w	r2, r7, #8
 8003b94:	2301      	movs	r3, #1
 8003b96:	210a      	movs	r1, #10
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fbcd 	bl	8003338 <lsm6dso_write_reg>
 8003b9e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ff46 	bl	8003a48 <lsm6dso_mem_bank_set>
 8003bbc:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	2146      	movs	r1, #70	@ 0x46
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fb9f 	bl	8003308 <lsm6dso_read_reg>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff37 	bl	8003a48 <lsm6dso_mem_bank_set>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  return ret;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff25 	bl	8003a48 <lsm6dso_mem_bank_set>
 8003bfe:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <lsm6dso_fsm_data_rate_get+0x1e>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	e03a      	b.n	8003c80 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8003c0a:	f107 0208 	add.w	r2, r7, #8
 8003c0e:	2301      	movs	r3, #1
 8003c10:	215f      	movs	r1, #95	@ 0x5f
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fb78 	bl	8003308 <lsm6dso_read_reg>
 8003c18:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d125      	bne.n	8003c6c <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8003c20:	7a3b      	ldrb	r3, [r7, #8]
 8003c22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d81b      	bhi.n	8003c64 <lsm6dso_fsm_data_rate_get+0x78>
 8003c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c34 <lsm6dso_fsm_data_rate_get+0x48>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c4d 	.word	0x08003c4d
 8003c3c:	08003c55 	.word	0x08003c55
 8003c40:	08003c5d 	.word	0x08003c5d
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	701a      	strb	r2, [r3, #0]
      break;
 8003c4a:	e010      	b.n	8003c6e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
      break;
 8003c52:	e00c      	b.n	8003c6e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2202      	movs	r2, #2
 8003c58:	701a      	strb	r2, [r3, #0]
      break;
 8003c5a:	e008      	b.n	8003c6e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	701a      	strb	r2, [r3, #0]
      break;
 8003c62:	e004      	b.n	8003c6e <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
      break;
 8003c6a:	e000      	b.n	8003c6e <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8003c6c:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003c6e:	2100      	movs	r1, #0
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fee9 	bl	8003a48 <lsm6dso_mem_bank_set>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  return ret;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <log_init>:

UART_HandleTypeDef *log_huart;

static char log_buffer[LOG_BUFFER_SIZE];

void log_init(void *huart) {
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	log_huart = (UART_HandleTypeDef*) huart;
 8003c90:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <log_init+0x1c>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6013      	str	r3, [r2, #0]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	2000096c 	.word	0x2000096c

08003ca8 <log_transmit>:

void log_transmit(uint8_t *data, uint16_t data_len) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(log_huart, data, data_len, LOG_UART_TIMEOUT);
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <log_transmit+0x24>)
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	887a      	ldrh	r2, [r7, #2]
 8003cba:	2364      	movs	r3, #100	@ 0x64
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	f003 fee9 	bl	8007a94 <HAL_UART_Transmit>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2000096c 	.word	0x2000096c

08003cd0 <log_printf>:

void log_printf(const char *format, ...) {
 8003cd0:	b40f      	push	{r0, r1, r2, r3}
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	607b      	str	r3, [r7, #4]
	vsnprintf(log_buffer, LOG_BUFFER_SIZE, format, argptr);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ce6:	4809      	ldr	r0, [pc, #36]	@ (8003d0c <log_printf+0x3c>)
 8003ce8:	f009 fa1e 	bl	800d128 <vsniprintf>
	va_end(argptr);
	log_transmit((uint8_t*) log_buffer, strlen(log_buffer));
 8003cec:	4807      	ldr	r0, [pc, #28]	@ (8003d0c <log_printf+0x3c>)
 8003cee:	f7fc fa97 	bl	8000220 <strlen>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4804      	ldr	r0, [pc, #16]	@ (8003d0c <log_printf+0x3c>)
 8003cfa:	f7ff ffd5 	bl	8003ca8 <log_transmit>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d08:	b004      	add	sp, #16
 8003d0a:	4770      	bx	lr
 8003d0c:	20000970 	.word	0x20000970

08003d10 <MyInitLSM6DSO>:
#include "MEMS_library.h"

static LSM6DSO_Object_t lsm6dso_obj_0;
static LIS2MDL_Object_t lis2mdl_obj_0;

void MyInitLSM6DSO(void){
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
	LSM6DSO_IO_t io_ctx;
	io_ctx.BusType     = LSM6DSO_I2C_BUS;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
	io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8003d1a:	23d7      	movs	r3, #215	@ 0xd7
 8003d1c:	733b      	strb	r3, [r7, #12]
	io_ctx.Init        = LSM6DSO_I2C_INIT;
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <MyInitLSM6DSO+0x40>)
 8003d20:	603b      	str	r3, [r7, #0]
	io_ctx.DeInit      = LSM6DSO_I2C_DEINIT;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <MyInitLSM6DSO+0x44>)
 8003d24:	607b      	str	r3, [r7, #4]
	io_ctx.ReadReg     = LSM6DSO_I2C_READ_REG;
 8003d26:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <MyInitLSM6DSO+0x48>)
 8003d28:	617b      	str	r3, [r7, #20]
	io_ctx.WriteReg    = LSM6DSO_I2C_WRITE_REG;
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <MyInitLSM6DSO+0x4c>)
 8003d2c:	613b      	str	r3, [r7, #16]
	io_ctx.GetTick     = LSM6DSO_GET_TICK;
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <MyInitLSM6DSO+0x50>)
 8003d30:	61bb      	str	r3, [r7, #24]
	io_ctx.Delay       = LSM6DSO_DELAY;
 8003d32:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <MyInitLSM6DSO+0x54>)
 8003d34:	61fb      	str	r3, [r7, #28]

	LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx);
 8003d36:	463b      	mov	r3, r7
 8003d38:	4619      	mov	r1, r3
 8003d3a:	480b      	ldr	r0, [pc, #44]	@ (8003d68 <MyInitLSM6DSO+0x58>)
 8003d3c:	f7fe fff0 	bl	8002d20 <LSM6DSO_RegisterBusIO>
	LSM6DSO_Init(&lsm6dso_obj_0);
 8003d40:	4809      	ldr	r0, [pc, #36]	@ (8003d68 <MyInitLSM6DSO+0x58>)
 8003d42:	f7ff f857 	bl	8002df4 <LSM6DSO_Init>
}
 8003d46:	bf00      	nop
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	08001b8d 	.word	0x08001b8d
 8003d54:	08001c09 	.word	0x08001c09
 8003d58:	08001cbd 	.word	0x08001cbd
 8003d5c:	08001c59 	.word	0x08001c59
 8003d60:	08001d21 	.word	0x08001d21
 8003d64:	08003f1d 	.word	0x08003f1d
 8003d68:	20000b70 	.word	0x20000b70

08003d6c <MyEnableLSM6DSO>:

void MyEnableLSM6DSO(void){
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	LSM6DSO_ACC_Enable(&lsm6dso_obj_0);
 8003d70:	4803      	ldr	r0, [pc, #12]	@ (8003d80 <MyEnableLSM6DSO+0x14>)
 8003d72:	f7ff f8c2 	bl	8002efa <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&lsm6dso_obj_0);
 8003d76:	4802      	ldr	r0, [pc, #8]	@ (8003d80 <MyEnableLSM6DSO+0x14>)
 8003d78:	f7ff f981 	bl	800307e <LSM6DSO_GYRO_Enable>
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000b70 	.word	0x20000b70

08003d84 <MyGettingLSM6DSO>:

void MyGettingLSM6DSO(LSM6DSO_Axes_t *Acc, LSM6DSO_Axes_t *Gyr){
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	LSM6DSO_ACC_GetAxes(&lsm6dso_obj_0, Acc);
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	480f      	ldr	r0, [pc, #60]	@ (8003dd0 <MyGettingLSM6DSO+0x4c>)
 8003d92:	f7ff f91d 	bl	8002fd0 <LSM6DSO_ACC_GetAxes>
	LSM6DSO_GYRO_GetAxes(&lsm6dso_obj_0, Gyr);
 8003d96:	6839      	ldr	r1, [r7, #0]
 8003d98:	480d      	ldr	r0, [pc, #52]	@ (8003dd0 <MyGettingLSM6DSO+0x4c>)
 8003d9a:	f7ff f9e7 	bl	800316c <LSM6DSO_GYRO_GetAxes>
	printf("______________________________________________________\n");
 8003d9e:	480d      	ldr	r0, [pc, #52]	@ (8003dd4 <MyGettingLSM6DSO+0x50>)
 8003da0:	f009 f94c 	bl	800d03c <puts>
	printf("Gyr X : %ld | Gyr Y : %ld | Gyr Z : %ld\n", Gyr->x, Gyr->y, Gyr->z);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4809      	ldr	r0, [pc, #36]	@ (8003dd8 <MyGettingLSM6DSO+0x54>)
 8003db2:	f009 f8db 	bl	800cf6c <iprintf>
	printf("Acc X : %ld | Acc Y : %ld | Acc Z : %ld\n", Acc->x, Acc->y, Acc->z);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	4806      	ldr	r0, [pc, #24]	@ (8003ddc <MyGettingLSM6DSO+0x58>)
 8003dc4:	f009 f8d2 	bl	800cf6c <iprintf>
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000b70 	.word	0x20000b70
 8003dd4:	0800f4f0 	.word	0x0800f4f0
 8003dd8:	0800f528 	.word	0x0800f528
 8003ddc:	0800f554 	.word	0x0800f554

08003de0 <MyInitLIS2MDL>:

void MyInitLIS2MDL(void){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
	LIS2MDL_IO_t io_ctx_bis;
	io_ctx_bis.BusType     = LIS2MDL_I2C_BUS;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
	io_ctx_bis.Address     = LIS2MDL_I2C_ADD_H;
 8003dea:	233d      	movs	r3, #61	@ 0x3d
 8003dec:	733b      	strb	r3, [r7, #12]
	io_ctx_bis.Init        = LIS2MDL_I2C_INIT;
 8003dee:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <MyInitLIS2MDL+0x40>)
 8003df0:	603b      	str	r3, [r7, #0]
	io_ctx_bis.DeInit      = LIS2MDL_I2C_DEINIT;
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <MyInitLIS2MDL+0x44>)
 8003df4:	607b      	str	r3, [r7, #4]
	io_ctx_bis.ReadReg     = LIS2MDL_I2C_READ_REG;
 8003df6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <MyInitLIS2MDL+0x48>)
 8003df8:	617b      	str	r3, [r7, #20]
	io_ctx_bis.WriteReg    = LIS2MDL_I2C_WRITE_REG;
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <MyInitLIS2MDL+0x4c>)
 8003dfc:	613b      	str	r3, [r7, #16]
	io_ctx_bis.GetTick     = LIS2MDL_GET_TICK;
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <MyInitLIS2MDL+0x50>)
 8003e00:	61bb      	str	r3, [r7, #24]
	io_ctx_bis.Delay       = LIS2MDL_DELAY;
 8003e02:	4b0c      	ldr	r3, [pc, #48]	@ (8003e34 <MyInitLIS2MDL+0x54>)
 8003e04:	61fb      	str	r3, [r7, #28]

	LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx_bis);
 8003e06:	463b      	mov	r3, r7
 8003e08:	4619      	mov	r1, r3
 8003e0a:	480b      	ldr	r0, [pc, #44]	@ (8003e38 <MyInitLIS2MDL+0x58>)
 8003e0c:	f7fe f966 	bl	80020dc <LIS2MDL_RegisterBusIO>
	LIS2MDL_Init(&lis2mdl_obj_0);
 8003e10:	4809      	ldr	r0, [pc, #36]	@ (8003e38 <MyInitLIS2MDL+0x58>)
 8003e12:	f7fe f9e3 	bl	80021dc <LIS2MDL_Init>
}
 8003e16:	bf00      	nop
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	08001b8d 	.word	0x08001b8d
 8003e24:	08001c09 	.word	0x08001c09
 8003e28:	08001cbd 	.word	0x08001cbd
 8003e2c:	08001c59 	.word	0x08001c59
 8003e30:	08001d21 	.word	0x08001d21
 8003e34:	08003f1d 	.word	0x08003f1d
 8003e38:	20000ba8 	.word	0x20000ba8

08003e3c <MyEnableLIS2MDL>:

void MyEnableLIS2MDL(void){
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
	LIS2MDL_MAG_Enable(&lis2mdl_obj_0);
 8003e40:	4802      	ldr	r0, [pc, #8]	@ (8003e4c <MyEnableLIS2MDL+0x10>)
 8003e42:	f7fe fa51 	bl	80022e8 <LIS2MDL_MAG_Enable>
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000ba8 	.word	0x20000ba8

08003e50 <MyGettingLIS2MDL>:

void MyGettingLIS2MDL(LIS2MDL_Axes_t *Magn){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	LIS2MDL_MAG_GetAxes(&lis2mdl_obj_0, Magn);
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4808      	ldr	r0, [pc, #32]	@ (8003e7c <MyGettingLIS2MDL+0x2c>)
 8003e5c:	f7fe fa96 	bl	800238c <LIS2MDL_MAG_GetAxes>
	printf("Mag X : %ld | Mag Y : %ld | Mag Z : %ld\n", Magn->x, Magn->y, Magn->z);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6819      	ldr	r1, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4804      	ldr	r0, [pc, #16]	@ (8003e80 <MyGettingLIS2MDL+0x30>)
 8003e6e:	f009 f87d 	bl	800cf6c <iprintf>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000ba8 	.word	0x20000ba8
 8003e80:	0800f580 	.word	0x0800f580

08003e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <HAL_Init+0x3c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a0b      	ldr	r2, [pc, #44]	@ (8003ec0 <HAL_Init+0x3c>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e9a:	2003      	movs	r0, #3
 8003e9c:	f000 f90f 	bl	80040be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ea0:	200f      	movs	r0, #15
 8003ea2:	f7fd fd77 	bl	8001994 <HAL_InitTick>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	71fb      	strb	r3, [r7, #7]
 8003eb0:	e001      	b.n	8003eb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003eb2:	f7fd fc82 	bl	80017ba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	58004000 	.word	0x58004000

08003ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ec8:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_IncTick+0x20>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <HAL_IncTick+0x24>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <HAL_IncTick+0x24>)
 8003ed6:	6013      	str	r3, [r2, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000010 	.word	0x20000010
 8003ee8:	20000bdc 	.word	0x20000bdc

08003eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return uwTick;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_GetTick+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000bdc 	.word	0x20000bdc

08003f04 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003f08:	4b03      	ldr	r3, [pc, #12]	@ (8003f18 <HAL_GetTickPrio+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2000000c 	.word	0x2000000c

08003f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff ffe2 	bl	8003eec <HAL_GetTick>
 8003f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d005      	beq.n	8003f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f36:	4b0a      	ldr	r3, [pc, #40]	@ (8003f60 <HAL_Delay+0x44>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f42:	bf00      	nop
 8003f44:	f7ff ffd2 	bl	8003eec <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d8f7      	bhi.n	8003f44 <HAL_Delay+0x28>
  {
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000010 	.word	0x20000010

08003f64 <__NVIC_SetPriorityGrouping>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f80:	4013      	ands	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f96:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	60d3      	str	r3, [r2, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <__NVIC_GetPriorityGrouping>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb0:	4b04      	ldr	r3, [pc, #16]	@ (8003fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	f003 0307 	and.w	r3, r3, #7
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	e000ed00 	.word	0xe000ed00

08003fc8 <__NVIC_EnableIRQ>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	db0b      	blt.n	8003ff2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	f003 021f 	and.w	r2, r3, #31
 8003fe0:	4907      	ldr	r1, [pc, #28]	@ (8004000 <__NVIC_EnableIRQ+0x38>)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2001      	movs	r0, #1
 8003fea:	fa00 f202 	lsl.w	r2, r0, r2
 8003fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000e100 	.word	0xe000e100

08004004 <__NVIC_SetPriority>:
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	6039      	str	r1, [r7, #0]
 800400e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db0a      	blt.n	800402e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	b2da      	uxtb	r2, r3
 800401c:	490c      	ldr	r1, [pc, #48]	@ (8004050 <__NVIC_SetPriority+0x4c>)
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	0112      	lsls	r2, r2, #4
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	440b      	add	r3, r1
 8004028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800402c:	e00a      	b.n	8004044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	4908      	ldr	r1, [pc, #32]	@ (8004054 <__NVIC_SetPriority+0x50>)
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	3b04      	subs	r3, #4
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	440b      	add	r3, r1
 8004042:	761a      	strb	r2, [r3, #24]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000e100 	.word	0xe000e100
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <NVIC_EncodePriority>:
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	@ 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f1c3 0307 	rsb	r3, r3, #7
 8004072:	2b04      	cmp	r3, #4
 8004074:	bf28      	it	cs
 8004076:	2304      	movcs	r3, #4
 8004078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3304      	adds	r3, #4
 800407e:	2b06      	cmp	r3, #6
 8004080:	d902      	bls.n	8004088 <NVIC_EncodePriority+0x30>
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3b03      	subs	r3, #3
 8004086:	e000      	b.n	800408a <NVIC_EncodePriority+0x32>
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800408c:	f04f 32ff 	mov.w	r2, #4294967295
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43da      	mvns	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	401a      	ands	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a0:	f04f 31ff 	mov.w	r1, #4294967295
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	43d9      	mvns	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b0:	4313      	orrs	r3, r2
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3724      	adds	r7, #36	@ 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ff4c 	bl	8003f64 <__NVIC_SetPriorityGrouping>
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040e2:	f7ff ff63 	bl	8003fac <__NVIC_GetPriorityGrouping>
 80040e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	6978      	ldr	r0, [r7, #20]
 80040ee:	f7ff ffb3 	bl	8004058 <NVIC_EncodePriority>
 80040f2:	4602      	mov	r2, r0
 80040f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff ff82 	bl	8004004 <__NVIC_SetPriority>
}
 8004100:	bf00      	nop
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff ff56 	bl	8003fc8 <__NVIC_EnableIRQ>
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004132:	e14c      	b.n	80043ce <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2101      	movs	r1, #1
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 813e 	beq.w	80043c8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d005      	beq.n	8004164 <HAL_GPIO_Init+0x40>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d130      	bne.n	80041c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	2203      	movs	r2, #3
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800419a:	2201      	movs	r2, #1
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 0201 	and.w	r2, r3, #1
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d017      	beq.n	8004202 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d123      	bne.n	8004256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	220f      	movs	r2, #15
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2203      	movs	r2, #3
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0203 	and.w	r2, r3, #3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8098 	beq.w	80043c8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004298:	4a54      	ldr	r2, [pc, #336]	@ (80043ec <HAL_GPIO_Init+0x2c8>)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	3302      	adds	r3, #2
 80042a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	220f      	movs	r2, #15
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042c2:	d019      	beq.n	80042f8 <HAL_GPIO_Init+0x1d4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a4a      	ldr	r2, [pc, #296]	@ (80043f0 <HAL_GPIO_Init+0x2cc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_GPIO_Init+0x1d0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a49      	ldr	r2, [pc, #292]	@ (80043f4 <HAL_GPIO_Init+0x2d0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00d      	beq.n	80042f0 <HAL_GPIO_Init+0x1cc>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a48      	ldr	r2, [pc, #288]	@ (80043f8 <HAL_GPIO_Init+0x2d4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <HAL_GPIO_Init+0x1c8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a47      	ldr	r2, [pc, #284]	@ (80043fc <HAL_GPIO_Init+0x2d8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_GPIO_Init+0x1c4>
 80042e4:	2304      	movs	r3, #4
 80042e6:	e008      	b.n	80042fa <HAL_GPIO_Init+0x1d6>
 80042e8:	2307      	movs	r3, #7
 80042ea:	e006      	b.n	80042fa <HAL_GPIO_Init+0x1d6>
 80042ec:	2303      	movs	r3, #3
 80042ee:	e004      	b.n	80042fa <HAL_GPIO_Init+0x1d6>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e002      	b.n	80042fa <HAL_GPIO_Init+0x1d6>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_GPIO_Init+0x1d6>
 80042f8:	2300      	movs	r3, #0
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	f002 0203 	and.w	r2, r2, #3
 8004300:	0092      	lsls	r2, r2, #2
 8004302:	4093      	lsls	r3, r2
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800430a:	4938      	ldr	r1, [pc, #224]	@ (80043ec <HAL_GPIO_Init+0x2c8>)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004318:	4b39      	ldr	r3, [pc, #228]	@ (8004400 <HAL_GPIO_Init+0x2dc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800433c:	4a30      	ldr	r2, [pc, #192]	@ (8004400 <HAL_GPIO_Init+0x2dc>)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004342:	4b2f      	ldr	r3, [pc, #188]	@ (8004400 <HAL_GPIO_Init+0x2dc>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004366:	4a26      	ldr	r2, [pc, #152]	@ (8004400 <HAL_GPIO_Init+0x2dc>)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800436c:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <HAL_GPIO_Init+0x2dc>)
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	43db      	mvns	r3, r3
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4013      	ands	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004392:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <HAL_GPIO_Init+0x2dc>)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800439a:	4b19      	ldr	r3, [pc, #100]	@ (8004400 <HAL_GPIO_Init+0x2dc>)
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004400 <HAL_GPIO_Init+0x2dc>)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3301      	adds	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f47f aeab 	bne.w	8004134 <HAL_GPIO_Init+0x10>
  }
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40010000 	.word	0x40010000
 80043f0:	48000400 	.word	0x48000400
 80043f4:	48000800 	.word	0x48000800
 80043f8:	48000c00 	.word	0x48000c00
 80043fc:	48001000 	.word	0x48001000
 8004400:	58000800 	.word	0x58000800

08004404 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004412:	e0bb      	b.n	800458c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004414:	2201      	movs	r2, #1
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	4013      	ands	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80ae 	beq.w	8004586 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800442a:	4a5f      	ldr	r2, [pc, #380]	@ (80045a8 <HAL_GPIO_DeInit+0x1a4>)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	3302      	adds	r3, #2
 8004432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004436:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	220f      	movs	r2, #15
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4013      	ands	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004452:	d019      	beq.n	8004488 <HAL_GPIO_DeInit+0x84>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a55      	ldr	r2, [pc, #340]	@ (80045ac <HAL_GPIO_DeInit+0x1a8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_GPIO_DeInit+0x80>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a54      	ldr	r2, [pc, #336]	@ (80045b0 <HAL_GPIO_DeInit+0x1ac>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00d      	beq.n	8004480 <HAL_GPIO_DeInit+0x7c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a53      	ldr	r2, [pc, #332]	@ (80045b4 <HAL_GPIO_DeInit+0x1b0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <HAL_GPIO_DeInit+0x78>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a52      	ldr	r2, [pc, #328]	@ (80045b8 <HAL_GPIO_DeInit+0x1b4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_GPIO_DeInit+0x74>
 8004474:	2304      	movs	r3, #4
 8004476:	e008      	b.n	800448a <HAL_GPIO_DeInit+0x86>
 8004478:	2307      	movs	r3, #7
 800447a:	e006      	b.n	800448a <HAL_GPIO_DeInit+0x86>
 800447c:	2303      	movs	r3, #3
 800447e:	e004      	b.n	800448a <HAL_GPIO_DeInit+0x86>
 8004480:	2302      	movs	r3, #2
 8004482:	e002      	b.n	800448a <HAL_GPIO_DeInit+0x86>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <HAL_GPIO_DeInit+0x86>
 8004488:	2300      	movs	r3, #0
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	f002 0203 	and.w	r2, r2, #3
 8004490:	0092      	lsls	r2, r2, #2
 8004492:	4093      	lsls	r3, r2
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	429a      	cmp	r2, r3
 8004498:	d136      	bne.n	8004508 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800449a:	4b48      	ldr	r3, [pc, #288]	@ (80045bc <HAL_GPIO_DeInit+0x1b8>)
 800449c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	4945      	ldr	r1, [pc, #276]	@ (80045bc <HAL_GPIO_DeInit+0x1b8>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80044ac:	4b43      	ldr	r3, [pc, #268]	@ (80045bc <HAL_GPIO_DeInit+0x1b8>)
 80044ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	4941      	ldr	r1, [pc, #260]	@ (80045bc <HAL_GPIO_DeInit+0x1b8>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80044be:	4b3f      	ldr	r3, [pc, #252]	@ (80045bc <HAL_GPIO_DeInit+0x1b8>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	493d      	ldr	r1, [pc, #244]	@ (80045bc <HAL_GPIO_DeInit+0x1b8>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80044cc:	4b3b      	ldr	r3, [pc, #236]	@ (80045bc <HAL_GPIO_DeInit+0x1b8>)
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	4939      	ldr	r1, [pc, #228]	@ (80045bc <HAL_GPIO_DeInit+0x1b8>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	220f      	movs	r2, #15
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80044ea:	4a2f      	ldr	r2, [pc, #188]	@ (80045a8 <HAL_GPIO_DeInit+0x1a4>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	3302      	adds	r3, #2
 80044f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	482b      	ldr	r0, [pc, #172]	@ (80045a8 <HAL_GPIO_DeInit+0x1a4>)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	400a      	ands	r2, r1
 8004502:	3302      	adds	r3, #2
 8004504:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	2103      	movs	r1, #3
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	08da      	lsrs	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3208      	adds	r2, #8
 8004524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	08d2      	lsrs	r2, r2, #3
 800453c:	4019      	ands	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	2103      	movs	r1, #3
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	2101      	movs	r1, #1
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	401a      	ands	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	2103      	movs	r1, #3
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	401a      	ands	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	3301      	adds	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	f47f af3d 	bne.w	8004414 <HAL_GPIO_DeInit+0x10>
  }
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40010000 	.word	0x40010000
 80045ac:	48000400 	.word	0x48000400
 80045b0:	48000800 	.word	0x48000800
 80045b4:	48000c00 	.word	0x48000c00
 80045b8:	48001000 	.word	0x48001000
 80045bc:	58000800 	.word	0x58000800

080045c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	807b      	strh	r3, [r7, #2]
 80045cc:	4613      	mov	r3, r2
 80045ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d0:	787b      	ldrb	r3, [r7, #1]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045dc:	e002      	b.n	80045e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045fa:	4b08      	ldr	r3, [pc, #32]	@ (800461c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004606:	4a05      	ldr	r2, [pc, #20]	@ (800461c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f806 	bl	8004620 <HAL_GPIO_EXTI_Callback>
  }
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	58000800 	.word	0x58000800

08004620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e08d      	b.n	8004764 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f8b4 	bl	80047ca <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2224      	movs	r2, #36	@ 0x24
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004686:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004696:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d107      	bne.n	80046b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	e006      	b.n	80046be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80046bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d108      	bne.n	80046d8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	e007      	b.n	80046e8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80046f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800470a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69d9      	ldr	r1, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1a      	ldr	r2, [r3, #32]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e021      	b.n	80047c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2224      	movs	r2, #36	@ 0x24
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f821 	bl	80047de <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b20      	cmp	r3, #32
 8004818:	f040 80f9 	bne.w	8004a0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_I2C_Mem_Write+0x34>
 8004822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800482e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0ed      	b.n	8004a10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_I2C_Mem_Write+0x4e>
 800483e:	2302      	movs	r3, #2
 8004840:	e0e6      	b.n	8004a10 <HAL_I2C_Mem_Write+0x21c>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800484a:	f7ff fb4f 	bl	8003eec <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2319      	movs	r3, #25
 8004856:	2201      	movs	r2, #1
 8004858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fadd 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0d1      	b.n	8004a10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2221      	movs	r2, #33	@ 0x21
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2240      	movs	r2, #64	@ 0x40
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800488c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004894:	88f8      	ldrh	r0, [r7, #6]
 8004896:	893a      	ldrh	r2, [r7, #8]
 8004898:	8979      	ldrh	r1, [r7, #10]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	4603      	mov	r3, r0
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f9ed 	bl	8004c84 <I2C_RequestMemoryWrite>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0a9      	b.n	8004a10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2bff      	cmp	r3, #255	@ 0xff
 80048c4:	d90e      	bls.n	80048e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22ff      	movs	r2, #255	@ 0xff
 80048ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	8979      	ldrh	r1, [r7, #10]
 80048d4:	2300      	movs	r3, #0
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fc61 	bl	80051a4 <I2C_TransferConfig>
 80048e2:	e00f      	b.n	8004904 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	8979      	ldrh	r1, [r7, #10]
 80048f6:	2300      	movs	r3, #0
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fc50 	bl	80051a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fae0 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e07b      	b.n	8004a10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d034      	beq.n	80049bc <HAL_I2C_Mem_Write+0x1c8>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d130      	bne.n	80049bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004960:	2200      	movs	r2, #0
 8004962:	2180      	movs	r1, #128	@ 0x80
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fa59 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e04d      	b.n	8004a10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	2bff      	cmp	r3, #255	@ 0xff
 800497c:	d90e      	bls.n	800499c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	22ff      	movs	r2, #255	@ 0xff
 8004982:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004988:	b2da      	uxtb	r2, r3
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fc05 	bl	80051a4 <I2C_TransferConfig>
 800499a:	e00f      	b.n	80049bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	8979      	ldrh	r1, [r7, #10]
 80049ae:	2300      	movs	r3, #0
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fbf4 	bl	80051a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d19e      	bne.n	8004904 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fac6 	bl	8004f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e01a      	b.n	8004a10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2220      	movs	r2, #32
 80049e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <HAL_I2C_Mem_Write+0x224>)
 80049ee:	400b      	ands	r3, r1
 80049f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	fe00e800 	.word	0xfe00e800

08004a1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	817b      	strh	r3, [r7, #10]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	813b      	strh	r3, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	f040 80fd 	bne.w	8004c3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_I2C_Mem_Read+0x34>
 8004a4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0f1      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_I2C_Mem_Read+0x4e>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e0ea      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a72:	f7ff fa3b 	bl	8003eec <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2319      	movs	r3, #25
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f9c9 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0d5      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2222      	movs	r2, #34	@ 0x22
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2240      	movs	r2, #64	@ 0x40
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a3a      	ldr	r2, [r7, #32]
 8004aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004abc:	88f8      	ldrh	r0, [r7, #6]
 8004abe:	893a      	ldrh	r2, [r7, #8]
 8004ac0:	8979      	ldrh	r1, [r7, #10]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	4603      	mov	r3, r0
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f92d 	bl	8004d2c <I2C_RequestMemoryRead>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0ad      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2bff      	cmp	r3, #255	@ 0xff
 8004aec:	d90e      	bls.n	8004b0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22ff      	movs	r2, #255	@ 0xff
 8004af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	8979      	ldrh	r1, [r7, #10]
 8004afc:	4b52      	ldr	r3, [pc, #328]	@ (8004c48 <HAL_I2C_Mem_Read+0x22c>)
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fb4d 	bl	80051a4 <I2C_TransferConfig>
 8004b0a:	e00f      	b.n	8004b2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	8979      	ldrh	r1, [r7, #10]
 8004b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c48 <HAL_I2C_Mem_Read+0x22c>)
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fb3c 	bl	80051a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b32:	2200      	movs	r2, #0
 8004b34:	2104      	movs	r1, #4
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f970 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e07c      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d034      	beq.n	8004bec <HAL_I2C_Mem_Read+0x1d0>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d130      	bne.n	8004bec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	@ 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f941 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e04d      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2bff      	cmp	r3, #255	@ 0xff
 8004bac:	d90e      	bls.n	8004bcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	22ff      	movs	r2, #255	@ 0xff
 8004bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	8979      	ldrh	r1, [r7, #10]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 faed 	bl	80051a4 <I2C_TransferConfig>
 8004bca:	e00f      	b.n	8004bec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	8979      	ldrh	r1, [r7, #10]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fadc 	bl	80051a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d19a      	bne.n	8004b2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f9ae 	bl	8004f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e01a      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_I2C_Mem_Read+0x230>)
 8004c1e:	400b      	ands	r3, r1
 8004c20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	80002400 	.word	0x80002400
 8004c4c:	fe00e800 	.word	0xfe00e800

08004c50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c5e:	b2db      	uxtb	r3, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	461a      	mov	r2, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	817b      	strh	r3, [r7, #10]
 8004c96:	460b      	mov	r3, r1
 8004c98:	813b      	strh	r3, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	8979      	ldrh	r1, [r7, #10]
 8004ca4:	4b20      	ldr	r3, [pc, #128]	@ (8004d28 <I2C_RequestMemoryWrite+0xa4>)
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fa79 	bl	80051a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	69b9      	ldr	r1, [r7, #24]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f909 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e02c      	b.n	8004d20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ccc:	893b      	ldrh	r3, [r7, #8]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cd6:	e015      	b.n	8004d04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cd8:	893b      	ldrh	r3, [r7, #8]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	69b9      	ldr	r1, [r7, #24]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f8ef 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e012      	b.n	8004d20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cfa:	893b      	ldrh	r3, [r7, #8]
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2180      	movs	r1, #128	@ 0x80
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f884 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	80002000 	.word	0x80002000

08004d2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	817b      	strh	r3, [r7, #10]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	813b      	strh	r3, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	8979      	ldrh	r1, [r7, #10]
 8004d4c:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <I2C_RequestMemoryRead+0xa4>)
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2300      	movs	r3, #0
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fa26 	bl	80051a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	69b9      	ldr	r1, [r7, #24]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f8b6 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e02c      	b.n	8004dc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d105      	bne.n	8004d7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d72:	893b      	ldrh	r3, [r7, #8]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d7c:	e015      	b.n	8004daa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d7e:	893b      	ldrh	r3, [r7, #8]
 8004d80:	0a1b      	lsrs	r3, r3, #8
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	69b9      	ldr	r1, [r7, #24]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f89c 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e012      	b.n	8004dc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004da0:	893b      	ldrh	r3, [r7, #8]
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2140      	movs	r1, #64	@ 0x40
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f831 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	80002000 	.word	0x80002000

08004dd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d103      	bne.n	8004df2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d007      	beq.n	8004e10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	619a      	str	r2, [r3, #24]
  }
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e2c:	e03b      	b.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f8d6 	bl	8004fe4 <I2C_IsErrorOccurred>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e041      	b.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d02d      	beq.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7ff f84f 	bl	8003eec <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d122      	bne.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d113      	bne.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e00f      	b.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d0b4      	beq.n	8004e2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eda:	e033      	b.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f87f 	bl	8004fe4 <I2C_IsErrorOccurred>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e031      	b.n	8004f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d025      	beq.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef8:	f7fe fff8 	bl	8003eec <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d302      	bcc.n	8004f0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d11a      	bne.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d013      	beq.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e007      	b.n	8004f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d1c4      	bne.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f68:	e02f      	b.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f838 	bl	8004fe4 <I2C_IsErrorOccurred>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e02d      	b.n	8004fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7e:	f7fe ffb5 	bl	8003eec <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11a      	bne.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d013      	beq.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e007      	b.n	8004fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d1c8      	bne.n	8004f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	@ 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d068      	beq.n	80050e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2210      	movs	r2, #16
 8005016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005018:	e049      	b.n	80050ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d045      	beq.n	80050ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005022:	f7fe ff63 	bl	8003eec <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <I2C_IsErrorOccurred+0x54>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d13a      	bne.n	80050ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800504a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800505a:	d121      	bne.n	80050a0 <I2C_IsErrorOccurred+0xbc>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005062:	d01d      	beq.n	80050a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b20      	cmp	r3, #32
 8005068:	d01a      	beq.n	80050a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800507a:	f7fe ff37 	bl	8003eec <HAL_GetTick>
 800507e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005080:	e00e      	b.n	80050a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005082:	f7fe ff33 	bl	8003eec <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b19      	cmp	r3, #25
 800508e:	d907      	bls.n	80050a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	f043 0320 	orr.w	r3, r3, #32
 8005096:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800509e:	e006      	b.n	80050ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d1e9      	bne.n	8005082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d003      	beq.n	80050c4 <I2C_IsErrorOccurred+0xe0>
 80050bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0aa      	beq.n	800501a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2220      	movs	r2, #32
 80050d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	f043 0304 	orr.w	r3, r3, #4
 80050da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f043 0308 	orr.w	r3, r3, #8
 800511c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	f043 0302 	orr.w	r3, r3, #2
 800513e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01c      	beq.n	8005192 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff fe3b 	bl	8004dd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b0d      	ldr	r3, [pc, #52]	@ (80051a0 <I2C_IsErrorOccurred+0x1bc>)
 800516a:	400b      	ands	r3, r1
 800516c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005196:	4618      	mov	r0, r3
 8005198:	3728      	adds	r7, #40	@ 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	fe00e800 	.word	0xfe00e800

080051a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	817b      	strh	r3, [r7, #10]
 80051b2:	4613      	mov	r3, r2
 80051b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051b6:	897b      	ldrh	r3, [r7, #10]
 80051b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051bc:	7a7b      	ldrb	r3, [r7, #9]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	0d5b      	lsrs	r3, r3, #21
 80051de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80051e2:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <I2C_TransferConfig+0x60>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	43db      	mvns	r3, r3
 80051e8:	ea02 0103 	and.w	r1, r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	03ff63ff 	.word	0x03ff63ff

08005208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b20      	cmp	r3, #32
 800521c:	d138      	bne.n	8005290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005228:	2302      	movs	r3, #2
 800522a:	e032      	b.n	8005292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2224      	movs	r2, #36	@ 0x24
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800525a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6819      	ldr	r1, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d139      	bne.n	8005328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052be:	2302      	movs	r3, #2
 80052c0:	e033      	b.n	800532a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2224      	movs	r2, #36	@ 0x24
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80052f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0c0      	b.n	80054ca <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fc faa9 	bl	80018b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2203      	movs	r2, #3
 8005366:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f003 f968 	bl	8008644 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005374:	2300      	movs	r3, #0
 8005376:	73fb      	strb	r3, [r7, #15]
 8005378:	e03e      	b.n	80053f8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800537a:	7bfa      	ldrb	r2, [r7, #15]
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	3311      	adds	r3, #17
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800538e:	7bfa      	ldrb	r2, [r7, #15]
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	440b      	add	r3, r1
 800539c:	3310      	adds	r3, #16
 800539e:	7bfa      	ldrb	r2, [r7, #15]
 80053a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053a2:	7bfa      	ldrb	r2, [r7, #15]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	440b      	add	r3, r1
 80053b0:	3313      	adds	r3, #19
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	3320      	adds	r3, #32
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053ca:	7bfa      	ldrb	r2, [r7, #15]
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	440b      	add	r3, r1
 80053d8:	3324      	adds	r3, #36	@ 0x24
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	440b      	add	r3, r1
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	3301      	adds	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	791b      	ldrb	r3, [r3, #4]
 80053fc:	7bfa      	ldrb	r2, [r7, #15]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d3bb      	bcc.n	800537a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005402:	2300      	movs	r3, #0
 8005404:	73fb      	strb	r3, [r7, #15]
 8005406:	e044      	b.n	8005492 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005408:	7bfa      	ldrb	r2, [r7, #15]
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	440b      	add	r3, r1
 8005416:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800541e:	7bfa      	ldrb	r2, [r7, #15]
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	440b      	add	r3, r1
 800542c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005434:	7bfa      	ldrb	r2, [r7, #15]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	440b      	add	r3, r1
 8005442:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800544a:	7bfa      	ldrb	r2, [r7, #15]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	440b      	add	r3, r1
 8005458:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005460:	7bfa      	ldrb	r2, [r7, #15]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	440b      	add	r3, r1
 800546e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005476:	7bfa      	ldrb	r2, [r7, #15]
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	440b      	add	r3, r1
 8005484:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	3301      	adds	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	791b      	ldrb	r3, [r3, #4]
 8005496:	7bfa      	ldrb	r2, [r7, #15]
 8005498:	429a      	cmp	r2, r3
 800549a:	d3b5      	bcc.n	8005408 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80054a8:	f003 f8e7 	bl	800867a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	7a9b      	ldrb	r3, [r3, #10]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d102      	bne.n	80054c8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f805 	bl	80054d2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800550a:	b29b      	uxth	r3, r3
 800550c:	f043 0302 	orr.w	r3, r3, #2
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800552c:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a04      	ldr	r2, [pc, #16]	@ (8005544 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005536:	6013      	str	r3, [r2, #0]
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	58000400 	.word	0x58000400

08005548 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <HAL_PWREx_GetVoltageRange+0x18>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005554:	4618      	mov	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	58000400 	.word	0x58000400

08005564 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005576:	d101      	bne.n	800557c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <LL_RCC_HSE_Enable>:
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559a:	6013      	str	r3, [r2, #0]
}
 800559c:	bf00      	nop
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <LL_RCC_HSE_Disable>:
{
 80055a6:	b480      	push	{r7}
 80055a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80055aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
}
 80055ba:	bf00      	nop
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <LL_RCC_HSE_IsReady>:
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80055c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d6:	d101      	bne.n	80055dc <LL_RCC_HSE_IsReady+0x18>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <LL_RCC_HSE_IsReady+0x1a>
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <LL_RCC_HSI_Enable>:
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055fa:	6013      	str	r3, [r2, #0]
}
 80055fc:	bf00      	nop
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <LL_RCC_HSI_Disable>:
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005618:	6013      	str	r3, [r2, #0]
}
 800561a:	bf00      	nop
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LL_RCC_HSI_IsReady>:
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005636:	d101      	bne.n	800563c <LL_RCC_HSI_IsReady+0x18>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <LL_RCC_HSI_IsReady+0x1a>
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005662:	4313      	orrs	r3, r2
 8005664:	604b      	str	r3, [r1, #4]
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <LL_RCC_HSI48_Enable>:
{
 8005672:	b480      	push	{r7}
 8005674:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800567a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800567e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800568a:	bf00      	nop
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <LL_RCC_HSI48_Disable>:
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800569c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80056ac:	bf00      	nop
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <LL_RCC_HSI48_IsReady>:
{
 80056b6:	b480      	push	{r7}
 80056b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d101      	bne.n	80056ce <LL_RCC_HSI48_IsReady+0x18>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <LL_RCC_HSI48_IsReady+0x1a>
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <LL_RCC_LSE_Enable>:
{
 80056da:	b480      	push	{r7}
 80056dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <LL_RCC_LSE_Disable>:
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005708:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <LL_RCC_LSE_EnableBypass>:
{
 800571e:	b480      	push	{r7}
 8005720:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800572e:	f043 0304 	orr.w	r3, r3, #4
 8005732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <LL_RCC_LSE_DisableBypass>:
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005750:	f023 0304 	bic.w	r3, r3, #4
 8005754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005758:	bf00      	nop
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	d101      	bne.n	800577a <LL_RCC_LSE_IsReady+0x18>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <LL_RCC_LSE_IsReady+0x1a>
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8005786:	b480      	push	{r7}
 8005788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800578a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800578e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005792:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800579e:	bf00      	nop
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80057ca:	b480      	push	{r7}
 80057cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80057ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d101      	bne.n	80057e2 <LL_RCC_LSI1_IsReady+0x18>
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <LL_RCC_LSI1_IsReady+0x1a>
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80057ee:	b480      	push	{r7}
 80057f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80057f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057fe:	f043 0304 	orr.w	r3, r3, #4
 8005802:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800581c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8005832:	b480      	push	{r7}
 8005834:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b08      	cmp	r3, #8
 8005844:	d101      	bne.n	800584a <LL_RCC_LSI2_IsReady+0x18>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <LL_RCC_LSI2_IsReady+0x1a>
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800585e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005866:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	6013      	str	r3, [r2, #0]
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80058a2:	b480      	push	{r7}
 80058a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	6013      	str	r3, [r2, #0]
}
 80058b6:	bf00      	nop
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80058c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d101      	bne.n	80058d6 <LL_RCC_MSI_IsReady+0x16>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <LL_RCC_MSI_IsReady+0x18>
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800591a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005920:	d901      	bls.n	8005926 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8005922:	23b0      	movs	r3, #176	@ 0xb0
 8005924:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8005926:	687b      	ldr	r3, [r7, #4]
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800594e:	4313      	orrs	r3, r2
 8005950:	604b      	str	r3, [r1, #4]
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f023 0203 	bic.w	r2, r3, #3
 8005970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 030c 	and.w	r3, r3, #12
}
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80059a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80059d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80059fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005a02:	f023 020f 	bic.w	r2, r3, #15
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	608b      	str	r3, [r1, #8]
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005aee:	b480      	push	{r7}
 8005af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005afc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b00:	6013      	str	r3, [r2, #0]
}
 8005b02:	bf00      	nop
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b3c:	d101      	bne.n	8005b42 <LL_RCC_PLL_IsReady+0x18>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <LL_RCC_PLL_IsReady+0x1a>
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	0a1b      	lsrs	r3, r3, #8
 8005b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc2:	d101      	bne.n	8005bc8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005be8:	d101      	bne.n	8005bee <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c0e:	d101      	bne.n	8005c14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c32:	d101      	bne.n	8005c38 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c56:	d101      	bne.n	8005c5c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c68:	b590      	push	{r4, r7, lr}
 8005c6a:	b08d      	sub	sp, #52	@ 0x34
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e363      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 808d 	beq.w	8005da2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c88:	f7ff fe7d 	bl	8005986 <LL_RCC_GetSysClkSource>
 8005c8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c8e:	f7ff ff83 	bl	8005b98 <LL_RCC_PLL_GetMainSource>
 8005c92:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x3e>
 8005c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9c:	2b0c      	cmp	r3, #12
 8005c9e:	d147      	bne.n	8005d30 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d144      	bne.n	8005d30 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e347      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005cb6:	f7ff fe28 	bl	800590a <LL_RCC_MSI_GetRange>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	d914      	bls.n	8005cea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fd61 	bl	800678c <RCC_SetFlashLatencyFromMSIRange>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e336      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fe02 	bl	80058e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fe26 	bl	8005934 <LL_RCC_MSI_SetCalibTrimming>
 8005ce8:	e013      	b.n	8005d12 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fdf7 	bl	80058e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fe1b 	bl	8005934 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fd42 	bl	800678c <RCC_SetFlashLatencyFromMSIRange>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e317      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d12:	f000 fcc9 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4aa4      	ldr	r2, [pc, #656]	@ (8005fac <HAL_RCC_OscConfig+0x344>)
 8005d1a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d1c:	4ba4      	ldr	r3, [pc, #656]	@ (8005fb0 <HAL_RCC_OscConfig+0x348>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fb fe37 	bl	8001994 <HAL_InitTick>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d039      	beq.n	8005da0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e308      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01e      	beq.n	8005d76 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d38:	f7ff fda4 	bl	8005884 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d3c:	f7fe f8d6 	bl	8003eec <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d44:	f7fe f8d2 	bl	8003eec <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e2f5      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d56:	f7ff fdb3 	bl	80058c0 <LL_RCC_MSI_IsReady>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0f1      	beq.n	8005d44 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fdbc 	bl	80058e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fde0 	bl	8005934 <LL_RCC_MSI_SetCalibTrimming>
 8005d74:	e015      	b.n	8005da2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d76:	f7ff fd94 	bl	80058a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d7a:	f7fe f8b7 	bl	8003eec <HAL_GetTick>
 8005d7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d82:	f7fe f8b3 	bl	8003eec <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e2d6      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d94:	f7ff fd94 	bl	80058c0 <LL_RCC_MSI_IsReady>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f1      	bne.n	8005d82 <HAL_RCC_OscConfig+0x11a>
 8005d9e:	e000      	b.n	8005da2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005da0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d047      	beq.n	8005e3e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dae:	f7ff fdea 	bl	8005986 <LL_RCC_GetSysClkSource>
 8005db2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005db4:	f7ff fef0 	bl	8005b98 <LL_RCC_PLL_GetMainSource>
 8005db8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d005      	beq.n	8005dcc <HAL_RCC_OscConfig+0x164>
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	2b0c      	cmp	r3, #12
 8005dc4:	d108      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d105      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d134      	bne.n	8005e3e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e2b4      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de0:	d102      	bne.n	8005de8 <HAL_RCC_OscConfig+0x180>
 8005de2:	f7ff fbd1 	bl	8005588 <LL_RCC_HSE_Enable>
 8005de6:	e001      	b.n	8005dec <HAL_RCC_OscConfig+0x184>
 8005de8:	f7ff fbdd 	bl	80055a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d012      	beq.n	8005e1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fe f87a 	bl	8003eec <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dfc:	f7fe f876 	bl	8003eec <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b64      	cmp	r3, #100	@ 0x64
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e299      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e0e:	f7ff fbd9 	bl	80055c4 <LL_RCC_HSE_IsReady>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0f1      	beq.n	8005dfc <HAL_RCC_OscConfig+0x194>
 8005e18:	e011      	b.n	8005e3e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1a:	f7fe f867 	bl	8003eec <HAL_GetTick>
 8005e1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e22:	f7fe f863 	bl	8003eec <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b64      	cmp	r3, #100	@ 0x64
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e286      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e34:	f7ff fbc6 	bl	80055c4 <LL_RCC_HSE_IsReady>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f1      	bne.n	8005e22 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d04c      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4a:	f7ff fd9c 	bl	8005986 <LL_RCC_GetSysClkSource>
 8005e4e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e50:	f7ff fea2 	bl	8005b98 <LL_RCC_PLL_GetMainSource>
 8005e54:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCC_OscConfig+0x200>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	d10e      	bne.n	8005e80 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e266      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff fbe5 	bl	8005648 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e7e:	e031      	b.n	8005ee4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d019      	beq.n	8005ebc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e88:	f7ff fbae 	bl	80055e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8c:	f7fe f82e 	bl	8003eec <HAL_GetTick>
 8005e90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e94:	f7fe f82a 	bl	8003eec <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e24d      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005ea6:	f7ff fbbd 	bl	8005624 <LL_RCC_HSI_IsReady>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f1      	beq.n	8005e94 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fbc7 	bl	8005648 <LL_RCC_HSI_SetCalibTrimming>
 8005eba:	e013      	b.n	8005ee4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ebc:	f7ff fba3 	bl	8005606 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fe f814 	bl	8003eec <HAL_GetTick>
 8005ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec8:	f7fe f810 	bl	8003eec <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e233      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005eda:	f7ff fba3 	bl	8005624 <LL_RCC_HSI_IsReady>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f1      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80a3 	beq.w	8006044 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d076      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d046      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005f12:	f7ff fc5a 	bl	80057ca <LL_RCC_LSI1_IsReady>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d113      	bne.n	8005f44 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005f1c:	f7ff fc33 	bl	8005786 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f20:	f7fd ffe4 	bl	8003eec <HAL_GetTick>
 8005f24:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f28:	f7fd ffe0 	bl	8003eec <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e203      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f3a:	f7ff fc46 	bl	80057ca <LL_RCC_LSI1_IsReady>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f1      	beq.n	8005f28 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005f44:	f7ff fc53 	bl	80057ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fd ffd0 	bl	8003eec <HAL_GetTick>
 8005f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f50:	f7fd ffcc 	bl	8003eec <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e1ef      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f62:	f7ff fc66 	bl	8005832 <LL_RCC_LSI2_IsReady>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f1      	beq.n	8005f50 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fc70 	bl	8005856 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005f76:	f7ff fc17 	bl	80057a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fd ffb7 	bl	8003eec <HAL_GetTick>
 8005f7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f82:	f7fd ffb3 	bl	8003eec <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e1d6      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f94:	f7ff fc19 	bl	80057ca <LL_RCC_LSI1_IsReady>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f1      	bne.n	8005f82 <HAL_RCC_OscConfig+0x31a>
 8005f9e:	e051      	b.n	8006044 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005fa0:	f7ff fbf1 	bl	8005786 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fd ffa2 	bl	8003eec <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005faa:	e00c      	b.n	8005fc6 <HAL_RCC_OscConfig+0x35e>
 8005fac:	20000008 	.word	0x20000008
 8005fb0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005fb4:	f7fd ff9a 	bl	8003eec <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e1bd      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005fc6:	f7ff fc00 	bl	80057ca <LL_RCC_LSI1_IsReady>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0f1      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005fd0:	f7ff fc1e 	bl	8005810 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005fd6:	f7fd ff89 	bl	8003eec <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e1ac      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fe8:	f7ff fc23 	bl	8005832 <LL_RCC_LSI2_IsReady>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f1      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x36e>
 8005ff2:	e027      	b.n	8006044 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005ff4:	f7ff fc0c 	bl	8005810 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff8:	f7fd ff78 	bl	8003eec <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006000:	f7fd ff74 	bl	8003eec <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b03      	cmp	r3, #3
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e197      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006012:	f7ff fc0e 	bl	8005832 <LL_RCC_LSI2_IsReady>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f1      	bne.n	8006000 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800601c:	f7ff fbc4 	bl	80057a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006020:	f7fd ff64 	bl	8003eec <HAL_GetTick>
 8006024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006028:	f7fd ff60 	bl	8003eec <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e183      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800603a:	f7ff fbc6 	bl	80057ca <LL_RCC_LSI1_IsReady>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f1      	bne.n	8006028 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d05b      	beq.n	8006108 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006050:	4ba7      	ldr	r3, [pc, #668]	@ (80062f0 <HAL_RCC_OscConfig+0x688>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d114      	bne.n	8006086 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800605c:	f7ff fa64 	bl	8005528 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006060:	f7fd ff44 	bl	8003eec <HAL_GetTick>
 8006064:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006068:	f7fd ff40 	bl	8003eec <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e163      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800607a:	4b9d      	ldr	r3, [pc, #628]	@ (80062f0 <HAL_RCC_OscConfig+0x688>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d102      	bne.n	8006094 <HAL_RCC_OscConfig+0x42c>
 800608e:	f7ff fb24 	bl	80056da <LL_RCC_LSE_Enable>
 8006092:	e00c      	b.n	80060ae <HAL_RCC_OscConfig+0x446>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b05      	cmp	r3, #5
 800609a:	d104      	bne.n	80060a6 <HAL_RCC_OscConfig+0x43e>
 800609c:	f7ff fb3f 	bl	800571e <LL_RCC_LSE_EnableBypass>
 80060a0:	f7ff fb1b 	bl	80056da <LL_RCC_LSE_Enable>
 80060a4:	e003      	b.n	80060ae <HAL_RCC_OscConfig+0x446>
 80060a6:	f7ff fb29 	bl	80056fc <LL_RCC_LSE_Disable>
 80060aa:	f7ff fb49 	bl	8005740 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d014      	beq.n	80060e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b6:	f7fd ff19 	bl	8003eec <HAL_GetTick>
 80060ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80060bc:	e00a      	b.n	80060d4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fd ff15 	bl	8003eec <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e136      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060d4:	f7ff fb45 	bl	8005762 <LL_RCC_LSE_IsReady>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0ef      	beq.n	80060be <HAL_RCC_OscConfig+0x456>
 80060de:	e013      	b.n	8006108 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e0:	f7fd ff04 	bl	8003eec <HAL_GetTick>
 80060e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80060e6:	e00a      	b.n	80060fe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e8:	f7fd ff00 	bl	8003eec <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e121      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80060fe:	f7ff fb30 	bl	8005762 <LL_RCC_LSE_IsReady>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1ef      	bne.n	80060e8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d02c      	beq.n	800616e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	d014      	beq.n	8006146 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800611c:	f7ff faa9 	bl	8005672 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7fd fee4 	bl	8003eec <HAL_GetTick>
 8006124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006128:	f7fd fee0 	bl	8003eec <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e103      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800613a:	f7ff fabc 	bl	80056b6 <LL_RCC_HSI48_IsReady>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0f1      	beq.n	8006128 <HAL_RCC_OscConfig+0x4c0>
 8006144:	e013      	b.n	800616e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006146:	f7ff faa5 	bl	8005694 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614a:	f7fd fecf 	bl	8003eec <HAL_GetTick>
 800614e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006152:	f7fd fecb 	bl	8003eec <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e0ee      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006164:	f7ff faa7 	bl	80056b6 <LL_RCC_HSI48_IsReady>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f1      	bne.n	8006152 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80e4 	beq.w	8006340 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006178:	f7ff fc05 	bl	8005986 <LL_RCC_GetSysClkSource>
 800617c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800617e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	2b02      	cmp	r3, #2
 800618c:	f040 80b4 	bne.w	80062f8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0203 	and.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619a:	429a      	cmp	r2, r3
 800619c:	d123      	bne.n	80061e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d11c      	bne.n	80061e6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	0a1b      	lsrs	r3, r3, #8
 80061b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d114      	bne.n	80061e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d10d      	bne.n	80061e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d106      	bne.n	80061e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d05d      	beq.n	80062a2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	d058      	beq.n	800629e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e0a1      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061fe:	f7ff fc85 	bl	8005b0c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006202:	f7fd fe73 	bl	8003eec <HAL_GetTick>
 8006206:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800620a:	f7fd fe6f 	bl	8003eec <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e092      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800621c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1ef      	bne.n	800620a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800622a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <HAL_RCC_OscConfig+0x68c>)
 8006232:	4013      	ands	r3, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800623c:	4311      	orrs	r1, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006242:	0212      	lsls	r2, r2, #8
 8006244:	4311      	orrs	r1, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800624a:	4311      	orrs	r1, r2
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006250:	4311      	orrs	r1, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006256:	430a      	orrs	r2, r1
 8006258:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800625c:	4313      	orrs	r3, r2
 800625e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006260:	f7ff fc45 	bl	8005aee <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800626e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006272:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006274:	f7fd fe3a 	bl	8003eec <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800627c:	f7fd fe36 	bl	8003eec <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e059      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0ef      	beq.n	800627c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800629c:	e050      	b.n	8006340 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e04f      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d147      	bne.n	8006340 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80062b0:	f7ff fc1d 	bl	8005aee <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062c4:	f7fd fe12 	bl	8003eec <HAL_GetTick>
 80062c8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062cc:	f7fd fe0e 	bl	8003eec <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e031      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0ef      	beq.n	80062cc <HAL_RCC_OscConfig+0x664>
 80062ec:	e028      	b.n	8006340 <HAL_RCC_OscConfig+0x6d8>
 80062ee:	bf00      	nop
 80062f0:	58000400 	.word	0x58000400
 80062f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	2b0c      	cmp	r3, #12
 80062fc:	d01e      	beq.n	800633c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fe:	f7ff fc05 	bl	8005b0c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006302:	f7fd fdf3 	bl	8003eec <HAL_GetTick>
 8006306:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800630a:	f7fd fdef 	bl	8003eec <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e012      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800631c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1ef      	bne.n	800630a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006334:	4b05      	ldr	r3, [pc, #20]	@ (800634c <HAL_RCC_OscConfig+0x6e4>)
 8006336:	4013      	ands	r3, r2
 8006338:	60cb      	str	r3, [r1, #12]
 800633a:	e001      	b.n	8006340 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3734      	adds	r7, #52	@ 0x34
 8006346:	46bd      	mov	sp, r7
 8006348:	bd90      	pop	{r4, r7, pc}
 800634a:	bf00      	nop
 800634c:	eefefffc 	.word	0xeefefffc

08006350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e12d      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006364:	4b98      	ldr	r3, [pc, #608]	@ (80065c8 <HAL_RCC_ClockConfig+0x278>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d91b      	bls.n	80063aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006372:	4b95      	ldr	r3, [pc, #596]	@ (80065c8 <HAL_RCC_ClockConfig+0x278>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f023 0207 	bic.w	r2, r3, #7
 800637a:	4993      	ldr	r1, [pc, #588]	@ (80065c8 <HAL_RCC_ClockConfig+0x278>)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006382:	f7fd fdb3 	bl	8003eec <HAL_GetTick>
 8006386:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006388:	e008      	b.n	800639c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800638a:	f7fd fdaf 	bl	8003eec <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e111      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800639c:	4b8a      	ldr	r3, [pc, #552]	@ (80065c8 <HAL_RCC_ClockConfig+0x278>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d1ef      	bne.n	800638a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff faef 	bl	800599e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063c0:	f7fd fd94 	bl	8003eec <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063c8:	f7fd fd90 	bl	8003eec <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e0f2      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063da:	f7ff fbe9 	bl	8005bb0 <LL_RCC_IsActiveFlag_HPRE>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f1      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d016      	beq.n	800641e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff fae6 	bl	80059c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063fa:	f7fd fd77 	bl	8003eec <HAL_GetTick>
 80063fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006400:	e008      	b.n	8006414 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006402:	f7fd fd73 	bl	8003eec <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e0d5      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006414:	f7ff fbde 	bl	8005bd4 <LL_RCC_IsActiveFlag_C2HPRE>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f1      	beq.n	8006402 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff fadf 	bl	80059f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006434:	f7fd fd5a 	bl	8003eec <HAL_GetTick>
 8006438:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800643c:	f7fd fd56 	bl	8003eec <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e0b8      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800644e:	f7ff fbd4 	bl	8005bfa <LL_RCC_IsActiveFlag_SHDHPRE>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0f1      	beq.n	800643c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d016      	beq.n	8006492 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff fad9 	bl	8005a20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800646e:	f7fd fd3d 	bl	8003eec <HAL_GetTick>
 8006472:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006474:	e008      	b.n	8006488 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006476:	f7fd fd39 	bl	8003eec <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e09b      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006488:	f7ff fbca 	bl	8005c20 <LL_RCC_IsActiveFlag_PPRE1>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f1      	beq.n	8006476 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d017      	beq.n	80064ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff facf 	bl	8005a48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064aa:	f7fd fd1f 	bl	8003eec <HAL_GetTick>
 80064ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064b2:	f7fd fd1b 	bl	8003eec <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e07d      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064c4:	f7ff fbbe 	bl	8005c44 <LL_RCC_IsActiveFlag_PPRE2>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f1      	beq.n	80064b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d043      	beq.n	8006562 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d106      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80064e2:	f7ff f86f 	bl	80055c4 <LL_RCC_HSE_IsReady>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11e      	bne.n	800652a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e067      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d106      	bne.n	8006506 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80064f8:	f7ff fb17 	bl	8005b2a <LL_RCC_PLL_IsReady>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d113      	bne.n	800652a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e05c      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800650e:	f7ff f9d7 	bl	80058c0 <LL_RCC_MSI_IsReady>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d108      	bne.n	800652a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e051      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800651c:	f7ff f882 	bl	8005624 <LL_RCC_HSI_IsReady>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e04a      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fa15 	bl	800595e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006534:	f7fd fcda 	bl	8003eec <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653a:	e00a      	b.n	8006552 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800653c:	f7fd fcd6 	bl	8003eec <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e036      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006552:	f7ff fa18 	bl	8005986 <LL_RCC_GetSysClkSource>
 8006556:	4602      	mov	r2, r0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	429a      	cmp	r2, r3
 8006560:	d1ec      	bne.n	800653c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006562:	4b19      	ldr	r3, [pc, #100]	@ (80065c8 <HAL_RCC_ClockConfig+0x278>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d21b      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006570:	4b15      	ldr	r3, [pc, #84]	@ (80065c8 <HAL_RCC_ClockConfig+0x278>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f023 0207 	bic.w	r2, r3, #7
 8006578:	4913      	ldr	r1, [pc, #76]	@ (80065c8 <HAL_RCC_ClockConfig+0x278>)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	4313      	orrs	r3, r2
 800657e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006580:	f7fd fcb4 	bl	8003eec <HAL_GetTick>
 8006584:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006586:	e008      	b.n	800659a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006588:	f7fd fcb0 	bl	8003eec <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e012      	b.n	80065c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	4b0b      	ldr	r3, [pc, #44]	@ (80065c8 <HAL_RCC_ClockConfig+0x278>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1ef      	bne.n	8006588 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80065a8:	f000 f87e 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80065ac:	4603      	mov	r3, r0
 80065ae:	4a07      	ldr	r2, [pc, #28]	@ (80065cc <HAL_RCC_ClockConfig+0x27c>)
 80065b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80065b2:	f7fd fca7 	bl	8003f04 <HAL_GetTickPrio>
 80065b6:	4603      	mov	r3, r0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fb f9eb 	bl	8001994 <HAL_InitTick>
 80065be:	4603      	mov	r3, r0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	58004000 	.word	0x58004000
 80065cc:	20000008 	.word	0x20000008

080065d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d6:	f7ff f9d6 	bl	8005986 <LL_RCC_GetSysClkSource>
 80065da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80065e2:	f7ff f992 	bl	800590a <LL_RCC_MSI_GetRange>
 80065e6:	4603      	mov	r3, r0
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	4a2b      	ldr	r2, [pc, #172]	@ (800669c <HAL_RCC_GetSysClockFreq+0xcc>)
 80065f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	e04b      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d102      	bne.n	8006604 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065fe:	4b28      	ldr	r3, [pc, #160]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	e045      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b08      	cmp	r3, #8
 8006608:	d10a      	bne.n	8006620 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800660a:	f7fe ffab 	bl	8005564 <LL_RCC_HSE_IsEnabledDiv2>
 800660e:	4603      	mov	r3, r0
 8006610:	2b01      	cmp	r3, #1
 8006612:	d102      	bne.n	800661a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006614:	4b22      	ldr	r3, [pc, #136]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e03a      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800661a:	4b22      	ldr	r3, [pc, #136]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e037      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006620:	f7ff faba 	bl	8005b98 <LL_RCC_PLL_GetMainSource>
 8006624:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d003      	beq.n	8006634 <HAL_RCC_GetSysClockFreq+0x64>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b03      	cmp	r3, #3
 8006630:	d003      	beq.n	800663a <HAL_RCC_GetSysClockFreq+0x6a>
 8006632:	e00d      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006634:	4b1a      	ldr	r3, [pc, #104]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006636:	60bb      	str	r3, [r7, #8]
        break;
 8006638:	e015      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800663a:	f7fe ff93 	bl	8005564 <LL_RCC_HSE_IsEnabledDiv2>
 800663e:	4603      	mov	r3, r0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d102      	bne.n	800664a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006644:	4b16      	ldr	r3, [pc, #88]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006646:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006648:	e00d      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800664a:	4b16      	ldr	r3, [pc, #88]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800664c:	60bb      	str	r3, [r7, #8]
        break;
 800664e:	e00a      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006650:	f7ff f95b 	bl	800590a <LL_RCC_MSI_GetRange>
 8006654:	4603      	mov	r3, r0
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	4a0f      	ldr	r2, [pc, #60]	@ (800669c <HAL_RCC_GetSysClockFreq+0xcc>)
 800665e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006662:	60bb      	str	r3, [r7, #8]
        break;
 8006664:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006666:	f7ff fa72 	bl	8005b4e <LL_RCC_PLL_GetN>
 800666a:	4602      	mov	r2, r0
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	fb03 f402 	mul.w	r4, r3, r2
 8006672:	f7ff fa85 	bl	8005b80 <LL_RCC_PLL_GetDivider>
 8006676:	4603      	mov	r3, r0
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	3301      	adds	r3, #1
 800667c:	fbb4 f4f3 	udiv	r4, r4, r3
 8006680:	f7ff fa72 	bl	8005b68 <LL_RCC_PLL_GetR>
 8006684:	4603      	mov	r3, r0
 8006686:	0f5b      	lsrs	r3, r3, #29
 8006688:	3301      	adds	r3, #1
 800668a:	fbb4 f3f3 	udiv	r3, r4, r3
 800668e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bd90      	pop	{r4, r7, pc}
 800669a:	bf00      	nop
 800669c:	0800f7cc 	.word	0x0800f7cc
 80066a0:	00f42400 	.word	0x00f42400
 80066a4:	01e84800 	.word	0x01e84800

080066a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a8:	b598      	push	{r3, r4, r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066ac:	f7ff ff90 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 80066b0:	4604      	mov	r4, r0
 80066b2:	f7ff f9dd 	bl	8005a70 <LL_RCC_GetAHBPrescaler>
 80066b6:	4603      	mov	r3, r0
 80066b8:	091b      	lsrs	r3, r3, #4
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	4a03      	ldr	r2, [pc, #12]	@ (80066cc <HAL_RCC_GetHCLKFreq+0x24>)
 80066c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	bd98      	pop	{r3, r4, r7, pc}
 80066cc:	0800f76c 	.word	0x0800f76c

080066d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d0:	b598      	push	{r3, r4, r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80066d4:	f7ff ffe8 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066d8:	4604      	mov	r4, r0
 80066da:	f7ff f9f0 	bl	8005abe <LL_RCC_GetAPB1Prescaler>
 80066de:	4603      	mov	r3, r0
 80066e0:	0a1b      	lsrs	r3, r3, #8
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	4a04      	ldr	r2, [pc, #16]	@ (80066f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd98      	pop	{r3, r4, r7, pc}
 80066f8:	0800f7ac 	.word	0x0800f7ac

080066fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066fc:	b598      	push	{r3, r4, r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006700:	f7ff ffd2 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 8006704:	4604      	mov	r4, r0
 8006706:	f7ff f9e6 	bl	8005ad6 <LL_RCC_GetAPB2Prescaler>
 800670a:	4603      	mov	r3, r0
 800670c:	0adb      	lsrs	r3, r3, #11
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	4a04      	ldr	r2, [pc, #16]	@ (8006724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006718:	f003 031f 	and.w	r3, r3, #31
 800671c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd98      	pop	{r3, r4, r7, pc}
 8006724:	0800f7ac 	.word	0x0800f7ac

08006728 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	226f      	movs	r2, #111	@ 0x6f
 8006736:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006738:	f7ff f925 	bl	8005986 <LL_RCC_GetSysClkSource>
 800673c:	4602      	mov	r2, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006742:	f7ff f995 	bl	8005a70 <LL_RCC_GetAHBPrescaler>
 8006746:	4602      	mov	r2, r0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800674c:	f7ff f9b7 	bl	8005abe <LL_RCC_GetAPB1Prescaler>
 8006750:	4602      	mov	r2, r0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006756:	f7ff f9be 	bl	8005ad6 <LL_RCC_GetAPB2Prescaler>
 800675a:	4602      	mov	r2, r0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006760:	f7ff f992 	bl	8005a88 <LL_C2_RCC_GetAHBPrescaler>
 8006764:	4602      	mov	r2, r0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800676a:	f7ff f99a 	bl	8005aa2 <LL_RCC_GetAHB4Prescaler>
 800676e:	4602      	mov	r2, r0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006774:	4b04      	ldr	r3, [pc, #16]	@ (8006788 <HAL_RCC_GetClockConfig+0x60>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0207 	and.w	r2, r3, #7
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	601a      	str	r2, [r3, #0]
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	58004000 	.word	0x58004000

0800678c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2bb0      	cmp	r3, #176	@ 0xb0
 8006798:	d903      	bls.n	80067a2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800679a:	4b15      	ldr	r3, [pc, #84]	@ (80067f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	e007      	b.n	80067b2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	4a11      	ldr	r2, [pc, #68]	@ (80067f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80067ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80067b2:	f7ff f976 	bl	8005aa2 <LL_RCC_GetAHB4Prescaler>
 80067b6:	4603      	mov	r3, r0
 80067b8:	091b      	lsrs	r3, r3, #4
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	4a0d      	ldr	r2, [pc, #52]	@ (80067f4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80067c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4a0a      	ldr	r2, [pc, #40]	@ (80067f8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80067d0:	fba2 2303 	umull	r2, r3, r2, r3
 80067d4:	0c9c      	lsrs	r4, r3, #18
 80067d6:	f7fe feb7 	bl	8005548 <HAL_PWREx_GetVoltageRange>
 80067da:	4603      	mov	r3, r0
 80067dc:	4619      	mov	r1, r3
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 f80c 	bl	80067fc <RCC_SetFlashLatency>
 80067e4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd90      	pop	{r4, r7, pc}
 80067ee:	bf00      	nop
 80067f0:	0800f7cc 	.word	0x0800f7cc
 80067f4:	0800f76c 	.word	0x0800f76c
 80067f8:	431bde83 	.word	0x431bde83

080067fc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80067fc:	b590      	push	{r4, r7, lr}
 80067fe:	b093      	sub	sp, #76	@ 0x4c
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006806:	4b37      	ldr	r3, [pc, #220]	@ (80068e4 <RCC_SetFlashLatency+0xe8>)
 8006808:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800680c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800680e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006812:	4a35      	ldr	r2, [pc, #212]	@ (80068e8 <RCC_SetFlashLatency+0xec>)
 8006814:	f107 031c 	add.w	r3, r7, #28
 8006818:	ca07      	ldmia	r2, {r0, r1, r2}
 800681a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800681e:	4b33      	ldr	r3, [pc, #204]	@ (80068ec <RCC_SetFlashLatency+0xf0>)
 8006820:	f107 040c 	add.w	r4, r7, #12
 8006824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800682a:	2300      	movs	r3, #0
 800682c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006834:	d11a      	bne.n	800686c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006836:	2300      	movs	r3, #0
 8006838:	643b      	str	r3, [r7, #64]	@ 0x40
 800683a:	e013      	b.n	8006864 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800683c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	3348      	adds	r3, #72	@ 0x48
 8006842:	443b      	add	r3, r7
 8006844:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d807      	bhi.n	800685e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800684e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	3348      	adds	r3, #72	@ 0x48
 8006854:	443b      	add	r3, r7
 8006856:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800685a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800685c:	e020      	b.n	80068a0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800685e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006860:	3301      	adds	r3, #1
 8006862:	643b      	str	r3, [r7, #64]	@ 0x40
 8006864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006866:	2b03      	cmp	r3, #3
 8006868:	d9e8      	bls.n	800683c <RCC_SetFlashLatency+0x40>
 800686a:	e019      	b.n	80068a0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800686c:	2300      	movs	r3, #0
 800686e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006870:	e013      	b.n	800689a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	3348      	adds	r3, #72	@ 0x48
 8006878:	443b      	add	r3, r7
 800687a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d807      	bhi.n	8006894 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	3348      	adds	r3, #72	@ 0x48
 800688a:	443b      	add	r3, r7
 800688c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006890:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006892:	e005      	b.n	80068a0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006896:	3301      	adds	r3, #1
 8006898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800689a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800689c:	2b02      	cmp	r3, #2
 800689e:	d9e8      	bls.n	8006872 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80068a0:	4b13      	ldr	r3, [pc, #76]	@ (80068f0 <RCC_SetFlashLatency+0xf4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f023 0207 	bic.w	r2, r3, #7
 80068a8:	4911      	ldr	r1, [pc, #68]	@ (80068f0 <RCC_SetFlashLatency+0xf4>)
 80068aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068b0:	f7fd fb1c 	bl	8003eec <HAL_GetTick>
 80068b4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068b6:	e008      	b.n	80068ca <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80068b8:	f7fd fb18 	bl	8003eec <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d901      	bls.n	80068ca <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e007      	b.n	80068da <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068ca:	4b09      	ldr	r3, [pc, #36]	@ (80068f0 <RCC_SetFlashLatency+0xf4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d1ef      	bne.n	80068b8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	374c      	adds	r7, #76	@ 0x4c
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd90      	pop	{r4, r7, pc}
 80068e2:	bf00      	nop
 80068e4:	0800f5ac 	.word	0x0800f5ac
 80068e8:	0800f5bc 	.word	0x0800f5bc
 80068ec:	0800f5c8 	.word	0x0800f5c8
 80068f0:	58004000 	.word	0x58004000

080068f4 <LL_RCC_LSE_IsEnabled>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <LL_RCC_LSE_IsEnabled+0x18>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <LL_RCC_LSE_IsEnabled+0x1a>
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <LL_RCC_LSE_IsReady>:
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800691c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b02      	cmp	r3, #2
 800692a:	d101      	bne.n	8006930 <LL_RCC_LSE_IsReady+0x18>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <LL_RCC_LSE_IsReady+0x1a>
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <LL_RCC_MSI_EnablePLLMode>:
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800694a:	f043 0304 	orr.w	r3, r3, #4
 800694e:	6013      	str	r3, [r2, #0]
}
 8006950:	bf00      	nop
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <LL_RCC_SetRFWKPClockSource>:
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800696a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800696e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <LL_RCC_SetSMPSClockSource>:
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800698e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	f023 0203 	bic.w	r2, r3, #3
 8006998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4313      	orrs	r3, r2
 80069a0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <LL_RCC_SetSMPSPrescaler>:
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80069b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <LL_RCC_SetUSARTClockSource>:
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e6:	f023 0203 	bic.w	r2, r3, #3
 80069ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <LL_RCC_SetLPUARTClockSource>:
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <LL_RCC_SetI2CClockSource>:
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	091b      	lsrs	r3, r3, #4
 8006a42:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006a46:	43db      	mvns	r3, r3
 8006a48:	401a      	ands	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006a52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <LL_RCC_SetLPTIMClockSource>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a74:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	0c1b      	lsrs	r3, r3, #16
 8006a7c:	041b      	lsls	r3, r3, #16
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	401a      	ands	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	041b      	lsls	r3, r3, #16
 8006a86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <LL_RCC_SetSAIClockSource>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ab0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <LL_RCC_SetRNGClockSource>:
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006adc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <LL_RCC_SetCLK48ClockSource>:
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <LL_RCC_SetUSBClockSource>:
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ffe3 	bl	8006af4 <LL_RCC_SetCLK48ClockSource>
}
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <LL_RCC_SetADCClockSource>:
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <LL_RCC_SetRTCClockSource>:
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <LL_RCC_GetRTCClockSource>:
{
 8006b8e:	b480      	push	{r7}
 8006b90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <LL_RCC_ForceBackupDomainReset>:
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006bc0:	bf00      	nop
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <LL_RCC_ReleaseBackupDomainReset>:
{
 8006bca:	b480      	push	{r7}
 8006bcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006be2:	bf00      	nop
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <LL_RCC_PLLSAI1_Enable>:
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bfe:	6013      	str	r3, [r2, #0]
}
 8006c00:	bf00      	nop
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <LL_RCC_PLLSAI1_Disable>:
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c1c:	6013      	str	r3, [r2, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <LL_RCC_PLLSAI1_IsReady>:
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c3a:	d101      	bne.n	8006c40 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006c54:	2300      	movs	r3, #0
 8006c56:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006c58:	2300      	movs	r3, #0
 8006c5a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d034      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006c70:	d021      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006c72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006c76:	d81b      	bhi.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c7c:	d01d      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006c7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c82:	d815      	bhi.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c8c:	d110      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c9c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c9e:	e00d      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f94d 	bl	8006f44 <RCCEx_PLLSAI1_ConfigNP>
 8006caa:	4603      	mov	r3, r0
 8006cac:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006cae:	e005      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	77fb      	strb	r3, [r7, #31]
        break;
 8006cb4:	e002      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006cb6:	bf00      	nop
 8006cb8:	e000      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cbc:	7ffb      	ldrb	r3, [r7, #31]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d105      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fee8 	bl	8006a9c <LL_RCC_SetSAIClockSource>
 8006ccc:	e001      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cce:	7ffb      	ldrb	r3, [r7, #31]
 8006cd0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d046      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006cde:	f7ff ff56 	bl	8006b8e <LL_RCC_GetRTCClockSource>
 8006ce2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d03c      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006cee:	f7fe fc1b 	bl	8005528 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff ff30 	bl	8006b62 <LL_RCC_SetRTCClockSource>
 8006d02:	e02e      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006d0e:	f7ff ff4b 	bl	8006ba8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006d12:	f7ff ff5a 	bl	8006bca <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006d2e:	f7ff fde1 	bl	80068f4 <LL_RCC_LSE_IsEnabled>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d114      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d38:	f7fd f8d8 	bl	8003eec <HAL_GetTick>
 8006d3c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006d3e:	e00b      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d40:	f7fd f8d4 	bl	8003eec <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d902      	bls.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	77fb      	strb	r3, [r7, #31]
              break;
 8006d56:	e004      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006d58:	f7ff fdde 	bl	8006918 <LL_RCC_LSE_IsReady>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d1ee      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
 8006d64:	77bb      	strb	r3, [r7, #30]
 8006d66:	e001      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	7ffb      	ldrb	r3, [r7, #31]
 8006d6a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fe2a 	bl	80069d6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fe35 	bl	8006a02 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fe5d 	bl	8006a68 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fe52 	bl	8006a68 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fe2a 	bl	8006a2e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fe1f 	bl	8006a2e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d022      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fe8d 	bl	8006b20 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e0e:	d107      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e1e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e28:	d10b      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f8e3 	bl	8006ffa <RCCEx_PLLSAI1_ConfigNQ>
 8006e34:	4603      	mov	r3, r0
 8006e36:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006e38:	7ffb      	ldrb	r3, [r7, #31]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006e3e:	7ffb      	ldrb	r3, [r7, #31]
 8006e40:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d02b      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e56:	d008      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e60:	d003      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fe2a 	bl	8006ac8 <LL_RCC_SetRNGClockSource>
 8006e74:	e00a      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	2000      	movs	r0, #0
 8006e82:	f7ff fe21 	bl	8006ac8 <LL_RCC_SetRNGClockSource>
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff fe34 	bl	8006af4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006e94:	d107      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ea0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ea4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d022      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fe3d 	bl	8006b36 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec4:	d107      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ede:	d10b      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f8e3 	bl	80070b0 <RCCEx_PLLSAI1_ConfigNR>
 8006eea:	4603      	mov	r3, r0
 8006eec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006eee:	7ffb      	ldrb	r3, [r7, #31]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006ef4:	7ffb      	ldrb	r3, [r7, #31]
 8006ef6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fd26 	bl	800695a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d009      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fd45 	bl	80069ae <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fd2c 	bl	8006986 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006f2e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006f3c:	f7ff fcfe 	bl	800693c <LL_RCC_MSI_EnablePLLMode>
}
 8006f40:	bf00      	nop
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006f50:	f7ff fe5b 	bl	8006c0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f54:	f7fc ffca 	bl	8003eec <HAL_GetTick>
 8006f58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f5a:	e009      	b.n	8006f70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f5c:	f7fc ffc6 	bl	8003eec <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d902      	bls.n	8006f70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6e:	e004      	b.n	8006f7a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f70:	f7ff fe5a 	bl	8006c28 <LL_RCC_PLLSAI1_IsReady>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d137      	bne.n	8006ff0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	021b      	lsls	r3, r3, #8
 8006f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f94:	4313      	orrs	r3, r2
 8006f96:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006faa:	4313      	orrs	r3, r2
 8006fac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006fae:	f7ff fe1d 	bl	8006bec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb2:	f7fc ff9b 	bl	8003eec <HAL_GetTick>
 8006fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fb8:	e009      	b.n	8006fce <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fba:	f7fc ff97 	bl	8003eec <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d902      	bls.n	8006fce <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	73fb      	strb	r3, [r7, #15]
        break;
 8006fcc:	e004      	b.n	8006fd8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fce:	f7ff fe2b 	bl	8006c28 <LL_RCC_PLLSAI1_IsReady>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d1f0      	bne.n	8006fba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d108      	bne.n	8006ff0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fec:	4313      	orrs	r3, r2
 8006fee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007006:	f7ff fe00 	bl	8006c0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800700a:	f7fc ff6f 	bl	8003eec <HAL_GetTick>
 800700e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007010:	e009      	b.n	8007026 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007012:	f7fc ff6b 	bl	8003eec <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d902      	bls.n	8007026 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	73fb      	strb	r3, [r7, #15]
      break;
 8007024:	e004      	b.n	8007030 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007026:	f7ff fdff 	bl	8006c28 <LL_RCC_PLLSAI1_IsReady>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f0      	bne.n	8007012 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d137      	bne.n	80070a6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800704a:	4313      	orrs	r3, r2
 800704c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800704e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007060:	4313      	orrs	r3, r2
 8007062:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007064:	f7ff fdc2 	bl	8006bec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007068:	f7fc ff40 	bl	8003eec <HAL_GetTick>
 800706c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800706e:	e009      	b.n	8007084 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007070:	f7fc ff3c 	bl	8003eec <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d902      	bls.n	8007084 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	73fb      	strb	r3, [r7, #15]
        break;
 8007082:	e004      	b.n	800708e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007084:	f7ff fdd0 	bl	8006c28 <LL_RCC_PLLSAI1_IsReady>
 8007088:	4603      	mov	r3, r0
 800708a:	2b01      	cmp	r3, #1
 800708c:	d1f0      	bne.n	8007070 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d108      	bne.n	80070a6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070a2:	4313      	orrs	r3, r2
 80070a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80070bc:	f7ff fda5 	bl	8006c0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070c0:	f7fc ff14 	bl	8003eec <HAL_GetTick>
 80070c4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80070c6:	e009      	b.n	80070dc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070c8:	f7fc ff10 	bl	8003eec <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d902      	bls.n	80070dc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	73fb      	strb	r3, [r7, #15]
      break;
 80070da:	e004      	b.n	80070e6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80070dc:	f7ff fda4 	bl	8006c28 <LL_RCC_PLLSAI1_IsReady>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d137      	bne.n	800715c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80070ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007100:	4313      	orrs	r3, r2
 8007102:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007116:	4313      	orrs	r3, r2
 8007118:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800711a:	f7ff fd67 	bl	8006bec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800711e:	f7fc fee5 	bl	8003eec <HAL_GetTick>
 8007122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007124:	e009      	b.n	800713a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007126:	f7fc fee1 	bl	8003eec <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d902      	bls.n	800713a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	73fb      	strb	r3, [r7, #15]
        break;
 8007138:	e004      	b.n	8007144 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800713a:	f7ff fd75 	bl	8006c28 <LL_RCC_PLLSAI1_IsReady>
 800713e:	4603      	mov	r3, r0
 8007140:	2b01      	cmp	r3, #1
 8007142:	d1f0      	bne.n	8007126 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d108      	bne.n	800715c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800714a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007158:	4313      	orrs	r3, r2
 800715a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e049      	b.n	800720c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7fa fb1f 	bl	80017d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	4619      	mov	r1, r3
 80071a4:	4610      	mov	r0, r2
 80071a6:	f000 fa7b 	bl	80076a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	d001      	beq.n	800722c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e036      	b.n	800729a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a17      	ldr	r2, [pc, #92]	@ (80072a8 <HAL_TIM_Base_Start_IT+0x94>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x44>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007256:	d115      	bne.n	8007284 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	4b13      	ldr	r3, [pc, #76]	@ (80072ac <HAL_TIM_Base_Start_IT+0x98>)
 8007260:	4013      	ands	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b06      	cmp	r3, #6
 8007268:	d015      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x82>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007270:	d011      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 0201 	orr.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007282:	e008      	b.n	8007296 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e000      	b.n	8007298 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40012c00 	.word	0x40012c00
 80072ac:	00010007 	.word	0x00010007

080072b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d020      	beq.n	8007314 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0202 	mvn.w	r2, #2
 80072e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f9b2 	bl	8007664 <HAL_TIM_IC_CaptureCallback>
 8007300:	e005      	b.n	800730e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9a4 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f9b5 	bl	8007678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d020      	beq.n	8007360 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01b      	beq.n	8007360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0204 	mvn.w	r2, #4
 8007330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f98c 	bl	8007664 <HAL_TIM_IC_CaptureCallback>
 800734c:	e005      	b.n	800735a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f97e 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f98f 	bl	8007678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d020      	beq.n	80073ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01b      	beq.n	80073ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0208 	mvn.w	r2, #8
 800737c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2204      	movs	r2, #4
 8007382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f966 	bl	8007664 <HAL_TIM_IC_CaptureCallback>
 8007398:	e005      	b.n	80073a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f958 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f969 	bl	8007678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 0310 	and.w	r3, r3, #16
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d020      	beq.n	80073f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01b      	beq.n	80073f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0210 	mvn.w	r2, #16
 80073c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2208      	movs	r2, #8
 80073ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f940 	bl	8007664 <HAL_TIM_IC_CaptureCallback>
 80073e4:	e005      	b.n	80073f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f932 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f943 	bl	8007678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00c      	beq.n	800741c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f06f 0201 	mvn.w	r2, #1
 8007414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fa f938 	bl	800168c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00c      	beq.n	800744a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 faa1 	bl	800798c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00c      	beq.n	800746e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fa99 	bl	80079a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00c      	beq.n	8007492 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800748a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f8fd 	bl	800768c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00c      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f06f 0220 	mvn.w	r2, #32
 80074ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fa61 	bl	8007978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_TIM_ConfigClockSource+0x1c>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e0b6      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x18a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2202      	movs	r2, #2
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80074f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007504:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007516:	d03e      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0xd8>
 8007518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800751c:	f200 8087 	bhi.w	800762e <HAL_TIM_ConfigClockSource+0x170>
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007524:	f000 8086 	beq.w	8007634 <HAL_TIM_ConfigClockSource+0x176>
 8007528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800752c:	d87f      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0x170>
 800752e:	2b70      	cmp	r3, #112	@ 0x70
 8007530:	d01a      	beq.n	8007568 <HAL_TIM_ConfigClockSource+0xaa>
 8007532:	2b70      	cmp	r3, #112	@ 0x70
 8007534:	d87b      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0x170>
 8007536:	2b60      	cmp	r3, #96	@ 0x60
 8007538:	d050      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x11e>
 800753a:	2b60      	cmp	r3, #96	@ 0x60
 800753c:	d877      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0x170>
 800753e:	2b50      	cmp	r3, #80	@ 0x50
 8007540:	d03c      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0xfe>
 8007542:	2b50      	cmp	r3, #80	@ 0x50
 8007544:	d873      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0x170>
 8007546:	2b40      	cmp	r3, #64	@ 0x40
 8007548:	d058      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0x13e>
 800754a:	2b40      	cmp	r3, #64	@ 0x40
 800754c:	d86f      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0x170>
 800754e:	2b30      	cmp	r3, #48	@ 0x30
 8007550:	d064      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x15e>
 8007552:	2b30      	cmp	r3, #48	@ 0x30
 8007554:	d86b      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0x170>
 8007556:	2b20      	cmp	r3, #32
 8007558:	d060      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x15e>
 800755a:	2b20      	cmp	r3, #32
 800755c:	d867      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0x170>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d05c      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x15e>
 8007562:	2b10      	cmp	r3, #16
 8007564:	d05a      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x15e>
 8007566:	e062      	b.n	800762e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007578:	f000 f97e 	bl	8007878 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800758a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	609a      	str	r2, [r3, #8]
      break;
 8007594:	e04f      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075a6:	f000 f967 	bl	8007878 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075b8:	609a      	str	r2, [r3, #8]
      break;
 80075ba:	e03c      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c8:	461a      	mov	r2, r3
 80075ca:	f000 f8d9 	bl	8007780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2150      	movs	r1, #80	@ 0x50
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 f932 	bl	800783e <TIM_ITRx_SetConfig>
      break;
 80075da:	e02c      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075e8:	461a      	mov	r2, r3
 80075ea:	f000 f8f8 	bl	80077de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2160      	movs	r1, #96	@ 0x60
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f922 	bl	800783e <TIM_ITRx_SetConfig>
      break;
 80075fa:	e01c      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007608:	461a      	mov	r2, r3
 800760a:	f000 f8b9 	bl	8007780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2140      	movs	r1, #64	@ 0x40
 8007614:	4618      	mov	r0, r3
 8007616:	f000 f912 	bl	800783e <TIM_ITRx_SetConfig>
      break;
 800761a:	e00c      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f000 f909 	bl	800783e <TIM_ITRx_SetConfig>
      break;
 800762c:	e003      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
      break;
 8007632:	e000      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007634:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a30      	ldr	r2, [pc, #192]	@ (8007774 <TIM_Base_SetConfig+0xd4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_Base_SetConfig+0x20>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076be:	d108      	bne.n	80076d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a27      	ldr	r2, [pc, #156]	@ (8007774 <TIM_Base_SetConfig+0xd4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00b      	beq.n	80076f2 <TIM_Base_SetConfig+0x52>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e0:	d007      	beq.n	80076f2 <TIM_Base_SetConfig+0x52>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a24      	ldr	r2, [pc, #144]	@ (8007778 <TIM_Base_SetConfig+0xd8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d003      	beq.n	80076f2 <TIM_Base_SetConfig+0x52>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a23      	ldr	r2, [pc, #140]	@ (800777c <TIM_Base_SetConfig+0xdc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d108      	bne.n	8007704 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4313      	orrs	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a12      	ldr	r2, [pc, #72]	@ (8007774 <TIM_Base_SetConfig+0xd4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_Base_SetConfig+0xa0>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a11      	ldr	r2, [pc, #68]	@ (8007778 <TIM_Base_SetConfig+0xd8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_Base_SetConfig+0xa0>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a10      	ldr	r2, [pc, #64]	@ (800777c <TIM_Base_SetConfig+0xdc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d103      	bne.n	8007748 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b01      	cmp	r3, #1
 8007758:	d105      	bne.n	8007766 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f023 0201 	bic.w	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	611a      	str	r2, [r3, #16]
  }
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40014400 	.word	0x40014400
 800777c:	40014800 	.word	0x40014800

08007780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	f023 0201 	bic.w	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f023 030a 	bic.w	r3, r3, #10
 80077bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	621a      	str	r2, [r3, #32]
}
 80077d2:	bf00      	nop
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077de:	b480      	push	{r7}
 80077e0:	b087      	sub	sp, #28
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	f023 0210 	bic.w	r2, r3, #16
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	031b      	lsls	r3, r3, #12
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800781a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	4313      	orrs	r3, r2
 8007824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	f043 0307 	orr.w	r3, r3, #7
 8007864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	609a      	str	r2, [r3, #8]
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	021a      	lsls	r2, r3, #8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	431a      	orrs	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4313      	orrs	r3, r2
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	609a      	str	r2, [r3, #8]
}
 80078ac:	bf00      	nop
 80078ae:	371c      	adds	r7, #28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e04a      	b.n	8007966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007974 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d108      	bne.n	800790c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007900:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a12      	ldr	r2, [pc, #72]	@ (8007974 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d004      	beq.n	800793a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007938:	d10c      	bne.n	8007954 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	4313      	orrs	r3, r2
 800794a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40012c00 	.word	0x40012c00

08007978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <LL_RCC_GetUSARTClockSource>:
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80079bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4013      	ands	r3, r2
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <LL_RCC_GetLPUARTClockSource>:
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80079dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4013      	ands	r3, r2
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e042      	b.n	8007a8c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7f9 ff05 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2224      	movs	r2, #36	@ 0x24
 8007a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0201 	bic.w	r2, r2, #1
 8007a34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fade 	bl	8008000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f8b3 	bl	8007bb0 <UART_SetConfig>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e01b      	b.n	8007a8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fb5d 	bl	8008144 <UART_CheckIdleState>
 8007a8a:	4603      	mov	r3, r0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	@ 0x28
 8007a98:	af02      	add	r7, sp, #8
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	d17b      	bne.n	8007ba6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <HAL_UART_Transmit+0x26>
 8007ab4:	88fb      	ldrh	r3, [r7, #6]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e074      	b.n	8007ba8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2221      	movs	r2, #33	@ 0x21
 8007aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ace:	f7fc fa0d 	bl	8003eec <HAL_GetTick>
 8007ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	88fa      	ldrh	r2, [r7, #6]
 8007ad8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aec:	d108      	bne.n	8007b00 <HAL_UART_Transmit+0x6c>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	e003      	b.n	8007b08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b08:	e030      	b.n	8007b6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2200      	movs	r2, #0
 8007b12:	2180      	movs	r1, #128	@ 0x80
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fbbf 	bl	8008298 <UART_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e03d      	b.n	8007ba8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	3302      	adds	r3, #2
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	e007      	b.n	8007b5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	781a      	ldrb	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	3301      	adds	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1c8      	bne.n	8007b0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2140      	movs	r1, #64	@ 0x40
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fb88 	bl	8008298 <UART_WaitOnFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e006      	b.n	8007ba8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e000      	b.n	8007ba8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007ba6:	2302      	movs	r3, #2
  }
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3720      	adds	r7, #32
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bb4:	b08c      	sub	sp, #48	@ 0x30
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4baf      	ldr	r3, [pc, #700]	@ (8007e9c <UART_SetConfig+0x2ec>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	6812      	ldr	r2, [r2, #0]
 8007be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007be8:	430b      	orrs	r3, r1
 8007bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4aa4      	ldr	r2, [pc, #656]	@ (8007ea0 <UART_SetConfig+0x2f0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007c26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3a:	f023 010f 	bic.w	r1, r3, #15
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a95      	ldr	r2, [pc, #596]	@ (8007ea4 <UART_SetConfig+0x2f4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d125      	bne.n	8007ca0 <UART_SetConfig+0xf0>
 8007c54:	2003      	movs	r0, #3
 8007c56:	f7ff fead 	bl	80079b4 <LL_RCC_GetUSARTClockSource>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d81b      	bhi.n	8007c98 <UART_SetConfig+0xe8>
 8007c60:	a201      	add	r2, pc, #4	@ (adr r2, 8007c68 <UART_SetConfig+0xb8>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c89 	.word	0x08007c89
 8007c70:	08007c81 	.word	0x08007c81
 8007c74:	08007c91 	.word	0x08007c91
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c7e:	e042      	b.n	8007d06 <UART_SetConfig+0x156>
 8007c80:	2302      	movs	r3, #2
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c86:	e03e      	b.n	8007d06 <UART_SetConfig+0x156>
 8007c88:	2304      	movs	r3, #4
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c8e:	e03a      	b.n	8007d06 <UART_SetConfig+0x156>
 8007c90:	2308      	movs	r3, #8
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c96:	e036      	b.n	8007d06 <UART_SetConfig+0x156>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9e:	e032      	b.n	8007d06 <UART_SetConfig+0x156>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a7e      	ldr	r2, [pc, #504]	@ (8007ea0 <UART_SetConfig+0x2f0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d12a      	bne.n	8007d00 <UART_SetConfig+0x150>
 8007caa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007cae:	f7ff fe91 	bl	80079d4 <LL_RCC_GetLPUARTClockSource>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cb8:	d01a      	beq.n	8007cf0 <UART_SetConfig+0x140>
 8007cba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cbe:	d81b      	bhi.n	8007cf8 <UART_SetConfig+0x148>
 8007cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc4:	d00c      	beq.n	8007ce0 <UART_SetConfig+0x130>
 8007cc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cca:	d815      	bhi.n	8007cf8 <UART_SetConfig+0x148>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <UART_SetConfig+0x128>
 8007cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd4:	d008      	beq.n	8007ce8 <UART_SetConfig+0x138>
 8007cd6:	e00f      	b.n	8007cf8 <UART_SetConfig+0x148>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cde:	e012      	b.n	8007d06 <UART_SetConfig+0x156>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce6:	e00e      	b.n	8007d06 <UART_SetConfig+0x156>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cee:	e00a      	b.n	8007d06 <UART_SetConfig+0x156>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cf6:	e006      	b.n	8007d06 <UART_SetConfig+0x156>
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cfe:	e002      	b.n	8007d06 <UART_SetConfig+0x156>
 8007d00:	2310      	movs	r3, #16
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a65      	ldr	r2, [pc, #404]	@ (8007ea0 <UART_SetConfig+0x2f0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	f040 8097 	bne.w	8007e40 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d823      	bhi.n	8007d62 <UART_SetConfig+0x1b2>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <UART_SetConfig+0x170>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d63 	.word	0x08007d63
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d63 	.word	0x08007d63
 8007d30:	08007d53 	.word	0x08007d53
 8007d34:	08007d63 	.word	0x08007d63
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d63 	.word	0x08007d63
 8007d40:	08007d5b 	.word	0x08007d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fe fcc4 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 8007d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d4a:	e010      	b.n	8007d6e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d4c:	4b56      	ldr	r3, [pc, #344]	@ (8007ea8 <UART_SetConfig+0x2f8>)
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d50:	e00d      	b.n	8007d6e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d52:	f7fe fc3d 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 8007d56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d58:	e009      	b.n	8007d6e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d60:	e005      	b.n	8007d6e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 812b 	beq.w	8007fcc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7a:	4a4c      	ldr	r2, [pc, #304]	@ (8007eac <UART_SetConfig+0x2fc>)
 8007d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4413      	add	r3, r2
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d305      	bcc.n	8007da6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d903      	bls.n	8007dae <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dac:	e10e      	b.n	8007fcc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	2200      	movs	r2, #0
 8007db2:	60bb      	str	r3, [r7, #8]
 8007db4:	60fa      	str	r2, [r7, #12]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dba:	4a3c      	ldr	r2, [pc, #240]	@ (8007eac <UART_SetConfig+0x2fc>)
 8007dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007dd0:	f7f8 fec2 	bl	8000b58 <__aeabi_uldivmod>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4619      	mov	r1, r3
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	020b      	lsls	r3, r1, #8
 8007de6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dea:	0202      	lsls	r2, r0, #8
 8007dec:	6979      	ldr	r1, [r7, #20]
 8007dee:	6849      	ldr	r1, [r1, #4]
 8007df0:	0849      	lsrs	r1, r1, #1
 8007df2:	2000      	movs	r0, #0
 8007df4:	460c      	mov	r4, r1
 8007df6:	4605      	mov	r5, r0
 8007df8:	eb12 0804 	adds.w	r8, r2, r4
 8007dfc:	eb43 0905 	adc.w	r9, r3, r5
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	469a      	mov	sl, r3
 8007e08:	4693      	mov	fp, r2
 8007e0a:	4652      	mov	r2, sl
 8007e0c:	465b      	mov	r3, fp
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	f7f8 fea1 	bl	8000b58 <__aeabi_uldivmod>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e24:	d308      	bcc.n	8007e38 <UART_SetConfig+0x288>
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e2c:	d204      	bcs.n	8007e38 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	e0c9      	b.n	8007fcc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e3e:	e0c5      	b.n	8007fcc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e48:	d16d      	bne.n	8007f26 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	2b07      	cmp	r3, #7
 8007e52:	d82d      	bhi.n	8007eb0 <UART_SetConfig+0x300>
 8007e54:	a201      	add	r2, pc, #4	@ (adr r2, 8007e5c <UART_SetConfig+0x2ac>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007eb1 	.word	0x08007eb1
 8007e68:	08007e8b 	.word	0x08007e8b
 8007e6c:	08007eb1 	.word	0x08007eb1
 8007e70:	08007eb1 	.word	0x08007eb1
 8007e74:	08007eb1 	.word	0x08007eb1
 8007e78:	08007e93 	.word	0x08007e93
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e7c:	f7fe fc3e 	bl	80066fc <HAL_RCC_GetPCLK2Freq>
 8007e80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e82:	e01b      	b.n	8007ebc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e84:	4b08      	ldr	r3, [pc, #32]	@ (8007ea8 <UART_SetConfig+0x2f8>)
 8007e86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e88:	e018      	b.n	8007ebc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e8a:	f7fe fba1 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 8007e8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e90:	e014      	b.n	8007ebc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e98:	e010      	b.n	8007ebc <UART_SetConfig+0x30c>
 8007e9a:	bf00      	nop
 8007e9c:	cfff69f3 	.word	0xcfff69f3
 8007ea0:	40008000 	.word	0x40008000
 8007ea4:	40013800 	.word	0x40013800
 8007ea8:	00f42400 	.word	0x00f42400
 8007eac:	0800f80c 	.word	0x0800f80c
      default:
        pclk = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007eba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 8084 	beq.w	8007fcc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8007ff8 <UART_SetConfig+0x448>)
 8007eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed6:	005a      	lsls	r2, r3, #1
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	441a      	add	r2, r3
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	2b0f      	cmp	r3, #15
 8007eee:	d916      	bls.n	8007f1e <UART_SetConfig+0x36e>
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef6:	d212      	bcs.n	8007f1e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f023 030f 	bic.w	r3, r3, #15
 8007f00:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	8bfb      	ldrh	r3, [r7, #30]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	8bfa      	ldrh	r2, [r7, #30]
 8007f1a:	60da      	str	r2, [r3, #12]
 8007f1c:	e056      	b.n	8007fcc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f24:	e052      	b.n	8007fcc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	2b07      	cmp	r3, #7
 8007f2e:	d822      	bhi.n	8007f76 <UART_SetConfig+0x3c6>
 8007f30:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <UART_SetConfig+0x388>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f59 	.word	0x08007f59
 8007f3c:	08007f61 	.word	0x08007f61
 8007f40:	08007f77 	.word	0x08007f77
 8007f44:	08007f67 	.word	0x08007f67
 8007f48:	08007f77 	.word	0x08007f77
 8007f4c:	08007f77 	.word	0x08007f77
 8007f50:	08007f77 	.word	0x08007f77
 8007f54:	08007f6f 	.word	0x08007f6f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f58:	f7fe fbd0 	bl	80066fc <HAL_RCC_GetPCLK2Freq>
 8007f5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f5e:	e010      	b.n	8007f82 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f60:	4b26      	ldr	r3, [pc, #152]	@ (8007ffc <UART_SetConfig+0x44c>)
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f64:	e00d      	b.n	8007f82 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f66:	f7fe fb33 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 8007f6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f6c:	e009      	b.n	8007f82 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f74:	e005      	b.n	8007f82 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f80:	bf00      	nop
    }

    if (pclk != 0U)
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d021      	beq.n	8007fcc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ff8 <UART_SetConfig+0x448>)
 8007f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	441a      	add	r2, r3
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007faa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	2b0f      	cmp	r3, #15
 8007fb0:	d909      	bls.n	8007fc6 <UART_SetConfig+0x416>
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb8:	d205      	bcs.n	8007fc6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60da      	str	r2, [r3, #12]
 8007fc4:	e002      	b.n	8007fcc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007fe8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3730      	adds	r7, #48	@ 0x30
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ff6:	bf00      	nop
 8007ff8:	0800f80c 	.word	0x0800f80c
 8007ffc:	00f42400 	.word	0x00f42400

08008000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00a      	beq.n	800802a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00a      	beq.n	800804c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01a      	beq.n	8008116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080fe:	d10a      	bne.n	8008116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	605a      	str	r2, [r3, #4]
  }
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b098      	sub	sp, #96	@ 0x60
 8008148:	af02      	add	r7, sp, #8
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008154:	f7fb feca 	bl	8003eec <HAL_GetTick>
 8008158:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b08      	cmp	r3, #8
 8008166:	d12f      	bne.n	80081c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008170:	2200      	movs	r2, #0
 8008172:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f88e 	bl	8008298 <UART_WaitOnFlagUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d022      	beq.n	80081c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008196:	653b      	str	r3, [r7, #80]	@ 0x50
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e6      	bne.n	8008182 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e063      	b.n	8008290 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0304 	and.w	r3, r3, #4
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d149      	bne.n	800826a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081de:	2200      	movs	r2, #0
 80081e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f857 	bl	8008298 <UART_WaitOnFlagUntilTimeout>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d03c      	beq.n	800826a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	623b      	str	r3, [r7, #32]
   return(result);
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800820e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008210:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800821c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e6      	bne.n	80081f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	60fb      	str	r3, [r7, #12]
   return(result);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008242:	61fa      	str	r2, [r7, #28]
 8008244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	69b9      	ldr	r1, [r7, #24]
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	617b      	str	r3, [r7, #20]
   return(result);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e012      	b.n	8008290 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2220      	movs	r2, #32
 8008276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3758      	adds	r7, #88	@ 0x58
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	4613      	mov	r3, r2
 80082a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a8:	e04f      	b.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d04b      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b2:	f7fb fe1b 	bl	8003eec <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e04e      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d037      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b80      	cmp	r3, #128	@ 0x80
 80082de:	d034      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2b40      	cmp	r3, #64	@ 0x40
 80082e4:	d031      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d110      	bne.n	8008316 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2208      	movs	r2, #8
 80082fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 f838 	bl	8008372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2208      	movs	r2, #8
 8008306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e029      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008324:	d111      	bne.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800832e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f81e 	bl	8008372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2220      	movs	r2, #32
 800833a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e00f      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4013      	ands	r3, r2
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	429a      	cmp	r2, r3
 8008358:	bf0c      	ite	eq
 800835a:	2301      	moveq	r3, #1
 800835c:	2300      	movne	r3, #0
 800835e:	b2db      	uxtb	r3, r3
 8008360:	461a      	mov	r2, r3
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	429a      	cmp	r2, r3
 8008366:	d0a0      	beq.n	80082aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008372:	b480      	push	{r7}
 8008374:	b095      	sub	sp, #84	@ 0x54
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800838e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008398:	643b      	str	r3, [r7, #64]	@ 0x40
 800839a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800839e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e6      	bne.n	800837a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3308      	adds	r3, #8
 80083ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e3      	bne.n	80083ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d118      	bne.n	800841e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f023 0310 	bic.w	r3, r3, #16
 8008400:	647b      	str	r3, [r7, #68]	@ 0x44
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800840a:	61bb      	str	r3, [r7, #24]
 800840c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	6979      	ldr	r1, [r7, #20]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	613b      	str	r3, [r7, #16]
   return(result);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e6      	bne.n	80083ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2220      	movs	r2, #32
 8008422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008432:	bf00      	nop
 8008434:	3754      	adds	r7, #84	@ 0x54
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_UARTEx_DisableFifoMode+0x16>
 8008450:	2302      	movs	r3, #2
 8008452:	e027      	b.n	80084a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2224      	movs	r2, #36	@ 0x24
 8008460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0201 	bic.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008482:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e02d      	b.n	8008524 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2224      	movs	r2, #36	@ 0x24
 80084d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f84f 	bl	80085a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800853c:	2b01      	cmp	r3, #1
 800853e:	d101      	bne.n	8008544 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008540:	2302      	movs	r3, #2
 8008542:	e02d      	b.n	80085a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2224      	movs	r2, #36	@ 0x24
 8008550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0201 	bic.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f811 	bl	80085a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d108      	bne.n	80085ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085c8:	e031      	b.n	800862e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ca:	2308      	movs	r3, #8
 80085cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085ce:	2308      	movs	r3, #8
 80085d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	0e5b      	lsrs	r3, r3, #25
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	0f5b      	lsrs	r3, r3, #29
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	7b3a      	ldrb	r2, [r7, #12]
 80085f6:	4911      	ldr	r1, [pc, #68]	@ (800863c <UARTEx_SetNbDataToProcess+0x94>)
 80085f8:	5c8a      	ldrb	r2, [r1, r2]
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085fe:	7b3a      	ldrb	r2, [r7, #12]
 8008600:	490f      	ldr	r1, [pc, #60]	@ (8008640 <UARTEx_SetNbDataToProcess+0x98>)
 8008602:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008604:	fb93 f3f2 	sdiv	r3, r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	7b7a      	ldrb	r2, [r7, #13]
 8008614:	4909      	ldr	r1, [pc, #36]	@ (800863c <UARTEx_SetNbDataToProcess+0x94>)
 8008616:	5c8a      	ldrb	r2, [r1, r2]
 8008618:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800861c:	7b7a      	ldrb	r2, [r7, #13]
 800861e:	4908      	ldr	r1, [pc, #32]	@ (8008640 <UARTEx_SetNbDataToProcess+0x98>)
 8008620:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008622:	fb93 f3f2 	sdiv	r3, r3, r2
 8008626:	b29a      	uxth	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	0800f824 	.word	0x0800f824
 8008640:	0800f82c 	.word	0x0800f82c

08008644 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800864c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008650:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	b29b      	uxth	r3, r3
 800865e:	43db      	mvns	r3, r3
 8008660:	b29b      	uxth	r3, r3
 8008662:	4013      	ands	r3, r2
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	1d3b      	adds	r3, r7, #4
 8008684:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <__NVIC_SetPriority>:
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	4603      	mov	r3, r0
 80086c0:	6039      	str	r1, [r7, #0]
 80086c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	db0a      	blt.n	80086e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	490c      	ldr	r1, [pc, #48]	@ (8008704 <__NVIC_SetPriority+0x4c>)
 80086d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d6:	0112      	lsls	r2, r2, #4
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	440b      	add	r3, r1
 80086dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80086e0:	e00a      	b.n	80086f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	4908      	ldr	r1, [pc, #32]	@ (8008708 <__NVIC_SetPriority+0x50>)
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	f003 030f 	and.w	r3, r3, #15
 80086ee:	3b04      	subs	r3, #4
 80086f0:	0112      	lsls	r2, r2, #4
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	440b      	add	r3, r1
 80086f6:	761a      	strb	r2, [r3, #24]
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	e000e100 	.word	0xe000e100
 8008708:	e000ed00 	.word	0xe000ed00

0800870c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008710:	4b05      	ldr	r3, [pc, #20]	@ (8008728 <SysTick_Handler+0x1c>)
 8008712:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008714:	f002 fb88 	bl	800ae28 <xTaskGetSchedulerState>
 8008718:	4603      	mov	r3, r0
 800871a:	2b01      	cmp	r3, #1
 800871c:	d001      	beq.n	8008722 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800871e:	f003 fc8b 	bl	800c038 <xPortSysTickHandler>
  }
}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	e000e010 	.word	0xe000e010

0800872c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008730:	2100      	movs	r1, #0
 8008732:	f06f 0004 	mvn.w	r0, #4
 8008736:	f7ff ffbf 	bl	80086b8 <__NVIC_SetPriority>
#endif
}
 800873a:	bf00      	nop
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008746:	f3ef 8305 	mrs	r3, IPSR
 800874a:	603b      	str	r3, [r7, #0]
  return(result);
 800874c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008752:	f06f 0305 	mvn.w	r3, #5
 8008756:	607b      	str	r3, [r7, #4]
 8008758:	e00c      	b.n	8008774 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800875a:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <osKernelInitialize+0x44>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d105      	bne.n	800876e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008762:	4b08      	ldr	r3, [pc, #32]	@ (8008784 <osKernelInitialize+0x44>)
 8008764:	2201      	movs	r2, #1
 8008766:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008768:	2300      	movs	r3, #0
 800876a:	607b      	str	r3, [r7, #4]
 800876c:	e002      	b.n	8008774 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800876e:	f04f 33ff 	mov.w	r3, #4294967295
 8008772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008774:	687b      	ldr	r3, [r7, #4]
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000be0 	.word	0x20000be0

08008788 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800878e:	f3ef 8305 	mrs	r3, IPSR
 8008792:	603b      	str	r3, [r7, #0]
  return(result);
 8008794:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800879a:	f06f 0305 	mvn.w	r3, #5
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	e010      	b.n	80087c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087a2:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <osKernelStart+0x48>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d109      	bne.n	80087be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087aa:	f7ff ffbf 	bl	800872c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087ae:	4b08      	ldr	r3, [pc, #32]	@ (80087d0 <osKernelStart+0x48>)
 80087b0:	2202      	movs	r2, #2
 80087b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087b4:	f001 feb2 	bl	800a51c <vTaskStartScheduler>
      stat = osOK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	607b      	str	r3, [r7, #4]
 80087bc:	e002      	b.n	80087c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087be:	f04f 33ff 	mov.w	r3, #4294967295
 80087c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087c4:	687b      	ldr	r3, [r7, #4]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000be0 	.word	0x20000be0

080087d4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087da:	f3ef 8305 	mrs	r3, IPSR
 80087de:	603b      	str	r3, [r7, #0]
  return(result);
 80087e0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80087e6:	f001 ffc5 	bl	800a774 <xTaskGetTickCountFromISR>
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	e002      	b.n	80087f4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80087ee:	f001 ffb1 	bl	800a754 <xTaskGetTickCount>
 80087f2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80087f4:	687b      	ldr	r3, [r7, #4]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80087fe:	b580      	push	{r7, lr}
 8008800:	b08e      	sub	sp, #56	@ 0x38
 8008802:	af04      	add	r7, sp, #16
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800880e:	f3ef 8305 	mrs	r3, IPSR
 8008812:	617b      	str	r3, [r7, #20]
  return(result);
 8008814:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008816:	2b00      	cmp	r3, #0
 8008818:	d17e      	bne.n	8008918 <osThreadNew+0x11a>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d07b      	beq.n	8008918 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008820:	2380      	movs	r3, #128	@ 0x80
 8008822:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008824:	2318      	movs	r3, #24
 8008826:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008828:	2300      	movs	r3, #0
 800882a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800882c:	f04f 33ff 	mov.w	r3, #4294967295
 8008830:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d045      	beq.n	80088c4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <osThreadNew+0x48>
        name = attr->name;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d008      	beq.n	800886c <osThreadNew+0x6e>
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	2b38      	cmp	r3, #56	@ 0x38
 800885e:	d805      	bhi.n	800886c <osThreadNew+0x6e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <osThreadNew+0x72>
        return (NULL);
 800886c:	2300      	movs	r3, #0
 800886e:	e054      	b.n	800891a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	089b      	lsrs	r3, r3, #2
 800887e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00e      	beq.n	80088a6 <osThreadNew+0xa8>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	2ba7      	cmp	r3, #167	@ 0xa7
 800888e:	d90a      	bls.n	80088a6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008894:	2b00      	cmp	r3, #0
 8008896:	d006      	beq.n	80088a6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <osThreadNew+0xa8>
        mem = 1;
 80088a0:	2301      	movs	r3, #1
 80088a2:	61bb      	str	r3, [r7, #24]
 80088a4:	e010      	b.n	80088c8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10c      	bne.n	80088c8 <osThreadNew+0xca>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d108      	bne.n	80088c8 <osThreadNew+0xca>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <osThreadNew+0xca>
          mem = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	e001      	b.n	80088c8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d110      	bne.n	80088f0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088d6:	9202      	str	r2, [sp, #8]
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6a3a      	ldr	r2, [r7, #32]
 80088e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f001 fc25 	bl	800a134 <xTaskCreateStatic>
 80088ea:	4603      	mov	r3, r0
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	e013      	b.n	8008918 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d110      	bne.n	8008918 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	f107 0310 	add.w	r3, r7, #16
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f001 fc73 	bl	800a1f4 <xTaskCreate>
 800890e:	4603      	mov	r3, r0
 8008910:	2b01      	cmp	r3, #1
 8008912:	d001      	beq.n	8008918 <osThreadNew+0x11a>
            hTask = NULL;
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008918:	693b      	ldr	r3, [r7, #16]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3728      	adds	r7, #40	@ 0x28
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af02      	add	r7, sp, #8
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <osThreadFlagsSet+0x1a>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	da03      	bge.n	8008946 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800893e:	f06f 0303 	mvn.w	r3, #3
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e035      	b.n	80089b2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295
 800894a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800894c:	f3ef 8305 	mrs	r3, IPSR
 8008950:	613b      	str	r3, [r7, #16]
  return(result);
 8008952:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01f      	beq.n	8008998 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008958:	2300      	movs	r3, #0
 800895a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800895c:	f107 0308 	add.w	r3, r7, #8
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	2201      	movs	r2, #1
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6978      	ldr	r0, [r7, #20]
 800896a:	f002 fd0d 	bl	800b388 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800896e:	f107 030c 	add.w	r3, r7, #12
 8008972:	2200      	movs	r2, #0
 8008974:	9200      	str	r2, [sp, #0]
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	6978      	ldr	r0, [r7, #20]
 800897c:	f002 fd04 	bl	800b388 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d015      	beq.n	80089b2 <osThreadFlagsSet+0x8e>
 8008986:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <osThreadFlagsSet+0x98>)
 8008988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	e00c      	b.n	80089b2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008998:	2300      	movs	r3, #0
 800899a:	2201      	movs	r2, #1
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6978      	ldr	r0, [r7, #20]
 80089a0:	f002 fc30 	bl	800b204 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80089a4:	f107 030c 	add.w	r3, r7, #12
 80089a8:	2200      	movs	r2, #0
 80089aa:	2100      	movs	r1, #0
 80089ac:	6978      	ldr	r0, [r7, #20]
 80089ae:	f002 fc29 	bl	800b204 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80089b2:	68fb      	ldr	r3, [r7, #12]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	e000ed04 	.word	0xe000ed04

080089c0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08c      	sub	sp, #48	@ 0x30
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089cc:	f3ef 8305 	mrs	r3, IPSR
 80089d0:	617b      	str	r3, [r7, #20]
  return(result);
 80089d2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80089d8:	f06f 0305 	mvn.w	r3, #5
 80089dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089de:	e06b      	b.n	8008ab8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	da03      	bge.n	80089ee <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80089e6:	f06f 0303 	mvn.w	r3, #3
 80089ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089ec:	e064      	b.n	8008ab8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <osThreadFlagsWait+0x3e>
      clear = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089fc:	e001      	b.n	8008a02 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8008a0a:	f001 fea3 	bl	800a754 <xTaskGetTickCount>
 8008a0e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008a10:	f107 0210 	add.w	r2, r7, #16
 8008a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f002 fb93 	bl	800b144 <xTaskNotifyWait>
 8008a1e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d137      	bne.n	8008a96 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a32:	4313      	orrs	r3, r2
 8008a34:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a44:	4013      	ands	r3, r2
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d032      	beq.n	8008ab2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10f      	bne.n	8008a72 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008a52:	f06f 0302 	mvn.w	r3, #2
 8008a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008a58:	e02e      	b.n	8008ab8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5e:	4013      	ands	r3, r2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d128      	bne.n	8008ab6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d103      	bne.n	8008a72 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008a6a:	f06f 0302 	mvn.w	r3, #2
 8008a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008a70:	e022      	b.n	8008ab8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008a72:	f001 fe6f 	bl	800a754 <xTaskGetTickCount>
 8008a76:	4602      	mov	r2, r0
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d902      	bls.n	8008a8c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a8a:	e00e      	b.n	8008aaa <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a94:	e009      	b.n	8008aaa <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008a9c:	f06f 0302 	mvn.w	r3, #2
 8008aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008aa2:	e002      	b.n	8008aaa <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008aa4:	f06f 0301 	mvn.w	r3, #1
 8008aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1af      	bne.n	8008a10 <osThreadFlagsWait+0x50>
 8008ab0:	e002      	b.n	8008ab8 <osThreadFlagsWait+0xf8>
            break;
 8008ab2:	bf00      	nop
 8008ab4:	e000      	b.n	8008ab8 <osThreadFlagsWait+0xf8>
            break;
 8008ab6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3730      	adds	r7, #48	@ 0x30
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aca:	f3ef 8305 	mrs	r3, IPSR
 8008ace:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <osDelay+0x1c>
    stat = osErrorISR;
 8008ad6:	f06f 0305 	mvn.w	r3, #5
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	e007      	b.n	8008aee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <osDelay+0x2c>
      vTaskDelay(ticks);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 fce1 	bl	800a4b0 <vTaskDelay>
    }
  }

  return (stat);
 8008aee:	68fb      	ldr	r3, [r7, #12]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b04:	f3ef 8305 	mrs	r3, IPSR
 8008b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b0a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d174      	bne.n	8008bfa <osMutexNew+0x102>
    if (attr != NULL) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <osMutexNew+0x26>
      type = attr->attr_bits;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	61bb      	str	r3, [r7, #24]
 8008b1c:	e001      	b.n	8008b22 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <osMutexNew+0x3a>
      rmtx = 1U;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e001      	b.n	8008b36 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d15c      	bne.n	8008bfa <osMutexNew+0x102>
      mem = -1;
 8008b40:	f04f 33ff 	mov.w	r3, #4294967295
 8008b44:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d015      	beq.n	8008b78 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d006      	beq.n	8008b62 <osMutexNew+0x6a>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b4f      	cmp	r3, #79	@ 0x4f
 8008b5a:	d902      	bls.n	8008b62 <osMutexNew+0x6a>
          mem = 1;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	613b      	str	r3, [r7, #16]
 8008b60:	e00c      	b.n	8008b7c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d108      	bne.n	8008b7c <osMutexNew+0x84>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d104      	bne.n	8008b7c <osMutexNew+0x84>
            mem = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
 8008b76:	e001      	b.n	8008b7c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d112      	bne.n	8008ba8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d007      	beq.n	8008b98 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	2004      	movs	r0, #4
 8008b90:	f000 fc71 	bl	8009476 <xQueueCreateMutexStatic>
 8008b94:	61f8      	str	r0, [r7, #28]
 8008b96:	e016      	b.n	8008bc6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	f000 fc69 	bl	8009476 <xQueueCreateMutexStatic>
 8008ba4:	61f8      	str	r0, [r7, #28]
 8008ba6:	e00e      	b.n	8008bc6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10b      	bne.n	8008bc6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008bb4:	2004      	movs	r0, #4
 8008bb6:	f000 fc46 	bl	8009446 <xQueueCreateMutex>
 8008bba:	61f8      	str	r0, [r7, #28]
 8008bbc:	e003      	b.n	8008bc6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	f000 fc41 	bl	8009446 <xQueueCreateMutex>
 8008bc4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00c      	beq.n	8008be6 <osMutexNew+0xee>
        if (attr != NULL) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <osMutexNew+0xe2>
          name = attr->name;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	e001      	b.n	8008bde <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008bde:	68f9      	ldr	r1, [r7, #12]
 8008be0:	69f8      	ldr	r0, [r7, #28]
 8008be2:	f001 fa49 	bl	800a078 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d006      	beq.n	8008bfa <osMutexNew+0x102>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	f043 0301 	orr.w	r3, r3, #1
 8008bf8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008bfa:	69fb      	ldr	r3, [r7, #28]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3720      	adds	r7, #32
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f023 0301 	bic.w	r3, r3, #1
 8008c14:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c22:	f3ef 8305 	mrs	r3, IPSR
 8008c26:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c28:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008c2e:	f06f 0305 	mvn.w	r3, #5
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	e02c      	b.n	8008c90 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d103      	bne.n	8008c44 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008c3c:	f06f 0303 	mvn.w	r3, #3
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	e025      	b.n	8008c90 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d011      	beq.n	8008c6e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6938      	ldr	r0, [r7, #16]
 8008c4e:	f000 fc62 	bl	8009516 <xQueueTakeMutexRecursive>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d01b      	beq.n	8008c90 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008c5e:	f06f 0301 	mvn.w	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	e014      	b.n	8008c90 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c66:	f06f 0302 	mvn.w	r3, #2
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	e010      	b.n	8008c90 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6938      	ldr	r0, [r7, #16]
 8008c72:	f000 ff09 	bl	8009a88 <xQueueSemaphoreTake>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d009      	beq.n	8008c90 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008c82:	f06f 0301 	mvn.w	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e002      	b.n	8008c90 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c8a:	f06f 0302 	mvn.w	r3, #2
 8008c8e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008c90:	697b      	ldr	r3, [r7, #20]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b086      	sub	sp, #24
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f023 0301 	bic.w	r3, r3, #1
 8008ca8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb6:	f3ef 8305 	mrs	r3, IPSR
 8008cba:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cbc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <osMutexRelease+0x30>
    stat = osErrorISR;
 8008cc2:	f06f 0305 	mvn.w	r3, #5
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	e01f      	b.n	8008d0a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d103      	bne.n	8008cd8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008cd0:	f06f 0303 	mvn.w	r3, #3
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	e018      	b.n	8008d0a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d009      	beq.n	8008cf2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008cde:	6938      	ldr	r0, [r7, #16]
 8008ce0:	f000 fbe4 	bl	80094ac <xQueueGiveMutexRecursive>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d00f      	beq.n	8008d0a <osMutexRelease+0x70>
        stat = osErrorResource;
 8008cea:	f06f 0302 	mvn.w	r3, #2
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e00b      	b.n	8008d0a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	6938      	ldr	r0, [r7, #16]
 8008cfa:	f000 fc43 	bl	8009584 <xQueueGenericSend>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d002      	beq.n	8008d0a <osMutexRelease+0x70>
        stat = osErrorResource;
 8008d04:	f06f 0302 	mvn.w	r3, #2
 8008d08:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008d0a:	697b      	ldr	r3, [r7, #20]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	@ 0x28
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d24:	f3ef 8305 	mrs	r3, IPSR
 8008d28:	613b      	str	r3, [r7, #16]
  return(result);
 8008d2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d15f      	bne.n	8008df0 <osMessageQueueNew+0xdc>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d05c      	beq.n	8008df0 <osMessageQueueNew+0xdc>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d059      	beq.n	8008df0 <osMessageQueueNew+0xdc>
    mem = -1;
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d029      	beq.n	8008d9c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d012      	beq.n	8008d76 <osMessageQueueNew+0x62>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b4f      	cmp	r3, #79	@ 0x4f
 8008d56:	d90e      	bls.n	8008d76 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00a      	beq.n	8008d76 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	fb01 f303 	mul.w	r3, r1, r3
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d302      	bcc.n	8008d76 <osMessageQueueNew+0x62>
        mem = 1;
 8008d70:	2301      	movs	r3, #1
 8008d72:	61bb      	str	r3, [r7, #24]
 8008d74:	e014      	b.n	8008da0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d110      	bne.n	8008da0 <osMessageQueueNew+0x8c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10c      	bne.n	8008da0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d108      	bne.n	8008da0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <osMessageQueueNew+0x8c>
          mem = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61bb      	str	r3, [r7, #24]
 8008d9a:	e001      	b.n	8008da0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d10b      	bne.n	8008dbe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691a      	ldr	r2, [r3, #16]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2100      	movs	r1, #0
 8008db0:	9100      	str	r1, [sp, #0]
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fa51 	bl	800925c <xQueueGenericCreateStatic>
 8008dba:	61f8      	str	r0, [r7, #28]
 8008dbc:	e008      	b.n	8008dd0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 fac4 	bl	8009356 <xQueueGenericCreate>
 8008dce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00c      	beq.n	8008df0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	e001      	b.n	8008de8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008de8:	6979      	ldr	r1, [r7, #20]
 8008dea:	69f8      	ldr	r0, [r7, #28]
 8008dec:	f001 f944 	bl	800a078 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008df0:	69fb      	ldr	r3, [r7, #28]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3720      	adds	r7, #32
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e14:	f3ef 8305 	mrs	r3, IPSR
 8008e18:	617b      	str	r3, [r7, #20]
  return(result);
 8008e1a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d028      	beq.n	8008e72 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <osMessageQueuePut+0x36>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <osMessageQueuePut+0x36>
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008e32:	f06f 0303 	mvn.w	r3, #3
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	e038      	b.n	8008eac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008e3e:	f107 0210 	add.w	r2, r7, #16
 8008e42:	2300      	movs	r3, #0
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	69b8      	ldr	r0, [r7, #24]
 8008e48:	f000 fc9e 	bl	8009788 <xQueueGenericSendFromISR>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d003      	beq.n	8008e5a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008e52:	f06f 0302 	mvn.w	r3, #2
 8008e56:	61fb      	str	r3, [r7, #28]
 8008e58:	e028      	b.n	8008eac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d025      	beq.n	8008eac <osMessageQueuePut+0xb0>
 8008e60:	4b15      	ldr	r3, [pc, #84]	@ (8008eb8 <osMessageQueuePut+0xbc>)
 8008e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	e01c      	b.n	8008eac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <osMessageQueuePut+0x82>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d103      	bne.n	8008e86 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008e7e:	f06f 0303 	mvn.w	r3, #3
 8008e82:	61fb      	str	r3, [r7, #28]
 8008e84:	e012      	b.n	8008eac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e86:	2300      	movs	r3, #0
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	69b8      	ldr	r0, [r7, #24]
 8008e8e:	f000 fb79 	bl	8009584 <xQueueGenericSend>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d009      	beq.n	8008eac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008e9e:	f06f 0301 	mvn.w	r3, #1
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	e002      	b.n	8008eac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008ea6:	f06f 0302 	mvn.w	r3, #2
 8008eaa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008eac:	69fb      	ldr	r3, [r7, #28]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3720      	adds	r7, #32
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ed2:	f3ef 8305 	mrs	r3, IPSR
 8008ed6:	617b      	str	r3, [r7, #20]
  return(result);
 8008ed8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d028      	beq.n	8008f30 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <osMessageQueueGet+0x34>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <osMessageQueueGet+0x34>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008ef0:	f06f 0303 	mvn.w	r3, #3
 8008ef4:	61fb      	str	r3, [r7, #28]
 8008ef6:	e037      	b.n	8008f68 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008efc:	f107 0310 	add.w	r3, r7, #16
 8008f00:	461a      	mov	r2, r3
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	69b8      	ldr	r0, [r7, #24]
 8008f06:	f000 fecf 	bl	8009ca8 <xQueueReceiveFromISR>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d003      	beq.n	8008f18 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008f10:	f06f 0302 	mvn.w	r3, #2
 8008f14:	61fb      	str	r3, [r7, #28]
 8008f16:	e027      	b.n	8008f68 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d024      	beq.n	8008f68 <osMessageQueueGet+0xac>
 8008f1e:	4b15      	ldr	r3, [pc, #84]	@ (8008f74 <osMessageQueueGet+0xb8>)
 8008f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	e01b      	b.n	8008f68 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <osMessageQueueGet+0x80>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d103      	bne.n	8008f44 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008f3c:	f06f 0303 	mvn.w	r3, #3
 8008f40:	61fb      	str	r3, [r7, #28]
 8008f42:	e011      	b.n	8008f68 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	69b8      	ldr	r0, [r7, #24]
 8008f4a:	f000 fcbb 	bl	80098c4 <xQueueReceive>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d009      	beq.n	8008f68 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008f5a:	f06f 0301 	mvn.w	r3, #1
 8008f5e:	61fb      	str	r3, [r7, #28]
 8008f60:	e002      	b.n	8008f68 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008f62:	f06f 0302 	mvn.w	r3, #2
 8008f66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f68:	69fb      	ldr	r3, [r7, #28]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	e000ed04 	.word	0xe000ed04

08008f78 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <osMessageQueueGetCount+0x18>
    count = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	617b      	str	r3, [r7, #20]
 8008f8e:	e00e      	b.n	8008fae <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f90:	f3ef 8305 	mrs	r3, IPSR
 8008f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008f9c:	6938      	ldr	r0, [r7, #16]
 8008f9e:	f000 ff24 	bl	8009dea <uxQueueMessagesWaitingFromISR>
 8008fa2:	6178      	str	r0, [r7, #20]
 8008fa4:	e003      	b.n	8008fae <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008fa6:	6938      	ldr	r0, [r7, #16]
 8008fa8:	f000 ff00 	bl	8009dac <uxQueueMessagesWaiting>
 8008fac:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8008fae:	697b      	ldr	r3, [r7, #20]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a07      	ldr	r2, [pc, #28]	@ (8008fe4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008fc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	4a06      	ldr	r2, [pc, #24]	@ (8008fe8 <vApplicationGetIdleTaskMemory+0x30>)
 8008fce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2280      	movs	r2, #128	@ 0x80
 8008fd4:	601a      	str	r2, [r3, #0]
}
 8008fd6:	bf00      	nop
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000be4 	.word	0x20000be4
 8008fe8:	20000c8c 	.word	0x20000c8c

08008fec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4a07      	ldr	r2, [pc, #28]	@ (8009018 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ffc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	4a06      	ldr	r2, [pc, #24]	@ (800901c <vApplicationGetTimerTaskMemory+0x30>)
 8009002:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800900a:	601a      	str	r2, [r3, #0]
}
 800900c:	bf00      	nop
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	20000e8c 	.word	0x20000e8c
 800901c:	20000f34 	.word	0x20000f34

08009020 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f103 0208 	add.w	r2, r3, #8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f04f 32ff 	mov.w	r2, #4294967295
 8009038:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f103 0208 	add.w	r2, r3, #8
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f103 0208 	add.w	r2, r3, #8
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	601a      	str	r2, [r3, #0]
}
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d8:	d103      	bne.n	80090e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	e00c      	b.n	80090fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3308      	adds	r3, #8
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	e002      	b.n	80090f0 <vListInsert+0x2e>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d2f6      	bcs.n	80090ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	6892      	ldr	r2, [r2, #8]
 800914a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6852      	ldr	r2, [r2, #4]
 8009154:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d103      	bne.n	8009168 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	1e5a      	subs	r2, r3, #1
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80091b4:	f002 feb0 	bl	800bf18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c0:	68f9      	ldr	r1, [r7, #12]
 80091c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091c4:	fb01 f303 	mul.w	r3, r1, r3
 80091c8:	441a      	add	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e4:	3b01      	subs	r3, #1
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091ea:	fb01 f303 	mul.w	r3, r1, r3
 80091ee:	441a      	add	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	22ff      	movs	r2, #255	@ 0xff
 80091f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	22ff      	movs	r2, #255	@ 0xff
 8009200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d114      	bne.n	8009234 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d01a      	beq.n	8009248 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3310      	adds	r3, #16
 8009216:	4618      	mov	r0, r3
 8009218:	f001 fc30 	bl	800aa7c <xTaskRemoveFromEventList>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d012      	beq.n	8009248 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009222:	4b0d      	ldr	r3, [pc, #52]	@ (8009258 <xQueueGenericReset+0xd0>)
 8009224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	e009      	b.n	8009248 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3310      	adds	r3, #16
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fef1 	bl	8009020 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3324      	adds	r3, #36	@ 0x24
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff feec 	bl	8009020 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009248:	f002 fe98 	bl	800bf7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800924c:	2301      	movs	r3, #1
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	e000ed04 	.word	0xe000ed04

0800925c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08e      	sub	sp, #56	@ 0x38
 8009260:	af02      	add	r7, sp, #8
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10b      	bne.n	8009288 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009282:	bf00      	nop
 8009284:	bf00      	nop
 8009286:	e7fd      	b.n	8009284 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10b      	bne.n	80092a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092a0:	bf00      	nop
 80092a2:	bf00      	nop
 80092a4:	e7fd      	b.n	80092a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <xQueueGenericCreateStatic+0x56>
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <xQueueGenericCreateStatic+0x5a>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e000      	b.n	80092b8 <xQueueGenericCreateStatic+0x5c>
 80092b6:	2300      	movs	r3, #0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	623b      	str	r3, [r7, #32]
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	e7fd      	b.n	80092d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d102      	bne.n	80092e0 <xQueueGenericCreateStatic+0x84>
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <xQueueGenericCreateStatic+0x88>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <xQueueGenericCreateStatic+0x8a>
 80092e4:	2300      	movs	r3, #0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10b      	bne.n	8009302 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	61fb      	str	r3, [r7, #28]
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	e7fd      	b.n	80092fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009302:	2350      	movs	r3, #80	@ 0x50
 8009304:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b50      	cmp	r3, #80	@ 0x50
 800930a:	d00b      	beq.n	8009324 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	61bb      	str	r3, [r7, #24]
}
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	e7fd      	b.n	8009320 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009324:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00d      	beq.n	800934c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009338:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800933c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4613      	mov	r3, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f840 	bl	80093cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800934c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800934e:	4618      	mov	r0, r3
 8009350:	3730      	adds	r7, #48	@ 0x30
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009356:	b580      	push	{r7, lr}
 8009358:	b08a      	sub	sp, #40	@ 0x28
 800935a:	af02      	add	r7, sp, #8
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	4613      	mov	r3, r2
 8009362:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10b      	bne.n	8009382 <xQueueGenericCreate+0x2c>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	613b      	str	r3, [r7, #16]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	fb02 f303 	mul.w	r3, r2, r3
 800938a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	3350      	adds	r3, #80	@ 0x50
 8009390:	4618      	mov	r0, r3
 8009392:	f002 fee3 	bl	800c15c <pvPortMalloc>
 8009396:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d011      	beq.n	80093c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	3350      	adds	r3, #80	@ 0x50
 80093a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093b0:	79fa      	ldrb	r2, [r7, #7]
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	4613      	mov	r3, r2
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 f805 	bl	80093cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093c2:	69bb      	ldr	r3, [r7, #24]
	}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	e002      	b.n	80093ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093fa:	2101      	movs	r1, #1
 80093fc:	69b8      	ldr	r0, [r7, #24]
 80093fe:	f7ff fec3 	bl	8009188 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00e      	beq.n	800943e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009432:	2300      	movs	r3, #0
 8009434:	2200      	movs	r2, #0
 8009436:	2100      	movs	r1, #0
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f8a3 	bl	8009584 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009446:	b580      	push	{r7, lr}
 8009448:	b086      	sub	sp, #24
 800944a:	af00      	add	r7, sp, #0
 800944c:	4603      	mov	r3, r0
 800944e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009450:	2301      	movs	r3, #1
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	2300      	movs	r3, #0
 8009456:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009458:	79fb      	ldrb	r3, [r7, #7]
 800945a:	461a      	mov	r2, r3
 800945c:	6939      	ldr	r1, [r7, #16]
 800945e:	6978      	ldr	r0, [r7, #20]
 8009460:	f7ff ff79 	bl	8009356 <xQueueGenericCreate>
 8009464:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f7ff ffd3 	bl	8009412 <prvInitialiseMutex>

		return xNewQueue;
 800946c:	68fb      	ldr	r3, [r7, #12]
	}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009476:	b580      	push	{r7, lr}
 8009478:	b088      	sub	sp, #32
 800947a:	af02      	add	r7, sp, #8
 800947c:	4603      	mov	r3, r0
 800947e:	6039      	str	r1, [r7, #0]
 8009480:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009482:	2301      	movs	r3, #1
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	2300      	movs	r3, #0
 8009488:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800948a:	79fb      	ldrb	r3, [r7, #7]
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2200      	movs	r2, #0
 8009492:	6939      	ldr	r1, [r7, #16]
 8009494:	6978      	ldr	r0, [r7, #20]
 8009496:	f7ff fee1 	bl	800925c <xQueueGenericCreateStatic>
 800949a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f7ff ffb8 	bl	8009412 <prvInitialiseMutex>

		return xNewQueue;
 80094a2:	68fb      	ldr	r3, [r7, #12]
	}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10b      	bne.n	80094d6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	60fb      	str	r3, [r7, #12]
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	689c      	ldr	r4, [r3, #8]
 80094da:	f001 fc95 	bl	800ae08 <xTaskGetCurrentTaskHandle>
 80094de:	4603      	mov	r3, r0
 80094e0:	429c      	cmp	r4, r3
 80094e2:	d111      	bne.n	8009508 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	1e5a      	subs	r2, r3, #1
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d105      	bne.n	8009502 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80094f6:	2300      	movs	r3, #0
 80094f8:	2200      	movs	r2, #0
 80094fa:	2100      	movs	r1, #0
 80094fc:	6938      	ldr	r0, [r7, #16]
 80094fe:	f000 f841 	bl	8009584 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009502:	2301      	movs	r3, #1
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	e001      	b.n	800950c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800950c:	697b      	ldr	r3, [r7, #20]
	}
 800950e:	4618      	mov	r0, r3
 8009510:	371c      	adds	r7, #28
 8009512:	46bd      	mov	sp, r7
 8009514:	bd90      	pop	{r4, r7, pc}

08009516 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009516:	b590      	push	{r4, r7, lr}
 8009518:	b087      	sub	sp, #28
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10b      	bne.n	8009542 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	60fb      	str	r3, [r7, #12]
}
 800953c:	bf00      	nop
 800953e:	bf00      	nop
 8009540:	e7fd      	b.n	800953e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	689c      	ldr	r4, [r3, #8]
 8009546:	f001 fc5f 	bl	800ae08 <xTaskGetCurrentTaskHandle>
 800954a:	4603      	mov	r3, r0
 800954c:	429c      	cmp	r4, r3
 800954e:	d107      	bne.n	8009560 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800955a:	2301      	movs	r3, #1
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	e00c      	b.n	800957a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6938      	ldr	r0, [r7, #16]
 8009564:	f000 fa90 	bl	8009a88 <xQueueSemaphoreTake>
 8009568:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d004      	beq.n	800957a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800957a:	697b      	ldr	r3, [r7, #20]
	}
 800957c:	4618      	mov	r0, r3
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	bd90      	pop	{r4, r7, pc}

08009584 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08e      	sub	sp, #56	@ 0x38
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009592:	2300      	movs	r3, #0
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10b      	bne.n	80095b8 <xQueueGenericSend+0x34>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80095b2:	bf00      	nop
 80095b4:	bf00      	nop
 80095b6:	e7fd      	b.n	80095b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d103      	bne.n	80095c6 <xQueueGenericSend+0x42>
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <xQueueGenericSend+0x46>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e000      	b.n	80095cc <xQueueGenericSend+0x48>
 80095ca:	2300      	movs	r3, #0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10b      	bne.n	80095e8 <xQueueGenericSend+0x64>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	e7fd      	b.n	80095e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d103      	bne.n	80095f6 <xQueueGenericSend+0x72>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <xQueueGenericSend+0x76>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e000      	b.n	80095fc <xQueueGenericSend+0x78>
 80095fa:	2300      	movs	r3, #0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10b      	bne.n	8009618 <xQueueGenericSend+0x94>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	623b      	str	r3, [r7, #32]
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009618:	f001 fc06 	bl	800ae28 <xTaskGetSchedulerState>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <xQueueGenericSend+0xa4>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <xQueueGenericSend+0xa8>
 8009628:	2301      	movs	r3, #1
 800962a:	e000      	b.n	800962e <xQueueGenericSend+0xaa>
 800962c:	2300      	movs	r3, #0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10b      	bne.n	800964a <xQueueGenericSend+0xc6>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	61fb      	str	r3, [r7, #28]
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop
 8009648:	e7fd      	b.n	8009646 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800964a:	f002 fc65 	bl	800bf18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009656:	429a      	cmp	r2, r3
 8009658:	d302      	bcc.n	8009660 <xQueueGenericSend+0xdc>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b02      	cmp	r3, #2
 800965e:	d129      	bne.n	80096b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009666:	f000 fbf7 	bl	8009e58 <prvCopyDataToQueue>
 800966a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800966c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009670:	2b00      	cmp	r3, #0
 8009672:	d010      	beq.n	8009696 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	3324      	adds	r3, #36	@ 0x24
 8009678:	4618      	mov	r0, r3
 800967a:	f001 f9ff 	bl	800aa7c <xTaskRemoveFromEventList>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d013      	beq.n	80096ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009684:	4b3f      	ldr	r3, [pc, #252]	@ (8009784 <xQueueGenericSend+0x200>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	e00a      	b.n	80096ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d007      	beq.n	80096ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800969c:	4b39      	ldr	r3, [pc, #228]	@ (8009784 <xQueueGenericSend+0x200>)
 800969e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096ac:	f002 fc66 	bl	800bf7c <vPortExitCritical>
				return pdPASS;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e063      	b.n	800977c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d103      	bne.n	80096c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096ba:	f002 fc5f 	bl	800bf7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	e05c      	b.n	800977c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d106      	bne.n	80096d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096c8:	f107 0314 	add.w	r3, r7, #20
 80096cc:	4618      	mov	r0, r3
 80096ce:	f001 fa39 	bl	800ab44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096d2:	2301      	movs	r3, #1
 80096d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096d6:	f002 fc51 	bl	800bf7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096da:	f000 ff8f 	bl	800a5fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096de:	f002 fc1b 	bl	800bf18 <vPortEnterCritical>
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096e8:	b25b      	sxtb	r3, r3
 80096ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ee:	d103      	bne.n	80096f8 <xQueueGenericSend+0x174>
 80096f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096fe:	b25b      	sxtb	r3, r3
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009704:	d103      	bne.n	800970e <xQueueGenericSend+0x18a>
 8009706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800970e:	f002 fc35 	bl	800bf7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009712:	1d3a      	adds	r2, r7, #4
 8009714:	f107 0314 	add.w	r3, r7, #20
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f001 fa28 	bl	800ab70 <xTaskCheckForTimeOut>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d124      	bne.n	8009770 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009726:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009728:	f000 fc8e 	bl	800a048 <prvIsQueueFull>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d018      	beq.n	8009764 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009734:	3310      	adds	r3, #16
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	4611      	mov	r1, r2
 800973a:	4618      	mov	r0, r3
 800973c:	f001 f94c 	bl	800a9d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009740:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009742:	f000 fc19 	bl	8009f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009746:	f000 ff67 	bl	800a618 <xTaskResumeAll>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	f47f af7c 	bne.w	800964a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009752:	4b0c      	ldr	r3, [pc, #48]	@ (8009784 <xQueueGenericSend+0x200>)
 8009754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	e772      	b.n	800964a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009766:	f000 fc07 	bl	8009f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800976a:	f000 ff55 	bl	800a618 <xTaskResumeAll>
 800976e:	e76c      	b.n	800964a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009772:	f000 fc01 	bl	8009f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009776:	f000 ff4f 	bl	800a618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800977a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800977c:	4618      	mov	r0, r3
 800977e:	3738      	adds	r7, #56	@ 0x38
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	e000ed04 	.word	0xe000ed04

08009788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b090      	sub	sp, #64	@ 0x40
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800979a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10b      	bne.n	80097b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d103      	bne.n	80097c6 <xQueueGenericSendFromISR+0x3e>
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <xQueueGenericSendFromISR+0x42>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e000      	b.n	80097cc <xQueueGenericSendFromISR+0x44>
 80097ca:	2300      	movs	r3, #0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10b      	bne.n	80097e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	e7fd      	b.n	80097e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d103      	bne.n	80097f6 <xQueueGenericSendFromISR+0x6e>
 80097ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d101      	bne.n	80097fa <xQueueGenericSendFromISR+0x72>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e000      	b.n	80097fc <xQueueGenericSendFromISR+0x74>
 80097fa:	2300      	movs	r3, #0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10b      	bne.n	8009818 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	623b      	str	r3, [r7, #32]
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	e7fd      	b.n	8009814 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009818:	f002 fc5e 	bl	800c0d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800981c:	f3ef 8211 	mrs	r2, BASEPRI
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	61fa      	str	r2, [r7, #28]
 8009832:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009834:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009836:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800983c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009840:	429a      	cmp	r2, r3
 8009842:	d302      	bcc.n	800984a <xQueueGenericSendFromISR+0xc2>
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d12f      	bne.n	80098aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009850:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009858:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009860:	f000 fafa 	bl	8009e58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009864:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986c:	d112      	bne.n	8009894 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800986e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009872:	2b00      	cmp	r3, #0
 8009874:	d016      	beq.n	80098a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009878:	3324      	adds	r3, #36	@ 0x24
 800987a:	4618      	mov	r0, r3
 800987c:	f001 f8fe 	bl	800aa7c <xTaskRemoveFromEventList>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00e      	beq.n	80098a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e007      	b.n	80098a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009894:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009898:	3301      	adds	r3, #1
 800989a:	b2db      	uxtb	r3, r3
 800989c:	b25a      	sxtb	r2, r3
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80098a4:	2301      	movs	r3, #1
 80098a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80098a8:	e001      	b.n	80098ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3740      	adds	r7, #64	@ 0x40
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08c      	sub	sp, #48	@ 0x30
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10b      	bne.n	80098f6 <xQueueReceive+0x32>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	623b      	str	r3, [r7, #32]
}
 80098f0:	bf00      	nop
 80098f2:	bf00      	nop
 80098f4:	e7fd      	b.n	80098f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <xQueueReceive+0x40>
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <xQueueReceive+0x44>
 8009904:	2301      	movs	r3, #1
 8009906:	e000      	b.n	800990a <xQueueReceive+0x46>
 8009908:	2300      	movs	r3, #0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10b      	bne.n	8009926 <xQueueReceive+0x62>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	61fb      	str	r3, [r7, #28]
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	e7fd      	b.n	8009922 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009926:	f001 fa7f 	bl	800ae28 <xTaskGetSchedulerState>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d102      	bne.n	8009936 <xQueueReceive+0x72>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <xQueueReceive+0x76>
 8009936:	2301      	movs	r3, #1
 8009938:	e000      	b.n	800993c <xQueueReceive+0x78>
 800993a:	2300      	movs	r3, #0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10b      	bne.n	8009958 <xQueueReceive+0x94>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	61bb      	str	r3, [r7, #24]
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	e7fd      	b.n	8009954 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009958:	f002 fade 	bl	800bf18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009960:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	d01f      	beq.n	80099a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800996c:	f000 fade 	bl	8009f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009972:	1e5a      	subs	r2, r3, #1
 8009974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009976:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00f      	beq.n	80099a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009982:	3310      	adds	r3, #16
 8009984:	4618      	mov	r0, r3
 8009986:	f001 f879 	bl	800aa7c <xTaskRemoveFromEventList>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d007      	beq.n	80099a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009990:	4b3c      	ldr	r3, [pc, #240]	@ (8009a84 <xQueueReceive+0x1c0>)
 8009992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099a0:	f002 faec 	bl	800bf7c <vPortExitCritical>
				return pdPASS;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e069      	b.n	8009a7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d103      	bne.n	80099b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099ae:	f002 fae5 	bl	800bf7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099b2:	2300      	movs	r3, #0
 80099b4:	e062      	b.n	8009a7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d106      	bne.n	80099ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099bc:	f107 0310 	add.w	r3, r7, #16
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 f8bf 	bl	800ab44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099c6:	2301      	movs	r3, #1
 80099c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099ca:	f002 fad7 	bl	800bf7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099ce:	f000 fe15 	bl	800a5fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099d2:	f002 faa1 	bl	800bf18 <vPortEnterCritical>
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099dc:	b25b      	sxtb	r3, r3
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e2:	d103      	bne.n	80099ec <xQueueReceive+0x128>
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099f2:	b25b      	sxtb	r3, r3
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f8:	d103      	bne.n	8009a02 <xQueueReceive+0x13e>
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a02:	f002 fabb 	bl	800bf7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a06:	1d3a      	adds	r2, r7, #4
 8009a08:	f107 0310 	add.w	r3, r7, #16
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f001 f8ae 	bl	800ab70 <xTaskCheckForTimeOut>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d123      	bne.n	8009a62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a1c:	f000 fafe 	bl	800a01c <prvIsQueueEmpty>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d017      	beq.n	8009a56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a28:	3324      	adds	r3, #36	@ 0x24
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 ffd2 	bl	800a9d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a36:	f000 fa9f 	bl	8009f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a3a:	f000 fded 	bl	800a618 <xTaskResumeAll>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d189      	bne.n	8009958 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009a44:	4b0f      	ldr	r3, [pc, #60]	@ (8009a84 <xQueueReceive+0x1c0>)
 8009a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	e780      	b.n	8009958 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a58:	f000 fa8e 	bl	8009f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a5c:	f000 fddc 	bl	800a618 <xTaskResumeAll>
 8009a60:	e77a      	b.n	8009958 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a64:	f000 fa88 	bl	8009f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a68:	f000 fdd6 	bl	800a618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a6e:	f000 fad5 	bl	800a01c <prvIsQueueEmpty>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f43f af6f 	beq.w	8009958 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3730      	adds	r7, #48	@ 0x30
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	e000ed04 	.word	0xe000ed04

08009a88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08e      	sub	sp, #56	@ 0x38
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a92:	2300      	movs	r3, #0
 8009a94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10b      	bne.n	8009abc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	623b      	str	r3, [r7, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	61fb      	str	r3, [r7, #28]
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	e7fd      	b.n	8009ad8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009adc:	f001 f9a4 	bl	800ae28 <xTaskGetSchedulerState>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <xQueueSemaphoreTake+0x64>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <xQueueSemaphoreTake+0x68>
 8009aec:	2301      	movs	r3, #1
 8009aee:	e000      	b.n	8009af2 <xQueueSemaphoreTake+0x6a>
 8009af0:	2300      	movs	r3, #0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10b      	bne.n	8009b0e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	61bb      	str	r3, [r7, #24]
}
 8009b08:	bf00      	nop
 8009b0a:	bf00      	nop
 8009b0c:	e7fd      	b.n	8009b0a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b0e:	f002 fa03 	bl	800bf18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b16:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d024      	beq.n	8009b68 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b20:	1e5a      	subs	r2, r3, #1
 8009b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b24:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d104      	bne.n	8009b38 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b2e:	f001 faf5 	bl	800b11c <pvTaskIncrementMutexHeldCount>
 8009b32:	4602      	mov	r2, r0
 8009b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00f      	beq.n	8009b60 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b42:	3310      	adds	r3, #16
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 ff99 	bl	800aa7c <xTaskRemoveFromEventList>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d007      	beq.n	8009b60 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b50:	4b54      	ldr	r3, [pc, #336]	@ (8009ca4 <xQueueSemaphoreTake+0x21c>)
 8009b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b60:	f002 fa0c 	bl	800bf7c <vPortExitCritical>
				return pdPASS;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e098      	b.n	8009c9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d112      	bne.n	8009b94 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	617b      	str	r3, [r7, #20]
}
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	e7fd      	b.n	8009b88 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b8c:	f002 f9f6 	bl	800bf7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b90:	2300      	movs	r3, #0
 8009b92:	e082      	b.n	8009c9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d106      	bne.n	8009ba8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b9a:	f107 030c 	add.w	r3, r7, #12
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 ffd0 	bl	800ab44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ba8:	f002 f9e8 	bl	800bf7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bac:	f000 fd26 	bl	800a5fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bb0:	f002 f9b2 	bl	800bf18 <vPortEnterCritical>
 8009bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bba:	b25b      	sxtb	r3, r3
 8009bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc0:	d103      	bne.n	8009bca <xQueueSemaphoreTake+0x142>
 8009bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bd0:	b25b      	sxtb	r3, r3
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd6:	d103      	bne.n	8009be0 <xQueueSemaphoreTake+0x158>
 8009bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009be0:	f002 f9cc 	bl	800bf7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009be4:	463a      	mov	r2, r7
 8009be6:	f107 030c 	add.w	r3, r7, #12
 8009bea:	4611      	mov	r1, r2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 ffbf 	bl	800ab70 <xTaskCheckForTimeOut>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d132      	bne.n	8009c5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bfa:	f000 fa0f 	bl	800a01c <prvIsQueueEmpty>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d026      	beq.n	8009c52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d109      	bne.n	8009c20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009c0c:	f002 f984 	bl	800bf18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 f925 	bl	800ae64 <xTaskPriorityInherit>
 8009c1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009c1c:	f002 f9ae 	bl	800bf7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c22:	3324      	adds	r3, #36	@ 0x24
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fed5 	bl	800a9d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c30:	f000 f9a2 	bl	8009f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c34:	f000 fcf0 	bl	800a618 <xTaskResumeAll>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f47f af67 	bne.w	8009b0e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009c40:	4b18      	ldr	r3, [pc, #96]	@ (8009ca4 <xQueueSemaphoreTake+0x21c>)
 8009c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	e75d      	b.n	8009b0e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c54:	f000 f990 	bl	8009f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c58:	f000 fcde 	bl	800a618 <xTaskResumeAll>
 8009c5c:	e757      	b.n	8009b0e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c60:	f000 f98a 	bl	8009f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c64:	f000 fcd8 	bl	800a618 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c6a:	f000 f9d7 	bl	800a01c <prvIsQueueEmpty>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f43f af4c 	beq.w	8009b0e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00d      	beq.n	8009c98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009c7c:	f002 f94c 	bl	800bf18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c82:	f000 f8d1 	bl	8009e28 <prvGetDisinheritPriorityAfterTimeout>
 8009c86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f001 f9c0 	bl	800b014 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c94:	f002 f972 	bl	800bf7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3738      	adds	r7, #56	@ 0x38
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	e000ed04 	.word	0xe000ed04

08009ca8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08e      	sub	sp, #56	@ 0x38
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10b      	bne.n	8009cd6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	623b      	str	r3, [r7, #32]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d103      	bne.n	8009ce4 <xQueueReceiveFromISR+0x3c>
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <xQueueReceiveFromISR+0x40>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e000      	b.n	8009cea <xQueueReceiveFromISR+0x42>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10b      	bne.n	8009d06 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	61fb      	str	r3, [r7, #28]
}
 8009d00:	bf00      	nop
 8009d02:	bf00      	nop
 8009d04:	e7fd      	b.n	8009d02 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d06:	f002 f9e7 	bl	800c0d8 <vPortValidateInterruptPriority>
	__asm volatile
 8009d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61ba      	str	r2, [r7, #24]
 8009d20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009d22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d02f      	beq.n	8009d92 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d40:	f000 f8f4 	bl	8009f2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	1e5a      	subs	r2, r3, #1
 8009d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d54:	d112      	bne.n	8009d7c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d016      	beq.n	8009d8c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	3310      	adds	r3, #16
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fe8a 	bl	800aa7c <xTaskRemoveFromEventList>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00e      	beq.n	8009d8c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	e007      	b.n	8009d8c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d80:	3301      	adds	r3, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	b25a      	sxtb	r2, r3
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d90:	e001      	b.n	8009d96 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f383 8811 	msr	BASEPRI, r3
}
 8009da0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3738      	adds	r7, #56	@ 0x38
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10b      	bne.n	8009dd2 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	60bb      	str	r3, [r7, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	e7fd      	b.n	8009dce <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009dd2:	f002 f8a1 	bl	800bf18 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dda:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009ddc:	f002 f8ce 	bl	800bf7c <vPortExitCritical>

	return uxReturn;
 8009de0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009dea:	b480      	push	{r7}
 8009dec:	b087      	sub	sp, #28
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10b      	bne.n	8009e14 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60fb      	str	r3, [r7, #12]
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	e7fd      	b.n	8009e10 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e18:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009e1a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d006      	beq.n	8009e46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e001      	b.n	8009e4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
	}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e64:	2300      	movs	r3, #0
 8009e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10d      	bne.n	8009e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d14d      	bne.n	8009f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 f856 	bl	800af34 <xTaskPriorityDisinherit>
 8009e88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	609a      	str	r2, [r3, #8]
 8009e90:	e043      	b.n	8009f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d119      	bne.n	8009ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6858      	ldr	r0, [r3, #4]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	f003 fab7 	bl	800d416 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb0:	441a      	add	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d32b      	bcc.n	8009f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	605a      	str	r2, [r3, #4]
 8009eca:	e026      	b.n	8009f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68d8      	ldr	r0, [r3, #12]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	68b9      	ldr	r1, [r7, #8]
 8009ed8:	f003 fa9d 	bl	800d416 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee4:	425b      	negs	r3, r3
 8009ee6:	441a      	add	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d207      	bcs.n	8009f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f00:	425b      	negs	r3, r3
 8009f02:	441a      	add	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d105      	bne.n	8009f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f22:	697b      	ldr	r3, [r7, #20]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3718      	adds	r7, #24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d018      	beq.n	8009f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f46:	441a      	add	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68da      	ldr	r2, [r3, #12]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d303      	bcc.n	8009f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68d9      	ldr	r1, [r3, #12]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6838      	ldr	r0, [r7, #0]
 8009f6c:	f003 fa53 	bl	800d416 <memcpy>
	}
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f80:	f001 ffca 	bl	800bf18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f8c:	e011      	b.n	8009fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d012      	beq.n	8009fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3324      	adds	r3, #36	@ 0x24
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 fd6e 	bl	800aa7c <xTaskRemoveFromEventList>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fa6:	f000 fe47 	bl	800ac38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dce9      	bgt.n	8009f8e <prvUnlockQueue+0x16>
 8009fba:	e000      	b.n	8009fbe <prvUnlockQueue+0x46>
					break;
 8009fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	22ff      	movs	r2, #255	@ 0xff
 8009fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009fc6:	f001 ffd9 	bl	800bf7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009fca:	f001 ffa5 	bl	800bf18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fd6:	e011      	b.n	8009ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d012      	beq.n	800a006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3310      	adds	r3, #16
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fd49 	bl	800aa7c <xTaskRemoveFromEventList>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ff0:	f000 fe22 	bl	800ac38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a000:	2b00      	cmp	r3, #0
 800a002:	dce9      	bgt.n	8009fd8 <prvUnlockQueue+0x60>
 800a004:	e000      	b.n	800a008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	22ff      	movs	r2, #255	@ 0xff
 800a00c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a010:	f001 ffb4 	bl	800bf7c <vPortExitCritical>
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a024:	f001 ff78 	bl	800bf18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a030:	2301      	movs	r3, #1
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	e001      	b.n	800a03a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a03a:	f001 ff9f 	bl	800bf7c <vPortExitCritical>

	return xReturn;
 800a03e:	68fb      	ldr	r3, [r7, #12]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a050:	f001 ff62 	bl	800bf18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d102      	bne.n	800a066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a060:	2301      	movs	r3, #1
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e001      	b.n	800a06a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a06a:	f001 ff87 	bl	800bf7c <vPortExitCritical>

	return xReturn;
 800a06e:	68fb      	ldr	r3, [r7, #12]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	e014      	b.n	800a0b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a088:	4a0f      	ldr	r2, [pc, #60]	@ (800a0c8 <vQueueAddToRegistry+0x50>)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a094:	490c      	ldr	r1, [pc, #48]	@ (800a0c8 <vQueueAddToRegistry+0x50>)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a09e:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c8 <vQueueAddToRegistry+0x50>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0aa:	e006      	b.n	800a0ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b07      	cmp	r3, #7
 800a0b6:	d9e7      	bls.n	800a088 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0b8:	bf00      	nop
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20001334 	.word	0x20001334

0800a0cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0dc:	f001 ff1c 	bl	800bf18 <vPortEnterCritical>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0e6:	b25b      	sxtb	r3, r3
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ec:	d103      	bne.n	800a0f6 <vQueueWaitForMessageRestricted+0x2a>
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a102:	d103      	bne.n	800a10c <vQueueWaitForMessageRestricted+0x40>
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a10c:	f001 ff36 	bl	800bf7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a114:	2b00      	cmp	r3, #0
 800a116:	d106      	bne.n	800a126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	3324      	adds	r3, #36	@ 0x24
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	68b9      	ldr	r1, [r7, #8]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fc7f 	bl	800aa24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a126:	6978      	ldr	r0, [r7, #20]
 800a128:	f7ff ff26 	bl	8009f78 <prvUnlockQueue>
	}
 800a12c:	bf00      	nop
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08e      	sub	sp, #56	@ 0x38
 800a138:	af04      	add	r7, sp, #16
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10b      	bne.n	800a160 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	623b      	str	r3, [r7, #32]
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	e7fd      	b.n	800a15c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10b      	bne.n	800a17e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	61fb      	str	r3, [r7, #28]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a17e:	23a8      	movs	r3, #168	@ 0xa8
 800a180:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	2ba8      	cmp	r3, #168	@ 0xa8
 800a186:	d00b      	beq.n	800a1a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	61bb      	str	r3, [r7, #24]
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01e      	beq.n	800a1e6 <xTaskCreateStatic+0xb2>
 800a1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d01b      	beq.n	800a1e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	9303      	str	r3, [sp, #12]
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	9302      	str	r3, [sp, #8]
 800a1c8:	f107 0314 	add.w	r3, r7, #20
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	68b9      	ldr	r1, [r7, #8]
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f851 	bl	800a280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1e0:	f000 f8f6 	bl	800a3d0 <prvAddNewTaskToReadyList>
 800a1e4:	e001      	b.n	800a1ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1ea:	697b      	ldr	r3, [r7, #20]
	}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3728      	adds	r7, #40	@ 0x28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08c      	sub	sp, #48	@ 0x30
 800a1f8:	af04      	add	r7, sp, #16
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	4613      	mov	r3, r2
 800a202:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a204:	88fb      	ldrh	r3, [r7, #6]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4618      	mov	r0, r3
 800a20a:	f001 ffa7 	bl	800c15c <pvPortMalloc>
 800a20e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00e      	beq.n	800a234 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a216:	20a8      	movs	r0, #168	@ 0xa8
 800a218:	f001 ffa0 	bl	800c15c <pvPortMalloc>
 800a21c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	631a      	str	r2, [r3, #48]	@ 0x30
 800a22a:	e005      	b.n	800a238 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a22c:	6978      	ldr	r0, [r7, #20]
 800a22e:	f002 f863 	bl	800c2f8 <vPortFree>
 800a232:	e001      	b.n	800a238 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d017      	beq.n	800a26e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a246:	88fa      	ldrh	r2, [r7, #6]
 800a248:	2300      	movs	r3, #0
 800a24a:	9303      	str	r3, [sp, #12]
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	9302      	str	r3, [sp, #8]
 800a250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	68b9      	ldr	r1, [r7, #8]
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 f80f 	bl	800a280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a262:	69f8      	ldr	r0, [r7, #28]
 800a264:	f000 f8b4 	bl	800a3d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a268:	2301      	movs	r3, #1
 800a26a:	61bb      	str	r3, [r7, #24]
 800a26c:	e002      	b.n	800a274 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a26e:	f04f 33ff 	mov.w	r3, #4294967295
 800a272:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a274:	69bb      	ldr	r3, [r7, #24]
	}
 800a276:	4618      	mov	r0, r3
 800a278:	3720      	adds	r7, #32
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b088      	sub	sp, #32
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	461a      	mov	r2, r3
 800a298:	21a5      	movs	r1, #165	@ 0xa5
 800a29a:	f002 ffe7 	bl	800d26c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	f023 0307 	bic.w	r3, r3, #7
 800a2b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	617b      	str	r3, [r7, #20]
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	e7fd      	b.n	800a2d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d01f      	beq.n	800a320 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	e012      	b.n	800a30c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	7819      	ldrb	r1, [r3, #0]
 800a2ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	3334      	adds	r3, #52	@ 0x34
 800a2f6:	460a      	mov	r2, r1
 800a2f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	4413      	add	r3, r2
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d006      	beq.n	800a314 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	3301      	adds	r3, #1
 800a30a:	61fb      	str	r3, [r7, #28]
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2b0f      	cmp	r3, #15
 800a310:	d9e9      	bls.n	800a2e6 <prvInitialiseNewTask+0x66>
 800a312:	e000      	b.n	800a316 <prvInitialiseNewTask+0x96>
			{
				break;
 800a314:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a31e:	e003      	b.n	800a328 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32a:	2b37      	cmp	r3, #55	@ 0x37
 800a32c:	d901      	bls.n	800a332 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a32e:	2337      	movs	r3, #55	@ 0x37
 800a330:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a336:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a33c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	2200      	movs	r2, #0
 800a342:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a346:	3304      	adds	r3, #4
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe fe89 	bl	8009060 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	3318      	adds	r3, #24
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe fe84 	bl	8009060 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a35c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a36c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a370:	2200      	movs	r2, #0
 800a372:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	3354      	adds	r3, #84	@ 0x54
 800a382:	224c      	movs	r2, #76	@ 0x4c
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f002 ff70 	bl	800d26c <memset>
 800a38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38e:	4a0d      	ldr	r2, [pc, #52]	@ (800a3c4 <prvInitialiseNewTask+0x144>)
 800a390:	659a      	str	r2, [r3, #88]	@ 0x58
 800a392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a394:	4a0c      	ldr	r2, [pc, #48]	@ (800a3c8 <prvInitialiseNewTask+0x148>)
 800a396:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	4a0c      	ldr	r2, [pc, #48]	@ (800a3cc <prvInitialiseNewTask+0x14c>)
 800a39c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	68f9      	ldr	r1, [r7, #12]
 800a3a2:	69b8      	ldr	r0, [r7, #24]
 800a3a4:	f001 fc84 	bl	800bcb0 <pxPortInitialiseStack>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3ba:	bf00      	nop
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	200049c8 	.word	0x200049c8
 800a3c8:	20004a30 	.word	0x20004a30
 800a3cc:	20004a98 	.word	0x20004a98

0800a3d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3d8:	f001 fd9e 	bl	800bf18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3dc:	4b2d      	ldr	r3, [pc, #180]	@ (800a494 <prvAddNewTaskToReadyList+0xc4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	4a2c      	ldr	r2, [pc, #176]	@ (800a494 <prvAddNewTaskToReadyList+0xc4>)
 800a3e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3e6:	4b2c      	ldr	r3, [pc, #176]	@ (800a498 <prvAddNewTaskToReadyList+0xc8>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3ee:	4a2a      	ldr	r2, [pc, #168]	@ (800a498 <prvAddNewTaskToReadyList+0xc8>)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3f4:	4b27      	ldr	r3, [pc, #156]	@ (800a494 <prvAddNewTaskToReadyList+0xc4>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d110      	bne.n	800a41e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3fc:	f000 fc40 	bl	800ac80 <prvInitialiseTaskLists>
 800a400:	e00d      	b.n	800a41e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a402:	4b26      	ldr	r3, [pc, #152]	@ (800a49c <prvAddNewTaskToReadyList+0xcc>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d109      	bne.n	800a41e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a40a:	4b23      	ldr	r3, [pc, #140]	@ (800a498 <prvAddNewTaskToReadyList+0xc8>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a414:	429a      	cmp	r2, r3
 800a416:	d802      	bhi.n	800a41e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a418:	4a1f      	ldr	r2, [pc, #124]	@ (800a498 <prvAddNewTaskToReadyList+0xc8>)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a41e:	4b20      	ldr	r3, [pc, #128]	@ (800a4a0 <prvAddNewTaskToReadyList+0xd0>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3301      	adds	r3, #1
 800a424:	4a1e      	ldr	r2, [pc, #120]	@ (800a4a0 <prvAddNewTaskToReadyList+0xd0>)
 800a426:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a428:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a0 <prvAddNewTaskToReadyList+0xd0>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a434:	4b1b      	ldr	r3, [pc, #108]	@ (800a4a4 <prvAddNewTaskToReadyList+0xd4>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d903      	bls.n	800a444 <prvAddNewTaskToReadyList+0x74>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a440:	4a18      	ldr	r2, [pc, #96]	@ (800a4a4 <prvAddNewTaskToReadyList+0xd4>)
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4a15      	ldr	r2, [pc, #84]	@ (800a4a8 <prvAddNewTaskToReadyList+0xd8>)
 800a452:	441a      	add	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3304      	adds	r3, #4
 800a458:	4619      	mov	r1, r3
 800a45a:	4610      	mov	r0, r2
 800a45c:	f7fe fe0d 	bl	800907a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a460:	f001 fd8c 	bl	800bf7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a464:	4b0d      	ldr	r3, [pc, #52]	@ (800a49c <prvAddNewTaskToReadyList+0xcc>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00e      	beq.n	800a48a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a46c:	4b0a      	ldr	r3, [pc, #40]	@ (800a498 <prvAddNewTaskToReadyList+0xc8>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a476:	429a      	cmp	r2, r3
 800a478:	d207      	bcs.n	800a48a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a47a:	4b0c      	ldr	r3, [pc, #48]	@ (800a4ac <prvAddNewTaskToReadyList+0xdc>)
 800a47c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a48a:	bf00      	nop
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	20001848 	.word	0x20001848
 800a498:	20001374 	.word	0x20001374
 800a49c:	20001854 	.word	0x20001854
 800a4a0:	20001864 	.word	0x20001864
 800a4a4:	20001850 	.word	0x20001850
 800a4a8:	20001378 	.word	0x20001378
 800a4ac:	e000ed04 	.word	0xe000ed04

0800a4b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d018      	beq.n	800a4f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4c2:	4b14      	ldr	r3, [pc, #80]	@ (800a514 <vTaskDelay+0x64>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00b      	beq.n	800a4e2 <vTaskDelay+0x32>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	60bb      	str	r3, [r7, #8]
}
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
 800a4e0:	e7fd      	b.n	800a4de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4e2:	f000 f88b 	bl	800a5fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 f833 	bl	800b554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4ee:	f000 f893 	bl	800a618 <xTaskResumeAll>
 800a4f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d107      	bne.n	800a50a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a4fa:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <vTaskDelay+0x68>)
 800a4fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20001870 	.word	0x20001870
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08a      	sub	sp, #40	@ 0x28
 800a520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a526:	2300      	movs	r3, #0
 800a528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a52a:	463a      	mov	r2, r7
 800a52c:	1d39      	adds	r1, r7, #4
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fd40 	bl	8008fb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	9202      	str	r2, [sp, #8]
 800a540:	9301      	str	r3, [sp, #4]
 800a542:	2300      	movs	r3, #0
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	2300      	movs	r3, #0
 800a548:	460a      	mov	r2, r1
 800a54a:	4924      	ldr	r1, [pc, #144]	@ (800a5dc <vTaskStartScheduler+0xc0>)
 800a54c:	4824      	ldr	r0, [pc, #144]	@ (800a5e0 <vTaskStartScheduler+0xc4>)
 800a54e:	f7ff fdf1 	bl	800a134 <xTaskCreateStatic>
 800a552:	4603      	mov	r3, r0
 800a554:	4a23      	ldr	r2, [pc, #140]	@ (800a5e4 <vTaskStartScheduler+0xc8>)
 800a556:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a558:	4b22      	ldr	r3, [pc, #136]	@ (800a5e4 <vTaskStartScheduler+0xc8>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d002      	beq.n	800a566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a560:	2301      	movs	r3, #1
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	e001      	b.n	800a56a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d102      	bne.n	800a576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a570:	f001 f844 	bl	800b5fc <xTimerCreateTimerTask>
 800a574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d11b      	bne.n	800a5b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	613b      	str	r3, [r7, #16]
}
 800a58e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a590:	4b15      	ldr	r3, [pc, #84]	@ (800a5e8 <vTaskStartScheduler+0xcc>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3354      	adds	r3, #84	@ 0x54
 800a596:	4a15      	ldr	r2, [pc, #84]	@ (800a5ec <vTaskStartScheduler+0xd0>)
 800a598:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a59a:	4b15      	ldr	r3, [pc, #84]	@ (800a5f0 <vTaskStartScheduler+0xd4>)
 800a59c:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5a2:	4b14      	ldr	r3, [pc, #80]	@ (800a5f4 <vTaskStartScheduler+0xd8>)
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5a8:	4b13      	ldr	r3, [pc, #76]	@ (800a5f8 <vTaskStartScheduler+0xdc>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5ae:	f001 fc0f 	bl	800bdd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5b2:	e00f      	b.n	800a5d4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ba:	d10b      	bne.n	800a5d4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	60fb      	str	r3, [r7, #12]
}
 800a5ce:	bf00      	nop
 800a5d0:	bf00      	nop
 800a5d2:	e7fd      	b.n	800a5d0 <vTaskStartScheduler+0xb4>
}
 800a5d4:	bf00      	nop
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	0800f5d8 	.word	0x0800f5d8
 800a5e0:	0800ac51 	.word	0x0800ac51
 800a5e4:	2000186c 	.word	0x2000186c
 800a5e8:	20001374 	.word	0x20001374
 800a5ec:	20000190 	.word	0x20000190
 800a5f0:	20001868 	.word	0x20001868
 800a5f4:	20001854 	.word	0x20001854
 800a5f8:	2000184c 	.word	0x2000184c

0800a5fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a600:	4b04      	ldr	r3, [pc, #16]	@ (800a614 <vTaskSuspendAll+0x18>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	4a03      	ldr	r2, [pc, #12]	@ (800a614 <vTaskSuspendAll+0x18>)
 800a608:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a60a:	bf00      	nop
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	20001870 	.word	0x20001870

0800a618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a622:	2300      	movs	r3, #0
 800a624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a626:	4b42      	ldr	r3, [pc, #264]	@ (800a730 <xTaskResumeAll+0x118>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10b      	bne.n	800a646 <xTaskResumeAll+0x2e>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	603b      	str	r3, [r7, #0]
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	e7fd      	b.n	800a642 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a646:	f001 fc67 	bl	800bf18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a64a:	4b39      	ldr	r3, [pc, #228]	@ (800a730 <xTaskResumeAll+0x118>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3b01      	subs	r3, #1
 800a650:	4a37      	ldr	r2, [pc, #220]	@ (800a730 <xTaskResumeAll+0x118>)
 800a652:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a654:	4b36      	ldr	r3, [pc, #216]	@ (800a730 <xTaskResumeAll+0x118>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d162      	bne.n	800a722 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a65c:	4b35      	ldr	r3, [pc, #212]	@ (800a734 <xTaskResumeAll+0x11c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d05e      	beq.n	800a722 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a664:	e02f      	b.n	800a6c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a666:	4b34      	ldr	r3, [pc, #208]	@ (800a738 <xTaskResumeAll+0x120>)
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3318      	adds	r3, #24
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fd5e 	bl	8009134 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3304      	adds	r3, #4
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe fd59 	bl	8009134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a686:	4b2d      	ldr	r3, [pc, #180]	@ (800a73c <xTaskResumeAll+0x124>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d903      	bls.n	800a696 <xTaskResumeAll+0x7e>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a692:	4a2a      	ldr	r2, [pc, #168]	@ (800a73c <xTaskResumeAll+0x124>)
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a69a:	4613      	mov	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4a27      	ldr	r2, [pc, #156]	@ (800a740 <xTaskResumeAll+0x128>)
 800a6a4:	441a      	add	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fe fce4 	bl	800907a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b6:	4b23      	ldr	r3, [pc, #140]	@ (800a744 <xTaskResumeAll+0x12c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d302      	bcc.n	800a6c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a6c0:	4b21      	ldr	r3, [pc, #132]	@ (800a748 <xTaskResumeAll+0x130>)
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6c6:	4b1c      	ldr	r3, [pc, #112]	@ (800a738 <xTaskResumeAll+0x120>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1cb      	bne.n	800a666 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6d4:	f000 fb78 	bl	800adc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a74c <xTaskResumeAll+0x134>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d010      	beq.n	800a706 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6e4:	f000 f858 	bl	800a798 <xTaskIncrementTick>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a6ee:	4b16      	ldr	r3, [pc, #88]	@ (800a748 <xTaskResumeAll+0x130>)
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1f1      	bne.n	800a6e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a700:	4b12      	ldr	r3, [pc, #72]	@ (800a74c <xTaskResumeAll+0x134>)
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a706:	4b10      	ldr	r3, [pc, #64]	@ (800a748 <xTaskResumeAll+0x130>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d009      	beq.n	800a722 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a70e:	2301      	movs	r3, #1
 800a710:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a712:	4b0f      	ldr	r3, [pc, #60]	@ (800a750 <xTaskResumeAll+0x138>)
 800a714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a722:	f001 fc2b 	bl	800bf7c <vPortExitCritical>

	return xAlreadyYielded;
 800a726:	68bb      	ldr	r3, [r7, #8]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20001870 	.word	0x20001870
 800a734:	20001848 	.word	0x20001848
 800a738:	20001808 	.word	0x20001808
 800a73c:	20001850 	.word	0x20001850
 800a740:	20001378 	.word	0x20001378
 800a744:	20001374 	.word	0x20001374
 800a748:	2000185c 	.word	0x2000185c
 800a74c:	20001858 	.word	0x20001858
 800a750:	e000ed04 	.word	0xe000ed04

0800a754 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a75a:	4b05      	ldr	r3, [pc, #20]	@ (800a770 <xTaskGetTickCount+0x1c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a760:	687b      	ldr	r3, [r7, #4]
}
 800a762:	4618      	mov	r0, r3
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	2000184c 	.word	0x2000184c

0800a774 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a77a:	f001 fcad 	bl	800c0d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a77e:	2300      	movs	r3, #0
 800a780:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a782:	4b04      	ldr	r3, [pc, #16]	@ (800a794 <xTaskGetTickCountFromISR+0x20>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a788:	683b      	ldr	r3, [r7, #0]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	2000184c 	.word	0x2000184c

0800a798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a2:	4b4f      	ldr	r3, [pc, #316]	@ (800a8e0 <xTaskIncrementTick+0x148>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f040 8090 	bne.w	800a8cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800a8e4 <xTaskIncrementTick+0x14c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7b4:	4a4b      	ldr	r2, [pc, #300]	@ (800a8e4 <xTaskIncrementTick+0x14c>)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d121      	bne.n	800a804 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7c0:	4b49      	ldr	r3, [pc, #292]	@ (800a8e8 <xTaskIncrementTick+0x150>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00b      	beq.n	800a7e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	603b      	str	r3, [r7, #0]
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	e7fd      	b.n	800a7de <xTaskIncrementTick+0x46>
 800a7e2:	4b41      	ldr	r3, [pc, #260]	@ (800a8e8 <xTaskIncrementTick+0x150>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	4b40      	ldr	r3, [pc, #256]	@ (800a8ec <xTaskIncrementTick+0x154>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a3e      	ldr	r2, [pc, #248]	@ (800a8e8 <xTaskIncrementTick+0x150>)
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	4a3e      	ldr	r2, [pc, #248]	@ (800a8ec <xTaskIncrementTick+0x154>)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6013      	str	r3, [r2, #0]
 800a7f6:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f0 <xTaskIncrementTick+0x158>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	4a3c      	ldr	r2, [pc, #240]	@ (800a8f0 <xTaskIncrementTick+0x158>)
 800a7fe:	6013      	str	r3, [r2, #0]
 800a800:	f000 fae2 	bl	800adc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a804:	4b3b      	ldr	r3, [pc, #236]	@ (800a8f4 <xTaskIncrementTick+0x15c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d349      	bcc.n	800a8a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a80e:	4b36      	ldr	r3, [pc, #216]	@ (800a8e8 <xTaskIncrementTick+0x150>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d104      	bne.n	800a822 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a818:	4b36      	ldr	r3, [pc, #216]	@ (800a8f4 <xTaskIncrementTick+0x15c>)
 800a81a:	f04f 32ff 	mov.w	r2, #4294967295
 800a81e:	601a      	str	r2, [r3, #0]
					break;
 800a820:	e03f      	b.n	800a8a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a822:	4b31      	ldr	r3, [pc, #196]	@ (800a8e8 <xTaskIncrementTick+0x150>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	429a      	cmp	r2, r3
 800a838:	d203      	bcs.n	800a842 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a83a:	4a2e      	ldr	r2, [pc, #184]	@ (800a8f4 <xTaskIncrementTick+0x15c>)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a840:	e02f      	b.n	800a8a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	3304      	adds	r3, #4
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fc74 	bl	8009134 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a850:	2b00      	cmp	r3, #0
 800a852:	d004      	beq.n	800a85e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	3318      	adds	r3, #24
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fc6b 	bl	8009134 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a862:	4b25      	ldr	r3, [pc, #148]	@ (800a8f8 <xTaskIncrementTick+0x160>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d903      	bls.n	800a872 <xTaskIncrementTick+0xda>
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86e:	4a22      	ldr	r2, [pc, #136]	@ (800a8f8 <xTaskIncrementTick+0x160>)
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a876:	4613      	mov	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8fc <xTaskIncrementTick+0x164>)
 800a880:	441a      	add	r2, r3
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	3304      	adds	r3, #4
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f7fe fbf6 	bl	800907a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a892:	4b1b      	ldr	r3, [pc, #108]	@ (800a900 <xTaskIncrementTick+0x168>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a898:	429a      	cmp	r2, r3
 800a89a:	d3b8      	bcc.n	800a80e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a89c:	2301      	movs	r3, #1
 800a89e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a0:	e7b5      	b.n	800a80e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8a2:	4b17      	ldr	r3, [pc, #92]	@ (800a900 <xTaskIncrementTick+0x168>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a8:	4914      	ldr	r1, [pc, #80]	@ (800a8fc <xTaskIncrementTick+0x164>)
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	440b      	add	r3, r1
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d901      	bls.n	800a8be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8be:	4b11      	ldr	r3, [pc, #68]	@ (800a904 <xTaskIncrementTick+0x16c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d007      	beq.n	800a8d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	617b      	str	r3, [r7, #20]
 800a8ca:	e004      	b.n	800a8d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a908 <xTaskIncrementTick+0x170>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	4a0d      	ldr	r2, [pc, #52]	@ (800a908 <xTaskIncrementTick+0x170>)
 800a8d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8d6:	697b      	ldr	r3, [r7, #20]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	20001870 	.word	0x20001870
 800a8e4:	2000184c 	.word	0x2000184c
 800a8e8:	20001800 	.word	0x20001800
 800a8ec:	20001804 	.word	0x20001804
 800a8f0:	20001860 	.word	0x20001860
 800a8f4:	20001868 	.word	0x20001868
 800a8f8:	20001850 	.word	0x20001850
 800a8fc:	20001378 	.word	0x20001378
 800a900:	20001374 	.word	0x20001374
 800a904:	2000185c 	.word	0x2000185c
 800a908:	20001858 	.word	0x20001858

0800a90c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a912:	4b2b      	ldr	r3, [pc, #172]	@ (800a9c0 <vTaskSwitchContext+0xb4>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a91a:	4b2a      	ldr	r3, [pc, #168]	@ (800a9c4 <vTaskSwitchContext+0xb8>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a920:	e047      	b.n	800a9b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a922:	4b28      	ldr	r3, [pc, #160]	@ (800a9c4 <vTaskSwitchContext+0xb8>)
 800a924:	2200      	movs	r2, #0
 800a926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a928:	4b27      	ldr	r3, [pc, #156]	@ (800a9c8 <vTaskSwitchContext+0xbc>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	60fb      	str	r3, [r7, #12]
 800a92e:	e011      	b.n	800a954 <vTaskSwitchContext+0x48>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10b      	bne.n	800a94e <vTaskSwitchContext+0x42>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	607b      	str	r3, [r7, #4]
}
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
 800a94c:	e7fd      	b.n	800a94a <vTaskSwitchContext+0x3e>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3b01      	subs	r3, #1
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	491d      	ldr	r1, [pc, #116]	@ (800a9cc <vTaskSwitchContext+0xc0>)
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	4613      	mov	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	440b      	add	r3, r1
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0e3      	beq.n	800a930 <vTaskSwitchContext+0x24>
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4a16      	ldr	r2, [pc, #88]	@ (800a9cc <vTaskSwitchContext+0xc0>)
 800a974:	4413      	add	r3, r2
 800a976:	60bb      	str	r3, [r7, #8]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	605a      	str	r2, [r3, #4]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	3308      	adds	r3, #8
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d104      	bne.n	800a998 <vTaskSwitchContext+0x8c>
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	605a      	str	r2, [r3, #4]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	4a0c      	ldr	r2, [pc, #48]	@ (800a9d0 <vTaskSwitchContext+0xc4>)
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	4a09      	ldr	r2, [pc, #36]	@ (800a9c8 <vTaskSwitchContext+0xbc>)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9a8:	4b09      	ldr	r3, [pc, #36]	@ (800a9d0 <vTaskSwitchContext+0xc4>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3354      	adds	r3, #84	@ 0x54
 800a9ae:	4a09      	ldr	r2, [pc, #36]	@ (800a9d4 <vTaskSwitchContext+0xc8>)
 800a9b0:	6013      	str	r3, [r2, #0]
}
 800a9b2:	bf00      	nop
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	20001870 	.word	0x20001870
 800a9c4:	2000185c 	.word	0x2000185c
 800a9c8:	20001850 	.word	0x20001850
 800a9cc:	20001378 	.word	0x20001378
 800a9d0:	20001374 	.word	0x20001374
 800a9d4:	20000190 	.word	0x20000190

0800a9d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10b      	bne.n	800aa00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	60fb      	str	r3, [r7, #12]
}
 800a9fa:	bf00      	nop
 800a9fc:	bf00      	nop
 800a9fe:	e7fd      	b.n	800a9fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa00:	4b07      	ldr	r3, [pc, #28]	@ (800aa20 <vTaskPlaceOnEventList+0x48>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3318      	adds	r3, #24
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7fe fb5a 	bl	80090c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa0e:	2101      	movs	r1, #1
 800aa10:	6838      	ldr	r0, [r7, #0]
 800aa12:	f000 fd9f 	bl	800b554 <prvAddCurrentTaskToDelayedList>
}
 800aa16:	bf00      	nop
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20001374 	.word	0x20001374

0800aa24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10b      	bne.n	800aa4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	617b      	str	r3, [r7, #20]
}
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	e7fd      	b.n	800aa4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3318      	adds	r3, #24
 800aa54:	4619      	mov	r1, r3
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7fe fb0f 	bl	800907a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa62:	f04f 33ff 	mov.w	r3, #4294967295
 800aa66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	68b8      	ldr	r0, [r7, #8]
 800aa6c:	f000 fd72 	bl	800b554 <prvAddCurrentTaskToDelayedList>
	}
 800aa70:	bf00      	nop
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20001374 	.word	0x20001374

0800aa7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10b      	bne.n	800aaaa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60fb      	str	r3, [r7, #12]
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	e7fd      	b.n	800aaa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	3318      	adds	r3, #24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fb40 	bl	8009134 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab4:	4b1d      	ldr	r3, [pc, #116]	@ (800ab2c <xTaskRemoveFromEventList+0xb0>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d11d      	bne.n	800aaf8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe fb37 	bl	8009134 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaca:	4b19      	ldr	r3, [pc, #100]	@ (800ab30 <xTaskRemoveFromEventList+0xb4>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d903      	bls.n	800aada <xTaskRemoveFromEventList+0x5e>
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad6:	4a16      	ldr	r2, [pc, #88]	@ (800ab30 <xTaskRemoveFromEventList+0xb4>)
 800aad8:	6013      	str	r3, [r2, #0]
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4a13      	ldr	r2, [pc, #76]	@ (800ab34 <xTaskRemoveFromEventList+0xb8>)
 800aae8:	441a      	add	r2, r3
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	3304      	adds	r3, #4
 800aaee:	4619      	mov	r1, r3
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	f7fe fac2 	bl	800907a <vListInsertEnd>
 800aaf6:	e005      	b.n	800ab04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	3318      	adds	r3, #24
 800aafc:	4619      	mov	r1, r3
 800aafe:	480e      	ldr	r0, [pc, #56]	@ (800ab38 <xTaskRemoveFromEventList+0xbc>)
 800ab00:	f7fe fabb 	bl	800907a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab08:	4b0c      	ldr	r3, [pc, #48]	@ (800ab3c <xTaskRemoveFromEventList+0xc0>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d905      	bls.n	800ab1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab12:	2301      	movs	r3, #1
 800ab14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab16:	4b0a      	ldr	r3, [pc, #40]	@ (800ab40 <xTaskRemoveFromEventList+0xc4>)
 800ab18:	2201      	movs	r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	e001      	b.n	800ab22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab22:	697b      	ldr	r3, [r7, #20]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20001870 	.word	0x20001870
 800ab30:	20001850 	.word	0x20001850
 800ab34:	20001378 	.word	0x20001378
 800ab38:	20001808 	.word	0x20001808
 800ab3c:	20001374 	.word	0x20001374
 800ab40:	2000185c 	.word	0x2000185c

0800ab44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab4c:	4b06      	ldr	r3, [pc, #24]	@ (800ab68 <vTaskInternalSetTimeOutState+0x24>)
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab54:	4b05      	ldr	r3, [pc, #20]	@ (800ab6c <vTaskInternalSetTimeOutState+0x28>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	605a      	str	r2, [r3, #4]
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	20001860 	.word	0x20001860
 800ab6c:	2000184c 	.word	0x2000184c

0800ab70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b088      	sub	sp, #32
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10b      	bne.n	800ab98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	613b      	str	r3, [r7, #16]
}
 800ab92:	bf00      	nop
 800ab94:	bf00      	nop
 800ab96:	e7fd      	b.n	800ab94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10b      	bne.n	800abb6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60fb      	str	r3, [r7, #12]
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	e7fd      	b.n	800abb2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800abb6:	f001 f9af 	bl	800bf18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abba:	4b1d      	ldr	r3, [pc, #116]	@ (800ac30 <xTaskCheckForTimeOut+0xc0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd2:	d102      	bne.n	800abda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abd4:	2300      	movs	r3, #0
 800abd6:	61fb      	str	r3, [r7, #28]
 800abd8:	e023      	b.n	800ac22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	4b15      	ldr	r3, [pc, #84]	@ (800ac34 <xTaskCheckForTimeOut+0xc4>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d007      	beq.n	800abf6 <xTaskCheckForTimeOut+0x86>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	429a      	cmp	r2, r3
 800abee:	d302      	bcc.n	800abf6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abf0:	2301      	movs	r3, #1
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	e015      	b.n	800ac22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d20b      	bcs.n	800ac18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	1ad2      	subs	r2, r2, r3
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff ff99 	bl	800ab44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	61fb      	str	r3, [r7, #28]
 800ac16:	e004      	b.n	800ac22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac22:	f001 f9ab 	bl	800bf7c <vPortExitCritical>

	return xReturn;
 800ac26:	69fb      	ldr	r3, [r7, #28]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3720      	adds	r7, #32
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	2000184c 	.word	0x2000184c
 800ac34:	20001860 	.word	0x20001860

0800ac38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac3c:	4b03      	ldr	r3, [pc, #12]	@ (800ac4c <vTaskMissedYield+0x14>)
 800ac3e:	2201      	movs	r2, #1
 800ac40:	601a      	str	r2, [r3, #0]
}
 800ac42:	bf00      	nop
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	2000185c 	.word	0x2000185c

0800ac50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac58:	f000 f852 	bl	800ad00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac5c:	4b06      	ldr	r3, [pc, #24]	@ (800ac78 <prvIdleTask+0x28>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d9f9      	bls.n	800ac58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac64:	4b05      	ldr	r3, [pc, #20]	@ (800ac7c <prvIdleTask+0x2c>)
 800ac66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac74:	e7f0      	b.n	800ac58 <prvIdleTask+0x8>
 800ac76:	bf00      	nop
 800ac78:	20001378 	.word	0x20001378
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac86:	2300      	movs	r3, #0
 800ac88:	607b      	str	r3, [r7, #4]
 800ac8a:	e00c      	b.n	800aca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4a12      	ldr	r2, [pc, #72]	@ (800ace0 <prvInitialiseTaskLists+0x60>)
 800ac98:	4413      	add	r3, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe f9c0 	bl	8009020 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3301      	adds	r3, #1
 800aca4:	607b      	str	r3, [r7, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b37      	cmp	r3, #55	@ 0x37
 800acaa:	d9ef      	bls.n	800ac8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acac:	480d      	ldr	r0, [pc, #52]	@ (800ace4 <prvInitialiseTaskLists+0x64>)
 800acae:	f7fe f9b7 	bl	8009020 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acb2:	480d      	ldr	r0, [pc, #52]	@ (800ace8 <prvInitialiseTaskLists+0x68>)
 800acb4:	f7fe f9b4 	bl	8009020 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acb8:	480c      	ldr	r0, [pc, #48]	@ (800acec <prvInitialiseTaskLists+0x6c>)
 800acba:	f7fe f9b1 	bl	8009020 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acbe:	480c      	ldr	r0, [pc, #48]	@ (800acf0 <prvInitialiseTaskLists+0x70>)
 800acc0:	f7fe f9ae 	bl	8009020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800acc4:	480b      	ldr	r0, [pc, #44]	@ (800acf4 <prvInitialiseTaskLists+0x74>)
 800acc6:	f7fe f9ab 	bl	8009020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acca:	4b0b      	ldr	r3, [pc, #44]	@ (800acf8 <prvInitialiseTaskLists+0x78>)
 800accc:	4a05      	ldr	r2, [pc, #20]	@ (800ace4 <prvInitialiseTaskLists+0x64>)
 800acce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acd0:	4b0a      	ldr	r3, [pc, #40]	@ (800acfc <prvInitialiseTaskLists+0x7c>)
 800acd2:	4a05      	ldr	r2, [pc, #20]	@ (800ace8 <prvInitialiseTaskLists+0x68>)
 800acd4:	601a      	str	r2, [r3, #0]
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20001378 	.word	0x20001378
 800ace4:	200017d8 	.word	0x200017d8
 800ace8:	200017ec 	.word	0x200017ec
 800acec:	20001808 	.word	0x20001808
 800acf0:	2000181c 	.word	0x2000181c
 800acf4:	20001834 	.word	0x20001834
 800acf8:	20001800 	.word	0x20001800
 800acfc:	20001804 	.word	0x20001804

0800ad00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad06:	e019      	b.n	800ad3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad08:	f001 f906 	bl	800bf18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad0c:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <prvCheckTasksWaitingTermination+0x50>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fe fa0b 	bl	8009134 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad54 <prvCheckTasksWaitingTermination+0x54>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	4a0b      	ldr	r2, [pc, #44]	@ (800ad54 <prvCheckTasksWaitingTermination+0x54>)
 800ad26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad28:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <prvCheckTasksWaitingTermination+0x58>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ad58 <prvCheckTasksWaitingTermination+0x58>)
 800ad30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad32:	f001 f923 	bl	800bf7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f810 	bl	800ad5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad3c:	4b06      	ldr	r3, [pc, #24]	@ (800ad58 <prvCheckTasksWaitingTermination+0x58>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e1      	bne.n	800ad08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	2000181c 	.word	0x2000181c
 800ad54:	20001848 	.word	0x20001848
 800ad58:	20001830 	.word	0x20001830

0800ad5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3354      	adds	r3, #84	@ 0x54
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f002 fa9b 	bl	800d2a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d108      	bne.n	800ad8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f001 fabb 	bl	800c2f8 <vPortFree>
				vPortFree( pxTCB );
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 fab8 	bl	800c2f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad88:	e019      	b.n	800adbe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d103      	bne.n	800ad9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f001 faaf 	bl	800c2f8 <vPortFree>
	}
 800ad9a:	e010      	b.n	800adbe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d00b      	beq.n	800adbe <prvDeleteTCB+0x62>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60fb      	str	r3, [r7, #12]
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	e7fd      	b.n	800adba <prvDeleteTCB+0x5e>
	}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adce:	4b0c      	ldr	r3, [pc, #48]	@ (800ae00 <prvResetNextTaskUnblockTime+0x38>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d104      	bne.n	800ade2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800add8:	4b0a      	ldr	r3, [pc, #40]	@ (800ae04 <prvResetNextTaskUnblockTime+0x3c>)
 800adda:	f04f 32ff 	mov.w	r2, #4294967295
 800adde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ade0:	e008      	b.n	800adf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade2:	4b07      	ldr	r3, [pc, #28]	@ (800ae00 <prvResetNextTaskUnblockTime+0x38>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4a04      	ldr	r2, [pc, #16]	@ (800ae04 <prvResetNextTaskUnblockTime+0x3c>)
 800adf2:	6013      	str	r3, [r2, #0]
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	20001800 	.word	0x20001800
 800ae04:	20001868 	.word	0x20001868

0800ae08 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ae0e:	4b05      	ldr	r3, [pc, #20]	@ (800ae24 <xTaskGetCurrentTaskHandle+0x1c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ae14:	687b      	ldr	r3, [r7, #4]
	}
 800ae16:	4618      	mov	r0, r3
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	20001374 	.word	0x20001374

0800ae28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae5c <xTaskGetSchedulerState+0x34>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae36:	2301      	movs	r3, #1
 800ae38:	607b      	str	r3, [r7, #4]
 800ae3a:	e008      	b.n	800ae4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae3c:	4b08      	ldr	r3, [pc, #32]	@ (800ae60 <xTaskGetSchedulerState+0x38>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae44:	2302      	movs	r3, #2
 800ae46:	607b      	str	r3, [r7, #4]
 800ae48:	e001      	b.n	800ae4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae4e:	687b      	ldr	r3, [r7, #4]
	}
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	20001854 	.word	0x20001854
 800ae60:	20001870 	.word	0x20001870

0800ae64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae70:	2300      	movs	r3, #0
 800ae72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d051      	beq.n	800af1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae7e:	4b2a      	ldr	r3, [pc, #168]	@ (800af28 <xTaskPriorityInherit+0xc4>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d241      	bcs.n	800af0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	db06      	blt.n	800ae9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae90:	4b25      	ldr	r3, [pc, #148]	@ (800af28 <xTaskPriorityInherit+0xc4>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6959      	ldr	r1, [r3, #20]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4a1f      	ldr	r2, [pc, #124]	@ (800af2c <xTaskPriorityInherit+0xc8>)
 800aeb0:	4413      	add	r3, r2
 800aeb2:	4299      	cmp	r1, r3
 800aeb4:	d122      	bne.n	800aefc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	3304      	adds	r3, #4
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe f93a 	bl	8009134 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aec0:	4b19      	ldr	r3, [pc, #100]	@ (800af28 <xTaskPriorityInherit+0xc4>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aece:	4b18      	ldr	r3, [pc, #96]	@ (800af30 <xTaskPriorityInherit+0xcc>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d903      	bls.n	800aede <xTaskPriorityInherit+0x7a>
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeda:	4a15      	ldr	r2, [pc, #84]	@ (800af30 <xTaskPriorityInherit+0xcc>)
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee2:	4613      	mov	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4a10      	ldr	r2, [pc, #64]	@ (800af2c <xTaskPriorityInherit+0xc8>)
 800aeec:	441a      	add	r2, r3
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	3304      	adds	r3, #4
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7fe f8c0 	bl	800907a <vListInsertEnd>
 800aefa:	e004      	b.n	800af06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aefc:	4b0a      	ldr	r3, [pc, #40]	@ (800af28 <xTaskPriorityInherit+0xc4>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800af06:	2301      	movs	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	e008      	b.n	800af1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af10:	4b05      	ldr	r3, [pc, #20]	@ (800af28 <xTaskPriorityInherit+0xc4>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af16:	429a      	cmp	r2, r3
 800af18:	d201      	bcs.n	800af1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800af1a:	2301      	movs	r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af1e:	68fb      	ldr	r3, [r7, #12]
	}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20001374 	.word	0x20001374
 800af2c:	20001378 	.word	0x20001378
 800af30:	20001850 	.word	0x20001850

0800af34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d058      	beq.n	800affc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af4a:	4b2f      	ldr	r3, [pc, #188]	@ (800b008 <xTaskPriorityDisinherit+0xd4>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	429a      	cmp	r2, r3
 800af52:	d00b      	beq.n	800af6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	60fb      	str	r3, [r7, #12]
}
 800af66:	bf00      	nop
 800af68:	bf00      	nop
 800af6a:	e7fd      	b.n	800af68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10b      	bne.n	800af8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	60bb      	str	r3, [r7, #8]
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	e7fd      	b.n	800af88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af90:	1e5a      	subs	r2, r3, #1
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d02c      	beq.n	800affc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d128      	bne.n	800affc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3304      	adds	r3, #4
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe f8c0 	bl	8009134 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afcc:	4b0f      	ldr	r3, [pc, #60]	@ (800b00c <xTaskPriorityDisinherit+0xd8>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d903      	bls.n	800afdc <xTaskPriorityDisinherit+0xa8>
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd8:	4a0c      	ldr	r2, [pc, #48]	@ (800b00c <xTaskPriorityDisinherit+0xd8>)
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4a09      	ldr	r2, [pc, #36]	@ (800b010 <xTaskPriorityDisinherit+0xdc>)
 800afea:	441a      	add	r2, r3
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	3304      	adds	r3, #4
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fe f841 	bl	800907a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aff8:	2301      	movs	r3, #1
 800affa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800affc:	697b      	ldr	r3, [r7, #20]
	}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20001374 	.word	0x20001374
 800b00c:	20001850 	.word	0x20001850
 800b010:	20001378 	.word	0x20001378

0800b014 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b014:	b580      	push	{r7, lr}
 800b016:	b088      	sub	sp, #32
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b022:	2301      	movs	r3, #1
 800b024:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d06c      	beq.n	800b106 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10b      	bne.n	800b04c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	60fb      	str	r3, [r7, #12]
}
 800b046:	bf00      	nop
 800b048:	bf00      	nop
 800b04a:	e7fd      	b.n	800b048 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	429a      	cmp	r2, r3
 800b054:	d902      	bls.n	800b05c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	61fb      	str	r3, [r7, #28]
 800b05a:	e002      	b.n	800b062 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b060:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d04c      	beq.n	800b106 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	429a      	cmp	r2, r3
 800b074:	d147      	bne.n	800b106 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b076:	4b26      	ldr	r3, [pc, #152]	@ (800b110 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d10b      	bne.n	800b098 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	60bb      	str	r3, [r7, #8]
}
 800b092:	bf00      	nop
 800b094:	bf00      	nop
 800b096:	e7fd      	b.n	800b094 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	69fa      	ldr	r2, [r7, #28]
 800b0a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	db04      	blt.n	800b0b6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	6959      	ldr	r1, [r3, #20]
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4a13      	ldr	r2, [pc, #76]	@ (800b114 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b0c6:	4413      	add	r3, r2
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d11c      	bne.n	800b106 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fe f82f 	bl	8009134 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0da:	4b0f      	ldr	r3, [pc, #60]	@ (800b118 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d903      	bls.n	800b0ea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e6:	4a0c      	ldr	r2, [pc, #48]	@ (800b118 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4a07      	ldr	r2, [pc, #28]	@ (800b114 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b0f8:	441a      	add	r2, r3
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	4619      	mov	r1, r3
 800b100:	4610      	mov	r0, r2
 800b102:	f7fd ffba 	bl	800907a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b106:	bf00      	nop
 800b108:	3720      	adds	r7, #32
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20001374 	.word	0x20001374
 800b114:	20001378 	.word	0x20001378
 800b118:	20001850 	.word	0x20001850

0800b11c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b120:	4b07      	ldr	r3, [pc, #28]	@ (800b140 <pvTaskIncrementMutexHeldCount+0x24>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d004      	beq.n	800b132 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b128:	4b05      	ldr	r3, [pc, #20]	@ (800b140 <pvTaskIncrementMutexHeldCount+0x24>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b12e:	3201      	adds	r2, #1
 800b130:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b132:	4b03      	ldr	r3, [pc, #12]	@ (800b140 <pvTaskIncrementMutexHeldCount+0x24>)
 800b134:	681b      	ldr	r3, [r3, #0]
	}
 800b136:	4618      	mov	r0, r3
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	20001374 	.word	0x20001374

0800b144 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
 800b150:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b152:	f000 fee1 	bl	800bf18 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b156:	4b29      	ldr	r3, [pc, #164]	@ (800b1fc <xTaskNotifyWait+0xb8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b02      	cmp	r3, #2
 800b162:	d01c      	beq.n	800b19e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b164:	4b25      	ldr	r3, [pc, #148]	@ (800b1fc <xTaskNotifyWait+0xb8>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	43d2      	mvns	r2, r2
 800b170:	400a      	ands	r2, r1
 800b172:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b176:	4b21      	ldr	r3, [pc, #132]	@ (800b1fc <xTaskNotifyWait+0xb8>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00b      	beq.n	800b19e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b186:	2101      	movs	r1, #1
 800b188:	6838      	ldr	r0, [r7, #0]
 800b18a:	f000 f9e3 	bl	800b554 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b18e:	4b1c      	ldr	r3, [pc, #112]	@ (800b200 <xTaskNotifyWait+0xbc>)
 800b190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b19e:	f000 feed 	bl	800bf7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b1a2:	f000 feb9 	bl	800bf18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d005      	beq.n	800b1b8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b1ac:	4b13      	ldr	r3, [pc, #76]	@ (800b1fc <xTaskNotifyWait+0xb8>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b1b8:	4b10      	ldr	r3, [pc, #64]	@ (800b1fc <xTaskNotifyWait+0xb8>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d002      	beq.n	800b1cc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]
 800b1ca:	e00a      	b.n	800b1e2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b1cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b1fc <xTaskNotifyWait+0xb8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	43d2      	mvns	r2, r2
 800b1d8:	400a      	ands	r2, r1
 800b1da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1e2:	4b06      	ldr	r3, [pc, #24]	@ (800b1fc <xTaskNotifyWait+0xb8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b1ec:	f000 fec6 	bl	800bf7c <vPortExitCritical>

		return xReturn;
 800b1f0:	697b      	ldr	r3, [r7, #20]
	}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20001374 	.word	0x20001374
 800b200:	e000ed04 	.word	0xe000ed04

0800b204 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	@ 0x28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	603b      	str	r3, [r7, #0]
 800b210:	4613      	mov	r3, r2
 800b212:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b214:	2301      	movs	r3, #1
 800b216:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10b      	bne.n	800b236 <xTaskGenericNotify+0x32>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	61bb      	str	r3, [r7, #24]
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	e7fd      	b.n	800b232 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b23a:	f000 fe6d 	bl	800bf18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d004      	beq.n	800b24e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b254:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	2202      	movs	r2, #2
 800b25a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	2b04      	cmp	r3, #4
 800b262:	d82e      	bhi.n	800b2c2 <xTaskGenericNotify+0xbe>
 800b264:	a201      	add	r2, pc, #4	@ (adr r2, 800b26c <xTaskGenericNotify+0x68>)
 800b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26a:	bf00      	nop
 800b26c:	0800b2e7 	.word	0x0800b2e7
 800b270:	0800b281 	.word	0x0800b281
 800b274:	0800b293 	.word	0x0800b293
 800b278:	0800b2a3 	.word	0x0800b2a3
 800b27c:	0800b2ad 	.word	0x0800b2ad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	431a      	orrs	r2, r3
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b290:	e02c      	b.n	800b2ec <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b2a0:	e024      	b.n	800b2ec <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b2aa:	e01f      	b.n	800b2ec <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b2ac:	7ffb      	ldrb	r3, [r7, #31]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d004      	beq.n	800b2bc <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b2ba:	e017      	b.n	800b2ec <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b2c0:	e014      	b.n	800b2ec <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2cc:	d00d      	beq.n	800b2ea <xTaskGenericNotify+0xe6>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	617b      	str	r3, [r7, #20]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <xTaskGenericNotify+0xde>
					break;
 800b2e6:	bf00      	nop
 800b2e8:	e000      	b.n	800b2ec <xTaskGenericNotify+0xe8>

					break;
 800b2ea:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b2ec:	7ffb      	ldrb	r3, [r7, #31]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d13b      	bne.n	800b36a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fd ff1c 	bl	8009134 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b300:	4b1d      	ldr	r3, [pc, #116]	@ (800b378 <xTaskGenericNotify+0x174>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d903      	bls.n	800b310 <xTaskGenericNotify+0x10c>
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30c:	4a1a      	ldr	r2, [pc, #104]	@ (800b378 <xTaskGenericNotify+0x174>)
 800b30e:	6013      	str	r3, [r2, #0]
 800b310:	6a3b      	ldr	r3, [r7, #32]
 800b312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4a17      	ldr	r2, [pc, #92]	@ (800b37c <xTaskGenericNotify+0x178>)
 800b31e:	441a      	add	r2, r3
 800b320:	6a3b      	ldr	r3, [r7, #32]
 800b322:	3304      	adds	r3, #4
 800b324:	4619      	mov	r1, r3
 800b326:	4610      	mov	r0, r2
 800b328:	f7fd fea7 	bl	800907a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00b      	beq.n	800b34c <xTaskGenericNotify+0x148>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	613b      	str	r3, [r7, #16]
}
 800b346:	bf00      	nop
 800b348:	bf00      	nop
 800b34a:	e7fd      	b.n	800b348 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b350:	4b0b      	ldr	r3, [pc, #44]	@ (800b380 <xTaskGenericNotify+0x17c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	429a      	cmp	r2, r3
 800b358:	d907      	bls.n	800b36a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b35a:	4b0a      	ldr	r3, [pc, #40]	@ (800b384 <xTaskGenericNotify+0x180>)
 800b35c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b36a:	f000 fe07 	bl	800bf7c <vPortExitCritical>

		return xReturn;
 800b36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b370:	4618      	mov	r0, r3
 800b372:	3728      	adds	r7, #40	@ 0x28
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20001850 	.word	0x20001850
 800b37c:	20001378 	.word	0x20001378
 800b380:	20001374 	.word	0x20001374
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08e      	sub	sp, #56	@ 0x38
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	4613      	mov	r3, r2
 800b396:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b398:	2301      	movs	r3, #1
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10b      	bne.n	800b3ba <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	e7fd      	b.n	800b3b6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3ba:	f000 fe8d 	bl	800c0d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800b3c2:	f3ef 8211 	mrs	r2, BASEPRI
 800b3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	623a      	str	r2, [r7, #32]
 800b3d8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b3da:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d004      	beq.n	800b3ee <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b3f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b400:	79fb      	ldrb	r3, [r7, #7]
 800b402:	2b04      	cmp	r3, #4
 800b404:	d82e      	bhi.n	800b464 <xTaskGenericNotifyFromISR+0xdc>
 800b406:	a201      	add	r2, pc, #4	@ (adr r2, 800b40c <xTaskGenericNotifyFromISR+0x84>)
 800b408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40c:	0800b489 	.word	0x0800b489
 800b410:	0800b421 	.word	0x0800b421
 800b414:	0800b433 	.word	0x0800b433
 800b418:	0800b443 	.word	0x0800b443
 800b41c:	0800b44d 	.word	0x0800b44d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b422:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	431a      	orrs	r2, r3
 800b42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b430:	e02d      	b.n	800b48e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b440:	e025      	b.n	800b48e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b44a:	e020      	b.n	800b48e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b44c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b450:	2b02      	cmp	r3, #2
 800b452:	d004      	beq.n	800b45e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b45c:	e017      	b.n	800b48e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800b45e:	2300      	movs	r3, #0
 800b460:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800b462:	e014      	b.n	800b48e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46e:	d00d      	beq.n	800b48c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	61bb      	str	r3, [r7, #24]
}
 800b482:	bf00      	nop
 800b484:	bf00      	nop
 800b486:	e7fd      	b.n	800b484 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b488:	bf00      	nop
 800b48a:	e000      	b.n	800b48e <xTaskGenericNotifyFromISR+0x106>
					break;
 800b48c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b48e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b492:	2b01      	cmp	r3, #1
 800b494:	d147      	bne.n	800b526 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00b      	beq.n	800b4b6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	617b      	str	r3, [r7, #20]
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	e7fd      	b.n	800b4b2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4b6:	4b21      	ldr	r3, [pc, #132]	@ (800b53c <xTaskGenericNotifyFromISR+0x1b4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d11d      	bne.n	800b4fa <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fd fe36 	bl	8009134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b540 <xTaskGenericNotifyFromISR+0x1b8>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d903      	bls.n	800b4dc <xTaskGenericNotifyFromISR+0x154>
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d8:	4a19      	ldr	r2, [pc, #100]	@ (800b540 <xTaskGenericNotifyFromISR+0x1b8>)
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4a16      	ldr	r2, [pc, #88]	@ (800b544 <xTaskGenericNotifyFromISR+0x1bc>)
 800b4ea:	441a      	add	r2, r3
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ee:	3304      	adds	r3, #4
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	4610      	mov	r0, r2
 800b4f4:	f7fd fdc1 	bl	800907a <vListInsertEnd>
 800b4f8:	e005      	b.n	800b506 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fc:	3318      	adds	r3, #24
 800b4fe:	4619      	mov	r1, r3
 800b500:	4811      	ldr	r0, [pc, #68]	@ (800b548 <xTaskGenericNotifyFromISR+0x1c0>)
 800b502:	f7fd fdba 	bl	800907a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b50a:	4b10      	ldr	r3, [pc, #64]	@ (800b54c <xTaskGenericNotifyFromISR+0x1c4>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b510:	429a      	cmp	r2, r3
 800b512:	d908      	bls.n	800b526 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b51c:	2201      	movs	r2, #1
 800b51e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b520:	4b0b      	ldr	r3, [pc, #44]	@ (800b550 <xTaskGenericNotifyFromISR+0x1c8>)
 800b522:	2201      	movs	r2, #1
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b528:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f383 8811 	msr	BASEPRI, r3
}
 800b530:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800b534:	4618      	mov	r0, r3
 800b536:	3738      	adds	r7, #56	@ 0x38
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20001870 	.word	0x20001870
 800b540:	20001850 	.word	0x20001850
 800b544:	20001378 	.word	0x20001378
 800b548:	20001808 	.word	0x20001808
 800b54c:	20001374 	.word	0x20001374
 800b550:	2000185c 	.word	0x2000185c

0800b554 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b55e:	4b21      	ldr	r3, [pc, #132]	@ (800b5e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b564:	4b20      	ldr	r3, [pc, #128]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3304      	adds	r3, #4
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fd fde2 	bl	8009134 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b576:	d10a      	bne.n	800b58e <prvAddCurrentTaskToDelayedList+0x3a>
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d007      	beq.n	800b58e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b57e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3304      	adds	r3, #4
 800b584:	4619      	mov	r1, r3
 800b586:	4819      	ldr	r0, [pc, #100]	@ (800b5ec <prvAddCurrentTaskToDelayedList+0x98>)
 800b588:	f7fd fd77 	bl	800907a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b58c:	e026      	b.n	800b5dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4413      	add	r3, r2
 800b594:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b596:	4b14      	ldr	r3, [pc, #80]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d209      	bcs.n	800b5ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5a6:	4b12      	ldr	r3, [pc, #72]	@ (800b5f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	f7fd fd85 	bl	80090c2 <vListInsert>
}
 800b5b8:	e010      	b.n	800b5dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b5f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	4b0a      	ldr	r3, [pc, #40]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f7fd fd7b 	bl	80090c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b5f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d202      	bcs.n	800b5dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b5d6:	4a08      	ldr	r2, [pc, #32]	@ (800b5f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	6013      	str	r3, [r2, #0]
}
 800b5dc:	bf00      	nop
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	2000184c 	.word	0x2000184c
 800b5e8:	20001374 	.word	0x20001374
 800b5ec:	20001834 	.word	0x20001834
 800b5f0:	20001804 	.word	0x20001804
 800b5f4:	20001800 	.word	0x20001800
 800b5f8:	20001868 	.word	0x20001868

0800b5fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08a      	sub	sp, #40	@ 0x28
 800b600:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b602:	2300      	movs	r3, #0
 800b604:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b606:	f000 fb13 	bl	800bc30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b60a:	4b1d      	ldr	r3, [pc, #116]	@ (800b680 <xTimerCreateTimerTask+0x84>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d021      	beq.n	800b656 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b612:	2300      	movs	r3, #0
 800b614:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b61a:	1d3a      	adds	r2, r7, #4
 800b61c:	f107 0108 	add.w	r1, r7, #8
 800b620:	f107 030c 	add.w	r3, r7, #12
 800b624:	4618      	mov	r0, r3
 800b626:	f7fd fce1 	bl	8008fec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b62a:	6879      	ldr	r1, [r7, #4]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	9202      	str	r2, [sp, #8]
 800b632:	9301      	str	r3, [sp, #4]
 800b634:	2302      	movs	r3, #2
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	2300      	movs	r3, #0
 800b63a:	460a      	mov	r2, r1
 800b63c:	4911      	ldr	r1, [pc, #68]	@ (800b684 <xTimerCreateTimerTask+0x88>)
 800b63e:	4812      	ldr	r0, [pc, #72]	@ (800b688 <xTimerCreateTimerTask+0x8c>)
 800b640:	f7fe fd78 	bl	800a134 <xTaskCreateStatic>
 800b644:	4603      	mov	r3, r0
 800b646:	4a11      	ldr	r2, [pc, #68]	@ (800b68c <xTimerCreateTimerTask+0x90>)
 800b648:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b64a:	4b10      	ldr	r3, [pc, #64]	@ (800b68c <xTimerCreateTimerTask+0x90>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b652:	2301      	movs	r3, #1
 800b654:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	613b      	str	r3, [r7, #16]
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	e7fd      	b.n	800b670 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b674:	697b      	ldr	r3, [r7, #20]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3718      	adds	r7, #24
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	200018a4 	.word	0x200018a4
 800b684:	0800f5e0 	.word	0x0800f5e0
 800b688:	0800b7c9 	.word	0x0800b7c9
 800b68c:	200018a8 	.word	0x200018a8

0800b690 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b08a      	sub	sp, #40	@ 0x28
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10b      	bne.n	800b6c0 <xTimerGenericCommand+0x30>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	623b      	str	r3, [r7, #32]
}
 800b6ba:	bf00      	nop
 800b6bc:	bf00      	nop
 800b6be:	e7fd      	b.n	800b6bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b6c0:	4b19      	ldr	r3, [pc, #100]	@ (800b728 <xTimerGenericCommand+0x98>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d02a      	beq.n	800b71e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2b05      	cmp	r3, #5
 800b6d8:	dc18      	bgt.n	800b70c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6da:	f7ff fba5 	bl	800ae28 <xTaskGetSchedulerState>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d109      	bne.n	800b6f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6e4:	4b10      	ldr	r3, [pc, #64]	@ (800b728 <xTimerGenericCommand+0x98>)
 800b6e6:	6818      	ldr	r0, [r3, #0]
 800b6e8:	f107 0110 	add.w	r1, r7, #16
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f0:	f7fd ff48 	bl	8009584 <xQueueGenericSend>
 800b6f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6f6:	e012      	b.n	800b71e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b728 <xTimerGenericCommand+0x98>)
 800b6fa:	6818      	ldr	r0, [r3, #0]
 800b6fc:	f107 0110 	add.w	r1, r7, #16
 800b700:	2300      	movs	r3, #0
 800b702:	2200      	movs	r2, #0
 800b704:	f7fd ff3e 	bl	8009584 <xQueueGenericSend>
 800b708:	6278      	str	r0, [r7, #36]	@ 0x24
 800b70a:	e008      	b.n	800b71e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b70c:	4b06      	ldr	r3, [pc, #24]	@ (800b728 <xTimerGenericCommand+0x98>)
 800b70e:	6818      	ldr	r0, [r3, #0]
 800b710:	f107 0110 	add.w	r1, r7, #16
 800b714:	2300      	movs	r3, #0
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	f7fe f836 	bl	8009788 <xQueueGenericSendFromISR>
 800b71c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b720:	4618      	mov	r0, r3
 800b722:	3728      	adds	r7, #40	@ 0x28
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	200018a4 	.word	0x200018a4

0800b72c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af02      	add	r7, sp, #8
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b736:	4b23      	ldr	r3, [pc, #140]	@ (800b7c4 <prvProcessExpiredTimer+0x98>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	3304      	adds	r3, #4
 800b744:	4618      	mov	r0, r3
 800b746:	f7fd fcf5 	bl	8009134 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b750:	f003 0304 	and.w	r3, r3, #4
 800b754:	2b00      	cmp	r3, #0
 800b756:	d023      	beq.n	800b7a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	699a      	ldr	r2, [r3, #24]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	18d1      	adds	r1, r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	6978      	ldr	r0, [r7, #20]
 800b766:	f000 f8d5 	bl	800b914 <prvInsertTimerInActiveList>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d020      	beq.n	800b7b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b770:	2300      	movs	r3, #0
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	2100      	movs	r1, #0
 800b77a:	6978      	ldr	r0, [r7, #20]
 800b77c:	f7ff ff88 	bl	800b690 <xTimerGenericCommand>
 800b780:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d114      	bne.n	800b7b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	60fb      	str	r3, [r7, #12]
}
 800b79a:	bf00      	nop
 800b79c:	bf00      	nop
 800b79e:	e7fd      	b.n	800b79c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7a6:	f023 0301 	bic.w	r3, r3, #1
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	6978      	ldr	r0, [r7, #20]
 800b7b8:	4798      	blx	r3
}
 800b7ba:	bf00      	nop
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	2000189c 	.word	0x2000189c

0800b7c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7d0:	f107 0308 	add.w	r3, r7, #8
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 f859 	bl	800b88c <prvGetNextExpireTime>
 800b7da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 f805 	bl	800b7f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7e6:	f000 f8d7 	bl	800b998 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7ea:	bf00      	nop
 800b7ec:	e7f0      	b.n	800b7d0 <prvTimerTask+0x8>
	...

0800b7f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7fa:	f7fe feff 	bl	800a5fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7fe:	f107 0308 	add.w	r3, r7, #8
 800b802:	4618      	mov	r0, r3
 800b804:	f000 f866 	bl	800b8d4 <prvSampleTimeNow>
 800b808:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d130      	bne.n	800b872 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10a      	bne.n	800b82c <prvProcessTimerOrBlockTask+0x3c>
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d806      	bhi.n	800b82c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b81e:	f7fe fefb 	bl	800a618 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b822:	68f9      	ldr	r1, [r7, #12]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff ff81 	bl	800b72c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b82a:	e024      	b.n	800b876 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d008      	beq.n	800b844 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b832:	4b13      	ldr	r3, [pc, #76]	@ (800b880 <prvProcessTimerOrBlockTask+0x90>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <prvProcessTimerOrBlockTask+0x50>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e000      	b.n	800b842 <prvProcessTimerOrBlockTask+0x52>
 800b840:	2300      	movs	r3, #0
 800b842:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b844:	4b0f      	ldr	r3, [pc, #60]	@ (800b884 <prvProcessTimerOrBlockTask+0x94>)
 800b846:	6818      	ldr	r0, [r3, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	4619      	mov	r1, r3
 800b852:	f7fe fc3b 	bl	800a0cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b856:	f7fe fedf 	bl	800a618 <xTaskResumeAll>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10a      	bne.n	800b876 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b860:	4b09      	ldr	r3, [pc, #36]	@ (800b888 <prvProcessTimerOrBlockTask+0x98>)
 800b862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	f3bf 8f6f 	isb	sy
}
 800b870:	e001      	b.n	800b876 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b872:	f7fe fed1 	bl	800a618 <xTaskResumeAll>
}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	200018a0 	.word	0x200018a0
 800b884:	200018a4 	.word	0x200018a4
 800b888:	e000ed04 	.word	0xe000ed04

0800b88c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b894:	4b0e      	ldr	r3, [pc, #56]	@ (800b8d0 <prvGetNextExpireTime+0x44>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <prvGetNextExpireTime+0x16>
 800b89e:	2201      	movs	r2, #1
 800b8a0:	e000      	b.n	800b8a4 <prvGetNextExpireTime+0x18>
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d105      	bne.n	800b8bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8b0:	4b07      	ldr	r3, [pc, #28]	@ (800b8d0 <prvGetNextExpireTime+0x44>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	60fb      	str	r3, [r7, #12]
 800b8ba:	e001      	b.n	800b8c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3714      	adds	r7, #20
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	2000189c 	.word	0x2000189c

0800b8d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b8dc:	f7fe ff3a 	bl	800a754 <xTaskGetTickCount>
 800b8e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b8e2:	4b0b      	ldr	r3, [pc, #44]	@ (800b910 <prvSampleTimeNow+0x3c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d205      	bcs.n	800b8f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8ec:	f000 f93a 	bl	800bb64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	e002      	b.n	800b8fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8fe:	4a04      	ldr	r2, [pc, #16]	@ (800b910 <prvSampleTimeNow+0x3c>)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b904:	68fb      	ldr	r3, [r7, #12]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	200018ac 	.word	0x200018ac

0800b914 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b922:	2300      	movs	r3, #0
 800b924:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	429a      	cmp	r2, r3
 800b938:	d812      	bhi.n	800b960 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	1ad2      	subs	r2, r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	429a      	cmp	r2, r3
 800b946:	d302      	bcc.n	800b94e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b948:	2301      	movs	r3, #1
 800b94a:	617b      	str	r3, [r7, #20]
 800b94c:	e01b      	b.n	800b986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b94e:	4b10      	ldr	r3, [pc, #64]	@ (800b990 <prvInsertTimerInActiveList+0x7c>)
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3304      	adds	r3, #4
 800b956:	4619      	mov	r1, r3
 800b958:	4610      	mov	r0, r2
 800b95a:	f7fd fbb2 	bl	80090c2 <vListInsert>
 800b95e:	e012      	b.n	800b986 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	429a      	cmp	r2, r3
 800b966:	d206      	bcs.n	800b976 <prvInsertTimerInActiveList+0x62>
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d302      	bcc.n	800b976 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b970:	2301      	movs	r3, #1
 800b972:	617b      	str	r3, [r7, #20]
 800b974:	e007      	b.n	800b986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b976:	4b07      	ldr	r3, [pc, #28]	@ (800b994 <prvInsertTimerInActiveList+0x80>)
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3304      	adds	r3, #4
 800b97e:	4619      	mov	r1, r3
 800b980:	4610      	mov	r0, r2
 800b982:	f7fd fb9e 	bl	80090c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b986:	697b      	ldr	r3, [r7, #20]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	200018a0 	.word	0x200018a0
 800b994:	2000189c 	.word	0x2000189c

0800b998 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08e      	sub	sp, #56	@ 0x38
 800b99c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b99e:	e0ce      	b.n	800bb3e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	da19      	bge.n	800b9da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b9a6:	1d3b      	adds	r3, r7, #4
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10b      	bne.n	800b9ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	61fb      	str	r3, [r7, #28]
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop
 800b9c8:	e7fd      	b.n	800b9c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9d0:	6850      	ldr	r0, [r2, #4]
 800b9d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9d4:	6892      	ldr	r2, [r2, #8]
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f2c0 80ae 	blt.w	800bb3e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d004      	beq.n	800b9f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fd fb9e 	bl	8009134 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9f8:	463b      	mov	r3, r7
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff ff6a 	bl	800b8d4 <prvSampleTimeNow>
 800ba00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2b09      	cmp	r3, #9
 800ba06:	f200 8097 	bhi.w	800bb38 <prvProcessReceivedCommands+0x1a0>
 800ba0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba10 <prvProcessReceivedCommands+0x78>)
 800ba0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba10:	0800ba39 	.word	0x0800ba39
 800ba14:	0800ba39 	.word	0x0800ba39
 800ba18:	0800ba39 	.word	0x0800ba39
 800ba1c:	0800baaf 	.word	0x0800baaf
 800ba20:	0800bac3 	.word	0x0800bac3
 800ba24:	0800bb0f 	.word	0x0800bb0f
 800ba28:	0800ba39 	.word	0x0800ba39
 800ba2c:	0800ba39 	.word	0x0800ba39
 800ba30:	0800baaf 	.word	0x0800baaf
 800ba34:	0800bac3 	.word	0x0800bac3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	18d1      	adds	r1, r2, r3
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba58:	f7ff ff5c 	bl	800b914 <prvInsertTimerInActiveList>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d06c      	beq.n	800bb3c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba70:	f003 0304 	and.w	r3, r3, #4
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d061      	beq.n	800bb3c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	441a      	add	r2, r3
 800ba80:	2300      	movs	r3, #0
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	2300      	movs	r3, #0
 800ba86:	2100      	movs	r1, #0
 800ba88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba8a:	f7ff fe01 	bl	800b690 <xTimerGenericCommand>
 800ba8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d152      	bne.n	800bb3c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ba96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	61bb      	str	r3, [r7, #24]
}
 800baa8:	bf00      	nop
 800baaa:	bf00      	nop
 800baac:	e7fd      	b.n	800baaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bab4:	f023 0301 	bic.w	r3, r3, #1
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800babc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bac0:	e03d      	b.n	800bb3e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bac8:	f043 0301 	orr.w	r3, r3, #1
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10b      	bne.n	800bafa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	617b      	str	r3, [r7, #20]
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
 800baf8:	e7fd      	b.n	800baf6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafc:	699a      	ldr	r2, [r3, #24]
 800bafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb00:	18d1      	adds	r1, r2, r3
 800bb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb08:	f7ff ff04 	bl	800b914 <prvInsertTimerInActiveList>
					break;
 800bb0c:	e017      	b.n	800bb3e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb14:	f003 0302 	and.w	r3, r3, #2
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d103      	bne.n	800bb24 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bb1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb1e:	f000 fbeb 	bl	800c2f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb22:	e00c      	b.n	800bb3e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb2a:	f023 0301 	bic.w	r3, r3, #1
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bb36:	e002      	b.n	800bb3e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bb38:	bf00      	nop
 800bb3a:	e000      	b.n	800bb3e <prvProcessReceivedCommands+0x1a6>
					break;
 800bb3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb3e:	4b08      	ldr	r3, [pc, #32]	@ (800bb60 <prvProcessReceivedCommands+0x1c8>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	1d39      	adds	r1, r7, #4
 800bb44:	2200      	movs	r2, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fd febc 	bl	80098c4 <xQueueReceive>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f47f af26 	bne.w	800b9a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop
 800bb58:	3730      	adds	r7, #48	@ 0x30
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	200018a4 	.word	0x200018a4

0800bb64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb6a:	e049      	b.n	800bc00 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb6c:	4b2e      	ldr	r3, [pc, #184]	@ (800bc28 <prvSwitchTimerLists+0xc4>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb76:	4b2c      	ldr	r3, [pc, #176]	@ (800bc28 <prvSwitchTimerLists+0xc4>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	3304      	adds	r3, #4
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fd fad5 	bl	8009134 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb98:	f003 0304 	and.w	r3, r3, #4
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d02f      	beq.n	800bc00 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	4413      	add	r3, r2
 800bba8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d90e      	bls.n	800bbd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbbe:	4b1a      	ldr	r3, [pc, #104]	@ (800bc28 <prvSwitchTimerLists+0xc4>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	4610      	mov	r0, r2
 800bbca:	f7fd fa7a 	bl	80090c2 <vListInsert>
 800bbce:	e017      	b.n	800bc00 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	2100      	movs	r1, #0
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff fd58 	bl	800b690 <xTimerGenericCommand>
 800bbe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10b      	bne.n	800bc00 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	603b      	str	r3, [r7, #0]
}
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
 800bbfe:	e7fd      	b.n	800bbfc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc00:	4b09      	ldr	r3, [pc, #36]	@ (800bc28 <prvSwitchTimerLists+0xc4>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1b0      	bne.n	800bb6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc0a:	4b07      	ldr	r3, [pc, #28]	@ (800bc28 <prvSwitchTimerLists+0xc4>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc10:	4b06      	ldr	r3, [pc, #24]	@ (800bc2c <prvSwitchTimerLists+0xc8>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a04      	ldr	r2, [pc, #16]	@ (800bc28 <prvSwitchTimerLists+0xc4>)
 800bc16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc18:	4a04      	ldr	r2, [pc, #16]	@ (800bc2c <prvSwitchTimerLists+0xc8>)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	6013      	str	r3, [r2, #0]
}
 800bc1e:	bf00      	nop
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	2000189c 	.word	0x2000189c
 800bc2c:	200018a0 	.word	0x200018a0

0800bc30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc36:	f000 f96f 	bl	800bf18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc3a:	4b15      	ldr	r3, [pc, #84]	@ (800bc90 <prvCheckForValidListAndQueue+0x60>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d120      	bne.n	800bc84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc42:	4814      	ldr	r0, [pc, #80]	@ (800bc94 <prvCheckForValidListAndQueue+0x64>)
 800bc44:	f7fd f9ec 	bl	8009020 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc48:	4813      	ldr	r0, [pc, #76]	@ (800bc98 <prvCheckForValidListAndQueue+0x68>)
 800bc4a:	f7fd f9e9 	bl	8009020 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc4e:	4b13      	ldr	r3, [pc, #76]	@ (800bc9c <prvCheckForValidListAndQueue+0x6c>)
 800bc50:	4a10      	ldr	r2, [pc, #64]	@ (800bc94 <prvCheckForValidListAndQueue+0x64>)
 800bc52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc54:	4b12      	ldr	r3, [pc, #72]	@ (800bca0 <prvCheckForValidListAndQueue+0x70>)
 800bc56:	4a10      	ldr	r2, [pc, #64]	@ (800bc98 <prvCheckForValidListAndQueue+0x68>)
 800bc58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	4b11      	ldr	r3, [pc, #68]	@ (800bca4 <prvCheckForValidListAndQueue+0x74>)
 800bc60:	4a11      	ldr	r2, [pc, #68]	@ (800bca8 <prvCheckForValidListAndQueue+0x78>)
 800bc62:	2110      	movs	r1, #16
 800bc64:	200a      	movs	r0, #10
 800bc66:	f7fd faf9 	bl	800925c <xQueueGenericCreateStatic>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	4a08      	ldr	r2, [pc, #32]	@ (800bc90 <prvCheckForValidListAndQueue+0x60>)
 800bc6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc70:	4b07      	ldr	r3, [pc, #28]	@ (800bc90 <prvCheckForValidListAndQueue+0x60>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d005      	beq.n	800bc84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc78:	4b05      	ldr	r3, [pc, #20]	@ (800bc90 <prvCheckForValidListAndQueue+0x60>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	490b      	ldr	r1, [pc, #44]	@ (800bcac <prvCheckForValidListAndQueue+0x7c>)
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe f9fa 	bl	800a078 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc84:	f000 f97a 	bl	800bf7c <vPortExitCritical>
}
 800bc88:	bf00      	nop
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	200018a4 	.word	0x200018a4
 800bc94:	20001874 	.word	0x20001874
 800bc98:	20001888 	.word	0x20001888
 800bc9c:	2000189c 	.word	0x2000189c
 800bca0:	200018a0 	.word	0x200018a0
 800bca4:	20001950 	.word	0x20001950
 800bca8:	200018b0 	.word	0x200018b0
 800bcac:	0800f5e8 	.word	0x0800f5e8

0800bcb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3b04      	subs	r3, #4
 800bcc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bcc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3b04      	subs	r3, #4
 800bcce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	f023 0201 	bic.w	r2, r3, #1
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3b04      	subs	r3, #4
 800bcde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bce0:	4a0c      	ldr	r2, [pc, #48]	@ (800bd14 <pxPortInitialiseStack+0x64>)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3b14      	subs	r3, #20
 800bcea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3b04      	subs	r3, #4
 800bcf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f06f 0202 	mvn.w	r2, #2
 800bcfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3b20      	subs	r3, #32
 800bd04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd06:	68fb      	ldr	r3, [r7, #12]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	0800bd19 	.word	0x0800bd19

0800bd18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd22:	4b13      	ldr	r3, [pc, #76]	@ (800bd70 <prvTaskExitError+0x58>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2a:	d00b      	beq.n	800bd44 <prvTaskExitError+0x2c>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	60fb      	str	r3, [r7, #12]
}
 800bd3e:	bf00      	nop
 800bd40:	bf00      	nop
 800bd42:	e7fd      	b.n	800bd40 <prvTaskExitError+0x28>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	60bb      	str	r3, [r7, #8]
}
 800bd56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd58:	bf00      	nop
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d0fc      	beq.n	800bd5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd60:	bf00      	nop
 800bd62:	bf00      	nop
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	20000014 	.word	0x20000014
	...

0800bd80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd80:	4b07      	ldr	r3, [pc, #28]	@ (800bda0 <pxCurrentTCBConst2>)
 800bd82:	6819      	ldr	r1, [r3, #0]
 800bd84:	6808      	ldr	r0, [r1, #0]
 800bd86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8a:	f380 8809 	msr	PSP, r0
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f04f 0000 	mov.w	r0, #0
 800bd96:	f380 8811 	msr	BASEPRI, r0
 800bd9a:	4770      	bx	lr
 800bd9c:	f3af 8000 	nop.w

0800bda0 <pxCurrentTCBConst2>:
 800bda0:	20001374 	.word	0x20001374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bda4:	bf00      	nop
 800bda6:	bf00      	nop

0800bda8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bda8:	4808      	ldr	r0, [pc, #32]	@ (800bdcc <prvPortStartFirstTask+0x24>)
 800bdaa:	6800      	ldr	r0, [r0, #0]
 800bdac:	6800      	ldr	r0, [r0, #0]
 800bdae:	f380 8808 	msr	MSP, r0
 800bdb2:	f04f 0000 	mov.w	r0, #0
 800bdb6:	f380 8814 	msr	CONTROL, r0
 800bdba:	b662      	cpsie	i
 800bdbc:	b661      	cpsie	f
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	df00      	svc	0
 800bdc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bdca:	bf00      	nop
 800bdcc:	e000ed08 	.word	0xe000ed08

0800bdd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bdd6:	4b47      	ldr	r3, [pc, #284]	@ (800bef4 <xPortStartScheduler+0x124>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a47      	ldr	r2, [pc, #284]	@ (800bef8 <xPortStartScheduler+0x128>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d10b      	bne.n	800bdf8 <xPortStartScheduler+0x28>
	__asm volatile
 800bde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	613b      	str	r3, [r7, #16]
}
 800bdf2:	bf00      	nop
 800bdf4:	bf00      	nop
 800bdf6:	e7fd      	b.n	800bdf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bdf8:	4b3e      	ldr	r3, [pc, #248]	@ (800bef4 <xPortStartScheduler+0x124>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a3f      	ldr	r2, [pc, #252]	@ (800befc <xPortStartScheduler+0x12c>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d10b      	bne.n	800be1a <xPortStartScheduler+0x4a>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	60fb      	str	r3, [r7, #12]
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	e7fd      	b.n	800be16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be1a:	4b39      	ldr	r3, [pc, #228]	@ (800bf00 <xPortStartScheduler+0x130>)
 800be1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	22ff      	movs	r2, #255	@ 0xff
 800be2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	b2db      	uxtb	r3, r3
 800be32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	4b31      	ldr	r3, [pc, #196]	@ (800bf04 <xPortStartScheduler+0x134>)
 800be40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be42:	4b31      	ldr	r3, [pc, #196]	@ (800bf08 <xPortStartScheduler+0x138>)
 800be44:	2207      	movs	r2, #7
 800be46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be48:	e009      	b.n	800be5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800be4a:	4b2f      	ldr	r3, [pc, #188]	@ (800bf08 <xPortStartScheduler+0x138>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3b01      	subs	r3, #1
 800be50:	4a2d      	ldr	r2, [pc, #180]	@ (800bf08 <xPortStartScheduler+0x138>)
 800be52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be54:	78fb      	ldrb	r3, [r7, #3]
 800be56:	b2db      	uxtb	r3, r3
 800be58:	005b      	lsls	r3, r3, #1
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be5e:	78fb      	ldrb	r3, [r7, #3]
 800be60:	b2db      	uxtb	r3, r3
 800be62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be66:	2b80      	cmp	r3, #128	@ 0x80
 800be68:	d0ef      	beq.n	800be4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be6a:	4b27      	ldr	r3, [pc, #156]	@ (800bf08 <xPortStartScheduler+0x138>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f1c3 0307 	rsb	r3, r3, #7
 800be72:	2b04      	cmp	r3, #4
 800be74:	d00b      	beq.n	800be8e <xPortStartScheduler+0xbe>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	60bb      	str	r3, [r7, #8]
}
 800be88:	bf00      	nop
 800be8a:	bf00      	nop
 800be8c:	e7fd      	b.n	800be8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be8e:	4b1e      	ldr	r3, [pc, #120]	@ (800bf08 <xPortStartScheduler+0x138>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	021b      	lsls	r3, r3, #8
 800be94:	4a1c      	ldr	r2, [pc, #112]	@ (800bf08 <xPortStartScheduler+0x138>)
 800be96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be98:	4b1b      	ldr	r3, [pc, #108]	@ (800bf08 <xPortStartScheduler+0x138>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bea0:	4a19      	ldr	r2, [pc, #100]	@ (800bf08 <xPortStartScheduler+0x138>)
 800bea2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800beac:	4b17      	ldr	r3, [pc, #92]	@ (800bf0c <xPortStartScheduler+0x13c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a16      	ldr	r2, [pc, #88]	@ (800bf0c <xPortStartScheduler+0x13c>)
 800beb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800beb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800beb8:	4b14      	ldr	r3, [pc, #80]	@ (800bf0c <xPortStartScheduler+0x13c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a13      	ldr	r2, [pc, #76]	@ (800bf0c <xPortStartScheduler+0x13c>)
 800bebe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bec4:	f000 f8da 	bl	800c07c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bec8:	4b11      	ldr	r3, [pc, #68]	@ (800bf10 <xPortStartScheduler+0x140>)
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bece:	f000 f8f9 	bl	800c0c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bed2:	4b10      	ldr	r3, [pc, #64]	@ (800bf14 <xPortStartScheduler+0x144>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a0f      	ldr	r2, [pc, #60]	@ (800bf14 <xPortStartScheduler+0x144>)
 800bed8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bedc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bede:	f7ff ff63 	bl	800bda8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bee2:	f7fe fd13 	bl	800a90c <vTaskSwitchContext>
	prvTaskExitError();
 800bee6:	f7ff ff17 	bl	800bd18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	e000ed00 	.word	0xe000ed00
 800bef8:	410fc271 	.word	0x410fc271
 800befc:	410fc270 	.word	0x410fc270
 800bf00:	e000e400 	.word	0xe000e400
 800bf04:	200019a0 	.word	0x200019a0
 800bf08:	200019a4 	.word	0x200019a4
 800bf0c:	e000ed20 	.word	0xe000ed20
 800bf10:	20000014 	.word	0x20000014
 800bf14:	e000ef34 	.word	0xe000ef34

0800bf18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	607b      	str	r3, [r7, #4]
}
 800bf30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf32:	4b10      	ldr	r3, [pc, #64]	@ (800bf74 <vPortEnterCritical+0x5c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	3301      	adds	r3, #1
 800bf38:	4a0e      	ldr	r2, [pc, #56]	@ (800bf74 <vPortEnterCritical+0x5c>)
 800bf3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf3c:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <vPortEnterCritical+0x5c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d110      	bne.n	800bf66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf44:	4b0c      	ldr	r3, [pc, #48]	@ (800bf78 <vPortEnterCritical+0x60>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00b      	beq.n	800bf66 <vPortEnterCritical+0x4e>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	603b      	str	r3, [r7, #0]
}
 800bf60:	bf00      	nop
 800bf62:	bf00      	nop
 800bf64:	e7fd      	b.n	800bf62 <vPortEnterCritical+0x4a>
	}
}
 800bf66:	bf00      	nop
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	20000014 	.word	0x20000014
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf82:	4b12      	ldr	r3, [pc, #72]	@ (800bfcc <vPortExitCritical+0x50>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10b      	bne.n	800bfa2 <vPortExitCritical+0x26>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	607b      	str	r3, [r7, #4]
}
 800bf9c:	bf00      	nop
 800bf9e:	bf00      	nop
 800bfa0:	e7fd      	b.n	800bf9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	@ (800bfcc <vPortExitCritical+0x50>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	4a08      	ldr	r2, [pc, #32]	@ (800bfcc <vPortExitCritical+0x50>)
 800bfaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfac:	4b07      	ldr	r3, [pc, #28]	@ (800bfcc <vPortExitCritical+0x50>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d105      	bne.n	800bfc0 <vPortExitCritical+0x44>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	f383 8811 	msr	BASEPRI, r3
}
 800bfbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	20000014 	.word	0x20000014

0800bfd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfd0:	f3ef 8009 	mrs	r0, PSP
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	4b15      	ldr	r3, [pc, #84]	@ (800c030 <pxCurrentTCBConst>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	f01e 0f10 	tst.w	lr, #16
 800bfe0:	bf08      	it	eq
 800bfe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfea:	6010      	str	r0, [r2, #0]
 800bfec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bff4:	f380 8811 	msr	BASEPRI, r0
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f7fe fc84 	bl	800a90c <vTaskSwitchContext>
 800c004:	f04f 0000 	mov.w	r0, #0
 800c008:	f380 8811 	msr	BASEPRI, r0
 800c00c:	bc09      	pop	{r0, r3}
 800c00e:	6819      	ldr	r1, [r3, #0]
 800c010:	6808      	ldr	r0, [r1, #0]
 800c012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c016:	f01e 0f10 	tst.w	lr, #16
 800c01a:	bf08      	it	eq
 800c01c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c020:	f380 8809 	msr	PSP, r0
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	f3af 8000 	nop.w

0800c030 <pxCurrentTCBConst>:
 800c030:	20001374 	.word	0x20001374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c034:	bf00      	nop
 800c036:	bf00      	nop

0800c038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	607b      	str	r3, [r7, #4]
}
 800c050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c052:	f7fe fba1 	bl	800a798 <xTaskIncrementTick>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d003      	beq.n	800c064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c05c:	4b06      	ldr	r3, [pc, #24]	@ (800c078 <xPortSysTickHandler+0x40>)
 800c05e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c062:	601a      	str	r2, [r3, #0]
 800c064:	2300      	movs	r3, #0
 800c066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	f383 8811 	msr	BASEPRI, r3
}
 800c06e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	e000ed04 	.word	0xe000ed04

0800c07c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c07c:	b480      	push	{r7}
 800c07e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c080:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b0 <vPortSetupTimerInterrupt+0x34>)
 800c082:	2200      	movs	r2, #0
 800c084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c086:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b4 <vPortSetupTimerInterrupt+0x38>)
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c08c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b8 <vPortSetupTimerInterrupt+0x3c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a0a      	ldr	r2, [pc, #40]	@ (800c0bc <vPortSetupTimerInterrupt+0x40>)
 800c092:	fba2 2303 	umull	r2, r3, r2, r3
 800c096:	099b      	lsrs	r3, r3, #6
 800c098:	4a09      	ldr	r2, [pc, #36]	@ (800c0c0 <vPortSetupTimerInterrupt+0x44>)
 800c09a:	3b01      	subs	r3, #1
 800c09c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c09e:	4b04      	ldr	r3, [pc, #16]	@ (800c0b0 <vPortSetupTimerInterrupt+0x34>)
 800c0a0:	2207      	movs	r2, #7
 800c0a2:	601a      	str	r2, [r3, #0]
}
 800c0a4:	bf00      	nop
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	e000e010 	.word	0xe000e010
 800c0b4:	e000e018 	.word	0xe000e018
 800c0b8:	20000008 	.word	0x20000008
 800c0bc:	10624dd3 	.word	0x10624dd3
 800c0c0:	e000e014 	.word	0xe000e014

0800c0c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c0c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c0d4 <vPortEnableVFP+0x10>
 800c0c8:	6801      	ldr	r1, [r0, #0]
 800c0ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c0ce:	6001      	str	r1, [r0, #0]
 800c0d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c0d2:	bf00      	nop
 800c0d4:	e000ed88 	.word	0xe000ed88

0800c0d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c0de:	f3ef 8305 	mrs	r3, IPSR
 800c0e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b0f      	cmp	r3, #15
 800c0e8:	d915      	bls.n	800c116 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0ea:	4a18      	ldr	r2, [pc, #96]	@ (800c14c <vPortValidateInterruptPriority+0x74>)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0f4:	4b16      	ldr	r3, [pc, #88]	@ (800c150 <vPortValidateInterruptPriority+0x78>)
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	7afa      	ldrb	r2, [r7, #11]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d20b      	bcs.n	800c116 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	607b      	str	r3, [r7, #4]
}
 800c110:	bf00      	nop
 800c112:	bf00      	nop
 800c114:	e7fd      	b.n	800c112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c116:	4b0f      	ldr	r3, [pc, #60]	@ (800c154 <vPortValidateInterruptPriority+0x7c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c11e:	4b0e      	ldr	r3, [pc, #56]	@ (800c158 <vPortValidateInterruptPriority+0x80>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	429a      	cmp	r2, r3
 800c124:	d90b      	bls.n	800c13e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	603b      	str	r3, [r7, #0]
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	e7fd      	b.n	800c13a <vPortValidateInterruptPriority+0x62>
	}
 800c13e:	bf00      	nop
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	e000e3f0 	.word	0xe000e3f0
 800c150:	200019a0 	.word	0x200019a0
 800c154:	e000ed0c 	.word	0xe000ed0c
 800c158:	200019a4 	.word	0x200019a4

0800c15c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08a      	sub	sp, #40	@ 0x28
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c164:	2300      	movs	r3, #0
 800c166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c168:	f7fe fa48 	bl	800a5fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c16c:	4b5c      	ldr	r3, [pc, #368]	@ (800c2e0 <pvPortMalloc+0x184>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c174:	f000 f924 	bl	800c3c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c178:	4b5a      	ldr	r3, [pc, #360]	@ (800c2e4 <pvPortMalloc+0x188>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4013      	ands	r3, r2
 800c180:	2b00      	cmp	r3, #0
 800c182:	f040 8095 	bne.w	800c2b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d01e      	beq.n	800c1ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c18c:	2208      	movs	r2, #8
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4413      	add	r3, r2
 800c192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f003 0307 	and.w	r3, r3, #7
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d015      	beq.n	800c1ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f023 0307 	bic.w	r3, r3, #7
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f003 0307 	and.w	r3, r3, #7
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00b      	beq.n	800c1ca <pvPortMalloc+0x6e>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	617b      	str	r3, [r7, #20]
}
 800c1c4:	bf00      	nop
 800c1c6:	bf00      	nop
 800c1c8:	e7fd      	b.n	800c1c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d06f      	beq.n	800c2b0 <pvPortMalloc+0x154>
 800c1d0:	4b45      	ldr	r3, [pc, #276]	@ (800c2e8 <pvPortMalloc+0x18c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d86a      	bhi.n	800c2b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c1da:	4b44      	ldr	r3, [pc, #272]	@ (800c2ec <pvPortMalloc+0x190>)
 800c1dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c1de:	4b43      	ldr	r3, [pc, #268]	@ (800c2ec <pvPortMalloc+0x190>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1e4:	e004      	b.n	800c1f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d903      	bls.n	800c202 <pvPortMalloc+0xa6>
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1f1      	bne.n	800c1e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c202:	4b37      	ldr	r3, [pc, #220]	@ (800c2e0 <pvPortMalloc+0x184>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c208:	429a      	cmp	r2, r3
 800c20a:	d051      	beq.n	800c2b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2208      	movs	r2, #8
 800c212:	4413      	add	r3, r2
 800c214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	6a3b      	ldr	r3, [r7, #32]
 800c21c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c220:	685a      	ldr	r2, [r3, #4]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	1ad2      	subs	r2, r2, r3
 800c226:	2308      	movs	r3, #8
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d920      	bls.n	800c270 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4413      	add	r3, r2
 800c234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	f003 0307 	and.w	r3, r3, #7
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00b      	beq.n	800c258 <pvPortMalloc+0xfc>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	613b      	str	r3, [r7, #16]
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	e7fd      	b.n	800c254 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	1ad2      	subs	r2, r2, r3
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c26a:	69b8      	ldr	r0, [r7, #24]
 800c26c:	f000 f90a 	bl	800c484 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c270:	4b1d      	ldr	r3, [pc, #116]	@ (800c2e8 <pvPortMalloc+0x18c>)
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	4a1b      	ldr	r2, [pc, #108]	@ (800c2e8 <pvPortMalloc+0x18c>)
 800c27c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c27e:	4b1a      	ldr	r3, [pc, #104]	@ (800c2e8 <pvPortMalloc+0x18c>)
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	4b1b      	ldr	r3, [pc, #108]	@ (800c2f0 <pvPortMalloc+0x194>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	429a      	cmp	r2, r3
 800c288:	d203      	bcs.n	800c292 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c28a:	4b17      	ldr	r3, [pc, #92]	@ (800c2e8 <pvPortMalloc+0x18c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a18      	ldr	r2, [pc, #96]	@ (800c2f0 <pvPortMalloc+0x194>)
 800c290:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c294:	685a      	ldr	r2, [r3, #4]
 800c296:	4b13      	ldr	r3, [pc, #76]	@ (800c2e4 <pvPortMalloc+0x188>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	431a      	orrs	r2, r3
 800c29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2a6:	4b13      	ldr	r3, [pc, #76]	@ (800c2f4 <pvPortMalloc+0x198>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	4a11      	ldr	r2, [pc, #68]	@ (800c2f4 <pvPortMalloc+0x198>)
 800c2ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2b0:	f7fe f9b2 	bl	800a618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00b      	beq.n	800c2d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	60fb      	str	r3, [r7, #12]
}
 800c2d0:	bf00      	nop
 800c2d2:	bf00      	nop
 800c2d4:	e7fd      	b.n	800c2d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c2d6:	69fb      	ldr	r3, [r7, #28]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3728      	adds	r7, #40	@ 0x28
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	200049b0 	.word	0x200049b0
 800c2e4:	200049c4 	.word	0x200049c4
 800c2e8:	200049b4 	.word	0x200049b4
 800c2ec:	200049a8 	.word	0x200049a8
 800c2f0:	200049b8 	.word	0x200049b8
 800c2f4:	200049bc 	.word	0x200049bc

0800c2f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d04f      	beq.n	800c3aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c30a:	2308      	movs	r3, #8
 800c30c:	425b      	negs	r3, r3
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	4413      	add	r3, r2
 800c312:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	4b25      	ldr	r3, [pc, #148]	@ (800c3b4 <vPortFree+0xbc>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4013      	ands	r3, r2
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10b      	bne.n	800c33e <vPortFree+0x46>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	60fb      	str	r3, [r7, #12]
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	e7fd      	b.n	800c33a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00b      	beq.n	800c35e <vPortFree+0x66>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	60bb      	str	r3, [r7, #8]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	4b14      	ldr	r3, [pc, #80]	@ (800c3b4 <vPortFree+0xbc>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4013      	ands	r3, r2
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d01e      	beq.n	800c3aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d11a      	bne.n	800c3aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	685a      	ldr	r2, [r3, #4]
 800c378:	4b0e      	ldr	r3, [pc, #56]	@ (800c3b4 <vPortFree+0xbc>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	43db      	mvns	r3, r3
 800c37e:	401a      	ands	r2, r3
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c384:	f7fe f93a 	bl	800a5fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	685a      	ldr	r2, [r3, #4]
 800c38c:	4b0a      	ldr	r3, [pc, #40]	@ (800c3b8 <vPortFree+0xc0>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4413      	add	r3, r2
 800c392:	4a09      	ldr	r2, [pc, #36]	@ (800c3b8 <vPortFree+0xc0>)
 800c394:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c396:	6938      	ldr	r0, [r7, #16]
 800c398:	f000 f874 	bl	800c484 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c39c:	4b07      	ldr	r3, [pc, #28]	@ (800c3bc <vPortFree+0xc4>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	4a06      	ldr	r2, [pc, #24]	@ (800c3bc <vPortFree+0xc4>)
 800c3a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3a6:	f7fe f937 	bl	800a618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3aa:	bf00      	nop
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200049c4 	.word	0x200049c4
 800c3b8:	200049b4 	.word	0x200049b4
 800c3bc:	200049c0 	.word	0x200049c0

0800c3c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3c6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800c3ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3cc:	4b27      	ldr	r3, [pc, #156]	@ (800c46c <prvHeapInit+0xac>)
 800c3ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f003 0307 	and.w	r3, r3, #7
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00c      	beq.n	800c3f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3307      	adds	r3, #7
 800c3de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0307 	bic.w	r3, r3, #7
 800c3e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c46c <prvHeapInit+0xac>)
 800c3f0:	4413      	add	r3, r2
 800c3f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c3f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c470 <prvHeapInit+0xb0>)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c3fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c470 <prvHeapInit+0xb0>)
 800c400:	2200      	movs	r2, #0
 800c402:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	4413      	add	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c40c:	2208      	movs	r2, #8
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	1a9b      	subs	r3, r3, r2
 800c412:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f023 0307 	bic.w	r3, r3, #7
 800c41a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	4a15      	ldr	r2, [pc, #84]	@ (800c474 <prvHeapInit+0xb4>)
 800c420:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c422:	4b14      	ldr	r3, [pc, #80]	@ (800c474 <prvHeapInit+0xb4>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2200      	movs	r2, #0
 800c428:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c42a:	4b12      	ldr	r3, [pc, #72]	@ (800c474 <prvHeapInit+0xb4>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	1ad2      	subs	r2, r2, r3
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c440:	4b0c      	ldr	r3, [pc, #48]	@ (800c474 <prvHeapInit+0xb4>)
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	4a0a      	ldr	r2, [pc, #40]	@ (800c478 <prvHeapInit+0xb8>)
 800c44e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	4a09      	ldr	r2, [pc, #36]	@ (800c47c <prvHeapInit+0xbc>)
 800c456:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c458:	4b09      	ldr	r3, [pc, #36]	@ (800c480 <prvHeapInit+0xc0>)
 800c45a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c45e:	601a      	str	r2, [r3, #0]
}
 800c460:	bf00      	nop
 800c462:	3714      	adds	r7, #20
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	200019a8 	.word	0x200019a8
 800c470:	200049a8 	.word	0x200049a8
 800c474:	200049b0 	.word	0x200049b0
 800c478:	200049b8 	.word	0x200049b8
 800c47c:	200049b4 	.word	0x200049b4
 800c480:	200049c4 	.word	0x200049c4

0800c484 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c48c:	4b28      	ldr	r3, [pc, #160]	@ (800c530 <prvInsertBlockIntoFreeList+0xac>)
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	e002      	b.n	800c498 <prvInsertBlockIntoFreeList+0x14>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d8f7      	bhi.n	800c492 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d108      	bne.n	800c4c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	441a      	add	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	441a      	add	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d118      	bne.n	800c50c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	4b15      	ldr	r3, [pc, #84]	@ (800c534 <prvInsertBlockIntoFreeList+0xb0>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d00d      	beq.n	800c502 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	441a      	add	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	601a      	str	r2, [r3, #0]
 800c500:	e008      	b.n	800c514 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c502:	4b0c      	ldr	r3, [pc, #48]	@ (800c534 <prvInsertBlockIntoFreeList+0xb0>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	e003      	b.n	800c514 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d002      	beq.n	800c522 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c522:	bf00      	nop
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	200049a8 	.word	0x200049a8
 800c534:	200049b0 	.word	0x200049b0

0800c538 <__cvt>:
 800c538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c53c:	ec57 6b10 	vmov	r6, r7, d0
 800c540:	2f00      	cmp	r7, #0
 800c542:	460c      	mov	r4, r1
 800c544:	4619      	mov	r1, r3
 800c546:	463b      	mov	r3, r7
 800c548:	bfbb      	ittet	lt
 800c54a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c54e:	461f      	movlt	r7, r3
 800c550:	2300      	movge	r3, #0
 800c552:	232d      	movlt	r3, #45	@ 0x2d
 800c554:	700b      	strb	r3, [r1, #0]
 800c556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c558:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c55c:	4691      	mov	r9, r2
 800c55e:	f023 0820 	bic.w	r8, r3, #32
 800c562:	bfbc      	itt	lt
 800c564:	4632      	movlt	r2, r6
 800c566:	4616      	movlt	r6, r2
 800c568:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c56c:	d005      	beq.n	800c57a <__cvt+0x42>
 800c56e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c572:	d100      	bne.n	800c576 <__cvt+0x3e>
 800c574:	3401      	adds	r4, #1
 800c576:	2102      	movs	r1, #2
 800c578:	e000      	b.n	800c57c <__cvt+0x44>
 800c57a:	2103      	movs	r1, #3
 800c57c:	ab03      	add	r3, sp, #12
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	ab02      	add	r3, sp, #8
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	ec47 6b10 	vmov	d0, r6, r7
 800c588:	4653      	mov	r3, sl
 800c58a:	4622      	mov	r2, r4
 800c58c:	f000 ffdc 	bl	800d548 <_dtoa_r>
 800c590:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c594:	4605      	mov	r5, r0
 800c596:	d119      	bne.n	800c5cc <__cvt+0x94>
 800c598:	f019 0f01 	tst.w	r9, #1
 800c59c:	d00e      	beq.n	800c5bc <__cvt+0x84>
 800c59e:	eb00 0904 	add.w	r9, r0, r4
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	4639      	mov	r1, r7
 800c5aa:	f7f4 fa65 	bl	8000a78 <__aeabi_dcmpeq>
 800c5ae:	b108      	cbz	r0, 800c5b4 <__cvt+0x7c>
 800c5b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c5b4:	2230      	movs	r2, #48	@ 0x30
 800c5b6:	9b03      	ldr	r3, [sp, #12]
 800c5b8:	454b      	cmp	r3, r9
 800c5ba:	d31e      	bcc.n	800c5fa <__cvt+0xc2>
 800c5bc:	9b03      	ldr	r3, [sp, #12]
 800c5be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5c0:	1b5b      	subs	r3, r3, r5
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	b004      	add	sp, #16
 800c5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5d0:	eb00 0904 	add.w	r9, r0, r4
 800c5d4:	d1e5      	bne.n	800c5a2 <__cvt+0x6a>
 800c5d6:	7803      	ldrb	r3, [r0, #0]
 800c5d8:	2b30      	cmp	r3, #48	@ 0x30
 800c5da:	d10a      	bne.n	800c5f2 <__cvt+0xba>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2300      	movs	r3, #0
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f4 fa48 	bl	8000a78 <__aeabi_dcmpeq>
 800c5e8:	b918      	cbnz	r0, 800c5f2 <__cvt+0xba>
 800c5ea:	f1c4 0401 	rsb	r4, r4, #1
 800c5ee:	f8ca 4000 	str.w	r4, [sl]
 800c5f2:	f8da 3000 	ldr.w	r3, [sl]
 800c5f6:	4499      	add	r9, r3
 800c5f8:	e7d3      	b.n	800c5a2 <__cvt+0x6a>
 800c5fa:	1c59      	adds	r1, r3, #1
 800c5fc:	9103      	str	r1, [sp, #12]
 800c5fe:	701a      	strb	r2, [r3, #0]
 800c600:	e7d9      	b.n	800c5b6 <__cvt+0x7e>

0800c602 <__exponent>:
 800c602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c604:	2900      	cmp	r1, #0
 800c606:	bfba      	itte	lt
 800c608:	4249      	neglt	r1, r1
 800c60a:	232d      	movlt	r3, #45	@ 0x2d
 800c60c:	232b      	movge	r3, #43	@ 0x2b
 800c60e:	2909      	cmp	r1, #9
 800c610:	7002      	strb	r2, [r0, #0]
 800c612:	7043      	strb	r3, [r0, #1]
 800c614:	dd29      	ble.n	800c66a <__exponent+0x68>
 800c616:	f10d 0307 	add.w	r3, sp, #7
 800c61a:	461d      	mov	r5, r3
 800c61c:	270a      	movs	r7, #10
 800c61e:	461a      	mov	r2, r3
 800c620:	fbb1 f6f7 	udiv	r6, r1, r7
 800c624:	fb07 1416 	mls	r4, r7, r6, r1
 800c628:	3430      	adds	r4, #48	@ 0x30
 800c62a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c62e:	460c      	mov	r4, r1
 800c630:	2c63      	cmp	r4, #99	@ 0x63
 800c632:	f103 33ff 	add.w	r3, r3, #4294967295
 800c636:	4631      	mov	r1, r6
 800c638:	dcf1      	bgt.n	800c61e <__exponent+0x1c>
 800c63a:	3130      	adds	r1, #48	@ 0x30
 800c63c:	1e94      	subs	r4, r2, #2
 800c63e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c642:	1c41      	adds	r1, r0, #1
 800c644:	4623      	mov	r3, r4
 800c646:	42ab      	cmp	r3, r5
 800c648:	d30a      	bcc.n	800c660 <__exponent+0x5e>
 800c64a:	f10d 0309 	add.w	r3, sp, #9
 800c64e:	1a9b      	subs	r3, r3, r2
 800c650:	42ac      	cmp	r4, r5
 800c652:	bf88      	it	hi
 800c654:	2300      	movhi	r3, #0
 800c656:	3302      	adds	r3, #2
 800c658:	4403      	add	r3, r0
 800c65a:	1a18      	subs	r0, r3, r0
 800c65c:	b003      	add	sp, #12
 800c65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c660:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c664:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c668:	e7ed      	b.n	800c646 <__exponent+0x44>
 800c66a:	2330      	movs	r3, #48	@ 0x30
 800c66c:	3130      	adds	r1, #48	@ 0x30
 800c66e:	7083      	strb	r3, [r0, #2]
 800c670:	70c1      	strb	r1, [r0, #3]
 800c672:	1d03      	adds	r3, r0, #4
 800c674:	e7f1      	b.n	800c65a <__exponent+0x58>
	...

0800c678 <_printf_float>:
 800c678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67c:	b08d      	sub	sp, #52	@ 0x34
 800c67e:	460c      	mov	r4, r1
 800c680:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c684:	4616      	mov	r6, r2
 800c686:	461f      	mov	r7, r3
 800c688:	4605      	mov	r5, r0
 800c68a:	f000 fdf7 	bl	800d27c <_localeconv_r>
 800c68e:	6803      	ldr	r3, [r0, #0]
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	4618      	mov	r0, r3
 800c694:	f7f3 fdc4 	bl	8000220 <strlen>
 800c698:	2300      	movs	r3, #0
 800c69a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c69c:	f8d8 3000 	ldr.w	r3, [r8]
 800c6a0:	9005      	str	r0, [sp, #20]
 800c6a2:	3307      	adds	r3, #7
 800c6a4:	f023 0307 	bic.w	r3, r3, #7
 800c6a8:	f103 0208 	add.w	r2, r3, #8
 800c6ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c6b0:	f8d4 b000 	ldr.w	fp, [r4]
 800c6b4:	f8c8 2000 	str.w	r2, [r8]
 800c6b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c6c0:	9307      	str	r3, [sp, #28]
 800c6c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c6ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6ce:	4b9c      	ldr	r3, [pc, #624]	@ (800c940 <_printf_float+0x2c8>)
 800c6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d4:	f7f4 fa02 	bl	8000adc <__aeabi_dcmpun>
 800c6d8:	bb70      	cbnz	r0, 800c738 <_printf_float+0xc0>
 800c6da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6de:	4b98      	ldr	r3, [pc, #608]	@ (800c940 <_printf_float+0x2c8>)
 800c6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e4:	f7f4 f9dc 	bl	8000aa0 <__aeabi_dcmple>
 800c6e8:	bb30      	cbnz	r0, 800c738 <_printf_float+0xc0>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4640      	mov	r0, r8
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	f7f4 f9cb 	bl	8000a8c <__aeabi_dcmplt>
 800c6f6:	b110      	cbz	r0, 800c6fe <_printf_float+0x86>
 800c6f8:	232d      	movs	r3, #45	@ 0x2d
 800c6fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6fe:	4a91      	ldr	r2, [pc, #580]	@ (800c944 <_printf_float+0x2cc>)
 800c700:	4b91      	ldr	r3, [pc, #580]	@ (800c948 <_printf_float+0x2d0>)
 800c702:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c706:	bf94      	ite	ls
 800c708:	4690      	movls	r8, r2
 800c70a:	4698      	movhi	r8, r3
 800c70c:	2303      	movs	r3, #3
 800c70e:	6123      	str	r3, [r4, #16]
 800c710:	f02b 0304 	bic.w	r3, fp, #4
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	f04f 0900 	mov.w	r9, #0
 800c71a:	9700      	str	r7, [sp, #0]
 800c71c:	4633      	mov	r3, r6
 800c71e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c720:	4621      	mov	r1, r4
 800c722:	4628      	mov	r0, r5
 800c724:	f000 f9d2 	bl	800cacc <_printf_common>
 800c728:	3001      	adds	r0, #1
 800c72a:	f040 808d 	bne.w	800c848 <_printf_float+0x1d0>
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295
 800c732:	b00d      	add	sp, #52	@ 0x34
 800c734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c738:	4642      	mov	r2, r8
 800c73a:	464b      	mov	r3, r9
 800c73c:	4640      	mov	r0, r8
 800c73e:	4649      	mov	r1, r9
 800c740:	f7f4 f9cc 	bl	8000adc <__aeabi_dcmpun>
 800c744:	b140      	cbz	r0, 800c758 <_printf_float+0xe0>
 800c746:	464b      	mov	r3, r9
 800c748:	2b00      	cmp	r3, #0
 800c74a:	bfbc      	itt	lt
 800c74c:	232d      	movlt	r3, #45	@ 0x2d
 800c74e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c752:	4a7e      	ldr	r2, [pc, #504]	@ (800c94c <_printf_float+0x2d4>)
 800c754:	4b7e      	ldr	r3, [pc, #504]	@ (800c950 <_printf_float+0x2d8>)
 800c756:	e7d4      	b.n	800c702 <_printf_float+0x8a>
 800c758:	6863      	ldr	r3, [r4, #4]
 800c75a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c75e:	9206      	str	r2, [sp, #24]
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	d13b      	bne.n	800c7dc <_printf_float+0x164>
 800c764:	2306      	movs	r3, #6
 800c766:	6063      	str	r3, [r4, #4]
 800c768:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c76c:	2300      	movs	r3, #0
 800c76e:	6022      	str	r2, [r4, #0]
 800c770:	9303      	str	r3, [sp, #12]
 800c772:	ab0a      	add	r3, sp, #40	@ 0x28
 800c774:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c778:	ab09      	add	r3, sp, #36	@ 0x24
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	6861      	ldr	r1, [r4, #4]
 800c77e:	ec49 8b10 	vmov	d0, r8, r9
 800c782:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c786:	4628      	mov	r0, r5
 800c788:	f7ff fed6 	bl	800c538 <__cvt>
 800c78c:	9b06      	ldr	r3, [sp, #24]
 800c78e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c790:	2b47      	cmp	r3, #71	@ 0x47
 800c792:	4680      	mov	r8, r0
 800c794:	d129      	bne.n	800c7ea <_printf_float+0x172>
 800c796:	1cc8      	adds	r0, r1, #3
 800c798:	db02      	blt.n	800c7a0 <_printf_float+0x128>
 800c79a:	6863      	ldr	r3, [r4, #4]
 800c79c:	4299      	cmp	r1, r3
 800c79e:	dd41      	ble.n	800c824 <_printf_float+0x1ac>
 800c7a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800c7a4:	fa5f fa8a 	uxtb.w	sl, sl
 800c7a8:	3901      	subs	r1, #1
 800c7aa:	4652      	mov	r2, sl
 800c7ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c7b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7b2:	f7ff ff26 	bl	800c602 <__exponent>
 800c7b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7b8:	1813      	adds	r3, r2, r0
 800c7ba:	2a01      	cmp	r2, #1
 800c7bc:	4681      	mov	r9, r0
 800c7be:	6123      	str	r3, [r4, #16]
 800c7c0:	dc02      	bgt.n	800c7c8 <_printf_float+0x150>
 800c7c2:	6822      	ldr	r2, [r4, #0]
 800c7c4:	07d2      	lsls	r2, r2, #31
 800c7c6:	d501      	bpl.n	800c7cc <_printf_float+0x154>
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	6123      	str	r3, [r4, #16]
 800c7cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d0a2      	beq.n	800c71a <_printf_float+0xa2>
 800c7d4:	232d      	movs	r3, #45	@ 0x2d
 800c7d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7da:	e79e      	b.n	800c71a <_printf_float+0xa2>
 800c7dc:	9a06      	ldr	r2, [sp, #24]
 800c7de:	2a47      	cmp	r2, #71	@ 0x47
 800c7e0:	d1c2      	bne.n	800c768 <_printf_float+0xf0>
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1c0      	bne.n	800c768 <_printf_float+0xf0>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e7bd      	b.n	800c766 <_printf_float+0xee>
 800c7ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c7ee:	d9db      	bls.n	800c7a8 <_printf_float+0x130>
 800c7f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c7f4:	d118      	bne.n	800c828 <_printf_float+0x1b0>
 800c7f6:	2900      	cmp	r1, #0
 800c7f8:	6863      	ldr	r3, [r4, #4]
 800c7fa:	dd0b      	ble.n	800c814 <_printf_float+0x19c>
 800c7fc:	6121      	str	r1, [r4, #16]
 800c7fe:	b913      	cbnz	r3, 800c806 <_printf_float+0x18e>
 800c800:	6822      	ldr	r2, [r4, #0]
 800c802:	07d0      	lsls	r0, r2, #31
 800c804:	d502      	bpl.n	800c80c <_printf_float+0x194>
 800c806:	3301      	adds	r3, #1
 800c808:	440b      	add	r3, r1
 800c80a:	6123      	str	r3, [r4, #16]
 800c80c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c80e:	f04f 0900 	mov.w	r9, #0
 800c812:	e7db      	b.n	800c7cc <_printf_float+0x154>
 800c814:	b913      	cbnz	r3, 800c81c <_printf_float+0x1a4>
 800c816:	6822      	ldr	r2, [r4, #0]
 800c818:	07d2      	lsls	r2, r2, #31
 800c81a:	d501      	bpl.n	800c820 <_printf_float+0x1a8>
 800c81c:	3302      	adds	r3, #2
 800c81e:	e7f4      	b.n	800c80a <_printf_float+0x192>
 800c820:	2301      	movs	r3, #1
 800c822:	e7f2      	b.n	800c80a <_printf_float+0x192>
 800c824:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c82a:	4299      	cmp	r1, r3
 800c82c:	db05      	blt.n	800c83a <_printf_float+0x1c2>
 800c82e:	6823      	ldr	r3, [r4, #0]
 800c830:	6121      	str	r1, [r4, #16]
 800c832:	07d8      	lsls	r0, r3, #31
 800c834:	d5ea      	bpl.n	800c80c <_printf_float+0x194>
 800c836:	1c4b      	adds	r3, r1, #1
 800c838:	e7e7      	b.n	800c80a <_printf_float+0x192>
 800c83a:	2900      	cmp	r1, #0
 800c83c:	bfd4      	ite	le
 800c83e:	f1c1 0202 	rsble	r2, r1, #2
 800c842:	2201      	movgt	r2, #1
 800c844:	4413      	add	r3, r2
 800c846:	e7e0      	b.n	800c80a <_printf_float+0x192>
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	055a      	lsls	r2, r3, #21
 800c84c:	d407      	bmi.n	800c85e <_printf_float+0x1e6>
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	4642      	mov	r2, r8
 800c852:	4631      	mov	r1, r6
 800c854:	4628      	mov	r0, r5
 800c856:	47b8      	blx	r7
 800c858:	3001      	adds	r0, #1
 800c85a:	d12b      	bne.n	800c8b4 <_printf_float+0x23c>
 800c85c:	e767      	b.n	800c72e <_printf_float+0xb6>
 800c85e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c862:	f240 80dd 	bls.w	800ca20 <_printf_float+0x3a8>
 800c866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c86a:	2200      	movs	r2, #0
 800c86c:	2300      	movs	r3, #0
 800c86e:	f7f4 f903 	bl	8000a78 <__aeabi_dcmpeq>
 800c872:	2800      	cmp	r0, #0
 800c874:	d033      	beq.n	800c8de <_printf_float+0x266>
 800c876:	4a37      	ldr	r2, [pc, #220]	@ (800c954 <_printf_float+0x2dc>)
 800c878:	2301      	movs	r3, #1
 800c87a:	4631      	mov	r1, r6
 800c87c:	4628      	mov	r0, r5
 800c87e:	47b8      	blx	r7
 800c880:	3001      	adds	r0, #1
 800c882:	f43f af54 	beq.w	800c72e <_printf_float+0xb6>
 800c886:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c88a:	4543      	cmp	r3, r8
 800c88c:	db02      	blt.n	800c894 <_printf_float+0x21c>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	07d8      	lsls	r0, r3, #31
 800c892:	d50f      	bpl.n	800c8b4 <_printf_float+0x23c>
 800c894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c898:	4631      	mov	r1, r6
 800c89a:	4628      	mov	r0, r5
 800c89c:	47b8      	blx	r7
 800c89e:	3001      	adds	r0, #1
 800c8a0:	f43f af45 	beq.w	800c72e <_printf_float+0xb6>
 800c8a4:	f04f 0900 	mov.w	r9, #0
 800c8a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8ac:	f104 0a1a 	add.w	sl, r4, #26
 800c8b0:	45c8      	cmp	r8, r9
 800c8b2:	dc09      	bgt.n	800c8c8 <_printf_float+0x250>
 800c8b4:	6823      	ldr	r3, [r4, #0]
 800c8b6:	079b      	lsls	r3, r3, #30
 800c8b8:	f100 8103 	bmi.w	800cac2 <_printf_float+0x44a>
 800c8bc:	68e0      	ldr	r0, [r4, #12]
 800c8be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8c0:	4298      	cmp	r0, r3
 800c8c2:	bfb8      	it	lt
 800c8c4:	4618      	movlt	r0, r3
 800c8c6:	e734      	b.n	800c732 <_printf_float+0xba>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	47b8      	blx	r7
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	f43f af2b 	beq.w	800c72e <_printf_float+0xb6>
 800c8d8:	f109 0901 	add.w	r9, r9, #1
 800c8dc:	e7e8      	b.n	800c8b0 <_printf_float+0x238>
 800c8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	dc39      	bgt.n	800c958 <_printf_float+0x2e0>
 800c8e4:	4a1b      	ldr	r2, [pc, #108]	@ (800c954 <_printf_float+0x2dc>)
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	47b8      	blx	r7
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	f43f af1d 	beq.w	800c72e <_printf_float+0xb6>
 800c8f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c8f8:	ea59 0303 	orrs.w	r3, r9, r3
 800c8fc:	d102      	bne.n	800c904 <_printf_float+0x28c>
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	07d9      	lsls	r1, r3, #31
 800c902:	d5d7      	bpl.n	800c8b4 <_printf_float+0x23c>
 800c904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c908:	4631      	mov	r1, r6
 800c90a:	4628      	mov	r0, r5
 800c90c:	47b8      	blx	r7
 800c90e:	3001      	adds	r0, #1
 800c910:	f43f af0d 	beq.w	800c72e <_printf_float+0xb6>
 800c914:	f04f 0a00 	mov.w	sl, #0
 800c918:	f104 0b1a 	add.w	fp, r4, #26
 800c91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c91e:	425b      	negs	r3, r3
 800c920:	4553      	cmp	r3, sl
 800c922:	dc01      	bgt.n	800c928 <_printf_float+0x2b0>
 800c924:	464b      	mov	r3, r9
 800c926:	e793      	b.n	800c850 <_printf_float+0x1d8>
 800c928:	2301      	movs	r3, #1
 800c92a:	465a      	mov	r2, fp
 800c92c:	4631      	mov	r1, r6
 800c92e:	4628      	mov	r0, r5
 800c930:	47b8      	blx	r7
 800c932:	3001      	adds	r0, #1
 800c934:	f43f aefb 	beq.w	800c72e <_printf_float+0xb6>
 800c938:	f10a 0a01 	add.w	sl, sl, #1
 800c93c:	e7ee      	b.n	800c91c <_printf_float+0x2a4>
 800c93e:	bf00      	nop
 800c940:	7fefffff 	.word	0x7fefffff
 800c944:	0800f935 	.word	0x0800f935
 800c948:	0800f939 	.word	0x0800f939
 800c94c:	0800f93d 	.word	0x0800f93d
 800c950:	0800f941 	.word	0x0800f941
 800c954:	0800f945 	.word	0x0800f945
 800c958:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c95a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c95e:	4553      	cmp	r3, sl
 800c960:	bfa8      	it	ge
 800c962:	4653      	movge	r3, sl
 800c964:	2b00      	cmp	r3, #0
 800c966:	4699      	mov	r9, r3
 800c968:	dc36      	bgt.n	800c9d8 <_printf_float+0x360>
 800c96a:	f04f 0b00 	mov.w	fp, #0
 800c96e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c972:	f104 021a 	add.w	r2, r4, #26
 800c976:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c978:	9306      	str	r3, [sp, #24]
 800c97a:	eba3 0309 	sub.w	r3, r3, r9
 800c97e:	455b      	cmp	r3, fp
 800c980:	dc31      	bgt.n	800c9e6 <_printf_float+0x36e>
 800c982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c984:	459a      	cmp	sl, r3
 800c986:	dc3a      	bgt.n	800c9fe <_printf_float+0x386>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	07da      	lsls	r2, r3, #31
 800c98c:	d437      	bmi.n	800c9fe <_printf_float+0x386>
 800c98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c990:	ebaa 0903 	sub.w	r9, sl, r3
 800c994:	9b06      	ldr	r3, [sp, #24]
 800c996:	ebaa 0303 	sub.w	r3, sl, r3
 800c99a:	4599      	cmp	r9, r3
 800c99c:	bfa8      	it	ge
 800c99e:	4699      	movge	r9, r3
 800c9a0:	f1b9 0f00 	cmp.w	r9, #0
 800c9a4:	dc33      	bgt.n	800ca0e <_printf_float+0x396>
 800c9a6:	f04f 0800 	mov.w	r8, #0
 800c9aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9ae:	f104 0b1a 	add.w	fp, r4, #26
 800c9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9b4:	ebaa 0303 	sub.w	r3, sl, r3
 800c9b8:	eba3 0309 	sub.w	r3, r3, r9
 800c9bc:	4543      	cmp	r3, r8
 800c9be:	f77f af79 	ble.w	800c8b4 <_printf_float+0x23c>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	465a      	mov	r2, fp
 800c9c6:	4631      	mov	r1, r6
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	47b8      	blx	r7
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	f43f aeae 	beq.w	800c72e <_printf_float+0xb6>
 800c9d2:	f108 0801 	add.w	r8, r8, #1
 800c9d6:	e7ec      	b.n	800c9b2 <_printf_float+0x33a>
 800c9d8:	4642      	mov	r2, r8
 800c9da:	4631      	mov	r1, r6
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b8      	blx	r7
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d1c2      	bne.n	800c96a <_printf_float+0x2f2>
 800c9e4:	e6a3      	b.n	800c72e <_printf_float+0xb6>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	4631      	mov	r1, r6
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	9206      	str	r2, [sp, #24]
 800c9ee:	47b8      	blx	r7
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	f43f ae9c 	beq.w	800c72e <_printf_float+0xb6>
 800c9f6:	9a06      	ldr	r2, [sp, #24]
 800c9f8:	f10b 0b01 	add.w	fp, fp, #1
 800c9fc:	e7bb      	b.n	800c976 <_printf_float+0x2fe>
 800c9fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca02:	4631      	mov	r1, r6
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b8      	blx	r7
 800ca08:	3001      	adds	r0, #1
 800ca0a:	d1c0      	bne.n	800c98e <_printf_float+0x316>
 800ca0c:	e68f      	b.n	800c72e <_printf_float+0xb6>
 800ca0e:	9a06      	ldr	r2, [sp, #24]
 800ca10:	464b      	mov	r3, r9
 800ca12:	4442      	add	r2, r8
 800ca14:	4631      	mov	r1, r6
 800ca16:	4628      	mov	r0, r5
 800ca18:	47b8      	blx	r7
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	d1c3      	bne.n	800c9a6 <_printf_float+0x32e>
 800ca1e:	e686      	b.n	800c72e <_printf_float+0xb6>
 800ca20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca24:	f1ba 0f01 	cmp.w	sl, #1
 800ca28:	dc01      	bgt.n	800ca2e <_printf_float+0x3b6>
 800ca2a:	07db      	lsls	r3, r3, #31
 800ca2c:	d536      	bpl.n	800ca9c <_printf_float+0x424>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	4642      	mov	r2, r8
 800ca32:	4631      	mov	r1, r6
 800ca34:	4628      	mov	r0, r5
 800ca36:	47b8      	blx	r7
 800ca38:	3001      	adds	r0, #1
 800ca3a:	f43f ae78 	beq.w	800c72e <_printf_float+0xb6>
 800ca3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca42:	4631      	mov	r1, r6
 800ca44:	4628      	mov	r0, r5
 800ca46:	47b8      	blx	r7
 800ca48:	3001      	adds	r0, #1
 800ca4a:	f43f ae70 	beq.w	800c72e <_printf_float+0xb6>
 800ca4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca52:	2200      	movs	r2, #0
 800ca54:	2300      	movs	r3, #0
 800ca56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca5a:	f7f4 f80d 	bl	8000a78 <__aeabi_dcmpeq>
 800ca5e:	b9c0      	cbnz	r0, 800ca92 <_printf_float+0x41a>
 800ca60:	4653      	mov	r3, sl
 800ca62:	f108 0201 	add.w	r2, r8, #1
 800ca66:	4631      	mov	r1, r6
 800ca68:	4628      	mov	r0, r5
 800ca6a:	47b8      	blx	r7
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d10c      	bne.n	800ca8a <_printf_float+0x412>
 800ca70:	e65d      	b.n	800c72e <_printf_float+0xb6>
 800ca72:	2301      	movs	r3, #1
 800ca74:	465a      	mov	r2, fp
 800ca76:	4631      	mov	r1, r6
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b8      	blx	r7
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	f43f ae56 	beq.w	800c72e <_printf_float+0xb6>
 800ca82:	f108 0801 	add.w	r8, r8, #1
 800ca86:	45d0      	cmp	r8, sl
 800ca88:	dbf3      	blt.n	800ca72 <_printf_float+0x3fa>
 800ca8a:	464b      	mov	r3, r9
 800ca8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ca90:	e6df      	b.n	800c852 <_printf_float+0x1da>
 800ca92:	f04f 0800 	mov.w	r8, #0
 800ca96:	f104 0b1a 	add.w	fp, r4, #26
 800ca9a:	e7f4      	b.n	800ca86 <_printf_float+0x40e>
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	4642      	mov	r2, r8
 800caa0:	e7e1      	b.n	800ca66 <_printf_float+0x3ee>
 800caa2:	2301      	movs	r3, #1
 800caa4:	464a      	mov	r2, r9
 800caa6:	4631      	mov	r1, r6
 800caa8:	4628      	mov	r0, r5
 800caaa:	47b8      	blx	r7
 800caac:	3001      	adds	r0, #1
 800caae:	f43f ae3e 	beq.w	800c72e <_printf_float+0xb6>
 800cab2:	f108 0801 	add.w	r8, r8, #1
 800cab6:	68e3      	ldr	r3, [r4, #12]
 800cab8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800caba:	1a5b      	subs	r3, r3, r1
 800cabc:	4543      	cmp	r3, r8
 800cabe:	dcf0      	bgt.n	800caa2 <_printf_float+0x42a>
 800cac0:	e6fc      	b.n	800c8bc <_printf_float+0x244>
 800cac2:	f04f 0800 	mov.w	r8, #0
 800cac6:	f104 0919 	add.w	r9, r4, #25
 800caca:	e7f4      	b.n	800cab6 <_printf_float+0x43e>

0800cacc <_printf_common>:
 800cacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad0:	4616      	mov	r6, r2
 800cad2:	4698      	mov	r8, r3
 800cad4:	688a      	ldr	r2, [r1, #8]
 800cad6:	690b      	ldr	r3, [r1, #16]
 800cad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cadc:	4293      	cmp	r3, r2
 800cade:	bfb8      	it	lt
 800cae0:	4613      	movlt	r3, r2
 800cae2:	6033      	str	r3, [r6, #0]
 800cae4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cae8:	4607      	mov	r7, r0
 800caea:	460c      	mov	r4, r1
 800caec:	b10a      	cbz	r2, 800caf2 <_printf_common+0x26>
 800caee:	3301      	adds	r3, #1
 800caf0:	6033      	str	r3, [r6, #0]
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	0699      	lsls	r1, r3, #26
 800caf6:	bf42      	ittt	mi
 800caf8:	6833      	ldrmi	r3, [r6, #0]
 800cafa:	3302      	addmi	r3, #2
 800cafc:	6033      	strmi	r3, [r6, #0]
 800cafe:	6825      	ldr	r5, [r4, #0]
 800cb00:	f015 0506 	ands.w	r5, r5, #6
 800cb04:	d106      	bne.n	800cb14 <_printf_common+0x48>
 800cb06:	f104 0a19 	add.w	sl, r4, #25
 800cb0a:	68e3      	ldr	r3, [r4, #12]
 800cb0c:	6832      	ldr	r2, [r6, #0]
 800cb0e:	1a9b      	subs	r3, r3, r2
 800cb10:	42ab      	cmp	r3, r5
 800cb12:	dc26      	bgt.n	800cb62 <_printf_common+0x96>
 800cb14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb18:	6822      	ldr	r2, [r4, #0]
 800cb1a:	3b00      	subs	r3, #0
 800cb1c:	bf18      	it	ne
 800cb1e:	2301      	movne	r3, #1
 800cb20:	0692      	lsls	r2, r2, #26
 800cb22:	d42b      	bmi.n	800cb7c <_printf_common+0xb0>
 800cb24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb28:	4641      	mov	r1, r8
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	47c8      	blx	r9
 800cb2e:	3001      	adds	r0, #1
 800cb30:	d01e      	beq.n	800cb70 <_printf_common+0xa4>
 800cb32:	6823      	ldr	r3, [r4, #0]
 800cb34:	6922      	ldr	r2, [r4, #16]
 800cb36:	f003 0306 	and.w	r3, r3, #6
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	bf02      	ittt	eq
 800cb3e:	68e5      	ldreq	r5, [r4, #12]
 800cb40:	6833      	ldreq	r3, [r6, #0]
 800cb42:	1aed      	subeq	r5, r5, r3
 800cb44:	68a3      	ldr	r3, [r4, #8]
 800cb46:	bf0c      	ite	eq
 800cb48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb4c:	2500      	movne	r5, #0
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	bfc4      	itt	gt
 800cb52:	1a9b      	subgt	r3, r3, r2
 800cb54:	18ed      	addgt	r5, r5, r3
 800cb56:	2600      	movs	r6, #0
 800cb58:	341a      	adds	r4, #26
 800cb5a:	42b5      	cmp	r5, r6
 800cb5c:	d11a      	bne.n	800cb94 <_printf_common+0xc8>
 800cb5e:	2000      	movs	r0, #0
 800cb60:	e008      	b.n	800cb74 <_printf_common+0xa8>
 800cb62:	2301      	movs	r3, #1
 800cb64:	4652      	mov	r2, sl
 800cb66:	4641      	mov	r1, r8
 800cb68:	4638      	mov	r0, r7
 800cb6a:	47c8      	blx	r9
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d103      	bne.n	800cb78 <_printf_common+0xac>
 800cb70:	f04f 30ff 	mov.w	r0, #4294967295
 800cb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb78:	3501      	adds	r5, #1
 800cb7a:	e7c6      	b.n	800cb0a <_printf_common+0x3e>
 800cb7c:	18e1      	adds	r1, r4, r3
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	2030      	movs	r0, #48	@ 0x30
 800cb82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cb86:	4422      	add	r2, r4
 800cb88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cb8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cb90:	3302      	adds	r3, #2
 800cb92:	e7c7      	b.n	800cb24 <_printf_common+0x58>
 800cb94:	2301      	movs	r3, #1
 800cb96:	4622      	mov	r2, r4
 800cb98:	4641      	mov	r1, r8
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	47c8      	blx	r9
 800cb9e:	3001      	adds	r0, #1
 800cba0:	d0e6      	beq.n	800cb70 <_printf_common+0xa4>
 800cba2:	3601      	adds	r6, #1
 800cba4:	e7d9      	b.n	800cb5a <_printf_common+0x8e>
	...

0800cba8 <_printf_i>:
 800cba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbac:	7e0f      	ldrb	r7, [r1, #24]
 800cbae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbb0:	2f78      	cmp	r7, #120	@ 0x78
 800cbb2:	4691      	mov	r9, r2
 800cbb4:	4680      	mov	r8, r0
 800cbb6:	460c      	mov	r4, r1
 800cbb8:	469a      	mov	sl, r3
 800cbba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbbe:	d807      	bhi.n	800cbd0 <_printf_i+0x28>
 800cbc0:	2f62      	cmp	r7, #98	@ 0x62
 800cbc2:	d80a      	bhi.n	800cbda <_printf_i+0x32>
 800cbc4:	2f00      	cmp	r7, #0
 800cbc6:	f000 80d2 	beq.w	800cd6e <_printf_i+0x1c6>
 800cbca:	2f58      	cmp	r7, #88	@ 0x58
 800cbcc:	f000 80b9 	beq.w	800cd42 <_printf_i+0x19a>
 800cbd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cbd8:	e03a      	b.n	800cc50 <_printf_i+0xa8>
 800cbda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cbde:	2b15      	cmp	r3, #21
 800cbe0:	d8f6      	bhi.n	800cbd0 <_printf_i+0x28>
 800cbe2:	a101      	add	r1, pc, #4	@ (adr r1, 800cbe8 <_printf_i+0x40>)
 800cbe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbe8:	0800cc41 	.word	0x0800cc41
 800cbec:	0800cc55 	.word	0x0800cc55
 800cbf0:	0800cbd1 	.word	0x0800cbd1
 800cbf4:	0800cbd1 	.word	0x0800cbd1
 800cbf8:	0800cbd1 	.word	0x0800cbd1
 800cbfc:	0800cbd1 	.word	0x0800cbd1
 800cc00:	0800cc55 	.word	0x0800cc55
 800cc04:	0800cbd1 	.word	0x0800cbd1
 800cc08:	0800cbd1 	.word	0x0800cbd1
 800cc0c:	0800cbd1 	.word	0x0800cbd1
 800cc10:	0800cbd1 	.word	0x0800cbd1
 800cc14:	0800cd55 	.word	0x0800cd55
 800cc18:	0800cc7f 	.word	0x0800cc7f
 800cc1c:	0800cd0f 	.word	0x0800cd0f
 800cc20:	0800cbd1 	.word	0x0800cbd1
 800cc24:	0800cbd1 	.word	0x0800cbd1
 800cc28:	0800cd77 	.word	0x0800cd77
 800cc2c:	0800cbd1 	.word	0x0800cbd1
 800cc30:	0800cc7f 	.word	0x0800cc7f
 800cc34:	0800cbd1 	.word	0x0800cbd1
 800cc38:	0800cbd1 	.word	0x0800cbd1
 800cc3c:	0800cd17 	.word	0x0800cd17
 800cc40:	6833      	ldr	r3, [r6, #0]
 800cc42:	1d1a      	adds	r2, r3, #4
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6032      	str	r2, [r6, #0]
 800cc48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc50:	2301      	movs	r3, #1
 800cc52:	e09d      	b.n	800cd90 <_printf_i+0x1e8>
 800cc54:	6833      	ldr	r3, [r6, #0]
 800cc56:	6820      	ldr	r0, [r4, #0]
 800cc58:	1d19      	adds	r1, r3, #4
 800cc5a:	6031      	str	r1, [r6, #0]
 800cc5c:	0606      	lsls	r6, r0, #24
 800cc5e:	d501      	bpl.n	800cc64 <_printf_i+0xbc>
 800cc60:	681d      	ldr	r5, [r3, #0]
 800cc62:	e003      	b.n	800cc6c <_printf_i+0xc4>
 800cc64:	0645      	lsls	r5, r0, #25
 800cc66:	d5fb      	bpl.n	800cc60 <_printf_i+0xb8>
 800cc68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc6c:	2d00      	cmp	r5, #0
 800cc6e:	da03      	bge.n	800cc78 <_printf_i+0xd0>
 800cc70:	232d      	movs	r3, #45	@ 0x2d
 800cc72:	426d      	negs	r5, r5
 800cc74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc78:	4859      	ldr	r0, [pc, #356]	@ (800cde0 <_printf_i+0x238>)
 800cc7a:	230a      	movs	r3, #10
 800cc7c:	e011      	b.n	800cca2 <_printf_i+0xfa>
 800cc7e:	6821      	ldr	r1, [r4, #0]
 800cc80:	6833      	ldr	r3, [r6, #0]
 800cc82:	0608      	lsls	r0, r1, #24
 800cc84:	f853 5b04 	ldr.w	r5, [r3], #4
 800cc88:	d402      	bmi.n	800cc90 <_printf_i+0xe8>
 800cc8a:	0649      	lsls	r1, r1, #25
 800cc8c:	bf48      	it	mi
 800cc8e:	b2ad      	uxthmi	r5, r5
 800cc90:	2f6f      	cmp	r7, #111	@ 0x6f
 800cc92:	4853      	ldr	r0, [pc, #332]	@ (800cde0 <_printf_i+0x238>)
 800cc94:	6033      	str	r3, [r6, #0]
 800cc96:	bf14      	ite	ne
 800cc98:	230a      	movne	r3, #10
 800cc9a:	2308      	moveq	r3, #8
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cca2:	6866      	ldr	r6, [r4, #4]
 800cca4:	60a6      	str	r6, [r4, #8]
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	bfa2      	ittt	ge
 800ccaa:	6821      	ldrge	r1, [r4, #0]
 800ccac:	f021 0104 	bicge.w	r1, r1, #4
 800ccb0:	6021      	strge	r1, [r4, #0]
 800ccb2:	b90d      	cbnz	r5, 800ccb8 <_printf_i+0x110>
 800ccb4:	2e00      	cmp	r6, #0
 800ccb6:	d04b      	beq.n	800cd50 <_printf_i+0x1a8>
 800ccb8:	4616      	mov	r6, r2
 800ccba:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccbe:	fb03 5711 	mls	r7, r3, r1, r5
 800ccc2:	5dc7      	ldrb	r7, [r0, r7]
 800ccc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccc8:	462f      	mov	r7, r5
 800ccca:	42bb      	cmp	r3, r7
 800cccc:	460d      	mov	r5, r1
 800ccce:	d9f4      	bls.n	800ccba <_printf_i+0x112>
 800ccd0:	2b08      	cmp	r3, #8
 800ccd2:	d10b      	bne.n	800ccec <_printf_i+0x144>
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	07df      	lsls	r7, r3, #31
 800ccd8:	d508      	bpl.n	800ccec <_printf_i+0x144>
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	6861      	ldr	r1, [r4, #4]
 800ccde:	4299      	cmp	r1, r3
 800cce0:	bfde      	ittt	le
 800cce2:	2330      	movle	r3, #48	@ 0x30
 800cce4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cce8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ccec:	1b92      	subs	r2, r2, r6
 800ccee:	6122      	str	r2, [r4, #16]
 800ccf0:	f8cd a000 	str.w	sl, [sp]
 800ccf4:	464b      	mov	r3, r9
 800ccf6:	aa03      	add	r2, sp, #12
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	f7ff fee6 	bl	800cacc <_printf_common>
 800cd00:	3001      	adds	r0, #1
 800cd02:	d14a      	bne.n	800cd9a <_printf_i+0x1f2>
 800cd04:	f04f 30ff 	mov.w	r0, #4294967295
 800cd08:	b004      	add	sp, #16
 800cd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	f043 0320 	orr.w	r3, r3, #32
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	4833      	ldr	r0, [pc, #204]	@ (800cde4 <_printf_i+0x23c>)
 800cd18:	2778      	movs	r7, #120	@ 0x78
 800cd1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	6831      	ldr	r1, [r6, #0]
 800cd22:	061f      	lsls	r7, r3, #24
 800cd24:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd28:	d402      	bmi.n	800cd30 <_printf_i+0x188>
 800cd2a:	065f      	lsls	r7, r3, #25
 800cd2c:	bf48      	it	mi
 800cd2e:	b2ad      	uxthmi	r5, r5
 800cd30:	6031      	str	r1, [r6, #0]
 800cd32:	07d9      	lsls	r1, r3, #31
 800cd34:	bf44      	itt	mi
 800cd36:	f043 0320 	orrmi.w	r3, r3, #32
 800cd3a:	6023      	strmi	r3, [r4, #0]
 800cd3c:	b11d      	cbz	r5, 800cd46 <_printf_i+0x19e>
 800cd3e:	2310      	movs	r3, #16
 800cd40:	e7ac      	b.n	800cc9c <_printf_i+0xf4>
 800cd42:	4827      	ldr	r0, [pc, #156]	@ (800cde0 <_printf_i+0x238>)
 800cd44:	e7e9      	b.n	800cd1a <_printf_i+0x172>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	f023 0320 	bic.w	r3, r3, #32
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	e7f6      	b.n	800cd3e <_printf_i+0x196>
 800cd50:	4616      	mov	r6, r2
 800cd52:	e7bd      	b.n	800ccd0 <_printf_i+0x128>
 800cd54:	6833      	ldr	r3, [r6, #0]
 800cd56:	6825      	ldr	r5, [r4, #0]
 800cd58:	6961      	ldr	r1, [r4, #20]
 800cd5a:	1d18      	adds	r0, r3, #4
 800cd5c:	6030      	str	r0, [r6, #0]
 800cd5e:	062e      	lsls	r6, r5, #24
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	d501      	bpl.n	800cd68 <_printf_i+0x1c0>
 800cd64:	6019      	str	r1, [r3, #0]
 800cd66:	e002      	b.n	800cd6e <_printf_i+0x1c6>
 800cd68:	0668      	lsls	r0, r5, #25
 800cd6a:	d5fb      	bpl.n	800cd64 <_printf_i+0x1bc>
 800cd6c:	8019      	strh	r1, [r3, #0]
 800cd6e:	2300      	movs	r3, #0
 800cd70:	6123      	str	r3, [r4, #16]
 800cd72:	4616      	mov	r6, r2
 800cd74:	e7bc      	b.n	800ccf0 <_printf_i+0x148>
 800cd76:	6833      	ldr	r3, [r6, #0]
 800cd78:	1d1a      	adds	r2, r3, #4
 800cd7a:	6032      	str	r2, [r6, #0]
 800cd7c:	681e      	ldr	r6, [r3, #0]
 800cd7e:	6862      	ldr	r2, [r4, #4]
 800cd80:	2100      	movs	r1, #0
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7f3 f9fc 	bl	8000180 <memchr>
 800cd88:	b108      	cbz	r0, 800cd8e <_printf_i+0x1e6>
 800cd8a:	1b80      	subs	r0, r0, r6
 800cd8c:	6060      	str	r0, [r4, #4]
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	6123      	str	r3, [r4, #16]
 800cd92:	2300      	movs	r3, #0
 800cd94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd98:	e7aa      	b.n	800ccf0 <_printf_i+0x148>
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	4649      	mov	r1, r9
 800cda0:	4640      	mov	r0, r8
 800cda2:	47d0      	blx	sl
 800cda4:	3001      	adds	r0, #1
 800cda6:	d0ad      	beq.n	800cd04 <_printf_i+0x15c>
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	079b      	lsls	r3, r3, #30
 800cdac:	d413      	bmi.n	800cdd6 <_printf_i+0x22e>
 800cdae:	68e0      	ldr	r0, [r4, #12]
 800cdb0:	9b03      	ldr	r3, [sp, #12]
 800cdb2:	4298      	cmp	r0, r3
 800cdb4:	bfb8      	it	lt
 800cdb6:	4618      	movlt	r0, r3
 800cdb8:	e7a6      	b.n	800cd08 <_printf_i+0x160>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	4649      	mov	r1, r9
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	47d0      	blx	sl
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	d09d      	beq.n	800cd04 <_printf_i+0x15c>
 800cdc8:	3501      	adds	r5, #1
 800cdca:	68e3      	ldr	r3, [r4, #12]
 800cdcc:	9903      	ldr	r1, [sp, #12]
 800cdce:	1a5b      	subs	r3, r3, r1
 800cdd0:	42ab      	cmp	r3, r5
 800cdd2:	dcf2      	bgt.n	800cdba <_printf_i+0x212>
 800cdd4:	e7eb      	b.n	800cdae <_printf_i+0x206>
 800cdd6:	2500      	movs	r5, #0
 800cdd8:	f104 0619 	add.w	r6, r4, #25
 800cddc:	e7f5      	b.n	800cdca <_printf_i+0x222>
 800cdde:	bf00      	nop
 800cde0:	0800f947 	.word	0x0800f947
 800cde4:	0800f958 	.word	0x0800f958

0800cde8 <std>:
 800cde8:	2300      	movs	r3, #0
 800cdea:	b510      	push	{r4, lr}
 800cdec:	4604      	mov	r4, r0
 800cdee:	e9c0 3300 	strd	r3, r3, [r0]
 800cdf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdf6:	6083      	str	r3, [r0, #8]
 800cdf8:	8181      	strh	r1, [r0, #12]
 800cdfa:	6643      	str	r3, [r0, #100]	@ 0x64
 800cdfc:	81c2      	strh	r2, [r0, #14]
 800cdfe:	6183      	str	r3, [r0, #24]
 800ce00:	4619      	mov	r1, r3
 800ce02:	2208      	movs	r2, #8
 800ce04:	305c      	adds	r0, #92	@ 0x5c
 800ce06:	f000 fa31 	bl	800d26c <memset>
 800ce0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce40 <std+0x58>)
 800ce0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce44 <std+0x5c>)
 800ce10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce12:	4b0d      	ldr	r3, [pc, #52]	@ (800ce48 <std+0x60>)
 800ce14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce16:	4b0d      	ldr	r3, [pc, #52]	@ (800ce4c <std+0x64>)
 800ce18:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce50 <std+0x68>)
 800ce1c:	6224      	str	r4, [r4, #32]
 800ce1e:	429c      	cmp	r4, r3
 800ce20:	d006      	beq.n	800ce30 <std+0x48>
 800ce22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce26:	4294      	cmp	r4, r2
 800ce28:	d002      	beq.n	800ce30 <std+0x48>
 800ce2a:	33d0      	adds	r3, #208	@ 0xd0
 800ce2c:	429c      	cmp	r4, r3
 800ce2e:	d105      	bne.n	800ce3c <std+0x54>
 800ce30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce38:	f000 baea 	b.w	800d410 <__retarget_lock_init_recursive>
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	bf00      	nop
 800ce40:	0800d04d 	.word	0x0800d04d
 800ce44:	0800d06f 	.word	0x0800d06f
 800ce48:	0800d0a7 	.word	0x0800d0a7
 800ce4c:	0800d0cb 	.word	0x0800d0cb
 800ce50:	200049c8 	.word	0x200049c8

0800ce54 <stdio_exit_handler>:
 800ce54:	4a02      	ldr	r2, [pc, #8]	@ (800ce60 <stdio_exit_handler+0xc>)
 800ce56:	4903      	ldr	r1, [pc, #12]	@ (800ce64 <stdio_exit_handler+0x10>)
 800ce58:	4803      	ldr	r0, [pc, #12]	@ (800ce68 <stdio_exit_handler+0x14>)
 800ce5a:	f000 b869 	b.w	800cf30 <_fwalk_sglue>
 800ce5e:	bf00      	nop
 800ce60:	20000018 	.word	0x20000018
 800ce64:	0800f04d 	.word	0x0800f04d
 800ce68:	20000194 	.word	0x20000194

0800ce6c <cleanup_stdio>:
 800ce6c:	6841      	ldr	r1, [r0, #4]
 800ce6e:	4b0c      	ldr	r3, [pc, #48]	@ (800cea0 <cleanup_stdio+0x34>)
 800ce70:	4299      	cmp	r1, r3
 800ce72:	b510      	push	{r4, lr}
 800ce74:	4604      	mov	r4, r0
 800ce76:	d001      	beq.n	800ce7c <cleanup_stdio+0x10>
 800ce78:	f002 f8e8 	bl	800f04c <_fflush_r>
 800ce7c:	68a1      	ldr	r1, [r4, #8]
 800ce7e:	4b09      	ldr	r3, [pc, #36]	@ (800cea4 <cleanup_stdio+0x38>)
 800ce80:	4299      	cmp	r1, r3
 800ce82:	d002      	beq.n	800ce8a <cleanup_stdio+0x1e>
 800ce84:	4620      	mov	r0, r4
 800ce86:	f002 f8e1 	bl	800f04c <_fflush_r>
 800ce8a:	68e1      	ldr	r1, [r4, #12]
 800ce8c:	4b06      	ldr	r3, [pc, #24]	@ (800cea8 <cleanup_stdio+0x3c>)
 800ce8e:	4299      	cmp	r1, r3
 800ce90:	d004      	beq.n	800ce9c <cleanup_stdio+0x30>
 800ce92:	4620      	mov	r0, r4
 800ce94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce98:	f002 b8d8 	b.w	800f04c <_fflush_r>
 800ce9c:	bd10      	pop	{r4, pc}
 800ce9e:	bf00      	nop
 800cea0:	200049c8 	.word	0x200049c8
 800cea4:	20004a30 	.word	0x20004a30
 800cea8:	20004a98 	.word	0x20004a98

0800ceac <global_stdio_init.part.0>:
 800ceac:	b510      	push	{r4, lr}
 800ceae:	4b0b      	ldr	r3, [pc, #44]	@ (800cedc <global_stdio_init.part.0+0x30>)
 800ceb0:	4c0b      	ldr	r4, [pc, #44]	@ (800cee0 <global_stdio_init.part.0+0x34>)
 800ceb2:	4a0c      	ldr	r2, [pc, #48]	@ (800cee4 <global_stdio_init.part.0+0x38>)
 800ceb4:	601a      	str	r2, [r3, #0]
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	2200      	movs	r2, #0
 800ceba:	2104      	movs	r1, #4
 800cebc:	f7ff ff94 	bl	800cde8 <std>
 800cec0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cec4:	2201      	movs	r2, #1
 800cec6:	2109      	movs	r1, #9
 800cec8:	f7ff ff8e 	bl	800cde8 <std>
 800cecc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ced0:	2202      	movs	r2, #2
 800ced2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ced6:	2112      	movs	r1, #18
 800ced8:	f7ff bf86 	b.w	800cde8 <std>
 800cedc:	20004b00 	.word	0x20004b00
 800cee0:	200049c8 	.word	0x200049c8
 800cee4:	0800ce55 	.word	0x0800ce55

0800cee8 <__sfp_lock_acquire>:
 800cee8:	4801      	ldr	r0, [pc, #4]	@ (800cef0 <__sfp_lock_acquire+0x8>)
 800ceea:	f000 ba92 	b.w	800d412 <__retarget_lock_acquire_recursive>
 800ceee:	bf00      	nop
 800cef0:	20004b09 	.word	0x20004b09

0800cef4 <__sfp_lock_release>:
 800cef4:	4801      	ldr	r0, [pc, #4]	@ (800cefc <__sfp_lock_release+0x8>)
 800cef6:	f000 ba8d 	b.w	800d414 <__retarget_lock_release_recursive>
 800cefa:	bf00      	nop
 800cefc:	20004b09 	.word	0x20004b09

0800cf00 <__sinit>:
 800cf00:	b510      	push	{r4, lr}
 800cf02:	4604      	mov	r4, r0
 800cf04:	f7ff fff0 	bl	800cee8 <__sfp_lock_acquire>
 800cf08:	6a23      	ldr	r3, [r4, #32]
 800cf0a:	b11b      	cbz	r3, 800cf14 <__sinit+0x14>
 800cf0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf10:	f7ff bff0 	b.w	800cef4 <__sfp_lock_release>
 800cf14:	4b04      	ldr	r3, [pc, #16]	@ (800cf28 <__sinit+0x28>)
 800cf16:	6223      	str	r3, [r4, #32]
 800cf18:	4b04      	ldr	r3, [pc, #16]	@ (800cf2c <__sinit+0x2c>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1f5      	bne.n	800cf0c <__sinit+0xc>
 800cf20:	f7ff ffc4 	bl	800ceac <global_stdio_init.part.0>
 800cf24:	e7f2      	b.n	800cf0c <__sinit+0xc>
 800cf26:	bf00      	nop
 800cf28:	0800ce6d 	.word	0x0800ce6d
 800cf2c:	20004b00 	.word	0x20004b00

0800cf30 <_fwalk_sglue>:
 800cf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf34:	4607      	mov	r7, r0
 800cf36:	4688      	mov	r8, r1
 800cf38:	4614      	mov	r4, r2
 800cf3a:	2600      	movs	r6, #0
 800cf3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf40:	f1b9 0901 	subs.w	r9, r9, #1
 800cf44:	d505      	bpl.n	800cf52 <_fwalk_sglue+0x22>
 800cf46:	6824      	ldr	r4, [r4, #0]
 800cf48:	2c00      	cmp	r4, #0
 800cf4a:	d1f7      	bne.n	800cf3c <_fwalk_sglue+0xc>
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d907      	bls.n	800cf68 <_fwalk_sglue+0x38>
 800cf58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	d003      	beq.n	800cf68 <_fwalk_sglue+0x38>
 800cf60:	4629      	mov	r1, r5
 800cf62:	4638      	mov	r0, r7
 800cf64:	47c0      	blx	r8
 800cf66:	4306      	orrs	r6, r0
 800cf68:	3568      	adds	r5, #104	@ 0x68
 800cf6a:	e7e9      	b.n	800cf40 <_fwalk_sglue+0x10>

0800cf6c <iprintf>:
 800cf6c:	b40f      	push	{r0, r1, r2, r3}
 800cf6e:	b507      	push	{r0, r1, r2, lr}
 800cf70:	4906      	ldr	r1, [pc, #24]	@ (800cf8c <iprintf+0x20>)
 800cf72:	ab04      	add	r3, sp, #16
 800cf74:	6808      	ldr	r0, [r1, #0]
 800cf76:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf7a:	6881      	ldr	r1, [r0, #8]
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	f001 fec9 	bl	800ed14 <_vfiprintf_r>
 800cf82:	b003      	add	sp, #12
 800cf84:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf88:	b004      	add	sp, #16
 800cf8a:	4770      	bx	lr
 800cf8c:	20000190 	.word	0x20000190

0800cf90 <_puts_r>:
 800cf90:	6a03      	ldr	r3, [r0, #32]
 800cf92:	b570      	push	{r4, r5, r6, lr}
 800cf94:	6884      	ldr	r4, [r0, #8]
 800cf96:	4605      	mov	r5, r0
 800cf98:	460e      	mov	r6, r1
 800cf9a:	b90b      	cbnz	r3, 800cfa0 <_puts_r+0x10>
 800cf9c:	f7ff ffb0 	bl	800cf00 <__sinit>
 800cfa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfa2:	07db      	lsls	r3, r3, #31
 800cfa4:	d405      	bmi.n	800cfb2 <_puts_r+0x22>
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	0598      	lsls	r0, r3, #22
 800cfaa:	d402      	bmi.n	800cfb2 <_puts_r+0x22>
 800cfac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfae:	f000 fa30 	bl	800d412 <__retarget_lock_acquire_recursive>
 800cfb2:	89a3      	ldrh	r3, [r4, #12]
 800cfb4:	0719      	lsls	r1, r3, #28
 800cfb6:	d502      	bpl.n	800cfbe <_puts_r+0x2e>
 800cfb8:	6923      	ldr	r3, [r4, #16]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d135      	bne.n	800d02a <_puts_r+0x9a>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	f000 f8fd 	bl	800d1c0 <__swsetup_r>
 800cfc6:	b380      	cbz	r0, 800d02a <_puts_r+0x9a>
 800cfc8:	f04f 35ff 	mov.w	r5, #4294967295
 800cfcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfce:	07da      	lsls	r2, r3, #31
 800cfd0:	d405      	bmi.n	800cfde <_puts_r+0x4e>
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	059b      	lsls	r3, r3, #22
 800cfd6:	d402      	bmi.n	800cfde <_puts_r+0x4e>
 800cfd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfda:	f000 fa1b 	bl	800d414 <__retarget_lock_release_recursive>
 800cfde:	4628      	mov	r0, r5
 800cfe0:	bd70      	pop	{r4, r5, r6, pc}
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	da04      	bge.n	800cff0 <_puts_r+0x60>
 800cfe6:	69a2      	ldr	r2, [r4, #24]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	dc17      	bgt.n	800d01c <_puts_r+0x8c>
 800cfec:	290a      	cmp	r1, #10
 800cfee:	d015      	beq.n	800d01c <_puts_r+0x8c>
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	6022      	str	r2, [r4, #0]
 800cff6:	7019      	strb	r1, [r3, #0]
 800cff8:	68a3      	ldr	r3, [r4, #8]
 800cffa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cffe:	3b01      	subs	r3, #1
 800d000:	60a3      	str	r3, [r4, #8]
 800d002:	2900      	cmp	r1, #0
 800d004:	d1ed      	bne.n	800cfe2 <_puts_r+0x52>
 800d006:	2b00      	cmp	r3, #0
 800d008:	da11      	bge.n	800d02e <_puts_r+0x9e>
 800d00a:	4622      	mov	r2, r4
 800d00c:	210a      	movs	r1, #10
 800d00e:	4628      	mov	r0, r5
 800d010:	f000 f898 	bl	800d144 <__swbuf_r>
 800d014:	3001      	adds	r0, #1
 800d016:	d0d7      	beq.n	800cfc8 <_puts_r+0x38>
 800d018:	250a      	movs	r5, #10
 800d01a:	e7d7      	b.n	800cfcc <_puts_r+0x3c>
 800d01c:	4622      	mov	r2, r4
 800d01e:	4628      	mov	r0, r5
 800d020:	f000 f890 	bl	800d144 <__swbuf_r>
 800d024:	3001      	adds	r0, #1
 800d026:	d1e7      	bne.n	800cff8 <_puts_r+0x68>
 800d028:	e7ce      	b.n	800cfc8 <_puts_r+0x38>
 800d02a:	3e01      	subs	r6, #1
 800d02c:	e7e4      	b.n	800cff8 <_puts_r+0x68>
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	6022      	str	r2, [r4, #0]
 800d034:	220a      	movs	r2, #10
 800d036:	701a      	strb	r2, [r3, #0]
 800d038:	e7ee      	b.n	800d018 <_puts_r+0x88>
	...

0800d03c <puts>:
 800d03c:	4b02      	ldr	r3, [pc, #8]	@ (800d048 <puts+0xc>)
 800d03e:	4601      	mov	r1, r0
 800d040:	6818      	ldr	r0, [r3, #0]
 800d042:	f7ff bfa5 	b.w	800cf90 <_puts_r>
 800d046:	bf00      	nop
 800d048:	20000190 	.word	0x20000190

0800d04c <__sread>:
 800d04c:	b510      	push	{r4, lr}
 800d04e:	460c      	mov	r4, r1
 800d050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d054:	f000 f98e 	bl	800d374 <_read_r>
 800d058:	2800      	cmp	r0, #0
 800d05a:	bfab      	itete	ge
 800d05c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d05e:	89a3      	ldrhlt	r3, [r4, #12]
 800d060:	181b      	addge	r3, r3, r0
 800d062:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d066:	bfac      	ite	ge
 800d068:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d06a:	81a3      	strhlt	r3, [r4, #12]
 800d06c:	bd10      	pop	{r4, pc}

0800d06e <__swrite>:
 800d06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d072:	461f      	mov	r7, r3
 800d074:	898b      	ldrh	r3, [r1, #12]
 800d076:	05db      	lsls	r3, r3, #23
 800d078:	4605      	mov	r5, r0
 800d07a:	460c      	mov	r4, r1
 800d07c:	4616      	mov	r6, r2
 800d07e:	d505      	bpl.n	800d08c <__swrite+0x1e>
 800d080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d084:	2302      	movs	r3, #2
 800d086:	2200      	movs	r2, #0
 800d088:	f000 f962 	bl	800d350 <_lseek_r>
 800d08c:	89a3      	ldrh	r3, [r4, #12]
 800d08e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d096:	81a3      	strh	r3, [r4, #12]
 800d098:	4632      	mov	r2, r6
 800d09a:	463b      	mov	r3, r7
 800d09c:	4628      	mov	r0, r5
 800d09e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a2:	f000 b979 	b.w	800d398 <_write_r>

0800d0a6 <__sseek>:
 800d0a6:	b510      	push	{r4, lr}
 800d0a8:	460c      	mov	r4, r1
 800d0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ae:	f000 f94f 	bl	800d350 <_lseek_r>
 800d0b2:	1c43      	adds	r3, r0, #1
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	bf15      	itete	ne
 800d0b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0c2:	81a3      	strheq	r3, [r4, #12]
 800d0c4:	bf18      	it	ne
 800d0c6:	81a3      	strhne	r3, [r4, #12]
 800d0c8:	bd10      	pop	{r4, pc}

0800d0ca <__sclose>:
 800d0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ce:	f000 b8d9 	b.w	800d284 <_close_r>

0800d0d2 <_vsniprintf_r>:
 800d0d2:	b530      	push	{r4, r5, lr}
 800d0d4:	4614      	mov	r4, r2
 800d0d6:	2c00      	cmp	r4, #0
 800d0d8:	b09b      	sub	sp, #108	@ 0x6c
 800d0da:	4605      	mov	r5, r0
 800d0dc:	461a      	mov	r2, r3
 800d0de:	da05      	bge.n	800d0ec <_vsniprintf_r+0x1a>
 800d0e0:	238b      	movs	r3, #139	@ 0x8b
 800d0e2:	6003      	str	r3, [r0, #0]
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	b01b      	add	sp, #108	@ 0x6c
 800d0ea:	bd30      	pop	{r4, r5, pc}
 800d0ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d0f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d0f4:	bf14      	ite	ne
 800d0f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d0fa:	4623      	moveq	r3, r4
 800d0fc:	9302      	str	r3, [sp, #8]
 800d0fe:	9305      	str	r3, [sp, #20]
 800d100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d104:	9100      	str	r1, [sp, #0]
 800d106:	9104      	str	r1, [sp, #16]
 800d108:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d10c:	4669      	mov	r1, sp
 800d10e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d110:	f001 fcda 	bl	800eac8 <_svfiprintf_r>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	bfbc      	itt	lt
 800d118:	238b      	movlt	r3, #139	@ 0x8b
 800d11a:	602b      	strlt	r3, [r5, #0]
 800d11c:	2c00      	cmp	r4, #0
 800d11e:	d0e3      	beq.n	800d0e8 <_vsniprintf_r+0x16>
 800d120:	9b00      	ldr	r3, [sp, #0]
 800d122:	2200      	movs	r2, #0
 800d124:	701a      	strb	r2, [r3, #0]
 800d126:	e7df      	b.n	800d0e8 <_vsniprintf_r+0x16>

0800d128 <vsniprintf>:
 800d128:	b507      	push	{r0, r1, r2, lr}
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	4613      	mov	r3, r2
 800d12e:	460a      	mov	r2, r1
 800d130:	4601      	mov	r1, r0
 800d132:	4803      	ldr	r0, [pc, #12]	@ (800d140 <vsniprintf+0x18>)
 800d134:	6800      	ldr	r0, [r0, #0]
 800d136:	f7ff ffcc 	bl	800d0d2 <_vsniprintf_r>
 800d13a:	b003      	add	sp, #12
 800d13c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d140:	20000190 	.word	0x20000190

0800d144 <__swbuf_r>:
 800d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d146:	460e      	mov	r6, r1
 800d148:	4614      	mov	r4, r2
 800d14a:	4605      	mov	r5, r0
 800d14c:	b118      	cbz	r0, 800d156 <__swbuf_r+0x12>
 800d14e:	6a03      	ldr	r3, [r0, #32]
 800d150:	b90b      	cbnz	r3, 800d156 <__swbuf_r+0x12>
 800d152:	f7ff fed5 	bl	800cf00 <__sinit>
 800d156:	69a3      	ldr	r3, [r4, #24]
 800d158:	60a3      	str	r3, [r4, #8]
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	071a      	lsls	r2, r3, #28
 800d15e:	d501      	bpl.n	800d164 <__swbuf_r+0x20>
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	b943      	cbnz	r3, 800d176 <__swbuf_r+0x32>
 800d164:	4621      	mov	r1, r4
 800d166:	4628      	mov	r0, r5
 800d168:	f000 f82a 	bl	800d1c0 <__swsetup_r>
 800d16c:	b118      	cbz	r0, 800d176 <__swbuf_r+0x32>
 800d16e:	f04f 37ff 	mov.w	r7, #4294967295
 800d172:	4638      	mov	r0, r7
 800d174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	6922      	ldr	r2, [r4, #16]
 800d17a:	1a98      	subs	r0, r3, r2
 800d17c:	6963      	ldr	r3, [r4, #20]
 800d17e:	b2f6      	uxtb	r6, r6
 800d180:	4283      	cmp	r3, r0
 800d182:	4637      	mov	r7, r6
 800d184:	dc05      	bgt.n	800d192 <__swbuf_r+0x4e>
 800d186:	4621      	mov	r1, r4
 800d188:	4628      	mov	r0, r5
 800d18a:	f001 ff5f 	bl	800f04c <_fflush_r>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d1ed      	bne.n	800d16e <__swbuf_r+0x2a>
 800d192:	68a3      	ldr	r3, [r4, #8]
 800d194:	3b01      	subs	r3, #1
 800d196:	60a3      	str	r3, [r4, #8]
 800d198:	6823      	ldr	r3, [r4, #0]
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	6022      	str	r2, [r4, #0]
 800d19e:	701e      	strb	r6, [r3, #0]
 800d1a0:	6962      	ldr	r2, [r4, #20]
 800d1a2:	1c43      	adds	r3, r0, #1
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d004      	beq.n	800d1b2 <__swbuf_r+0x6e>
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	07db      	lsls	r3, r3, #31
 800d1ac:	d5e1      	bpl.n	800d172 <__swbuf_r+0x2e>
 800d1ae:	2e0a      	cmp	r6, #10
 800d1b0:	d1df      	bne.n	800d172 <__swbuf_r+0x2e>
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f001 ff49 	bl	800f04c <_fflush_r>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d0d9      	beq.n	800d172 <__swbuf_r+0x2e>
 800d1be:	e7d6      	b.n	800d16e <__swbuf_r+0x2a>

0800d1c0 <__swsetup_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4b29      	ldr	r3, [pc, #164]	@ (800d268 <__swsetup_r+0xa8>)
 800d1c4:	4605      	mov	r5, r0
 800d1c6:	6818      	ldr	r0, [r3, #0]
 800d1c8:	460c      	mov	r4, r1
 800d1ca:	b118      	cbz	r0, 800d1d4 <__swsetup_r+0x14>
 800d1cc:	6a03      	ldr	r3, [r0, #32]
 800d1ce:	b90b      	cbnz	r3, 800d1d4 <__swsetup_r+0x14>
 800d1d0:	f7ff fe96 	bl	800cf00 <__sinit>
 800d1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1d8:	0719      	lsls	r1, r3, #28
 800d1da:	d422      	bmi.n	800d222 <__swsetup_r+0x62>
 800d1dc:	06da      	lsls	r2, r3, #27
 800d1de:	d407      	bmi.n	800d1f0 <__swsetup_r+0x30>
 800d1e0:	2209      	movs	r2, #9
 800d1e2:	602a      	str	r2, [r5, #0]
 800d1e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ee:	e033      	b.n	800d258 <__swsetup_r+0x98>
 800d1f0:	0758      	lsls	r0, r3, #29
 800d1f2:	d512      	bpl.n	800d21a <__swsetup_r+0x5a>
 800d1f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1f6:	b141      	cbz	r1, 800d20a <__swsetup_r+0x4a>
 800d1f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1fc:	4299      	cmp	r1, r3
 800d1fe:	d002      	beq.n	800d206 <__swsetup_r+0x46>
 800d200:	4628      	mov	r0, r5
 800d202:	f000 ff65 	bl	800e0d0 <_free_r>
 800d206:	2300      	movs	r3, #0
 800d208:	6363      	str	r3, [r4, #52]	@ 0x34
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d210:	81a3      	strh	r3, [r4, #12]
 800d212:	2300      	movs	r3, #0
 800d214:	6063      	str	r3, [r4, #4]
 800d216:	6923      	ldr	r3, [r4, #16]
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	f043 0308 	orr.w	r3, r3, #8
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	6923      	ldr	r3, [r4, #16]
 800d224:	b94b      	cbnz	r3, 800d23a <__swsetup_r+0x7a>
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d22c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d230:	d003      	beq.n	800d23a <__swsetup_r+0x7a>
 800d232:	4621      	mov	r1, r4
 800d234:	4628      	mov	r0, r5
 800d236:	f001 ff57 	bl	800f0e8 <__smakebuf_r>
 800d23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d23e:	f013 0201 	ands.w	r2, r3, #1
 800d242:	d00a      	beq.n	800d25a <__swsetup_r+0x9a>
 800d244:	2200      	movs	r2, #0
 800d246:	60a2      	str	r2, [r4, #8]
 800d248:	6962      	ldr	r2, [r4, #20]
 800d24a:	4252      	negs	r2, r2
 800d24c:	61a2      	str	r2, [r4, #24]
 800d24e:	6922      	ldr	r2, [r4, #16]
 800d250:	b942      	cbnz	r2, 800d264 <__swsetup_r+0xa4>
 800d252:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d256:	d1c5      	bne.n	800d1e4 <__swsetup_r+0x24>
 800d258:	bd38      	pop	{r3, r4, r5, pc}
 800d25a:	0799      	lsls	r1, r3, #30
 800d25c:	bf58      	it	pl
 800d25e:	6962      	ldrpl	r2, [r4, #20]
 800d260:	60a2      	str	r2, [r4, #8]
 800d262:	e7f4      	b.n	800d24e <__swsetup_r+0x8e>
 800d264:	2000      	movs	r0, #0
 800d266:	e7f7      	b.n	800d258 <__swsetup_r+0x98>
 800d268:	20000190 	.word	0x20000190

0800d26c <memset>:
 800d26c:	4402      	add	r2, r0
 800d26e:	4603      	mov	r3, r0
 800d270:	4293      	cmp	r3, r2
 800d272:	d100      	bne.n	800d276 <memset+0xa>
 800d274:	4770      	bx	lr
 800d276:	f803 1b01 	strb.w	r1, [r3], #1
 800d27a:	e7f9      	b.n	800d270 <memset+0x4>

0800d27c <_localeconv_r>:
 800d27c:	4800      	ldr	r0, [pc, #0]	@ (800d280 <_localeconv_r+0x4>)
 800d27e:	4770      	bx	lr
 800d280:	20000114 	.word	0x20000114

0800d284 <_close_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	4d06      	ldr	r5, [pc, #24]	@ (800d2a0 <_close_r+0x1c>)
 800d288:	2300      	movs	r3, #0
 800d28a:	4604      	mov	r4, r0
 800d28c:	4608      	mov	r0, r1
 800d28e:	602b      	str	r3, [r5, #0]
 800d290:	f7f4 fe2e 	bl	8001ef0 <_close>
 800d294:	1c43      	adds	r3, r0, #1
 800d296:	d102      	bne.n	800d29e <_close_r+0x1a>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	b103      	cbz	r3, 800d29e <_close_r+0x1a>
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	20004b04 	.word	0x20004b04

0800d2a4 <_reclaim_reent>:
 800d2a4:	4b29      	ldr	r3, [pc, #164]	@ (800d34c <_reclaim_reent+0xa8>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4283      	cmp	r3, r0
 800d2aa:	b570      	push	{r4, r5, r6, lr}
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	d04b      	beq.n	800d348 <_reclaim_reent+0xa4>
 800d2b0:	69c3      	ldr	r3, [r0, #28]
 800d2b2:	b1ab      	cbz	r3, 800d2e0 <_reclaim_reent+0x3c>
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	b16b      	cbz	r3, 800d2d4 <_reclaim_reent+0x30>
 800d2b8:	2500      	movs	r5, #0
 800d2ba:	69e3      	ldr	r3, [r4, #28]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	5959      	ldr	r1, [r3, r5]
 800d2c0:	2900      	cmp	r1, #0
 800d2c2:	d13b      	bne.n	800d33c <_reclaim_reent+0x98>
 800d2c4:	3504      	adds	r5, #4
 800d2c6:	2d80      	cmp	r5, #128	@ 0x80
 800d2c8:	d1f7      	bne.n	800d2ba <_reclaim_reent+0x16>
 800d2ca:	69e3      	ldr	r3, [r4, #28]
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	68d9      	ldr	r1, [r3, #12]
 800d2d0:	f000 fefe 	bl	800e0d0 <_free_r>
 800d2d4:	69e3      	ldr	r3, [r4, #28]
 800d2d6:	6819      	ldr	r1, [r3, #0]
 800d2d8:	b111      	cbz	r1, 800d2e0 <_reclaim_reent+0x3c>
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fef8 	bl	800e0d0 <_free_r>
 800d2e0:	6961      	ldr	r1, [r4, #20]
 800d2e2:	b111      	cbz	r1, 800d2ea <_reclaim_reent+0x46>
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f000 fef3 	bl	800e0d0 <_free_r>
 800d2ea:	69e1      	ldr	r1, [r4, #28]
 800d2ec:	b111      	cbz	r1, 800d2f4 <_reclaim_reent+0x50>
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f000 feee 	bl	800e0d0 <_free_r>
 800d2f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d2f6:	b111      	cbz	r1, 800d2fe <_reclaim_reent+0x5a>
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f000 fee9 	bl	800e0d0 <_free_r>
 800d2fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d300:	b111      	cbz	r1, 800d308 <_reclaim_reent+0x64>
 800d302:	4620      	mov	r0, r4
 800d304:	f000 fee4 	bl	800e0d0 <_free_r>
 800d308:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d30a:	b111      	cbz	r1, 800d312 <_reclaim_reent+0x6e>
 800d30c:	4620      	mov	r0, r4
 800d30e:	f000 fedf 	bl	800e0d0 <_free_r>
 800d312:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d314:	b111      	cbz	r1, 800d31c <_reclaim_reent+0x78>
 800d316:	4620      	mov	r0, r4
 800d318:	f000 feda 	bl	800e0d0 <_free_r>
 800d31c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d31e:	b111      	cbz	r1, 800d326 <_reclaim_reent+0x82>
 800d320:	4620      	mov	r0, r4
 800d322:	f000 fed5 	bl	800e0d0 <_free_r>
 800d326:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d328:	b111      	cbz	r1, 800d330 <_reclaim_reent+0x8c>
 800d32a:	4620      	mov	r0, r4
 800d32c:	f000 fed0 	bl	800e0d0 <_free_r>
 800d330:	6a23      	ldr	r3, [r4, #32]
 800d332:	b14b      	cbz	r3, 800d348 <_reclaim_reent+0xa4>
 800d334:	4620      	mov	r0, r4
 800d336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d33a:	4718      	bx	r3
 800d33c:	680e      	ldr	r6, [r1, #0]
 800d33e:	4620      	mov	r0, r4
 800d340:	f000 fec6 	bl	800e0d0 <_free_r>
 800d344:	4631      	mov	r1, r6
 800d346:	e7bb      	b.n	800d2c0 <_reclaim_reent+0x1c>
 800d348:	bd70      	pop	{r4, r5, r6, pc}
 800d34a:	bf00      	nop
 800d34c:	20000190 	.word	0x20000190

0800d350 <_lseek_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d07      	ldr	r5, [pc, #28]	@ (800d370 <_lseek_r+0x20>)
 800d354:	4604      	mov	r4, r0
 800d356:	4608      	mov	r0, r1
 800d358:	4611      	mov	r1, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	602a      	str	r2, [r5, #0]
 800d35e:	461a      	mov	r2, r3
 800d360:	f7f4 fded 	bl	8001f3e <_lseek>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_lseek_r+0x1e>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_lseek_r+0x1e>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	20004b04 	.word	0x20004b04

0800d374 <_read_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d07      	ldr	r5, [pc, #28]	@ (800d394 <_read_r+0x20>)
 800d378:	4604      	mov	r4, r0
 800d37a:	4608      	mov	r0, r1
 800d37c:	4611      	mov	r1, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	602a      	str	r2, [r5, #0]
 800d382:	461a      	mov	r2, r3
 800d384:	f7f4 fd97 	bl	8001eb6 <_read>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d102      	bne.n	800d392 <_read_r+0x1e>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	b103      	cbz	r3, 800d392 <_read_r+0x1e>
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	20004b04 	.word	0x20004b04

0800d398 <_write_r>:
 800d398:	b538      	push	{r3, r4, r5, lr}
 800d39a:	4d07      	ldr	r5, [pc, #28]	@ (800d3b8 <_write_r+0x20>)
 800d39c:	4604      	mov	r4, r0
 800d39e:	4608      	mov	r0, r1
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	602a      	str	r2, [r5, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	f7f3 fda4 	bl	8000ef4 <_write>
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	d102      	bne.n	800d3b6 <_write_r+0x1e>
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	b103      	cbz	r3, 800d3b6 <_write_r+0x1e>
 800d3b4:	6023      	str	r3, [r4, #0]
 800d3b6:	bd38      	pop	{r3, r4, r5, pc}
 800d3b8:	20004b04 	.word	0x20004b04

0800d3bc <__errno>:
 800d3bc:	4b01      	ldr	r3, [pc, #4]	@ (800d3c4 <__errno+0x8>)
 800d3be:	6818      	ldr	r0, [r3, #0]
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop
 800d3c4:	20000190 	.word	0x20000190

0800d3c8 <__libc_init_array>:
 800d3c8:	b570      	push	{r4, r5, r6, lr}
 800d3ca:	4d0d      	ldr	r5, [pc, #52]	@ (800d400 <__libc_init_array+0x38>)
 800d3cc:	4c0d      	ldr	r4, [pc, #52]	@ (800d404 <__libc_init_array+0x3c>)
 800d3ce:	1b64      	subs	r4, r4, r5
 800d3d0:	10a4      	asrs	r4, r4, #2
 800d3d2:	2600      	movs	r6, #0
 800d3d4:	42a6      	cmp	r6, r4
 800d3d6:	d109      	bne.n	800d3ec <__libc_init_array+0x24>
 800d3d8:	4d0b      	ldr	r5, [pc, #44]	@ (800d408 <__libc_init_array+0x40>)
 800d3da:	4c0c      	ldr	r4, [pc, #48]	@ (800d40c <__libc_init_array+0x44>)
 800d3dc:	f001 ffd2 	bl	800f384 <_init>
 800d3e0:	1b64      	subs	r4, r4, r5
 800d3e2:	10a4      	asrs	r4, r4, #2
 800d3e4:	2600      	movs	r6, #0
 800d3e6:	42a6      	cmp	r6, r4
 800d3e8:	d105      	bne.n	800d3f6 <__libc_init_array+0x2e>
 800d3ea:	bd70      	pop	{r4, r5, r6, pc}
 800d3ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3f0:	4798      	blx	r3
 800d3f2:	3601      	adds	r6, #1
 800d3f4:	e7ee      	b.n	800d3d4 <__libc_init_array+0xc>
 800d3f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3fa:	4798      	blx	r3
 800d3fc:	3601      	adds	r6, #1
 800d3fe:	e7f2      	b.n	800d3e6 <__libc_init_array+0x1e>
 800d400:	0800fbb0 	.word	0x0800fbb0
 800d404:	0800fbb0 	.word	0x0800fbb0
 800d408:	0800fbb0 	.word	0x0800fbb0
 800d40c:	0800fbb4 	.word	0x0800fbb4

0800d410 <__retarget_lock_init_recursive>:
 800d410:	4770      	bx	lr

0800d412 <__retarget_lock_acquire_recursive>:
 800d412:	4770      	bx	lr

0800d414 <__retarget_lock_release_recursive>:
 800d414:	4770      	bx	lr

0800d416 <memcpy>:
 800d416:	440a      	add	r2, r1
 800d418:	4291      	cmp	r1, r2
 800d41a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d41e:	d100      	bne.n	800d422 <memcpy+0xc>
 800d420:	4770      	bx	lr
 800d422:	b510      	push	{r4, lr}
 800d424:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d42c:	4291      	cmp	r1, r2
 800d42e:	d1f9      	bne.n	800d424 <memcpy+0xe>
 800d430:	bd10      	pop	{r4, pc}

0800d432 <quorem>:
 800d432:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d436:	6903      	ldr	r3, [r0, #16]
 800d438:	690c      	ldr	r4, [r1, #16]
 800d43a:	42a3      	cmp	r3, r4
 800d43c:	4607      	mov	r7, r0
 800d43e:	db7e      	blt.n	800d53e <quorem+0x10c>
 800d440:	3c01      	subs	r4, #1
 800d442:	f101 0814 	add.w	r8, r1, #20
 800d446:	00a3      	lsls	r3, r4, #2
 800d448:	f100 0514 	add.w	r5, r0, #20
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d452:	9301      	str	r3, [sp, #4]
 800d454:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d45c:	3301      	adds	r3, #1
 800d45e:	429a      	cmp	r2, r3
 800d460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d464:	fbb2 f6f3 	udiv	r6, r2, r3
 800d468:	d32e      	bcc.n	800d4c8 <quorem+0x96>
 800d46a:	f04f 0a00 	mov.w	sl, #0
 800d46e:	46c4      	mov	ip, r8
 800d470:	46ae      	mov	lr, r5
 800d472:	46d3      	mov	fp, sl
 800d474:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d478:	b298      	uxth	r0, r3
 800d47a:	fb06 a000 	mla	r0, r6, r0, sl
 800d47e:	0c02      	lsrs	r2, r0, #16
 800d480:	0c1b      	lsrs	r3, r3, #16
 800d482:	fb06 2303 	mla	r3, r6, r3, r2
 800d486:	f8de 2000 	ldr.w	r2, [lr]
 800d48a:	b280      	uxth	r0, r0
 800d48c:	b292      	uxth	r2, r2
 800d48e:	1a12      	subs	r2, r2, r0
 800d490:	445a      	add	r2, fp
 800d492:	f8de 0000 	ldr.w	r0, [lr]
 800d496:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d4a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d4a4:	b292      	uxth	r2, r2
 800d4a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d4aa:	45e1      	cmp	r9, ip
 800d4ac:	f84e 2b04 	str.w	r2, [lr], #4
 800d4b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d4b4:	d2de      	bcs.n	800d474 <quorem+0x42>
 800d4b6:	9b00      	ldr	r3, [sp, #0]
 800d4b8:	58eb      	ldr	r3, [r5, r3]
 800d4ba:	b92b      	cbnz	r3, 800d4c8 <quorem+0x96>
 800d4bc:	9b01      	ldr	r3, [sp, #4]
 800d4be:	3b04      	subs	r3, #4
 800d4c0:	429d      	cmp	r5, r3
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	d32f      	bcc.n	800d526 <quorem+0xf4>
 800d4c6:	613c      	str	r4, [r7, #16]
 800d4c8:	4638      	mov	r0, r7
 800d4ca:	f001 f98d 	bl	800e7e8 <__mcmp>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	db25      	blt.n	800d51e <quorem+0xec>
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4da:	f8d1 c000 	ldr.w	ip, [r1]
 800d4de:	fa1f fe82 	uxth.w	lr, r2
 800d4e2:	fa1f f38c 	uxth.w	r3, ip
 800d4e6:	eba3 030e 	sub.w	r3, r3, lr
 800d4ea:	4403      	add	r3, r0
 800d4ec:	0c12      	lsrs	r2, r2, #16
 800d4ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d4f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4fc:	45c1      	cmp	r9, r8
 800d4fe:	f841 3b04 	str.w	r3, [r1], #4
 800d502:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d506:	d2e6      	bcs.n	800d4d6 <quorem+0xa4>
 800d508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d50c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d510:	b922      	cbnz	r2, 800d51c <quorem+0xea>
 800d512:	3b04      	subs	r3, #4
 800d514:	429d      	cmp	r5, r3
 800d516:	461a      	mov	r2, r3
 800d518:	d30b      	bcc.n	800d532 <quorem+0x100>
 800d51a:	613c      	str	r4, [r7, #16]
 800d51c:	3601      	adds	r6, #1
 800d51e:	4630      	mov	r0, r6
 800d520:	b003      	add	sp, #12
 800d522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d526:	6812      	ldr	r2, [r2, #0]
 800d528:	3b04      	subs	r3, #4
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	d1cb      	bne.n	800d4c6 <quorem+0x94>
 800d52e:	3c01      	subs	r4, #1
 800d530:	e7c6      	b.n	800d4c0 <quorem+0x8e>
 800d532:	6812      	ldr	r2, [r2, #0]
 800d534:	3b04      	subs	r3, #4
 800d536:	2a00      	cmp	r2, #0
 800d538:	d1ef      	bne.n	800d51a <quorem+0xe8>
 800d53a:	3c01      	subs	r4, #1
 800d53c:	e7ea      	b.n	800d514 <quorem+0xe2>
 800d53e:	2000      	movs	r0, #0
 800d540:	e7ee      	b.n	800d520 <quorem+0xee>
 800d542:	0000      	movs	r0, r0
 800d544:	0000      	movs	r0, r0
	...

0800d548 <_dtoa_r>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	69c7      	ldr	r7, [r0, #28]
 800d54e:	b099      	sub	sp, #100	@ 0x64
 800d550:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d554:	ec55 4b10 	vmov	r4, r5, d0
 800d558:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d55a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d55c:	4683      	mov	fp, r0
 800d55e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d560:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d562:	b97f      	cbnz	r7, 800d584 <_dtoa_r+0x3c>
 800d564:	2010      	movs	r0, #16
 800d566:	f000 fdfd 	bl	800e164 <malloc>
 800d56a:	4602      	mov	r2, r0
 800d56c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d570:	b920      	cbnz	r0, 800d57c <_dtoa_r+0x34>
 800d572:	4ba7      	ldr	r3, [pc, #668]	@ (800d810 <_dtoa_r+0x2c8>)
 800d574:	21ef      	movs	r1, #239	@ 0xef
 800d576:	48a7      	ldr	r0, [pc, #668]	@ (800d814 <_dtoa_r+0x2cc>)
 800d578:	f001 fe3e 	bl	800f1f8 <__assert_func>
 800d57c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d580:	6007      	str	r7, [r0, #0]
 800d582:	60c7      	str	r7, [r0, #12]
 800d584:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d588:	6819      	ldr	r1, [r3, #0]
 800d58a:	b159      	cbz	r1, 800d5a4 <_dtoa_r+0x5c>
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	604a      	str	r2, [r1, #4]
 800d590:	2301      	movs	r3, #1
 800d592:	4093      	lsls	r3, r2
 800d594:	608b      	str	r3, [r1, #8]
 800d596:	4658      	mov	r0, fp
 800d598:	f000 feec 	bl	800e374 <_Bfree>
 800d59c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	1e2b      	subs	r3, r5, #0
 800d5a6:	bfb9      	ittee	lt
 800d5a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d5ac:	9303      	strlt	r3, [sp, #12]
 800d5ae:	2300      	movge	r3, #0
 800d5b0:	6033      	strge	r3, [r6, #0]
 800d5b2:	9f03      	ldr	r7, [sp, #12]
 800d5b4:	4b98      	ldr	r3, [pc, #608]	@ (800d818 <_dtoa_r+0x2d0>)
 800d5b6:	bfbc      	itt	lt
 800d5b8:	2201      	movlt	r2, #1
 800d5ba:	6032      	strlt	r2, [r6, #0]
 800d5bc:	43bb      	bics	r3, r7
 800d5be:	d112      	bne.n	800d5e6 <_dtoa_r+0x9e>
 800d5c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d5c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d5c6:	6013      	str	r3, [r2, #0]
 800d5c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5cc:	4323      	orrs	r3, r4
 800d5ce:	f000 854d 	beq.w	800e06c <_dtoa_r+0xb24>
 800d5d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d82c <_dtoa_r+0x2e4>
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f000 854f 	beq.w	800e07c <_dtoa_r+0xb34>
 800d5de:	f10a 0303 	add.w	r3, sl, #3
 800d5e2:	f000 bd49 	b.w	800e078 <_dtoa_r+0xb30>
 800d5e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	ec51 0b17 	vmov	r0, r1, d7
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d5f6:	f7f3 fa3f 	bl	8000a78 <__aeabi_dcmpeq>
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	b158      	cbz	r0, 800d616 <_dtoa_r+0xce>
 800d5fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d600:	2301      	movs	r3, #1
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d606:	b113      	cbz	r3, 800d60e <_dtoa_r+0xc6>
 800d608:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d60a:	4b84      	ldr	r3, [pc, #528]	@ (800d81c <_dtoa_r+0x2d4>)
 800d60c:	6013      	str	r3, [r2, #0]
 800d60e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d830 <_dtoa_r+0x2e8>
 800d612:	f000 bd33 	b.w	800e07c <_dtoa_r+0xb34>
 800d616:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d61a:	aa16      	add	r2, sp, #88	@ 0x58
 800d61c:	a917      	add	r1, sp, #92	@ 0x5c
 800d61e:	4658      	mov	r0, fp
 800d620:	f001 f992 	bl	800e948 <__d2b>
 800d624:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d628:	4681      	mov	r9, r0
 800d62a:	2e00      	cmp	r6, #0
 800d62c:	d077      	beq.n	800d71e <_dtoa_r+0x1d6>
 800d62e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d630:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d63c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d640:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d644:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d648:	4619      	mov	r1, r3
 800d64a:	2200      	movs	r2, #0
 800d64c:	4b74      	ldr	r3, [pc, #464]	@ (800d820 <_dtoa_r+0x2d8>)
 800d64e:	f7f2 fdf3 	bl	8000238 <__aeabi_dsub>
 800d652:	a369      	add	r3, pc, #420	@ (adr r3, 800d7f8 <_dtoa_r+0x2b0>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	f7f2 ffa6 	bl	80005a8 <__aeabi_dmul>
 800d65c:	a368      	add	r3, pc, #416	@ (adr r3, 800d800 <_dtoa_r+0x2b8>)
 800d65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d662:	f7f2 fdeb 	bl	800023c <__adddf3>
 800d666:	4604      	mov	r4, r0
 800d668:	4630      	mov	r0, r6
 800d66a:	460d      	mov	r5, r1
 800d66c:	f7f2 ff32 	bl	80004d4 <__aeabi_i2d>
 800d670:	a365      	add	r3, pc, #404	@ (adr r3, 800d808 <_dtoa_r+0x2c0>)
 800d672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d676:	f7f2 ff97 	bl	80005a8 <__aeabi_dmul>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	4620      	mov	r0, r4
 800d680:	4629      	mov	r1, r5
 800d682:	f7f2 fddb 	bl	800023c <__adddf3>
 800d686:	4604      	mov	r4, r0
 800d688:	460d      	mov	r5, r1
 800d68a:	f7f3 fa3d 	bl	8000b08 <__aeabi_d2iz>
 800d68e:	2200      	movs	r2, #0
 800d690:	4607      	mov	r7, r0
 800d692:	2300      	movs	r3, #0
 800d694:	4620      	mov	r0, r4
 800d696:	4629      	mov	r1, r5
 800d698:	f7f3 f9f8 	bl	8000a8c <__aeabi_dcmplt>
 800d69c:	b140      	cbz	r0, 800d6b0 <_dtoa_r+0x168>
 800d69e:	4638      	mov	r0, r7
 800d6a0:	f7f2 ff18 	bl	80004d4 <__aeabi_i2d>
 800d6a4:	4622      	mov	r2, r4
 800d6a6:	462b      	mov	r3, r5
 800d6a8:	f7f3 f9e6 	bl	8000a78 <__aeabi_dcmpeq>
 800d6ac:	b900      	cbnz	r0, 800d6b0 <_dtoa_r+0x168>
 800d6ae:	3f01      	subs	r7, #1
 800d6b0:	2f16      	cmp	r7, #22
 800d6b2:	d851      	bhi.n	800d758 <_dtoa_r+0x210>
 800d6b4:	4b5b      	ldr	r3, [pc, #364]	@ (800d824 <_dtoa_r+0x2dc>)
 800d6b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6c2:	f7f3 f9e3 	bl	8000a8c <__aeabi_dcmplt>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d048      	beq.n	800d75c <_dtoa_r+0x214>
 800d6ca:	3f01      	subs	r7, #1
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800d6d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d6d2:	1b9b      	subs	r3, r3, r6
 800d6d4:	1e5a      	subs	r2, r3, #1
 800d6d6:	bf44      	itt	mi
 800d6d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d6dc:	2300      	movmi	r3, #0
 800d6de:	9208      	str	r2, [sp, #32]
 800d6e0:	bf54      	ite	pl
 800d6e2:	f04f 0800 	movpl.w	r8, #0
 800d6e6:	9308      	strmi	r3, [sp, #32]
 800d6e8:	2f00      	cmp	r7, #0
 800d6ea:	db39      	blt.n	800d760 <_dtoa_r+0x218>
 800d6ec:	9b08      	ldr	r3, [sp, #32]
 800d6ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d6f0:	443b      	add	r3, r7
 800d6f2:	9308      	str	r3, [sp, #32]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6fa:	2b09      	cmp	r3, #9
 800d6fc:	d864      	bhi.n	800d7c8 <_dtoa_r+0x280>
 800d6fe:	2b05      	cmp	r3, #5
 800d700:	bfc4      	itt	gt
 800d702:	3b04      	subgt	r3, #4
 800d704:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d708:	f1a3 0302 	sub.w	r3, r3, #2
 800d70c:	bfcc      	ite	gt
 800d70e:	2400      	movgt	r4, #0
 800d710:	2401      	movle	r4, #1
 800d712:	2b03      	cmp	r3, #3
 800d714:	d863      	bhi.n	800d7de <_dtoa_r+0x296>
 800d716:	e8df f003 	tbb	[pc, r3]
 800d71a:	372a      	.short	0x372a
 800d71c:	5535      	.short	0x5535
 800d71e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d722:	441e      	add	r6, r3
 800d724:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d728:	2b20      	cmp	r3, #32
 800d72a:	bfc1      	itttt	gt
 800d72c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d730:	409f      	lslgt	r7, r3
 800d732:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d736:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d73a:	bfd6      	itet	le
 800d73c:	f1c3 0320 	rsble	r3, r3, #32
 800d740:	ea47 0003 	orrgt.w	r0, r7, r3
 800d744:	fa04 f003 	lslle.w	r0, r4, r3
 800d748:	f7f2 feb4 	bl	80004b4 <__aeabi_ui2d>
 800d74c:	2201      	movs	r2, #1
 800d74e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d752:	3e01      	subs	r6, #1
 800d754:	9214      	str	r2, [sp, #80]	@ 0x50
 800d756:	e777      	b.n	800d648 <_dtoa_r+0x100>
 800d758:	2301      	movs	r3, #1
 800d75a:	e7b8      	b.n	800d6ce <_dtoa_r+0x186>
 800d75c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d75e:	e7b7      	b.n	800d6d0 <_dtoa_r+0x188>
 800d760:	427b      	negs	r3, r7
 800d762:	930a      	str	r3, [sp, #40]	@ 0x28
 800d764:	2300      	movs	r3, #0
 800d766:	eba8 0807 	sub.w	r8, r8, r7
 800d76a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d76c:	e7c4      	b.n	800d6f8 <_dtoa_r+0x1b0>
 800d76e:	2300      	movs	r3, #0
 800d770:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d774:	2b00      	cmp	r3, #0
 800d776:	dc35      	bgt.n	800d7e4 <_dtoa_r+0x29c>
 800d778:	2301      	movs	r3, #1
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	9307      	str	r3, [sp, #28]
 800d77e:	461a      	mov	r2, r3
 800d780:	920e      	str	r2, [sp, #56]	@ 0x38
 800d782:	e00b      	b.n	800d79c <_dtoa_r+0x254>
 800d784:	2301      	movs	r3, #1
 800d786:	e7f3      	b.n	800d770 <_dtoa_r+0x228>
 800d788:	2300      	movs	r3, #0
 800d78a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d78c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d78e:	18fb      	adds	r3, r7, r3
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	3301      	adds	r3, #1
 800d794:	2b01      	cmp	r3, #1
 800d796:	9307      	str	r3, [sp, #28]
 800d798:	bfb8      	it	lt
 800d79a:	2301      	movlt	r3, #1
 800d79c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	2204      	movs	r2, #4
 800d7a4:	f102 0514 	add.w	r5, r2, #20
 800d7a8:	429d      	cmp	r5, r3
 800d7aa:	d91f      	bls.n	800d7ec <_dtoa_r+0x2a4>
 800d7ac:	6041      	str	r1, [r0, #4]
 800d7ae:	4658      	mov	r0, fp
 800d7b0:	f000 fda0 	bl	800e2f4 <_Balloc>
 800d7b4:	4682      	mov	sl, r0
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d13c      	bne.n	800d834 <_dtoa_r+0x2ec>
 800d7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800d828 <_dtoa_r+0x2e0>)
 800d7bc:	4602      	mov	r2, r0
 800d7be:	f240 11af 	movw	r1, #431	@ 0x1af
 800d7c2:	e6d8      	b.n	800d576 <_dtoa_r+0x2e>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e7e0      	b.n	800d78a <_dtoa_r+0x242>
 800d7c8:	2401      	movs	r4, #1
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	9307      	str	r3, [sp, #28]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2312      	movs	r3, #18
 800d7dc:	e7d0      	b.n	800d780 <_dtoa_r+0x238>
 800d7de:	2301      	movs	r3, #1
 800d7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7e2:	e7f5      	b.n	800d7d0 <_dtoa_r+0x288>
 800d7e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	9307      	str	r3, [sp, #28]
 800d7ea:	e7d7      	b.n	800d79c <_dtoa_r+0x254>
 800d7ec:	3101      	adds	r1, #1
 800d7ee:	0052      	lsls	r2, r2, #1
 800d7f0:	e7d8      	b.n	800d7a4 <_dtoa_r+0x25c>
 800d7f2:	bf00      	nop
 800d7f4:	f3af 8000 	nop.w
 800d7f8:	636f4361 	.word	0x636f4361
 800d7fc:	3fd287a7 	.word	0x3fd287a7
 800d800:	8b60c8b3 	.word	0x8b60c8b3
 800d804:	3fc68a28 	.word	0x3fc68a28
 800d808:	509f79fb 	.word	0x509f79fb
 800d80c:	3fd34413 	.word	0x3fd34413
 800d810:	0800f980 	.word	0x0800f980
 800d814:	0800f997 	.word	0x0800f997
 800d818:	7ff00000 	.word	0x7ff00000
 800d81c:	0800f946 	.word	0x0800f946
 800d820:	3ff80000 	.word	0x3ff80000
 800d824:	0800fa90 	.word	0x0800fa90
 800d828:	0800f9ef 	.word	0x0800f9ef
 800d82c:	0800f97c 	.word	0x0800f97c
 800d830:	0800f945 	.word	0x0800f945
 800d834:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d838:	6018      	str	r0, [r3, #0]
 800d83a:	9b07      	ldr	r3, [sp, #28]
 800d83c:	2b0e      	cmp	r3, #14
 800d83e:	f200 80a4 	bhi.w	800d98a <_dtoa_r+0x442>
 800d842:	2c00      	cmp	r4, #0
 800d844:	f000 80a1 	beq.w	800d98a <_dtoa_r+0x442>
 800d848:	2f00      	cmp	r7, #0
 800d84a:	dd33      	ble.n	800d8b4 <_dtoa_r+0x36c>
 800d84c:	4bad      	ldr	r3, [pc, #692]	@ (800db04 <_dtoa_r+0x5bc>)
 800d84e:	f007 020f 	and.w	r2, r7, #15
 800d852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d856:	ed93 7b00 	vldr	d7, [r3]
 800d85a:	05f8      	lsls	r0, r7, #23
 800d85c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d860:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d864:	d516      	bpl.n	800d894 <_dtoa_r+0x34c>
 800d866:	4ba8      	ldr	r3, [pc, #672]	@ (800db08 <_dtoa_r+0x5c0>)
 800d868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d86c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d870:	f7f2 ffc4 	bl	80007fc <__aeabi_ddiv>
 800d874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d878:	f004 040f 	and.w	r4, r4, #15
 800d87c:	2603      	movs	r6, #3
 800d87e:	4da2      	ldr	r5, [pc, #648]	@ (800db08 <_dtoa_r+0x5c0>)
 800d880:	b954      	cbnz	r4, 800d898 <_dtoa_r+0x350>
 800d882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d88a:	f7f2 ffb7 	bl	80007fc <__aeabi_ddiv>
 800d88e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d892:	e028      	b.n	800d8e6 <_dtoa_r+0x39e>
 800d894:	2602      	movs	r6, #2
 800d896:	e7f2      	b.n	800d87e <_dtoa_r+0x336>
 800d898:	07e1      	lsls	r1, r4, #31
 800d89a:	d508      	bpl.n	800d8ae <_dtoa_r+0x366>
 800d89c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8a4:	f7f2 fe80 	bl	80005a8 <__aeabi_dmul>
 800d8a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8ac:	3601      	adds	r6, #1
 800d8ae:	1064      	asrs	r4, r4, #1
 800d8b0:	3508      	adds	r5, #8
 800d8b2:	e7e5      	b.n	800d880 <_dtoa_r+0x338>
 800d8b4:	f000 80d2 	beq.w	800da5c <_dtoa_r+0x514>
 800d8b8:	427c      	negs	r4, r7
 800d8ba:	4b92      	ldr	r3, [pc, #584]	@ (800db04 <_dtoa_r+0x5bc>)
 800d8bc:	4d92      	ldr	r5, [pc, #584]	@ (800db08 <_dtoa_r+0x5c0>)
 800d8be:	f004 020f 	and.w	r2, r4, #15
 800d8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8ce:	f7f2 fe6b 	bl	80005a8 <__aeabi_dmul>
 800d8d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8d6:	1124      	asrs	r4, r4, #4
 800d8d8:	2300      	movs	r3, #0
 800d8da:	2602      	movs	r6, #2
 800d8dc:	2c00      	cmp	r4, #0
 800d8de:	f040 80b2 	bne.w	800da46 <_dtoa_r+0x4fe>
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1d3      	bne.n	800d88e <_dtoa_r+0x346>
 800d8e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d8e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 80b7 	beq.w	800da60 <_dtoa_r+0x518>
 800d8f2:	4b86      	ldr	r3, [pc, #536]	@ (800db0c <_dtoa_r+0x5c4>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	f7f3 f8c7 	bl	8000a8c <__aeabi_dcmplt>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	f000 80ae 	beq.w	800da60 <_dtoa_r+0x518>
 800d904:	9b07      	ldr	r3, [sp, #28]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f000 80aa 	beq.w	800da60 <_dtoa_r+0x518>
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	dd37      	ble.n	800d982 <_dtoa_r+0x43a>
 800d912:	1e7b      	subs	r3, r7, #1
 800d914:	9304      	str	r3, [sp, #16]
 800d916:	4620      	mov	r0, r4
 800d918:	4b7d      	ldr	r3, [pc, #500]	@ (800db10 <_dtoa_r+0x5c8>)
 800d91a:	2200      	movs	r2, #0
 800d91c:	4629      	mov	r1, r5
 800d91e:	f7f2 fe43 	bl	80005a8 <__aeabi_dmul>
 800d922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d926:	9c00      	ldr	r4, [sp, #0]
 800d928:	3601      	adds	r6, #1
 800d92a:	4630      	mov	r0, r6
 800d92c:	f7f2 fdd2 	bl	80004d4 <__aeabi_i2d>
 800d930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d934:	f7f2 fe38 	bl	80005a8 <__aeabi_dmul>
 800d938:	4b76      	ldr	r3, [pc, #472]	@ (800db14 <_dtoa_r+0x5cc>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	f7f2 fc7e 	bl	800023c <__adddf3>
 800d940:	4605      	mov	r5, r0
 800d942:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d946:	2c00      	cmp	r4, #0
 800d948:	f040 808d 	bne.w	800da66 <_dtoa_r+0x51e>
 800d94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d950:	4b71      	ldr	r3, [pc, #452]	@ (800db18 <_dtoa_r+0x5d0>)
 800d952:	2200      	movs	r2, #0
 800d954:	f7f2 fc70 	bl	8000238 <__aeabi_dsub>
 800d958:	4602      	mov	r2, r0
 800d95a:	460b      	mov	r3, r1
 800d95c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d960:	462a      	mov	r2, r5
 800d962:	4633      	mov	r3, r6
 800d964:	f7f3 f8b0 	bl	8000ac8 <__aeabi_dcmpgt>
 800d968:	2800      	cmp	r0, #0
 800d96a:	f040 828b 	bne.w	800de84 <_dtoa_r+0x93c>
 800d96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d972:	462a      	mov	r2, r5
 800d974:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d978:	f7f3 f888 	bl	8000a8c <__aeabi_dcmplt>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	f040 8128 	bne.w	800dbd2 <_dtoa_r+0x68a>
 800d982:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d986:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d98a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f2c0 815a 	blt.w	800dc46 <_dtoa_r+0x6fe>
 800d992:	2f0e      	cmp	r7, #14
 800d994:	f300 8157 	bgt.w	800dc46 <_dtoa_r+0x6fe>
 800d998:	4b5a      	ldr	r3, [pc, #360]	@ (800db04 <_dtoa_r+0x5bc>)
 800d99a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d99e:	ed93 7b00 	vldr	d7, [r3]
 800d9a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	ed8d 7b00 	vstr	d7, [sp]
 800d9aa:	da03      	bge.n	800d9b4 <_dtoa_r+0x46c>
 800d9ac:	9b07      	ldr	r3, [sp, #28]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f340 8101 	ble.w	800dbb6 <_dtoa_r+0x66e>
 800d9b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d9b8:	4656      	mov	r6, sl
 800d9ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9be:	4620      	mov	r0, r4
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	f7f2 ff1b 	bl	80007fc <__aeabi_ddiv>
 800d9c6:	f7f3 f89f 	bl	8000b08 <__aeabi_d2iz>
 800d9ca:	4680      	mov	r8, r0
 800d9cc:	f7f2 fd82 	bl	80004d4 <__aeabi_i2d>
 800d9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9d4:	f7f2 fde8 	bl	80005a8 <__aeabi_dmul>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4620      	mov	r0, r4
 800d9de:	4629      	mov	r1, r5
 800d9e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d9e4:	f7f2 fc28 	bl	8000238 <__aeabi_dsub>
 800d9e8:	f806 4b01 	strb.w	r4, [r6], #1
 800d9ec:	9d07      	ldr	r5, [sp, #28]
 800d9ee:	eba6 040a 	sub.w	r4, r6, sl
 800d9f2:	42a5      	cmp	r5, r4
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	f040 8117 	bne.w	800dc2a <_dtoa_r+0x6e2>
 800d9fc:	f7f2 fc1e 	bl	800023c <__adddf3>
 800da00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da04:	4604      	mov	r4, r0
 800da06:	460d      	mov	r5, r1
 800da08:	f7f3 f85e 	bl	8000ac8 <__aeabi_dcmpgt>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f040 80f9 	bne.w	800dc04 <_dtoa_r+0x6bc>
 800da12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da16:	4620      	mov	r0, r4
 800da18:	4629      	mov	r1, r5
 800da1a:	f7f3 f82d 	bl	8000a78 <__aeabi_dcmpeq>
 800da1e:	b118      	cbz	r0, 800da28 <_dtoa_r+0x4e0>
 800da20:	f018 0f01 	tst.w	r8, #1
 800da24:	f040 80ee 	bne.w	800dc04 <_dtoa_r+0x6bc>
 800da28:	4649      	mov	r1, r9
 800da2a:	4658      	mov	r0, fp
 800da2c:	f000 fca2 	bl	800e374 <_Bfree>
 800da30:	2300      	movs	r3, #0
 800da32:	7033      	strb	r3, [r6, #0]
 800da34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da36:	3701      	adds	r7, #1
 800da38:	601f      	str	r7, [r3, #0]
 800da3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f000 831d 	beq.w	800e07c <_dtoa_r+0xb34>
 800da42:	601e      	str	r6, [r3, #0]
 800da44:	e31a      	b.n	800e07c <_dtoa_r+0xb34>
 800da46:	07e2      	lsls	r2, r4, #31
 800da48:	d505      	bpl.n	800da56 <_dtoa_r+0x50e>
 800da4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da4e:	f7f2 fdab 	bl	80005a8 <__aeabi_dmul>
 800da52:	3601      	adds	r6, #1
 800da54:	2301      	movs	r3, #1
 800da56:	1064      	asrs	r4, r4, #1
 800da58:	3508      	adds	r5, #8
 800da5a:	e73f      	b.n	800d8dc <_dtoa_r+0x394>
 800da5c:	2602      	movs	r6, #2
 800da5e:	e742      	b.n	800d8e6 <_dtoa_r+0x39e>
 800da60:	9c07      	ldr	r4, [sp, #28]
 800da62:	9704      	str	r7, [sp, #16]
 800da64:	e761      	b.n	800d92a <_dtoa_r+0x3e2>
 800da66:	4b27      	ldr	r3, [pc, #156]	@ (800db04 <_dtoa_r+0x5bc>)
 800da68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da72:	4454      	add	r4, sl
 800da74:	2900      	cmp	r1, #0
 800da76:	d053      	beq.n	800db20 <_dtoa_r+0x5d8>
 800da78:	4928      	ldr	r1, [pc, #160]	@ (800db1c <_dtoa_r+0x5d4>)
 800da7a:	2000      	movs	r0, #0
 800da7c:	f7f2 febe 	bl	80007fc <__aeabi_ddiv>
 800da80:	4633      	mov	r3, r6
 800da82:	462a      	mov	r2, r5
 800da84:	f7f2 fbd8 	bl	8000238 <__aeabi_dsub>
 800da88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da8c:	4656      	mov	r6, sl
 800da8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da92:	f7f3 f839 	bl	8000b08 <__aeabi_d2iz>
 800da96:	4605      	mov	r5, r0
 800da98:	f7f2 fd1c 	bl	80004d4 <__aeabi_i2d>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daa4:	f7f2 fbc8 	bl	8000238 <__aeabi_dsub>
 800daa8:	3530      	adds	r5, #48	@ 0x30
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dab2:	f806 5b01 	strb.w	r5, [r6], #1
 800dab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800daba:	f7f2 ffe7 	bl	8000a8c <__aeabi_dcmplt>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d171      	bne.n	800dba6 <_dtoa_r+0x65e>
 800dac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dac6:	4911      	ldr	r1, [pc, #68]	@ (800db0c <_dtoa_r+0x5c4>)
 800dac8:	2000      	movs	r0, #0
 800daca:	f7f2 fbb5 	bl	8000238 <__aeabi_dsub>
 800dace:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dad2:	f7f2 ffdb 	bl	8000a8c <__aeabi_dcmplt>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	f040 8095 	bne.w	800dc06 <_dtoa_r+0x6be>
 800dadc:	42a6      	cmp	r6, r4
 800dade:	f43f af50 	beq.w	800d982 <_dtoa_r+0x43a>
 800dae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dae6:	4b0a      	ldr	r3, [pc, #40]	@ (800db10 <_dtoa_r+0x5c8>)
 800dae8:	2200      	movs	r2, #0
 800daea:	f7f2 fd5d 	bl	80005a8 <__aeabi_dmul>
 800daee:	4b08      	ldr	r3, [pc, #32]	@ (800db10 <_dtoa_r+0x5c8>)
 800daf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800daf4:	2200      	movs	r2, #0
 800daf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dafa:	f7f2 fd55 	bl	80005a8 <__aeabi_dmul>
 800dafe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db02:	e7c4      	b.n	800da8e <_dtoa_r+0x546>
 800db04:	0800fa90 	.word	0x0800fa90
 800db08:	0800fa68 	.word	0x0800fa68
 800db0c:	3ff00000 	.word	0x3ff00000
 800db10:	40240000 	.word	0x40240000
 800db14:	401c0000 	.word	0x401c0000
 800db18:	40140000 	.word	0x40140000
 800db1c:	3fe00000 	.word	0x3fe00000
 800db20:	4631      	mov	r1, r6
 800db22:	4628      	mov	r0, r5
 800db24:	f7f2 fd40 	bl	80005a8 <__aeabi_dmul>
 800db28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800db2c:	9415      	str	r4, [sp, #84]	@ 0x54
 800db2e:	4656      	mov	r6, sl
 800db30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db34:	f7f2 ffe8 	bl	8000b08 <__aeabi_d2iz>
 800db38:	4605      	mov	r5, r0
 800db3a:	f7f2 fccb 	bl	80004d4 <__aeabi_i2d>
 800db3e:	4602      	mov	r2, r0
 800db40:	460b      	mov	r3, r1
 800db42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db46:	f7f2 fb77 	bl	8000238 <__aeabi_dsub>
 800db4a:	3530      	adds	r5, #48	@ 0x30
 800db4c:	f806 5b01 	strb.w	r5, [r6], #1
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	42a6      	cmp	r6, r4
 800db56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db5a:	f04f 0200 	mov.w	r2, #0
 800db5e:	d124      	bne.n	800dbaa <_dtoa_r+0x662>
 800db60:	4bac      	ldr	r3, [pc, #688]	@ (800de14 <_dtoa_r+0x8cc>)
 800db62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800db66:	f7f2 fb69 	bl	800023c <__adddf3>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db72:	f7f2 ffa9 	bl	8000ac8 <__aeabi_dcmpgt>
 800db76:	2800      	cmp	r0, #0
 800db78:	d145      	bne.n	800dc06 <_dtoa_r+0x6be>
 800db7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800db7e:	49a5      	ldr	r1, [pc, #660]	@ (800de14 <_dtoa_r+0x8cc>)
 800db80:	2000      	movs	r0, #0
 800db82:	f7f2 fb59 	bl	8000238 <__aeabi_dsub>
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db8e:	f7f2 ff7d 	bl	8000a8c <__aeabi_dcmplt>
 800db92:	2800      	cmp	r0, #0
 800db94:	f43f aef5 	beq.w	800d982 <_dtoa_r+0x43a>
 800db98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800db9a:	1e73      	subs	r3, r6, #1
 800db9c:	9315      	str	r3, [sp, #84]	@ 0x54
 800db9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dba2:	2b30      	cmp	r3, #48	@ 0x30
 800dba4:	d0f8      	beq.n	800db98 <_dtoa_r+0x650>
 800dba6:	9f04      	ldr	r7, [sp, #16]
 800dba8:	e73e      	b.n	800da28 <_dtoa_r+0x4e0>
 800dbaa:	4b9b      	ldr	r3, [pc, #620]	@ (800de18 <_dtoa_r+0x8d0>)
 800dbac:	f7f2 fcfc 	bl	80005a8 <__aeabi_dmul>
 800dbb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbb4:	e7bc      	b.n	800db30 <_dtoa_r+0x5e8>
 800dbb6:	d10c      	bne.n	800dbd2 <_dtoa_r+0x68a>
 800dbb8:	4b98      	ldr	r3, [pc, #608]	@ (800de1c <_dtoa_r+0x8d4>)
 800dbba:	2200      	movs	r2, #0
 800dbbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbc0:	f7f2 fcf2 	bl	80005a8 <__aeabi_dmul>
 800dbc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbc8:	f7f2 ff74 	bl	8000ab4 <__aeabi_dcmpge>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f000 8157 	beq.w	800de80 <_dtoa_r+0x938>
 800dbd2:	2400      	movs	r4, #0
 800dbd4:	4625      	mov	r5, r4
 800dbd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbd8:	43db      	mvns	r3, r3
 800dbda:	9304      	str	r3, [sp, #16]
 800dbdc:	4656      	mov	r6, sl
 800dbde:	2700      	movs	r7, #0
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	4658      	mov	r0, fp
 800dbe4:	f000 fbc6 	bl	800e374 <_Bfree>
 800dbe8:	2d00      	cmp	r5, #0
 800dbea:	d0dc      	beq.n	800dba6 <_dtoa_r+0x65e>
 800dbec:	b12f      	cbz	r7, 800dbfa <_dtoa_r+0x6b2>
 800dbee:	42af      	cmp	r7, r5
 800dbf0:	d003      	beq.n	800dbfa <_dtoa_r+0x6b2>
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	4658      	mov	r0, fp
 800dbf6:	f000 fbbd 	bl	800e374 <_Bfree>
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	4658      	mov	r0, fp
 800dbfe:	f000 fbb9 	bl	800e374 <_Bfree>
 800dc02:	e7d0      	b.n	800dba6 <_dtoa_r+0x65e>
 800dc04:	9704      	str	r7, [sp, #16]
 800dc06:	4633      	mov	r3, r6
 800dc08:	461e      	mov	r6, r3
 800dc0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc0e:	2a39      	cmp	r2, #57	@ 0x39
 800dc10:	d107      	bne.n	800dc22 <_dtoa_r+0x6da>
 800dc12:	459a      	cmp	sl, r3
 800dc14:	d1f8      	bne.n	800dc08 <_dtoa_r+0x6c0>
 800dc16:	9a04      	ldr	r2, [sp, #16]
 800dc18:	3201      	adds	r2, #1
 800dc1a:	9204      	str	r2, [sp, #16]
 800dc1c:	2230      	movs	r2, #48	@ 0x30
 800dc1e:	f88a 2000 	strb.w	r2, [sl]
 800dc22:	781a      	ldrb	r2, [r3, #0]
 800dc24:	3201      	adds	r2, #1
 800dc26:	701a      	strb	r2, [r3, #0]
 800dc28:	e7bd      	b.n	800dba6 <_dtoa_r+0x65e>
 800dc2a:	4b7b      	ldr	r3, [pc, #492]	@ (800de18 <_dtoa_r+0x8d0>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f7f2 fcbb 	bl	80005a8 <__aeabi_dmul>
 800dc32:	2200      	movs	r2, #0
 800dc34:	2300      	movs	r3, #0
 800dc36:	4604      	mov	r4, r0
 800dc38:	460d      	mov	r5, r1
 800dc3a:	f7f2 ff1d 	bl	8000a78 <__aeabi_dcmpeq>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	f43f aebb 	beq.w	800d9ba <_dtoa_r+0x472>
 800dc44:	e6f0      	b.n	800da28 <_dtoa_r+0x4e0>
 800dc46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc48:	2a00      	cmp	r2, #0
 800dc4a:	f000 80db 	beq.w	800de04 <_dtoa_r+0x8bc>
 800dc4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc50:	2a01      	cmp	r2, #1
 800dc52:	f300 80bf 	bgt.w	800ddd4 <_dtoa_r+0x88c>
 800dc56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dc58:	2a00      	cmp	r2, #0
 800dc5a:	f000 80b7 	beq.w	800ddcc <_dtoa_r+0x884>
 800dc5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dc62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc64:	4646      	mov	r6, r8
 800dc66:	9a08      	ldr	r2, [sp, #32]
 800dc68:	2101      	movs	r1, #1
 800dc6a:	441a      	add	r2, r3
 800dc6c:	4658      	mov	r0, fp
 800dc6e:	4498      	add	r8, r3
 800dc70:	9208      	str	r2, [sp, #32]
 800dc72:	f000 fc33 	bl	800e4dc <__i2b>
 800dc76:	4605      	mov	r5, r0
 800dc78:	b15e      	cbz	r6, 800dc92 <_dtoa_r+0x74a>
 800dc7a:	9b08      	ldr	r3, [sp, #32]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	dd08      	ble.n	800dc92 <_dtoa_r+0x74a>
 800dc80:	42b3      	cmp	r3, r6
 800dc82:	9a08      	ldr	r2, [sp, #32]
 800dc84:	bfa8      	it	ge
 800dc86:	4633      	movge	r3, r6
 800dc88:	eba8 0803 	sub.w	r8, r8, r3
 800dc8c:	1af6      	subs	r6, r6, r3
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	9308      	str	r3, [sp, #32]
 800dc92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc94:	b1f3      	cbz	r3, 800dcd4 <_dtoa_r+0x78c>
 800dc96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 80b7 	beq.w	800de0c <_dtoa_r+0x8c4>
 800dc9e:	b18c      	cbz	r4, 800dcc4 <_dtoa_r+0x77c>
 800dca0:	4629      	mov	r1, r5
 800dca2:	4622      	mov	r2, r4
 800dca4:	4658      	mov	r0, fp
 800dca6:	f000 fcd9 	bl	800e65c <__pow5mult>
 800dcaa:	464a      	mov	r2, r9
 800dcac:	4601      	mov	r1, r0
 800dcae:	4605      	mov	r5, r0
 800dcb0:	4658      	mov	r0, fp
 800dcb2:	f000 fc29 	bl	800e508 <__multiply>
 800dcb6:	4649      	mov	r1, r9
 800dcb8:	9004      	str	r0, [sp, #16]
 800dcba:	4658      	mov	r0, fp
 800dcbc:	f000 fb5a 	bl	800e374 <_Bfree>
 800dcc0:	9b04      	ldr	r3, [sp, #16]
 800dcc2:	4699      	mov	r9, r3
 800dcc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcc6:	1b1a      	subs	r2, r3, r4
 800dcc8:	d004      	beq.n	800dcd4 <_dtoa_r+0x78c>
 800dcca:	4649      	mov	r1, r9
 800dccc:	4658      	mov	r0, fp
 800dcce:	f000 fcc5 	bl	800e65c <__pow5mult>
 800dcd2:	4681      	mov	r9, r0
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	4658      	mov	r0, fp
 800dcd8:	f000 fc00 	bl	800e4dc <__i2b>
 800dcdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcde:	4604      	mov	r4, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 81cf 	beq.w	800e084 <_dtoa_r+0xb3c>
 800dce6:	461a      	mov	r2, r3
 800dce8:	4601      	mov	r1, r0
 800dcea:	4658      	mov	r0, fp
 800dcec:	f000 fcb6 	bl	800e65c <__pow5mult>
 800dcf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	f300 8095 	bgt.w	800de24 <_dtoa_r+0x8dc>
 800dcfa:	9b02      	ldr	r3, [sp, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f040 8087 	bne.w	800de10 <_dtoa_r+0x8c8>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f040 8089 	bne.w	800de20 <_dtoa_r+0x8d8>
 800dd0e:	9b03      	ldr	r3, [sp, #12]
 800dd10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dd14:	0d1b      	lsrs	r3, r3, #20
 800dd16:	051b      	lsls	r3, r3, #20
 800dd18:	b12b      	cbz	r3, 800dd26 <_dtoa_r+0x7de>
 800dd1a:	9b08      	ldr	r3, [sp, #32]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	9308      	str	r3, [sp, #32]
 800dd20:	f108 0801 	add.w	r8, r8, #1
 800dd24:	2301      	movs	r3, #1
 800dd26:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f000 81b0 	beq.w	800e090 <_dtoa_r+0xb48>
 800dd30:	6923      	ldr	r3, [r4, #16]
 800dd32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd36:	6918      	ldr	r0, [r3, #16]
 800dd38:	f000 fb84 	bl	800e444 <__hi0bits>
 800dd3c:	f1c0 0020 	rsb	r0, r0, #32
 800dd40:	9b08      	ldr	r3, [sp, #32]
 800dd42:	4418      	add	r0, r3
 800dd44:	f010 001f 	ands.w	r0, r0, #31
 800dd48:	d077      	beq.n	800de3a <_dtoa_r+0x8f2>
 800dd4a:	f1c0 0320 	rsb	r3, r0, #32
 800dd4e:	2b04      	cmp	r3, #4
 800dd50:	dd6b      	ble.n	800de2a <_dtoa_r+0x8e2>
 800dd52:	9b08      	ldr	r3, [sp, #32]
 800dd54:	f1c0 001c 	rsb	r0, r0, #28
 800dd58:	4403      	add	r3, r0
 800dd5a:	4480      	add	r8, r0
 800dd5c:	4406      	add	r6, r0
 800dd5e:	9308      	str	r3, [sp, #32]
 800dd60:	f1b8 0f00 	cmp.w	r8, #0
 800dd64:	dd05      	ble.n	800dd72 <_dtoa_r+0x82a>
 800dd66:	4649      	mov	r1, r9
 800dd68:	4642      	mov	r2, r8
 800dd6a:	4658      	mov	r0, fp
 800dd6c:	f000 fcd0 	bl	800e710 <__lshift>
 800dd70:	4681      	mov	r9, r0
 800dd72:	9b08      	ldr	r3, [sp, #32]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	dd05      	ble.n	800dd84 <_dtoa_r+0x83c>
 800dd78:	4621      	mov	r1, r4
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	4658      	mov	r0, fp
 800dd7e:	f000 fcc7 	bl	800e710 <__lshift>
 800dd82:	4604      	mov	r4, r0
 800dd84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d059      	beq.n	800de3e <_dtoa_r+0x8f6>
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4648      	mov	r0, r9
 800dd8e:	f000 fd2b 	bl	800e7e8 <__mcmp>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	da53      	bge.n	800de3e <_dtoa_r+0x8f6>
 800dd96:	1e7b      	subs	r3, r7, #1
 800dd98:	9304      	str	r3, [sp, #16]
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	220a      	movs	r2, #10
 800dda0:	4658      	mov	r0, fp
 800dda2:	f000 fb09 	bl	800e3b8 <__multadd>
 800dda6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dda8:	4681      	mov	r9, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 8172 	beq.w	800e094 <_dtoa_r+0xb4c>
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	220a      	movs	r2, #10
 800ddb6:	4658      	mov	r0, fp
 800ddb8:	f000 fafe 	bl	800e3b8 <__multadd>
 800ddbc:	9b00      	ldr	r3, [sp, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	4605      	mov	r5, r0
 800ddc2:	dc67      	bgt.n	800de94 <_dtoa_r+0x94c>
 800ddc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	dc41      	bgt.n	800de4e <_dtoa_r+0x906>
 800ddca:	e063      	b.n	800de94 <_dtoa_r+0x94c>
 800ddcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ddce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ddd2:	e746      	b.n	800dc62 <_dtoa_r+0x71a>
 800ddd4:	9b07      	ldr	r3, [sp, #28]
 800ddd6:	1e5c      	subs	r4, r3, #1
 800ddd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddda:	42a3      	cmp	r3, r4
 800dddc:	bfbf      	itttt	lt
 800ddde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dde0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dde2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dde4:	1ae3      	sublt	r3, r4, r3
 800dde6:	bfb4      	ite	lt
 800dde8:	18d2      	addlt	r2, r2, r3
 800ddea:	1b1c      	subge	r4, r3, r4
 800ddec:	9b07      	ldr	r3, [sp, #28]
 800ddee:	bfbc      	itt	lt
 800ddf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ddf2:	2400      	movlt	r4, #0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	bfb5      	itete	lt
 800ddf8:	eba8 0603 	sublt.w	r6, r8, r3
 800ddfc:	9b07      	ldrge	r3, [sp, #28]
 800ddfe:	2300      	movlt	r3, #0
 800de00:	4646      	movge	r6, r8
 800de02:	e730      	b.n	800dc66 <_dtoa_r+0x71e>
 800de04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800de08:	4646      	mov	r6, r8
 800de0a:	e735      	b.n	800dc78 <_dtoa_r+0x730>
 800de0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de0e:	e75c      	b.n	800dcca <_dtoa_r+0x782>
 800de10:	2300      	movs	r3, #0
 800de12:	e788      	b.n	800dd26 <_dtoa_r+0x7de>
 800de14:	3fe00000 	.word	0x3fe00000
 800de18:	40240000 	.word	0x40240000
 800de1c:	40140000 	.word	0x40140000
 800de20:	9b02      	ldr	r3, [sp, #8]
 800de22:	e780      	b.n	800dd26 <_dtoa_r+0x7de>
 800de24:	2300      	movs	r3, #0
 800de26:	930a      	str	r3, [sp, #40]	@ 0x28
 800de28:	e782      	b.n	800dd30 <_dtoa_r+0x7e8>
 800de2a:	d099      	beq.n	800dd60 <_dtoa_r+0x818>
 800de2c:	9a08      	ldr	r2, [sp, #32]
 800de2e:	331c      	adds	r3, #28
 800de30:	441a      	add	r2, r3
 800de32:	4498      	add	r8, r3
 800de34:	441e      	add	r6, r3
 800de36:	9208      	str	r2, [sp, #32]
 800de38:	e792      	b.n	800dd60 <_dtoa_r+0x818>
 800de3a:	4603      	mov	r3, r0
 800de3c:	e7f6      	b.n	800de2c <_dtoa_r+0x8e4>
 800de3e:	9b07      	ldr	r3, [sp, #28]
 800de40:	9704      	str	r7, [sp, #16]
 800de42:	2b00      	cmp	r3, #0
 800de44:	dc20      	bgt.n	800de88 <_dtoa_r+0x940>
 800de46:	9300      	str	r3, [sp, #0]
 800de48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	dd1e      	ble.n	800de8c <_dtoa_r+0x944>
 800de4e:	9b00      	ldr	r3, [sp, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	f47f aec0 	bne.w	800dbd6 <_dtoa_r+0x68e>
 800de56:	4621      	mov	r1, r4
 800de58:	2205      	movs	r2, #5
 800de5a:	4658      	mov	r0, fp
 800de5c:	f000 faac 	bl	800e3b8 <__multadd>
 800de60:	4601      	mov	r1, r0
 800de62:	4604      	mov	r4, r0
 800de64:	4648      	mov	r0, r9
 800de66:	f000 fcbf 	bl	800e7e8 <__mcmp>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	f77f aeb3 	ble.w	800dbd6 <_dtoa_r+0x68e>
 800de70:	4656      	mov	r6, sl
 800de72:	2331      	movs	r3, #49	@ 0x31
 800de74:	f806 3b01 	strb.w	r3, [r6], #1
 800de78:	9b04      	ldr	r3, [sp, #16]
 800de7a:	3301      	adds	r3, #1
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	e6ae      	b.n	800dbde <_dtoa_r+0x696>
 800de80:	9c07      	ldr	r4, [sp, #28]
 800de82:	9704      	str	r7, [sp, #16]
 800de84:	4625      	mov	r5, r4
 800de86:	e7f3      	b.n	800de70 <_dtoa_r+0x928>
 800de88:	9b07      	ldr	r3, [sp, #28]
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f000 8104 	beq.w	800e09c <_dtoa_r+0xb54>
 800de94:	2e00      	cmp	r6, #0
 800de96:	dd05      	ble.n	800dea4 <_dtoa_r+0x95c>
 800de98:	4629      	mov	r1, r5
 800de9a:	4632      	mov	r2, r6
 800de9c:	4658      	mov	r0, fp
 800de9e:	f000 fc37 	bl	800e710 <__lshift>
 800dea2:	4605      	mov	r5, r0
 800dea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d05a      	beq.n	800df60 <_dtoa_r+0xa18>
 800deaa:	6869      	ldr	r1, [r5, #4]
 800deac:	4658      	mov	r0, fp
 800deae:	f000 fa21 	bl	800e2f4 <_Balloc>
 800deb2:	4606      	mov	r6, r0
 800deb4:	b928      	cbnz	r0, 800dec2 <_dtoa_r+0x97a>
 800deb6:	4b84      	ldr	r3, [pc, #528]	@ (800e0c8 <_dtoa_r+0xb80>)
 800deb8:	4602      	mov	r2, r0
 800deba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800debe:	f7ff bb5a 	b.w	800d576 <_dtoa_r+0x2e>
 800dec2:	692a      	ldr	r2, [r5, #16]
 800dec4:	3202      	adds	r2, #2
 800dec6:	0092      	lsls	r2, r2, #2
 800dec8:	f105 010c 	add.w	r1, r5, #12
 800decc:	300c      	adds	r0, #12
 800dece:	f7ff faa2 	bl	800d416 <memcpy>
 800ded2:	2201      	movs	r2, #1
 800ded4:	4631      	mov	r1, r6
 800ded6:	4658      	mov	r0, fp
 800ded8:	f000 fc1a 	bl	800e710 <__lshift>
 800dedc:	f10a 0301 	add.w	r3, sl, #1
 800dee0:	9307      	str	r3, [sp, #28]
 800dee2:	9b00      	ldr	r3, [sp, #0]
 800dee4:	4453      	add	r3, sl
 800dee6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dee8:	9b02      	ldr	r3, [sp, #8]
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	462f      	mov	r7, r5
 800def0:	930a      	str	r3, [sp, #40]	@ 0x28
 800def2:	4605      	mov	r5, r0
 800def4:	9b07      	ldr	r3, [sp, #28]
 800def6:	4621      	mov	r1, r4
 800def8:	3b01      	subs	r3, #1
 800defa:	4648      	mov	r0, r9
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	f7ff fa98 	bl	800d432 <quorem>
 800df02:	4639      	mov	r1, r7
 800df04:	9002      	str	r0, [sp, #8]
 800df06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800df0a:	4648      	mov	r0, r9
 800df0c:	f000 fc6c 	bl	800e7e8 <__mcmp>
 800df10:	462a      	mov	r2, r5
 800df12:	9008      	str	r0, [sp, #32]
 800df14:	4621      	mov	r1, r4
 800df16:	4658      	mov	r0, fp
 800df18:	f000 fc82 	bl	800e820 <__mdiff>
 800df1c:	68c2      	ldr	r2, [r0, #12]
 800df1e:	4606      	mov	r6, r0
 800df20:	bb02      	cbnz	r2, 800df64 <_dtoa_r+0xa1c>
 800df22:	4601      	mov	r1, r0
 800df24:	4648      	mov	r0, r9
 800df26:	f000 fc5f 	bl	800e7e8 <__mcmp>
 800df2a:	4602      	mov	r2, r0
 800df2c:	4631      	mov	r1, r6
 800df2e:	4658      	mov	r0, fp
 800df30:	920e      	str	r2, [sp, #56]	@ 0x38
 800df32:	f000 fa1f 	bl	800e374 <_Bfree>
 800df36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df3a:	9e07      	ldr	r6, [sp, #28]
 800df3c:	ea43 0102 	orr.w	r1, r3, r2
 800df40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df42:	4319      	orrs	r1, r3
 800df44:	d110      	bne.n	800df68 <_dtoa_r+0xa20>
 800df46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df4a:	d029      	beq.n	800dfa0 <_dtoa_r+0xa58>
 800df4c:	9b08      	ldr	r3, [sp, #32]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	dd02      	ble.n	800df58 <_dtoa_r+0xa10>
 800df52:	9b02      	ldr	r3, [sp, #8]
 800df54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800df58:	9b00      	ldr	r3, [sp, #0]
 800df5a:	f883 8000 	strb.w	r8, [r3]
 800df5e:	e63f      	b.n	800dbe0 <_dtoa_r+0x698>
 800df60:	4628      	mov	r0, r5
 800df62:	e7bb      	b.n	800dedc <_dtoa_r+0x994>
 800df64:	2201      	movs	r2, #1
 800df66:	e7e1      	b.n	800df2c <_dtoa_r+0x9e4>
 800df68:	9b08      	ldr	r3, [sp, #32]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	db04      	blt.n	800df78 <_dtoa_r+0xa30>
 800df6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df70:	430b      	orrs	r3, r1
 800df72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df74:	430b      	orrs	r3, r1
 800df76:	d120      	bne.n	800dfba <_dtoa_r+0xa72>
 800df78:	2a00      	cmp	r2, #0
 800df7a:	dded      	ble.n	800df58 <_dtoa_r+0xa10>
 800df7c:	4649      	mov	r1, r9
 800df7e:	2201      	movs	r2, #1
 800df80:	4658      	mov	r0, fp
 800df82:	f000 fbc5 	bl	800e710 <__lshift>
 800df86:	4621      	mov	r1, r4
 800df88:	4681      	mov	r9, r0
 800df8a:	f000 fc2d 	bl	800e7e8 <__mcmp>
 800df8e:	2800      	cmp	r0, #0
 800df90:	dc03      	bgt.n	800df9a <_dtoa_r+0xa52>
 800df92:	d1e1      	bne.n	800df58 <_dtoa_r+0xa10>
 800df94:	f018 0f01 	tst.w	r8, #1
 800df98:	d0de      	beq.n	800df58 <_dtoa_r+0xa10>
 800df9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df9e:	d1d8      	bne.n	800df52 <_dtoa_r+0xa0a>
 800dfa0:	9a00      	ldr	r2, [sp, #0]
 800dfa2:	2339      	movs	r3, #57	@ 0x39
 800dfa4:	7013      	strb	r3, [r2, #0]
 800dfa6:	4633      	mov	r3, r6
 800dfa8:	461e      	mov	r6, r3
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dfb0:	2a39      	cmp	r2, #57	@ 0x39
 800dfb2:	d052      	beq.n	800e05a <_dtoa_r+0xb12>
 800dfb4:	3201      	adds	r2, #1
 800dfb6:	701a      	strb	r2, [r3, #0]
 800dfb8:	e612      	b.n	800dbe0 <_dtoa_r+0x698>
 800dfba:	2a00      	cmp	r2, #0
 800dfbc:	dd07      	ble.n	800dfce <_dtoa_r+0xa86>
 800dfbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dfc2:	d0ed      	beq.n	800dfa0 <_dtoa_r+0xa58>
 800dfc4:	9a00      	ldr	r2, [sp, #0]
 800dfc6:	f108 0301 	add.w	r3, r8, #1
 800dfca:	7013      	strb	r3, [r2, #0]
 800dfcc:	e608      	b.n	800dbe0 <_dtoa_r+0x698>
 800dfce:	9b07      	ldr	r3, [sp, #28]
 800dfd0:	9a07      	ldr	r2, [sp, #28]
 800dfd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dfd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d028      	beq.n	800e02e <_dtoa_r+0xae6>
 800dfdc:	4649      	mov	r1, r9
 800dfde:	2300      	movs	r3, #0
 800dfe0:	220a      	movs	r2, #10
 800dfe2:	4658      	mov	r0, fp
 800dfe4:	f000 f9e8 	bl	800e3b8 <__multadd>
 800dfe8:	42af      	cmp	r7, r5
 800dfea:	4681      	mov	r9, r0
 800dfec:	f04f 0300 	mov.w	r3, #0
 800dff0:	f04f 020a 	mov.w	r2, #10
 800dff4:	4639      	mov	r1, r7
 800dff6:	4658      	mov	r0, fp
 800dff8:	d107      	bne.n	800e00a <_dtoa_r+0xac2>
 800dffa:	f000 f9dd 	bl	800e3b8 <__multadd>
 800dffe:	4607      	mov	r7, r0
 800e000:	4605      	mov	r5, r0
 800e002:	9b07      	ldr	r3, [sp, #28]
 800e004:	3301      	adds	r3, #1
 800e006:	9307      	str	r3, [sp, #28]
 800e008:	e774      	b.n	800def4 <_dtoa_r+0x9ac>
 800e00a:	f000 f9d5 	bl	800e3b8 <__multadd>
 800e00e:	4629      	mov	r1, r5
 800e010:	4607      	mov	r7, r0
 800e012:	2300      	movs	r3, #0
 800e014:	220a      	movs	r2, #10
 800e016:	4658      	mov	r0, fp
 800e018:	f000 f9ce 	bl	800e3b8 <__multadd>
 800e01c:	4605      	mov	r5, r0
 800e01e:	e7f0      	b.n	800e002 <_dtoa_r+0xaba>
 800e020:	9b00      	ldr	r3, [sp, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	bfcc      	ite	gt
 800e026:	461e      	movgt	r6, r3
 800e028:	2601      	movle	r6, #1
 800e02a:	4456      	add	r6, sl
 800e02c:	2700      	movs	r7, #0
 800e02e:	4649      	mov	r1, r9
 800e030:	2201      	movs	r2, #1
 800e032:	4658      	mov	r0, fp
 800e034:	f000 fb6c 	bl	800e710 <__lshift>
 800e038:	4621      	mov	r1, r4
 800e03a:	4681      	mov	r9, r0
 800e03c:	f000 fbd4 	bl	800e7e8 <__mcmp>
 800e040:	2800      	cmp	r0, #0
 800e042:	dcb0      	bgt.n	800dfa6 <_dtoa_r+0xa5e>
 800e044:	d102      	bne.n	800e04c <_dtoa_r+0xb04>
 800e046:	f018 0f01 	tst.w	r8, #1
 800e04a:	d1ac      	bne.n	800dfa6 <_dtoa_r+0xa5e>
 800e04c:	4633      	mov	r3, r6
 800e04e:	461e      	mov	r6, r3
 800e050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e054:	2a30      	cmp	r2, #48	@ 0x30
 800e056:	d0fa      	beq.n	800e04e <_dtoa_r+0xb06>
 800e058:	e5c2      	b.n	800dbe0 <_dtoa_r+0x698>
 800e05a:	459a      	cmp	sl, r3
 800e05c:	d1a4      	bne.n	800dfa8 <_dtoa_r+0xa60>
 800e05e:	9b04      	ldr	r3, [sp, #16]
 800e060:	3301      	adds	r3, #1
 800e062:	9304      	str	r3, [sp, #16]
 800e064:	2331      	movs	r3, #49	@ 0x31
 800e066:	f88a 3000 	strb.w	r3, [sl]
 800e06a:	e5b9      	b.n	800dbe0 <_dtoa_r+0x698>
 800e06c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e06e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e0cc <_dtoa_r+0xb84>
 800e072:	b11b      	cbz	r3, 800e07c <_dtoa_r+0xb34>
 800e074:	f10a 0308 	add.w	r3, sl, #8
 800e078:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e07a:	6013      	str	r3, [r2, #0]
 800e07c:	4650      	mov	r0, sl
 800e07e:	b019      	add	sp, #100	@ 0x64
 800e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e086:	2b01      	cmp	r3, #1
 800e088:	f77f ae37 	ble.w	800dcfa <_dtoa_r+0x7b2>
 800e08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e08e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e090:	2001      	movs	r0, #1
 800e092:	e655      	b.n	800dd40 <_dtoa_r+0x7f8>
 800e094:	9b00      	ldr	r3, [sp, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f77f aed6 	ble.w	800de48 <_dtoa_r+0x900>
 800e09c:	4656      	mov	r6, sl
 800e09e:	4621      	mov	r1, r4
 800e0a0:	4648      	mov	r0, r9
 800e0a2:	f7ff f9c6 	bl	800d432 <quorem>
 800e0a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e0aa:	f806 8b01 	strb.w	r8, [r6], #1
 800e0ae:	9b00      	ldr	r3, [sp, #0]
 800e0b0:	eba6 020a 	sub.w	r2, r6, sl
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	ddb3      	ble.n	800e020 <_dtoa_r+0xad8>
 800e0b8:	4649      	mov	r1, r9
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	220a      	movs	r2, #10
 800e0be:	4658      	mov	r0, fp
 800e0c0:	f000 f97a 	bl	800e3b8 <__multadd>
 800e0c4:	4681      	mov	r9, r0
 800e0c6:	e7ea      	b.n	800e09e <_dtoa_r+0xb56>
 800e0c8:	0800f9ef 	.word	0x0800f9ef
 800e0cc:	0800f973 	.word	0x0800f973

0800e0d0 <_free_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4605      	mov	r5, r0
 800e0d4:	2900      	cmp	r1, #0
 800e0d6:	d041      	beq.n	800e15c <_free_r+0x8c>
 800e0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0dc:	1f0c      	subs	r4, r1, #4
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	bfb8      	it	lt
 800e0e2:	18e4      	addlt	r4, r4, r3
 800e0e4:	f000 f8fa 	bl	800e2dc <__malloc_lock>
 800e0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800e160 <_free_r+0x90>)
 800e0ea:	6813      	ldr	r3, [r2, #0]
 800e0ec:	b933      	cbnz	r3, 800e0fc <_free_r+0x2c>
 800e0ee:	6063      	str	r3, [r4, #4]
 800e0f0:	6014      	str	r4, [r2, #0]
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0f8:	f000 b8f6 	b.w	800e2e8 <__malloc_unlock>
 800e0fc:	42a3      	cmp	r3, r4
 800e0fe:	d908      	bls.n	800e112 <_free_r+0x42>
 800e100:	6820      	ldr	r0, [r4, #0]
 800e102:	1821      	adds	r1, r4, r0
 800e104:	428b      	cmp	r3, r1
 800e106:	bf01      	itttt	eq
 800e108:	6819      	ldreq	r1, [r3, #0]
 800e10a:	685b      	ldreq	r3, [r3, #4]
 800e10c:	1809      	addeq	r1, r1, r0
 800e10e:	6021      	streq	r1, [r4, #0]
 800e110:	e7ed      	b.n	800e0ee <_free_r+0x1e>
 800e112:	461a      	mov	r2, r3
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	b10b      	cbz	r3, 800e11c <_free_r+0x4c>
 800e118:	42a3      	cmp	r3, r4
 800e11a:	d9fa      	bls.n	800e112 <_free_r+0x42>
 800e11c:	6811      	ldr	r1, [r2, #0]
 800e11e:	1850      	adds	r0, r2, r1
 800e120:	42a0      	cmp	r0, r4
 800e122:	d10b      	bne.n	800e13c <_free_r+0x6c>
 800e124:	6820      	ldr	r0, [r4, #0]
 800e126:	4401      	add	r1, r0
 800e128:	1850      	adds	r0, r2, r1
 800e12a:	4283      	cmp	r3, r0
 800e12c:	6011      	str	r1, [r2, #0]
 800e12e:	d1e0      	bne.n	800e0f2 <_free_r+0x22>
 800e130:	6818      	ldr	r0, [r3, #0]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	6053      	str	r3, [r2, #4]
 800e136:	4408      	add	r0, r1
 800e138:	6010      	str	r0, [r2, #0]
 800e13a:	e7da      	b.n	800e0f2 <_free_r+0x22>
 800e13c:	d902      	bls.n	800e144 <_free_r+0x74>
 800e13e:	230c      	movs	r3, #12
 800e140:	602b      	str	r3, [r5, #0]
 800e142:	e7d6      	b.n	800e0f2 <_free_r+0x22>
 800e144:	6820      	ldr	r0, [r4, #0]
 800e146:	1821      	adds	r1, r4, r0
 800e148:	428b      	cmp	r3, r1
 800e14a:	bf04      	itt	eq
 800e14c:	6819      	ldreq	r1, [r3, #0]
 800e14e:	685b      	ldreq	r3, [r3, #4]
 800e150:	6063      	str	r3, [r4, #4]
 800e152:	bf04      	itt	eq
 800e154:	1809      	addeq	r1, r1, r0
 800e156:	6021      	streq	r1, [r4, #0]
 800e158:	6054      	str	r4, [r2, #4]
 800e15a:	e7ca      	b.n	800e0f2 <_free_r+0x22>
 800e15c:	bd38      	pop	{r3, r4, r5, pc}
 800e15e:	bf00      	nop
 800e160:	20004b10 	.word	0x20004b10

0800e164 <malloc>:
 800e164:	4b02      	ldr	r3, [pc, #8]	@ (800e170 <malloc+0xc>)
 800e166:	4601      	mov	r1, r0
 800e168:	6818      	ldr	r0, [r3, #0]
 800e16a:	f000 b825 	b.w	800e1b8 <_malloc_r>
 800e16e:	bf00      	nop
 800e170:	20000190 	.word	0x20000190

0800e174 <sbrk_aligned>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	4e0f      	ldr	r6, [pc, #60]	@ (800e1b4 <sbrk_aligned+0x40>)
 800e178:	460c      	mov	r4, r1
 800e17a:	6831      	ldr	r1, [r6, #0]
 800e17c:	4605      	mov	r5, r0
 800e17e:	b911      	cbnz	r1, 800e186 <sbrk_aligned+0x12>
 800e180:	f001 f82a 	bl	800f1d8 <_sbrk_r>
 800e184:	6030      	str	r0, [r6, #0]
 800e186:	4621      	mov	r1, r4
 800e188:	4628      	mov	r0, r5
 800e18a:	f001 f825 	bl	800f1d8 <_sbrk_r>
 800e18e:	1c43      	adds	r3, r0, #1
 800e190:	d103      	bne.n	800e19a <sbrk_aligned+0x26>
 800e192:	f04f 34ff 	mov.w	r4, #4294967295
 800e196:	4620      	mov	r0, r4
 800e198:	bd70      	pop	{r4, r5, r6, pc}
 800e19a:	1cc4      	adds	r4, r0, #3
 800e19c:	f024 0403 	bic.w	r4, r4, #3
 800e1a0:	42a0      	cmp	r0, r4
 800e1a2:	d0f8      	beq.n	800e196 <sbrk_aligned+0x22>
 800e1a4:	1a21      	subs	r1, r4, r0
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f001 f816 	bl	800f1d8 <_sbrk_r>
 800e1ac:	3001      	adds	r0, #1
 800e1ae:	d1f2      	bne.n	800e196 <sbrk_aligned+0x22>
 800e1b0:	e7ef      	b.n	800e192 <sbrk_aligned+0x1e>
 800e1b2:	bf00      	nop
 800e1b4:	20004b0c 	.word	0x20004b0c

0800e1b8 <_malloc_r>:
 800e1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1bc:	1ccd      	adds	r5, r1, #3
 800e1be:	f025 0503 	bic.w	r5, r5, #3
 800e1c2:	3508      	adds	r5, #8
 800e1c4:	2d0c      	cmp	r5, #12
 800e1c6:	bf38      	it	cc
 800e1c8:	250c      	movcc	r5, #12
 800e1ca:	2d00      	cmp	r5, #0
 800e1cc:	4606      	mov	r6, r0
 800e1ce:	db01      	blt.n	800e1d4 <_malloc_r+0x1c>
 800e1d0:	42a9      	cmp	r1, r5
 800e1d2:	d904      	bls.n	800e1de <_malloc_r+0x26>
 800e1d4:	230c      	movs	r3, #12
 800e1d6:	6033      	str	r3, [r6, #0]
 800e1d8:	2000      	movs	r0, #0
 800e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2b4 <_malloc_r+0xfc>
 800e1e2:	f000 f87b 	bl	800e2dc <__malloc_lock>
 800e1e6:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ea:	461c      	mov	r4, r3
 800e1ec:	bb44      	cbnz	r4, 800e240 <_malloc_r+0x88>
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f7ff ffbf 	bl	800e174 <sbrk_aligned>
 800e1f6:	1c43      	adds	r3, r0, #1
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	d158      	bne.n	800e2ae <_malloc_r+0xf6>
 800e1fc:	f8d8 4000 	ldr.w	r4, [r8]
 800e200:	4627      	mov	r7, r4
 800e202:	2f00      	cmp	r7, #0
 800e204:	d143      	bne.n	800e28e <_malloc_r+0xd6>
 800e206:	2c00      	cmp	r4, #0
 800e208:	d04b      	beq.n	800e2a2 <_malloc_r+0xea>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	4639      	mov	r1, r7
 800e20e:	4630      	mov	r0, r6
 800e210:	eb04 0903 	add.w	r9, r4, r3
 800e214:	f000 ffe0 	bl	800f1d8 <_sbrk_r>
 800e218:	4581      	cmp	r9, r0
 800e21a:	d142      	bne.n	800e2a2 <_malloc_r+0xea>
 800e21c:	6821      	ldr	r1, [r4, #0]
 800e21e:	1a6d      	subs	r5, r5, r1
 800e220:	4629      	mov	r1, r5
 800e222:	4630      	mov	r0, r6
 800e224:	f7ff ffa6 	bl	800e174 <sbrk_aligned>
 800e228:	3001      	adds	r0, #1
 800e22a:	d03a      	beq.n	800e2a2 <_malloc_r+0xea>
 800e22c:	6823      	ldr	r3, [r4, #0]
 800e22e:	442b      	add	r3, r5
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	f8d8 3000 	ldr.w	r3, [r8]
 800e236:	685a      	ldr	r2, [r3, #4]
 800e238:	bb62      	cbnz	r2, 800e294 <_malloc_r+0xdc>
 800e23a:	f8c8 7000 	str.w	r7, [r8]
 800e23e:	e00f      	b.n	800e260 <_malloc_r+0xa8>
 800e240:	6822      	ldr	r2, [r4, #0]
 800e242:	1b52      	subs	r2, r2, r5
 800e244:	d420      	bmi.n	800e288 <_malloc_r+0xd0>
 800e246:	2a0b      	cmp	r2, #11
 800e248:	d917      	bls.n	800e27a <_malloc_r+0xc2>
 800e24a:	1961      	adds	r1, r4, r5
 800e24c:	42a3      	cmp	r3, r4
 800e24e:	6025      	str	r5, [r4, #0]
 800e250:	bf18      	it	ne
 800e252:	6059      	strne	r1, [r3, #4]
 800e254:	6863      	ldr	r3, [r4, #4]
 800e256:	bf08      	it	eq
 800e258:	f8c8 1000 	streq.w	r1, [r8]
 800e25c:	5162      	str	r2, [r4, r5]
 800e25e:	604b      	str	r3, [r1, #4]
 800e260:	4630      	mov	r0, r6
 800e262:	f000 f841 	bl	800e2e8 <__malloc_unlock>
 800e266:	f104 000b 	add.w	r0, r4, #11
 800e26a:	1d23      	adds	r3, r4, #4
 800e26c:	f020 0007 	bic.w	r0, r0, #7
 800e270:	1ac2      	subs	r2, r0, r3
 800e272:	bf1c      	itt	ne
 800e274:	1a1b      	subne	r3, r3, r0
 800e276:	50a3      	strne	r3, [r4, r2]
 800e278:	e7af      	b.n	800e1da <_malloc_r+0x22>
 800e27a:	6862      	ldr	r2, [r4, #4]
 800e27c:	42a3      	cmp	r3, r4
 800e27e:	bf0c      	ite	eq
 800e280:	f8c8 2000 	streq.w	r2, [r8]
 800e284:	605a      	strne	r2, [r3, #4]
 800e286:	e7eb      	b.n	800e260 <_malloc_r+0xa8>
 800e288:	4623      	mov	r3, r4
 800e28a:	6864      	ldr	r4, [r4, #4]
 800e28c:	e7ae      	b.n	800e1ec <_malloc_r+0x34>
 800e28e:	463c      	mov	r4, r7
 800e290:	687f      	ldr	r7, [r7, #4]
 800e292:	e7b6      	b.n	800e202 <_malloc_r+0x4a>
 800e294:	461a      	mov	r2, r3
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	42a3      	cmp	r3, r4
 800e29a:	d1fb      	bne.n	800e294 <_malloc_r+0xdc>
 800e29c:	2300      	movs	r3, #0
 800e29e:	6053      	str	r3, [r2, #4]
 800e2a0:	e7de      	b.n	800e260 <_malloc_r+0xa8>
 800e2a2:	230c      	movs	r3, #12
 800e2a4:	6033      	str	r3, [r6, #0]
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	f000 f81e 	bl	800e2e8 <__malloc_unlock>
 800e2ac:	e794      	b.n	800e1d8 <_malloc_r+0x20>
 800e2ae:	6005      	str	r5, [r0, #0]
 800e2b0:	e7d6      	b.n	800e260 <_malloc_r+0xa8>
 800e2b2:	bf00      	nop
 800e2b4:	20004b10 	.word	0x20004b10

0800e2b8 <__ascii_mbtowc>:
 800e2b8:	b082      	sub	sp, #8
 800e2ba:	b901      	cbnz	r1, 800e2be <__ascii_mbtowc+0x6>
 800e2bc:	a901      	add	r1, sp, #4
 800e2be:	b142      	cbz	r2, 800e2d2 <__ascii_mbtowc+0x1a>
 800e2c0:	b14b      	cbz	r3, 800e2d6 <__ascii_mbtowc+0x1e>
 800e2c2:	7813      	ldrb	r3, [r2, #0]
 800e2c4:	600b      	str	r3, [r1, #0]
 800e2c6:	7812      	ldrb	r2, [r2, #0]
 800e2c8:	1e10      	subs	r0, r2, #0
 800e2ca:	bf18      	it	ne
 800e2cc:	2001      	movne	r0, #1
 800e2ce:	b002      	add	sp, #8
 800e2d0:	4770      	bx	lr
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	e7fb      	b.n	800e2ce <__ascii_mbtowc+0x16>
 800e2d6:	f06f 0001 	mvn.w	r0, #1
 800e2da:	e7f8      	b.n	800e2ce <__ascii_mbtowc+0x16>

0800e2dc <__malloc_lock>:
 800e2dc:	4801      	ldr	r0, [pc, #4]	@ (800e2e4 <__malloc_lock+0x8>)
 800e2de:	f7ff b898 	b.w	800d412 <__retarget_lock_acquire_recursive>
 800e2e2:	bf00      	nop
 800e2e4:	20004b08 	.word	0x20004b08

0800e2e8 <__malloc_unlock>:
 800e2e8:	4801      	ldr	r0, [pc, #4]	@ (800e2f0 <__malloc_unlock+0x8>)
 800e2ea:	f7ff b893 	b.w	800d414 <__retarget_lock_release_recursive>
 800e2ee:	bf00      	nop
 800e2f0:	20004b08 	.word	0x20004b08

0800e2f4 <_Balloc>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	69c6      	ldr	r6, [r0, #28]
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	b976      	cbnz	r6, 800e31c <_Balloc+0x28>
 800e2fe:	2010      	movs	r0, #16
 800e300:	f7ff ff30 	bl	800e164 <malloc>
 800e304:	4602      	mov	r2, r0
 800e306:	61e0      	str	r0, [r4, #28]
 800e308:	b920      	cbnz	r0, 800e314 <_Balloc+0x20>
 800e30a:	4b18      	ldr	r3, [pc, #96]	@ (800e36c <_Balloc+0x78>)
 800e30c:	4818      	ldr	r0, [pc, #96]	@ (800e370 <_Balloc+0x7c>)
 800e30e:	216b      	movs	r1, #107	@ 0x6b
 800e310:	f000 ff72 	bl	800f1f8 <__assert_func>
 800e314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e318:	6006      	str	r6, [r0, #0]
 800e31a:	60c6      	str	r6, [r0, #12]
 800e31c:	69e6      	ldr	r6, [r4, #28]
 800e31e:	68f3      	ldr	r3, [r6, #12]
 800e320:	b183      	cbz	r3, 800e344 <_Balloc+0x50>
 800e322:	69e3      	ldr	r3, [r4, #28]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e32a:	b9b8      	cbnz	r0, 800e35c <_Balloc+0x68>
 800e32c:	2101      	movs	r1, #1
 800e32e:	fa01 f605 	lsl.w	r6, r1, r5
 800e332:	1d72      	adds	r2, r6, #5
 800e334:	0092      	lsls	r2, r2, #2
 800e336:	4620      	mov	r0, r4
 800e338:	f000 ff7c 	bl	800f234 <_calloc_r>
 800e33c:	b160      	cbz	r0, 800e358 <_Balloc+0x64>
 800e33e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e342:	e00e      	b.n	800e362 <_Balloc+0x6e>
 800e344:	2221      	movs	r2, #33	@ 0x21
 800e346:	2104      	movs	r1, #4
 800e348:	4620      	mov	r0, r4
 800e34a:	f000 ff73 	bl	800f234 <_calloc_r>
 800e34e:	69e3      	ldr	r3, [r4, #28]
 800e350:	60f0      	str	r0, [r6, #12]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1e4      	bne.n	800e322 <_Balloc+0x2e>
 800e358:	2000      	movs	r0, #0
 800e35a:	bd70      	pop	{r4, r5, r6, pc}
 800e35c:	6802      	ldr	r2, [r0, #0]
 800e35e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e362:	2300      	movs	r3, #0
 800e364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e368:	e7f7      	b.n	800e35a <_Balloc+0x66>
 800e36a:	bf00      	nop
 800e36c:	0800f980 	.word	0x0800f980
 800e370:	0800fa00 	.word	0x0800fa00

0800e374 <_Bfree>:
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	69c6      	ldr	r6, [r0, #28]
 800e378:	4605      	mov	r5, r0
 800e37a:	460c      	mov	r4, r1
 800e37c:	b976      	cbnz	r6, 800e39c <_Bfree+0x28>
 800e37e:	2010      	movs	r0, #16
 800e380:	f7ff fef0 	bl	800e164 <malloc>
 800e384:	4602      	mov	r2, r0
 800e386:	61e8      	str	r0, [r5, #28]
 800e388:	b920      	cbnz	r0, 800e394 <_Bfree+0x20>
 800e38a:	4b09      	ldr	r3, [pc, #36]	@ (800e3b0 <_Bfree+0x3c>)
 800e38c:	4809      	ldr	r0, [pc, #36]	@ (800e3b4 <_Bfree+0x40>)
 800e38e:	218f      	movs	r1, #143	@ 0x8f
 800e390:	f000 ff32 	bl	800f1f8 <__assert_func>
 800e394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e398:	6006      	str	r6, [r0, #0]
 800e39a:	60c6      	str	r6, [r0, #12]
 800e39c:	b13c      	cbz	r4, 800e3ae <_Bfree+0x3a>
 800e39e:	69eb      	ldr	r3, [r5, #28]
 800e3a0:	6862      	ldr	r2, [r4, #4]
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3a8:	6021      	str	r1, [r4, #0]
 800e3aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3ae:	bd70      	pop	{r4, r5, r6, pc}
 800e3b0:	0800f980 	.word	0x0800f980
 800e3b4:	0800fa00 	.word	0x0800fa00

0800e3b8 <__multadd>:
 800e3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3bc:	690d      	ldr	r5, [r1, #16]
 800e3be:	4607      	mov	r7, r0
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	461e      	mov	r6, r3
 800e3c4:	f101 0c14 	add.w	ip, r1, #20
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	f8dc 3000 	ldr.w	r3, [ip]
 800e3ce:	b299      	uxth	r1, r3
 800e3d0:	fb02 6101 	mla	r1, r2, r1, r6
 800e3d4:	0c1e      	lsrs	r6, r3, #16
 800e3d6:	0c0b      	lsrs	r3, r1, #16
 800e3d8:	fb02 3306 	mla	r3, r2, r6, r3
 800e3dc:	b289      	uxth	r1, r1
 800e3de:	3001      	adds	r0, #1
 800e3e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3e4:	4285      	cmp	r5, r0
 800e3e6:	f84c 1b04 	str.w	r1, [ip], #4
 800e3ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3ee:	dcec      	bgt.n	800e3ca <__multadd+0x12>
 800e3f0:	b30e      	cbz	r6, 800e436 <__multadd+0x7e>
 800e3f2:	68a3      	ldr	r3, [r4, #8]
 800e3f4:	42ab      	cmp	r3, r5
 800e3f6:	dc19      	bgt.n	800e42c <__multadd+0x74>
 800e3f8:	6861      	ldr	r1, [r4, #4]
 800e3fa:	4638      	mov	r0, r7
 800e3fc:	3101      	adds	r1, #1
 800e3fe:	f7ff ff79 	bl	800e2f4 <_Balloc>
 800e402:	4680      	mov	r8, r0
 800e404:	b928      	cbnz	r0, 800e412 <__multadd+0x5a>
 800e406:	4602      	mov	r2, r0
 800e408:	4b0c      	ldr	r3, [pc, #48]	@ (800e43c <__multadd+0x84>)
 800e40a:	480d      	ldr	r0, [pc, #52]	@ (800e440 <__multadd+0x88>)
 800e40c:	21ba      	movs	r1, #186	@ 0xba
 800e40e:	f000 fef3 	bl	800f1f8 <__assert_func>
 800e412:	6922      	ldr	r2, [r4, #16]
 800e414:	3202      	adds	r2, #2
 800e416:	f104 010c 	add.w	r1, r4, #12
 800e41a:	0092      	lsls	r2, r2, #2
 800e41c:	300c      	adds	r0, #12
 800e41e:	f7fe fffa 	bl	800d416 <memcpy>
 800e422:	4621      	mov	r1, r4
 800e424:	4638      	mov	r0, r7
 800e426:	f7ff ffa5 	bl	800e374 <_Bfree>
 800e42a:	4644      	mov	r4, r8
 800e42c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e430:	3501      	adds	r5, #1
 800e432:	615e      	str	r6, [r3, #20]
 800e434:	6125      	str	r5, [r4, #16]
 800e436:	4620      	mov	r0, r4
 800e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e43c:	0800f9ef 	.word	0x0800f9ef
 800e440:	0800fa00 	.word	0x0800fa00

0800e444 <__hi0bits>:
 800e444:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e448:	4603      	mov	r3, r0
 800e44a:	bf36      	itet	cc
 800e44c:	0403      	lslcc	r3, r0, #16
 800e44e:	2000      	movcs	r0, #0
 800e450:	2010      	movcc	r0, #16
 800e452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e456:	bf3c      	itt	cc
 800e458:	021b      	lslcc	r3, r3, #8
 800e45a:	3008      	addcc	r0, #8
 800e45c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e460:	bf3c      	itt	cc
 800e462:	011b      	lslcc	r3, r3, #4
 800e464:	3004      	addcc	r0, #4
 800e466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e46a:	bf3c      	itt	cc
 800e46c:	009b      	lslcc	r3, r3, #2
 800e46e:	3002      	addcc	r0, #2
 800e470:	2b00      	cmp	r3, #0
 800e472:	db05      	blt.n	800e480 <__hi0bits+0x3c>
 800e474:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e478:	f100 0001 	add.w	r0, r0, #1
 800e47c:	bf08      	it	eq
 800e47e:	2020      	moveq	r0, #32
 800e480:	4770      	bx	lr

0800e482 <__lo0bits>:
 800e482:	6803      	ldr	r3, [r0, #0]
 800e484:	4602      	mov	r2, r0
 800e486:	f013 0007 	ands.w	r0, r3, #7
 800e48a:	d00b      	beq.n	800e4a4 <__lo0bits+0x22>
 800e48c:	07d9      	lsls	r1, r3, #31
 800e48e:	d421      	bmi.n	800e4d4 <__lo0bits+0x52>
 800e490:	0798      	lsls	r0, r3, #30
 800e492:	bf49      	itett	mi
 800e494:	085b      	lsrmi	r3, r3, #1
 800e496:	089b      	lsrpl	r3, r3, #2
 800e498:	2001      	movmi	r0, #1
 800e49a:	6013      	strmi	r3, [r2, #0]
 800e49c:	bf5c      	itt	pl
 800e49e:	6013      	strpl	r3, [r2, #0]
 800e4a0:	2002      	movpl	r0, #2
 800e4a2:	4770      	bx	lr
 800e4a4:	b299      	uxth	r1, r3
 800e4a6:	b909      	cbnz	r1, 800e4ac <__lo0bits+0x2a>
 800e4a8:	0c1b      	lsrs	r3, r3, #16
 800e4aa:	2010      	movs	r0, #16
 800e4ac:	b2d9      	uxtb	r1, r3
 800e4ae:	b909      	cbnz	r1, 800e4b4 <__lo0bits+0x32>
 800e4b0:	3008      	adds	r0, #8
 800e4b2:	0a1b      	lsrs	r3, r3, #8
 800e4b4:	0719      	lsls	r1, r3, #28
 800e4b6:	bf04      	itt	eq
 800e4b8:	091b      	lsreq	r3, r3, #4
 800e4ba:	3004      	addeq	r0, #4
 800e4bc:	0799      	lsls	r1, r3, #30
 800e4be:	bf04      	itt	eq
 800e4c0:	089b      	lsreq	r3, r3, #2
 800e4c2:	3002      	addeq	r0, #2
 800e4c4:	07d9      	lsls	r1, r3, #31
 800e4c6:	d403      	bmi.n	800e4d0 <__lo0bits+0x4e>
 800e4c8:	085b      	lsrs	r3, r3, #1
 800e4ca:	f100 0001 	add.w	r0, r0, #1
 800e4ce:	d003      	beq.n	800e4d8 <__lo0bits+0x56>
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	4770      	bx	lr
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	4770      	bx	lr
 800e4d8:	2020      	movs	r0, #32
 800e4da:	4770      	bx	lr

0800e4dc <__i2b>:
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	460c      	mov	r4, r1
 800e4e0:	2101      	movs	r1, #1
 800e4e2:	f7ff ff07 	bl	800e2f4 <_Balloc>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	b928      	cbnz	r0, 800e4f6 <__i2b+0x1a>
 800e4ea:	4b05      	ldr	r3, [pc, #20]	@ (800e500 <__i2b+0x24>)
 800e4ec:	4805      	ldr	r0, [pc, #20]	@ (800e504 <__i2b+0x28>)
 800e4ee:	f240 1145 	movw	r1, #325	@ 0x145
 800e4f2:	f000 fe81 	bl	800f1f8 <__assert_func>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	6144      	str	r4, [r0, #20]
 800e4fa:	6103      	str	r3, [r0, #16]
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	bf00      	nop
 800e500:	0800f9ef 	.word	0x0800f9ef
 800e504:	0800fa00 	.word	0x0800fa00

0800e508 <__multiply>:
 800e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	4614      	mov	r4, r2
 800e50e:	690a      	ldr	r2, [r1, #16]
 800e510:	6923      	ldr	r3, [r4, #16]
 800e512:	429a      	cmp	r2, r3
 800e514:	bfa8      	it	ge
 800e516:	4623      	movge	r3, r4
 800e518:	460f      	mov	r7, r1
 800e51a:	bfa4      	itt	ge
 800e51c:	460c      	movge	r4, r1
 800e51e:	461f      	movge	r7, r3
 800e520:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e524:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e528:	68a3      	ldr	r3, [r4, #8]
 800e52a:	6861      	ldr	r1, [r4, #4]
 800e52c:	eb0a 0609 	add.w	r6, sl, r9
 800e530:	42b3      	cmp	r3, r6
 800e532:	b085      	sub	sp, #20
 800e534:	bfb8      	it	lt
 800e536:	3101      	addlt	r1, #1
 800e538:	f7ff fedc 	bl	800e2f4 <_Balloc>
 800e53c:	b930      	cbnz	r0, 800e54c <__multiply+0x44>
 800e53e:	4602      	mov	r2, r0
 800e540:	4b44      	ldr	r3, [pc, #272]	@ (800e654 <__multiply+0x14c>)
 800e542:	4845      	ldr	r0, [pc, #276]	@ (800e658 <__multiply+0x150>)
 800e544:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e548:	f000 fe56 	bl	800f1f8 <__assert_func>
 800e54c:	f100 0514 	add.w	r5, r0, #20
 800e550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e554:	462b      	mov	r3, r5
 800e556:	2200      	movs	r2, #0
 800e558:	4543      	cmp	r3, r8
 800e55a:	d321      	bcc.n	800e5a0 <__multiply+0x98>
 800e55c:	f107 0114 	add.w	r1, r7, #20
 800e560:	f104 0214 	add.w	r2, r4, #20
 800e564:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e568:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e56c:	9302      	str	r3, [sp, #8]
 800e56e:	1b13      	subs	r3, r2, r4
 800e570:	3b15      	subs	r3, #21
 800e572:	f023 0303 	bic.w	r3, r3, #3
 800e576:	3304      	adds	r3, #4
 800e578:	f104 0715 	add.w	r7, r4, #21
 800e57c:	42ba      	cmp	r2, r7
 800e57e:	bf38      	it	cc
 800e580:	2304      	movcc	r3, #4
 800e582:	9301      	str	r3, [sp, #4]
 800e584:	9b02      	ldr	r3, [sp, #8]
 800e586:	9103      	str	r1, [sp, #12]
 800e588:	428b      	cmp	r3, r1
 800e58a:	d80c      	bhi.n	800e5a6 <__multiply+0x9e>
 800e58c:	2e00      	cmp	r6, #0
 800e58e:	dd03      	ble.n	800e598 <__multiply+0x90>
 800e590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e594:	2b00      	cmp	r3, #0
 800e596:	d05b      	beq.n	800e650 <__multiply+0x148>
 800e598:	6106      	str	r6, [r0, #16]
 800e59a:	b005      	add	sp, #20
 800e59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a0:	f843 2b04 	str.w	r2, [r3], #4
 800e5a4:	e7d8      	b.n	800e558 <__multiply+0x50>
 800e5a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e5aa:	f1ba 0f00 	cmp.w	sl, #0
 800e5ae:	d024      	beq.n	800e5fa <__multiply+0xf2>
 800e5b0:	f104 0e14 	add.w	lr, r4, #20
 800e5b4:	46a9      	mov	r9, r5
 800e5b6:	f04f 0c00 	mov.w	ip, #0
 800e5ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e5be:	f8d9 3000 	ldr.w	r3, [r9]
 800e5c2:	fa1f fb87 	uxth.w	fp, r7
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e5cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e5d0:	f8d9 7000 	ldr.w	r7, [r9]
 800e5d4:	4463      	add	r3, ip
 800e5d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e5da:	fb0a c70b 	mla	r7, sl, fp, ip
 800e5de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5e8:	4572      	cmp	r2, lr
 800e5ea:	f849 3b04 	str.w	r3, [r9], #4
 800e5ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e5f2:	d8e2      	bhi.n	800e5ba <__multiply+0xb2>
 800e5f4:	9b01      	ldr	r3, [sp, #4]
 800e5f6:	f845 c003 	str.w	ip, [r5, r3]
 800e5fa:	9b03      	ldr	r3, [sp, #12]
 800e5fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e600:	3104      	adds	r1, #4
 800e602:	f1b9 0f00 	cmp.w	r9, #0
 800e606:	d021      	beq.n	800e64c <__multiply+0x144>
 800e608:	682b      	ldr	r3, [r5, #0]
 800e60a:	f104 0c14 	add.w	ip, r4, #20
 800e60e:	46ae      	mov	lr, r5
 800e610:	f04f 0a00 	mov.w	sl, #0
 800e614:	f8bc b000 	ldrh.w	fp, [ip]
 800e618:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e61c:	fb09 770b 	mla	r7, r9, fp, r7
 800e620:	4457      	add	r7, sl
 800e622:	b29b      	uxth	r3, r3
 800e624:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e628:	f84e 3b04 	str.w	r3, [lr], #4
 800e62c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e634:	f8be 3000 	ldrh.w	r3, [lr]
 800e638:	fb09 330a 	mla	r3, r9, sl, r3
 800e63c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e640:	4562      	cmp	r2, ip
 800e642:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e646:	d8e5      	bhi.n	800e614 <__multiply+0x10c>
 800e648:	9f01      	ldr	r7, [sp, #4]
 800e64a:	51eb      	str	r3, [r5, r7]
 800e64c:	3504      	adds	r5, #4
 800e64e:	e799      	b.n	800e584 <__multiply+0x7c>
 800e650:	3e01      	subs	r6, #1
 800e652:	e79b      	b.n	800e58c <__multiply+0x84>
 800e654:	0800f9ef 	.word	0x0800f9ef
 800e658:	0800fa00 	.word	0x0800fa00

0800e65c <__pow5mult>:
 800e65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e660:	4615      	mov	r5, r2
 800e662:	f012 0203 	ands.w	r2, r2, #3
 800e666:	4607      	mov	r7, r0
 800e668:	460e      	mov	r6, r1
 800e66a:	d007      	beq.n	800e67c <__pow5mult+0x20>
 800e66c:	4c25      	ldr	r4, [pc, #148]	@ (800e704 <__pow5mult+0xa8>)
 800e66e:	3a01      	subs	r2, #1
 800e670:	2300      	movs	r3, #0
 800e672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e676:	f7ff fe9f 	bl	800e3b8 <__multadd>
 800e67a:	4606      	mov	r6, r0
 800e67c:	10ad      	asrs	r5, r5, #2
 800e67e:	d03d      	beq.n	800e6fc <__pow5mult+0xa0>
 800e680:	69fc      	ldr	r4, [r7, #28]
 800e682:	b97c      	cbnz	r4, 800e6a4 <__pow5mult+0x48>
 800e684:	2010      	movs	r0, #16
 800e686:	f7ff fd6d 	bl	800e164 <malloc>
 800e68a:	4602      	mov	r2, r0
 800e68c:	61f8      	str	r0, [r7, #28]
 800e68e:	b928      	cbnz	r0, 800e69c <__pow5mult+0x40>
 800e690:	4b1d      	ldr	r3, [pc, #116]	@ (800e708 <__pow5mult+0xac>)
 800e692:	481e      	ldr	r0, [pc, #120]	@ (800e70c <__pow5mult+0xb0>)
 800e694:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e698:	f000 fdae 	bl	800f1f8 <__assert_func>
 800e69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6a0:	6004      	str	r4, [r0, #0]
 800e6a2:	60c4      	str	r4, [r0, #12]
 800e6a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6ac:	b94c      	cbnz	r4, 800e6c2 <__pow5mult+0x66>
 800e6ae:	f240 2171 	movw	r1, #625	@ 0x271
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	f7ff ff12 	bl	800e4dc <__i2b>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6be:	4604      	mov	r4, r0
 800e6c0:	6003      	str	r3, [r0, #0]
 800e6c2:	f04f 0900 	mov.w	r9, #0
 800e6c6:	07eb      	lsls	r3, r5, #31
 800e6c8:	d50a      	bpl.n	800e6e0 <__pow5mult+0x84>
 800e6ca:	4631      	mov	r1, r6
 800e6cc:	4622      	mov	r2, r4
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	f7ff ff1a 	bl	800e508 <__multiply>
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4680      	mov	r8, r0
 800e6d8:	4638      	mov	r0, r7
 800e6da:	f7ff fe4b 	bl	800e374 <_Bfree>
 800e6de:	4646      	mov	r6, r8
 800e6e0:	106d      	asrs	r5, r5, #1
 800e6e2:	d00b      	beq.n	800e6fc <__pow5mult+0xa0>
 800e6e4:	6820      	ldr	r0, [r4, #0]
 800e6e6:	b938      	cbnz	r0, 800e6f8 <__pow5mult+0x9c>
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4638      	mov	r0, r7
 800e6ee:	f7ff ff0b 	bl	800e508 <__multiply>
 800e6f2:	6020      	str	r0, [r4, #0]
 800e6f4:	f8c0 9000 	str.w	r9, [r0]
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	e7e4      	b.n	800e6c6 <__pow5mult+0x6a>
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e702:	bf00      	nop
 800e704:	0800fa5c 	.word	0x0800fa5c
 800e708:	0800f980 	.word	0x0800f980
 800e70c:	0800fa00 	.word	0x0800fa00

0800e710 <__lshift>:
 800e710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e714:	460c      	mov	r4, r1
 800e716:	6849      	ldr	r1, [r1, #4]
 800e718:	6923      	ldr	r3, [r4, #16]
 800e71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e71e:	68a3      	ldr	r3, [r4, #8]
 800e720:	4607      	mov	r7, r0
 800e722:	4691      	mov	r9, r2
 800e724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e728:	f108 0601 	add.w	r6, r8, #1
 800e72c:	42b3      	cmp	r3, r6
 800e72e:	db0b      	blt.n	800e748 <__lshift+0x38>
 800e730:	4638      	mov	r0, r7
 800e732:	f7ff fddf 	bl	800e2f4 <_Balloc>
 800e736:	4605      	mov	r5, r0
 800e738:	b948      	cbnz	r0, 800e74e <__lshift+0x3e>
 800e73a:	4602      	mov	r2, r0
 800e73c:	4b28      	ldr	r3, [pc, #160]	@ (800e7e0 <__lshift+0xd0>)
 800e73e:	4829      	ldr	r0, [pc, #164]	@ (800e7e4 <__lshift+0xd4>)
 800e740:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e744:	f000 fd58 	bl	800f1f8 <__assert_func>
 800e748:	3101      	adds	r1, #1
 800e74a:	005b      	lsls	r3, r3, #1
 800e74c:	e7ee      	b.n	800e72c <__lshift+0x1c>
 800e74e:	2300      	movs	r3, #0
 800e750:	f100 0114 	add.w	r1, r0, #20
 800e754:	f100 0210 	add.w	r2, r0, #16
 800e758:	4618      	mov	r0, r3
 800e75a:	4553      	cmp	r3, sl
 800e75c:	db33      	blt.n	800e7c6 <__lshift+0xb6>
 800e75e:	6920      	ldr	r0, [r4, #16]
 800e760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e764:	f104 0314 	add.w	r3, r4, #20
 800e768:	f019 091f 	ands.w	r9, r9, #31
 800e76c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e770:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e774:	d02b      	beq.n	800e7ce <__lshift+0xbe>
 800e776:	f1c9 0e20 	rsb	lr, r9, #32
 800e77a:	468a      	mov	sl, r1
 800e77c:	2200      	movs	r2, #0
 800e77e:	6818      	ldr	r0, [r3, #0]
 800e780:	fa00 f009 	lsl.w	r0, r0, r9
 800e784:	4310      	orrs	r0, r2
 800e786:	f84a 0b04 	str.w	r0, [sl], #4
 800e78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e78e:	459c      	cmp	ip, r3
 800e790:	fa22 f20e 	lsr.w	r2, r2, lr
 800e794:	d8f3      	bhi.n	800e77e <__lshift+0x6e>
 800e796:	ebac 0304 	sub.w	r3, ip, r4
 800e79a:	3b15      	subs	r3, #21
 800e79c:	f023 0303 	bic.w	r3, r3, #3
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	f104 0015 	add.w	r0, r4, #21
 800e7a6:	4584      	cmp	ip, r0
 800e7a8:	bf38      	it	cc
 800e7aa:	2304      	movcc	r3, #4
 800e7ac:	50ca      	str	r2, [r1, r3]
 800e7ae:	b10a      	cbz	r2, 800e7b4 <__lshift+0xa4>
 800e7b0:	f108 0602 	add.w	r6, r8, #2
 800e7b4:	3e01      	subs	r6, #1
 800e7b6:	4638      	mov	r0, r7
 800e7b8:	612e      	str	r6, [r5, #16]
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	f7ff fdda 	bl	800e374 <_Bfree>
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	e7c5      	b.n	800e75a <__lshift+0x4a>
 800e7ce:	3904      	subs	r1, #4
 800e7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7d8:	459c      	cmp	ip, r3
 800e7da:	d8f9      	bhi.n	800e7d0 <__lshift+0xc0>
 800e7dc:	e7ea      	b.n	800e7b4 <__lshift+0xa4>
 800e7de:	bf00      	nop
 800e7e0:	0800f9ef 	.word	0x0800f9ef
 800e7e4:	0800fa00 	.word	0x0800fa00

0800e7e8 <__mcmp>:
 800e7e8:	690a      	ldr	r2, [r1, #16]
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	6900      	ldr	r0, [r0, #16]
 800e7ee:	1a80      	subs	r0, r0, r2
 800e7f0:	b530      	push	{r4, r5, lr}
 800e7f2:	d10e      	bne.n	800e812 <__mcmp+0x2a>
 800e7f4:	3314      	adds	r3, #20
 800e7f6:	3114      	adds	r1, #20
 800e7f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e7fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e800:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e804:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e808:	4295      	cmp	r5, r2
 800e80a:	d003      	beq.n	800e814 <__mcmp+0x2c>
 800e80c:	d205      	bcs.n	800e81a <__mcmp+0x32>
 800e80e:	f04f 30ff 	mov.w	r0, #4294967295
 800e812:	bd30      	pop	{r4, r5, pc}
 800e814:	42a3      	cmp	r3, r4
 800e816:	d3f3      	bcc.n	800e800 <__mcmp+0x18>
 800e818:	e7fb      	b.n	800e812 <__mcmp+0x2a>
 800e81a:	2001      	movs	r0, #1
 800e81c:	e7f9      	b.n	800e812 <__mcmp+0x2a>
	...

0800e820 <__mdiff>:
 800e820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e824:	4689      	mov	r9, r1
 800e826:	4606      	mov	r6, r0
 800e828:	4611      	mov	r1, r2
 800e82a:	4648      	mov	r0, r9
 800e82c:	4614      	mov	r4, r2
 800e82e:	f7ff ffdb 	bl	800e7e8 <__mcmp>
 800e832:	1e05      	subs	r5, r0, #0
 800e834:	d112      	bne.n	800e85c <__mdiff+0x3c>
 800e836:	4629      	mov	r1, r5
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff fd5b 	bl	800e2f4 <_Balloc>
 800e83e:	4602      	mov	r2, r0
 800e840:	b928      	cbnz	r0, 800e84e <__mdiff+0x2e>
 800e842:	4b3f      	ldr	r3, [pc, #252]	@ (800e940 <__mdiff+0x120>)
 800e844:	f240 2137 	movw	r1, #567	@ 0x237
 800e848:	483e      	ldr	r0, [pc, #248]	@ (800e944 <__mdiff+0x124>)
 800e84a:	f000 fcd5 	bl	800f1f8 <__assert_func>
 800e84e:	2301      	movs	r3, #1
 800e850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e854:	4610      	mov	r0, r2
 800e856:	b003      	add	sp, #12
 800e858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85c:	bfbc      	itt	lt
 800e85e:	464b      	movlt	r3, r9
 800e860:	46a1      	movlt	r9, r4
 800e862:	4630      	mov	r0, r6
 800e864:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e868:	bfba      	itte	lt
 800e86a:	461c      	movlt	r4, r3
 800e86c:	2501      	movlt	r5, #1
 800e86e:	2500      	movge	r5, #0
 800e870:	f7ff fd40 	bl	800e2f4 <_Balloc>
 800e874:	4602      	mov	r2, r0
 800e876:	b918      	cbnz	r0, 800e880 <__mdiff+0x60>
 800e878:	4b31      	ldr	r3, [pc, #196]	@ (800e940 <__mdiff+0x120>)
 800e87a:	f240 2145 	movw	r1, #581	@ 0x245
 800e87e:	e7e3      	b.n	800e848 <__mdiff+0x28>
 800e880:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e884:	6926      	ldr	r6, [r4, #16]
 800e886:	60c5      	str	r5, [r0, #12]
 800e888:	f109 0310 	add.w	r3, r9, #16
 800e88c:	f109 0514 	add.w	r5, r9, #20
 800e890:	f104 0e14 	add.w	lr, r4, #20
 800e894:	f100 0b14 	add.w	fp, r0, #20
 800e898:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e89c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	46d9      	mov	r9, fp
 800e8a4:	f04f 0c00 	mov.w	ip, #0
 800e8a8:	9b01      	ldr	r3, [sp, #4]
 800e8aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e8ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	fa1f f38a 	uxth.w	r3, sl
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	b283      	uxth	r3, r0
 800e8bc:	1acb      	subs	r3, r1, r3
 800e8be:	0c00      	lsrs	r0, r0, #16
 800e8c0:	4463      	add	r3, ip
 800e8c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e8c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e8d0:	4576      	cmp	r6, lr
 800e8d2:	f849 3b04 	str.w	r3, [r9], #4
 800e8d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8da:	d8e5      	bhi.n	800e8a8 <__mdiff+0x88>
 800e8dc:	1b33      	subs	r3, r6, r4
 800e8de:	3b15      	subs	r3, #21
 800e8e0:	f023 0303 	bic.w	r3, r3, #3
 800e8e4:	3415      	adds	r4, #21
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	42a6      	cmp	r6, r4
 800e8ea:	bf38      	it	cc
 800e8ec:	2304      	movcc	r3, #4
 800e8ee:	441d      	add	r5, r3
 800e8f0:	445b      	add	r3, fp
 800e8f2:	461e      	mov	r6, r3
 800e8f4:	462c      	mov	r4, r5
 800e8f6:	4544      	cmp	r4, r8
 800e8f8:	d30e      	bcc.n	800e918 <__mdiff+0xf8>
 800e8fa:	f108 0103 	add.w	r1, r8, #3
 800e8fe:	1b49      	subs	r1, r1, r5
 800e900:	f021 0103 	bic.w	r1, r1, #3
 800e904:	3d03      	subs	r5, #3
 800e906:	45a8      	cmp	r8, r5
 800e908:	bf38      	it	cc
 800e90a:	2100      	movcc	r1, #0
 800e90c:	440b      	add	r3, r1
 800e90e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e912:	b191      	cbz	r1, 800e93a <__mdiff+0x11a>
 800e914:	6117      	str	r7, [r2, #16]
 800e916:	e79d      	b.n	800e854 <__mdiff+0x34>
 800e918:	f854 1b04 	ldr.w	r1, [r4], #4
 800e91c:	46e6      	mov	lr, ip
 800e91e:	0c08      	lsrs	r0, r1, #16
 800e920:	fa1c fc81 	uxtah	ip, ip, r1
 800e924:	4471      	add	r1, lr
 800e926:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e92a:	b289      	uxth	r1, r1
 800e92c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e930:	f846 1b04 	str.w	r1, [r6], #4
 800e934:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e938:	e7dd      	b.n	800e8f6 <__mdiff+0xd6>
 800e93a:	3f01      	subs	r7, #1
 800e93c:	e7e7      	b.n	800e90e <__mdiff+0xee>
 800e93e:	bf00      	nop
 800e940:	0800f9ef 	.word	0x0800f9ef
 800e944:	0800fa00 	.word	0x0800fa00

0800e948 <__d2b>:
 800e948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e94c:	460f      	mov	r7, r1
 800e94e:	2101      	movs	r1, #1
 800e950:	ec59 8b10 	vmov	r8, r9, d0
 800e954:	4616      	mov	r6, r2
 800e956:	f7ff fccd 	bl	800e2f4 <_Balloc>
 800e95a:	4604      	mov	r4, r0
 800e95c:	b930      	cbnz	r0, 800e96c <__d2b+0x24>
 800e95e:	4602      	mov	r2, r0
 800e960:	4b23      	ldr	r3, [pc, #140]	@ (800e9f0 <__d2b+0xa8>)
 800e962:	4824      	ldr	r0, [pc, #144]	@ (800e9f4 <__d2b+0xac>)
 800e964:	f240 310f 	movw	r1, #783	@ 0x30f
 800e968:	f000 fc46 	bl	800f1f8 <__assert_func>
 800e96c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e974:	b10d      	cbz	r5, 800e97a <__d2b+0x32>
 800e976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e97a:	9301      	str	r3, [sp, #4]
 800e97c:	f1b8 0300 	subs.w	r3, r8, #0
 800e980:	d023      	beq.n	800e9ca <__d2b+0x82>
 800e982:	4668      	mov	r0, sp
 800e984:	9300      	str	r3, [sp, #0]
 800e986:	f7ff fd7c 	bl	800e482 <__lo0bits>
 800e98a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e98e:	b1d0      	cbz	r0, 800e9c6 <__d2b+0x7e>
 800e990:	f1c0 0320 	rsb	r3, r0, #32
 800e994:	fa02 f303 	lsl.w	r3, r2, r3
 800e998:	430b      	orrs	r3, r1
 800e99a:	40c2      	lsrs	r2, r0
 800e99c:	6163      	str	r3, [r4, #20]
 800e99e:	9201      	str	r2, [sp, #4]
 800e9a0:	9b01      	ldr	r3, [sp, #4]
 800e9a2:	61a3      	str	r3, [r4, #24]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	bf0c      	ite	eq
 800e9a8:	2201      	moveq	r2, #1
 800e9aa:	2202      	movne	r2, #2
 800e9ac:	6122      	str	r2, [r4, #16]
 800e9ae:	b1a5      	cbz	r5, 800e9da <__d2b+0x92>
 800e9b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e9b4:	4405      	add	r5, r0
 800e9b6:	603d      	str	r5, [r7, #0]
 800e9b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e9bc:	6030      	str	r0, [r6, #0]
 800e9be:	4620      	mov	r0, r4
 800e9c0:	b003      	add	sp, #12
 800e9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9c6:	6161      	str	r1, [r4, #20]
 800e9c8:	e7ea      	b.n	800e9a0 <__d2b+0x58>
 800e9ca:	a801      	add	r0, sp, #4
 800e9cc:	f7ff fd59 	bl	800e482 <__lo0bits>
 800e9d0:	9b01      	ldr	r3, [sp, #4]
 800e9d2:	6163      	str	r3, [r4, #20]
 800e9d4:	3020      	adds	r0, #32
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	e7e8      	b.n	800e9ac <__d2b+0x64>
 800e9da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e9e2:	6038      	str	r0, [r7, #0]
 800e9e4:	6918      	ldr	r0, [r3, #16]
 800e9e6:	f7ff fd2d 	bl	800e444 <__hi0bits>
 800e9ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9ee:	e7e5      	b.n	800e9bc <__d2b+0x74>
 800e9f0:	0800f9ef 	.word	0x0800f9ef
 800e9f4:	0800fa00 	.word	0x0800fa00

0800e9f8 <__ascii_wctomb>:
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	4608      	mov	r0, r1
 800e9fc:	b141      	cbz	r1, 800ea10 <__ascii_wctomb+0x18>
 800e9fe:	2aff      	cmp	r2, #255	@ 0xff
 800ea00:	d904      	bls.n	800ea0c <__ascii_wctomb+0x14>
 800ea02:	228a      	movs	r2, #138	@ 0x8a
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0a:	4770      	bx	lr
 800ea0c:	700a      	strb	r2, [r1, #0]
 800ea0e:	2001      	movs	r0, #1
 800ea10:	4770      	bx	lr

0800ea12 <__ssputs_r>:
 800ea12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea16:	688e      	ldr	r6, [r1, #8]
 800ea18:	461f      	mov	r7, r3
 800ea1a:	42be      	cmp	r6, r7
 800ea1c:	680b      	ldr	r3, [r1, #0]
 800ea1e:	4682      	mov	sl, r0
 800ea20:	460c      	mov	r4, r1
 800ea22:	4690      	mov	r8, r2
 800ea24:	d82d      	bhi.n	800ea82 <__ssputs_r+0x70>
 800ea26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ea2e:	d026      	beq.n	800ea7e <__ssputs_r+0x6c>
 800ea30:	6965      	ldr	r5, [r4, #20]
 800ea32:	6909      	ldr	r1, [r1, #16]
 800ea34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea38:	eba3 0901 	sub.w	r9, r3, r1
 800ea3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea40:	1c7b      	adds	r3, r7, #1
 800ea42:	444b      	add	r3, r9
 800ea44:	106d      	asrs	r5, r5, #1
 800ea46:	429d      	cmp	r5, r3
 800ea48:	bf38      	it	cc
 800ea4a:	461d      	movcc	r5, r3
 800ea4c:	0553      	lsls	r3, r2, #21
 800ea4e:	d527      	bpl.n	800eaa0 <__ssputs_r+0x8e>
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7ff fbb1 	bl	800e1b8 <_malloc_r>
 800ea56:	4606      	mov	r6, r0
 800ea58:	b360      	cbz	r0, 800eab4 <__ssputs_r+0xa2>
 800ea5a:	6921      	ldr	r1, [r4, #16]
 800ea5c:	464a      	mov	r2, r9
 800ea5e:	f7fe fcda 	bl	800d416 <memcpy>
 800ea62:	89a3      	ldrh	r3, [r4, #12]
 800ea64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea6c:	81a3      	strh	r3, [r4, #12]
 800ea6e:	6126      	str	r6, [r4, #16]
 800ea70:	6165      	str	r5, [r4, #20]
 800ea72:	444e      	add	r6, r9
 800ea74:	eba5 0509 	sub.w	r5, r5, r9
 800ea78:	6026      	str	r6, [r4, #0]
 800ea7a:	60a5      	str	r5, [r4, #8]
 800ea7c:	463e      	mov	r6, r7
 800ea7e:	42be      	cmp	r6, r7
 800ea80:	d900      	bls.n	800ea84 <__ssputs_r+0x72>
 800ea82:	463e      	mov	r6, r7
 800ea84:	6820      	ldr	r0, [r4, #0]
 800ea86:	4632      	mov	r2, r6
 800ea88:	4641      	mov	r1, r8
 800ea8a:	f000 fb69 	bl	800f160 <memmove>
 800ea8e:	68a3      	ldr	r3, [r4, #8]
 800ea90:	1b9b      	subs	r3, r3, r6
 800ea92:	60a3      	str	r3, [r4, #8]
 800ea94:	6823      	ldr	r3, [r4, #0]
 800ea96:	4433      	add	r3, r6
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaa0:	462a      	mov	r2, r5
 800eaa2:	f000 fbdb 	bl	800f25c <_realloc_r>
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	d1e0      	bne.n	800ea6e <__ssputs_r+0x5c>
 800eaac:	6921      	ldr	r1, [r4, #16]
 800eaae:	4650      	mov	r0, sl
 800eab0:	f7ff fb0e 	bl	800e0d0 <_free_r>
 800eab4:	230c      	movs	r3, #12
 800eab6:	f8ca 3000 	str.w	r3, [sl]
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eac0:	81a3      	strh	r3, [r4, #12]
 800eac2:	f04f 30ff 	mov.w	r0, #4294967295
 800eac6:	e7e9      	b.n	800ea9c <__ssputs_r+0x8a>

0800eac8 <_svfiprintf_r>:
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	4698      	mov	r8, r3
 800eace:	898b      	ldrh	r3, [r1, #12]
 800ead0:	061b      	lsls	r3, r3, #24
 800ead2:	b09d      	sub	sp, #116	@ 0x74
 800ead4:	4607      	mov	r7, r0
 800ead6:	460d      	mov	r5, r1
 800ead8:	4614      	mov	r4, r2
 800eada:	d510      	bpl.n	800eafe <_svfiprintf_r+0x36>
 800eadc:	690b      	ldr	r3, [r1, #16]
 800eade:	b973      	cbnz	r3, 800eafe <_svfiprintf_r+0x36>
 800eae0:	2140      	movs	r1, #64	@ 0x40
 800eae2:	f7ff fb69 	bl	800e1b8 <_malloc_r>
 800eae6:	6028      	str	r0, [r5, #0]
 800eae8:	6128      	str	r0, [r5, #16]
 800eaea:	b930      	cbnz	r0, 800eafa <_svfiprintf_r+0x32>
 800eaec:	230c      	movs	r3, #12
 800eaee:	603b      	str	r3, [r7, #0]
 800eaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf4:	b01d      	add	sp, #116	@ 0x74
 800eaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafa:	2340      	movs	r3, #64	@ 0x40
 800eafc:	616b      	str	r3, [r5, #20]
 800eafe:	2300      	movs	r3, #0
 800eb00:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb02:	2320      	movs	r3, #32
 800eb04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb08:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb0c:	2330      	movs	r3, #48	@ 0x30
 800eb0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ecac <_svfiprintf_r+0x1e4>
 800eb12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eb16:	f04f 0901 	mov.w	r9, #1
 800eb1a:	4623      	mov	r3, r4
 800eb1c:	469a      	mov	sl, r3
 800eb1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb22:	b10a      	cbz	r2, 800eb28 <_svfiprintf_r+0x60>
 800eb24:	2a25      	cmp	r2, #37	@ 0x25
 800eb26:	d1f9      	bne.n	800eb1c <_svfiprintf_r+0x54>
 800eb28:	ebba 0b04 	subs.w	fp, sl, r4
 800eb2c:	d00b      	beq.n	800eb46 <_svfiprintf_r+0x7e>
 800eb2e:	465b      	mov	r3, fp
 800eb30:	4622      	mov	r2, r4
 800eb32:	4629      	mov	r1, r5
 800eb34:	4638      	mov	r0, r7
 800eb36:	f7ff ff6c 	bl	800ea12 <__ssputs_r>
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	f000 80a7 	beq.w	800ec8e <_svfiprintf_r+0x1c6>
 800eb40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb42:	445a      	add	r2, fp
 800eb44:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb46:	f89a 3000 	ldrb.w	r3, [sl]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f000 809f 	beq.w	800ec8e <_svfiprintf_r+0x1c6>
 800eb50:	2300      	movs	r3, #0
 800eb52:	f04f 32ff 	mov.w	r2, #4294967295
 800eb56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb5a:	f10a 0a01 	add.w	sl, sl, #1
 800eb5e:	9304      	str	r3, [sp, #16]
 800eb60:	9307      	str	r3, [sp, #28]
 800eb62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb66:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb68:	4654      	mov	r4, sl
 800eb6a:	2205      	movs	r2, #5
 800eb6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb70:	484e      	ldr	r0, [pc, #312]	@ (800ecac <_svfiprintf_r+0x1e4>)
 800eb72:	f7f1 fb05 	bl	8000180 <memchr>
 800eb76:	9a04      	ldr	r2, [sp, #16]
 800eb78:	b9d8      	cbnz	r0, 800ebb2 <_svfiprintf_r+0xea>
 800eb7a:	06d0      	lsls	r0, r2, #27
 800eb7c:	bf44      	itt	mi
 800eb7e:	2320      	movmi	r3, #32
 800eb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb84:	0711      	lsls	r1, r2, #28
 800eb86:	bf44      	itt	mi
 800eb88:	232b      	movmi	r3, #43	@ 0x2b
 800eb8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb8e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb92:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb94:	d015      	beq.n	800ebc2 <_svfiprintf_r+0xfa>
 800eb96:	9a07      	ldr	r2, [sp, #28]
 800eb98:	4654      	mov	r4, sl
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	f04f 0c0a 	mov.w	ip, #10
 800eba0:	4621      	mov	r1, r4
 800eba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eba6:	3b30      	subs	r3, #48	@ 0x30
 800eba8:	2b09      	cmp	r3, #9
 800ebaa:	d94b      	bls.n	800ec44 <_svfiprintf_r+0x17c>
 800ebac:	b1b0      	cbz	r0, 800ebdc <_svfiprintf_r+0x114>
 800ebae:	9207      	str	r2, [sp, #28]
 800ebb0:	e014      	b.n	800ebdc <_svfiprintf_r+0x114>
 800ebb2:	eba0 0308 	sub.w	r3, r0, r8
 800ebb6:	fa09 f303 	lsl.w	r3, r9, r3
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	9304      	str	r3, [sp, #16]
 800ebbe:	46a2      	mov	sl, r4
 800ebc0:	e7d2      	b.n	800eb68 <_svfiprintf_r+0xa0>
 800ebc2:	9b03      	ldr	r3, [sp, #12]
 800ebc4:	1d19      	adds	r1, r3, #4
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	9103      	str	r1, [sp, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	bfbb      	ittet	lt
 800ebce:	425b      	neglt	r3, r3
 800ebd0:	f042 0202 	orrlt.w	r2, r2, #2
 800ebd4:	9307      	strge	r3, [sp, #28]
 800ebd6:	9307      	strlt	r3, [sp, #28]
 800ebd8:	bfb8      	it	lt
 800ebda:	9204      	strlt	r2, [sp, #16]
 800ebdc:	7823      	ldrb	r3, [r4, #0]
 800ebde:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebe0:	d10a      	bne.n	800ebf8 <_svfiprintf_r+0x130>
 800ebe2:	7863      	ldrb	r3, [r4, #1]
 800ebe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebe6:	d132      	bne.n	800ec4e <_svfiprintf_r+0x186>
 800ebe8:	9b03      	ldr	r3, [sp, #12]
 800ebea:	1d1a      	adds	r2, r3, #4
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	9203      	str	r2, [sp, #12]
 800ebf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebf4:	3402      	adds	r4, #2
 800ebf6:	9305      	str	r3, [sp, #20]
 800ebf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ecbc <_svfiprintf_r+0x1f4>
 800ebfc:	7821      	ldrb	r1, [r4, #0]
 800ebfe:	2203      	movs	r2, #3
 800ec00:	4650      	mov	r0, sl
 800ec02:	f7f1 fabd 	bl	8000180 <memchr>
 800ec06:	b138      	cbz	r0, 800ec18 <_svfiprintf_r+0x150>
 800ec08:	9b04      	ldr	r3, [sp, #16]
 800ec0a:	eba0 000a 	sub.w	r0, r0, sl
 800ec0e:	2240      	movs	r2, #64	@ 0x40
 800ec10:	4082      	lsls	r2, r0
 800ec12:	4313      	orrs	r3, r2
 800ec14:	3401      	adds	r4, #1
 800ec16:	9304      	str	r3, [sp, #16]
 800ec18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec1c:	4824      	ldr	r0, [pc, #144]	@ (800ecb0 <_svfiprintf_r+0x1e8>)
 800ec1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec22:	2206      	movs	r2, #6
 800ec24:	f7f1 faac 	bl	8000180 <memchr>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d036      	beq.n	800ec9a <_svfiprintf_r+0x1d2>
 800ec2c:	4b21      	ldr	r3, [pc, #132]	@ (800ecb4 <_svfiprintf_r+0x1ec>)
 800ec2e:	bb1b      	cbnz	r3, 800ec78 <_svfiprintf_r+0x1b0>
 800ec30:	9b03      	ldr	r3, [sp, #12]
 800ec32:	3307      	adds	r3, #7
 800ec34:	f023 0307 	bic.w	r3, r3, #7
 800ec38:	3308      	adds	r3, #8
 800ec3a:	9303      	str	r3, [sp, #12]
 800ec3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec3e:	4433      	add	r3, r6
 800ec40:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec42:	e76a      	b.n	800eb1a <_svfiprintf_r+0x52>
 800ec44:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec48:	460c      	mov	r4, r1
 800ec4a:	2001      	movs	r0, #1
 800ec4c:	e7a8      	b.n	800eba0 <_svfiprintf_r+0xd8>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	3401      	adds	r4, #1
 800ec52:	9305      	str	r3, [sp, #20]
 800ec54:	4619      	mov	r1, r3
 800ec56:	f04f 0c0a 	mov.w	ip, #10
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec60:	3a30      	subs	r2, #48	@ 0x30
 800ec62:	2a09      	cmp	r2, #9
 800ec64:	d903      	bls.n	800ec6e <_svfiprintf_r+0x1a6>
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d0c6      	beq.n	800ebf8 <_svfiprintf_r+0x130>
 800ec6a:	9105      	str	r1, [sp, #20]
 800ec6c:	e7c4      	b.n	800ebf8 <_svfiprintf_r+0x130>
 800ec6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec72:	4604      	mov	r4, r0
 800ec74:	2301      	movs	r3, #1
 800ec76:	e7f0      	b.n	800ec5a <_svfiprintf_r+0x192>
 800ec78:	ab03      	add	r3, sp, #12
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	462a      	mov	r2, r5
 800ec7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ecb8 <_svfiprintf_r+0x1f0>)
 800ec80:	a904      	add	r1, sp, #16
 800ec82:	4638      	mov	r0, r7
 800ec84:	f7fd fcf8 	bl	800c678 <_printf_float>
 800ec88:	1c42      	adds	r2, r0, #1
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	d1d6      	bne.n	800ec3c <_svfiprintf_r+0x174>
 800ec8e:	89ab      	ldrh	r3, [r5, #12]
 800ec90:	065b      	lsls	r3, r3, #25
 800ec92:	f53f af2d 	bmi.w	800eaf0 <_svfiprintf_r+0x28>
 800ec96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec98:	e72c      	b.n	800eaf4 <_svfiprintf_r+0x2c>
 800ec9a:	ab03      	add	r3, sp, #12
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	462a      	mov	r2, r5
 800eca0:	4b05      	ldr	r3, [pc, #20]	@ (800ecb8 <_svfiprintf_r+0x1f0>)
 800eca2:	a904      	add	r1, sp, #16
 800eca4:	4638      	mov	r0, r7
 800eca6:	f7fd ff7f 	bl	800cba8 <_printf_i>
 800ecaa:	e7ed      	b.n	800ec88 <_svfiprintf_r+0x1c0>
 800ecac:	0800fb58 	.word	0x0800fb58
 800ecb0:	0800fb62 	.word	0x0800fb62
 800ecb4:	0800c679 	.word	0x0800c679
 800ecb8:	0800ea13 	.word	0x0800ea13
 800ecbc:	0800fb5e 	.word	0x0800fb5e

0800ecc0 <__sfputc_r>:
 800ecc0:	6893      	ldr	r3, [r2, #8]
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	b410      	push	{r4}
 800ecc8:	6093      	str	r3, [r2, #8]
 800ecca:	da08      	bge.n	800ecde <__sfputc_r+0x1e>
 800eccc:	6994      	ldr	r4, [r2, #24]
 800ecce:	42a3      	cmp	r3, r4
 800ecd0:	db01      	blt.n	800ecd6 <__sfputc_r+0x16>
 800ecd2:	290a      	cmp	r1, #10
 800ecd4:	d103      	bne.n	800ecde <__sfputc_r+0x1e>
 800ecd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecda:	f7fe ba33 	b.w	800d144 <__swbuf_r>
 800ecde:	6813      	ldr	r3, [r2, #0]
 800ece0:	1c58      	adds	r0, r3, #1
 800ece2:	6010      	str	r0, [r2, #0]
 800ece4:	7019      	strb	r1, [r3, #0]
 800ece6:	4608      	mov	r0, r1
 800ece8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <__sfputs_r>:
 800ecee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	4614      	mov	r4, r2
 800ecf6:	18d5      	adds	r5, r2, r3
 800ecf8:	42ac      	cmp	r4, r5
 800ecfa:	d101      	bne.n	800ed00 <__sfputs_r+0x12>
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	e007      	b.n	800ed10 <__sfputs_r+0x22>
 800ed00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed04:	463a      	mov	r2, r7
 800ed06:	4630      	mov	r0, r6
 800ed08:	f7ff ffda 	bl	800ecc0 <__sfputc_r>
 800ed0c:	1c43      	adds	r3, r0, #1
 800ed0e:	d1f3      	bne.n	800ecf8 <__sfputs_r+0xa>
 800ed10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed14 <_vfiprintf_r>:
 800ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed18:	460d      	mov	r5, r1
 800ed1a:	b09d      	sub	sp, #116	@ 0x74
 800ed1c:	4614      	mov	r4, r2
 800ed1e:	4698      	mov	r8, r3
 800ed20:	4606      	mov	r6, r0
 800ed22:	b118      	cbz	r0, 800ed2c <_vfiprintf_r+0x18>
 800ed24:	6a03      	ldr	r3, [r0, #32]
 800ed26:	b90b      	cbnz	r3, 800ed2c <_vfiprintf_r+0x18>
 800ed28:	f7fe f8ea 	bl	800cf00 <__sinit>
 800ed2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed2e:	07d9      	lsls	r1, r3, #31
 800ed30:	d405      	bmi.n	800ed3e <_vfiprintf_r+0x2a>
 800ed32:	89ab      	ldrh	r3, [r5, #12]
 800ed34:	059a      	lsls	r2, r3, #22
 800ed36:	d402      	bmi.n	800ed3e <_vfiprintf_r+0x2a>
 800ed38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed3a:	f7fe fb6a 	bl	800d412 <__retarget_lock_acquire_recursive>
 800ed3e:	89ab      	ldrh	r3, [r5, #12]
 800ed40:	071b      	lsls	r3, r3, #28
 800ed42:	d501      	bpl.n	800ed48 <_vfiprintf_r+0x34>
 800ed44:	692b      	ldr	r3, [r5, #16]
 800ed46:	b99b      	cbnz	r3, 800ed70 <_vfiprintf_r+0x5c>
 800ed48:	4629      	mov	r1, r5
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f7fe fa38 	bl	800d1c0 <__swsetup_r>
 800ed50:	b170      	cbz	r0, 800ed70 <_vfiprintf_r+0x5c>
 800ed52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed54:	07dc      	lsls	r4, r3, #31
 800ed56:	d504      	bpl.n	800ed62 <_vfiprintf_r+0x4e>
 800ed58:	f04f 30ff 	mov.w	r0, #4294967295
 800ed5c:	b01d      	add	sp, #116	@ 0x74
 800ed5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed62:	89ab      	ldrh	r3, [r5, #12]
 800ed64:	0598      	lsls	r0, r3, #22
 800ed66:	d4f7      	bmi.n	800ed58 <_vfiprintf_r+0x44>
 800ed68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed6a:	f7fe fb53 	bl	800d414 <__retarget_lock_release_recursive>
 800ed6e:	e7f3      	b.n	800ed58 <_vfiprintf_r+0x44>
 800ed70:	2300      	movs	r3, #0
 800ed72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed74:	2320      	movs	r3, #32
 800ed76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed7e:	2330      	movs	r3, #48	@ 0x30
 800ed80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef30 <_vfiprintf_r+0x21c>
 800ed84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed88:	f04f 0901 	mov.w	r9, #1
 800ed8c:	4623      	mov	r3, r4
 800ed8e:	469a      	mov	sl, r3
 800ed90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed94:	b10a      	cbz	r2, 800ed9a <_vfiprintf_r+0x86>
 800ed96:	2a25      	cmp	r2, #37	@ 0x25
 800ed98:	d1f9      	bne.n	800ed8e <_vfiprintf_r+0x7a>
 800ed9a:	ebba 0b04 	subs.w	fp, sl, r4
 800ed9e:	d00b      	beq.n	800edb8 <_vfiprintf_r+0xa4>
 800eda0:	465b      	mov	r3, fp
 800eda2:	4622      	mov	r2, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	4630      	mov	r0, r6
 800eda8:	f7ff ffa1 	bl	800ecee <__sfputs_r>
 800edac:	3001      	adds	r0, #1
 800edae:	f000 80a7 	beq.w	800ef00 <_vfiprintf_r+0x1ec>
 800edb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edb4:	445a      	add	r2, fp
 800edb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800edb8:	f89a 3000 	ldrb.w	r3, [sl]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 809f 	beq.w	800ef00 <_vfiprintf_r+0x1ec>
 800edc2:	2300      	movs	r3, #0
 800edc4:	f04f 32ff 	mov.w	r2, #4294967295
 800edc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edcc:	f10a 0a01 	add.w	sl, sl, #1
 800edd0:	9304      	str	r3, [sp, #16]
 800edd2:	9307      	str	r3, [sp, #28]
 800edd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800edd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800edda:	4654      	mov	r4, sl
 800eddc:	2205      	movs	r2, #5
 800edde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ede2:	4853      	ldr	r0, [pc, #332]	@ (800ef30 <_vfiprintf_r+0x21c>)
 800ede4:	f7f1 f9cc 	bl	8000180 <memchr>
 800ede8:	9a04      	ldr	r2, [sp, #16]
 800edea:	b9d8      	cbnz	r0, 800ee24 <_vfiprintf_r+0x110>
 800edec:	06d1      	lsls	r1, r2, #27
 800edee:	bf44      	itt	mi
 800edf0:	2320      	movmi	r3, #32
 800edf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edf6:	0713      	lsls	r3, r2, #28
 800edf8:	bf44      	itt	mi
 800edfa:	232b      	movmi	r3, #43	@ 0x2b
 800edfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee00:	f89a 3000 	ldrb.w	r3, [sl]
 800ee04:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee06:	d015      	beq.n	800ee34 <_vfiprintf_r+0x120>
 800ee08:	9a07      	ldr	r2, [sp, #28]
 800ee0a:	4654      	mov	r4, sl
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	f04f 0c0a 	mov.w	ip, #10
 800ee12:	4621      	mov	r1, r4
 800ee14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee18:	3b30      	subs	r3, #48	@ 0x30
 800ee1a:	2b09      	cmp	r3, #9
 800ee1c:	d94b      	bls.n	800eeb6 <_vfiprintf_r+0x1a2>
 800ee1e:	b1b0      	cbz	r0, 800ee4e <_vfiprintf_r+0x13a>
 800ee20:	9207      	str	r2, [sp, #28]
 800ee22:	e014      	b.n	800ee4e <_vfiprintf_r+0x13a>
 800ee24:	eba0 0308 	sub.w	r3, r0, r8
 800ee28:	fa09 f303 	lsl.w	r3, r9, r3
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	9304      	str	r3, [sp, #16]
 800ee30:	46a2      	mov	sl, r4
 800ee32:	e7d2      	b.n	800edda <_vfiprintf_r+0xc6>
 800ee34:	9b03      	ldr	r3, [sp, #12]
 800ee36:	1d19      	adds	r1, r3, #4
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	9103      	str	r1, [sp, #12]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	bfbb      	ittet	lt
 800ee40:	425b      	neglt	r3, r3
 800ee42:	f042 0202 	orrlt.w	r2, r2, #2
 800ee46:	9307      	strge	r3, [sp, #28]
 800ee48:	9307      	strlt	r3, [sp, #28]
 800ee4a:	bfb8      	it	lt
 800ee4c:	9204      	strlt	r2, [sp, #16]
 800ee4e:	7823      	ldrb	r3, [r4, #0]
 800ee50:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee52:	d10a      	bne.n	800ee6a <_vfiprintf_r+0x156>
 800ee54:	7863      	ldrb	r3, [r4, #1]
 800ee56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee58:	d132      	bne.n	800eec0 <_vfiprintf_r+0x1ac>
 800ee5a:	9b03      	ldr	r3, [sp, #12]
 800ee5c:	1d1a      	adds	r2, r3, #4
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	9203      	str	r2, [sp, #12]
 800ee62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee66:	3402      	adds	r4, #2
 800ee68:	9305      	str	r3, [sp, #20]
 800ee6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef40 <_vfiprintf_r+0x22c>
 800ee6e:	7821      	ldrb	r1, [r4, #0]
 800ee70:	2203      	movs	r2, #3
 800ee72:	4650      	mov	r0, sl
 800ee74:	f7f1 f984 	bl	8000180 <memchr>
 800ee78:	b138      	cbz	r0, 800ee8a <_vfiprintf_r+0x176>
 800ee7a:	9b04      	ldr	r3, [sp, #16]
 800ee7c:	eba0 000a 	sub.w	r0, r0, sl
 800ee80:	2240      	movs	r2, #64	@ 0x40
 800ee82:	4082      	lsls	r2, r0
 800ee84:	4313      	orrs	r3, r2
 800ee86:	3401      	adds	r4, #1
 800ee88:	9304      	str	r3, [sp, #16]
 800ee8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee8e:	4829      	ldr	r0, [pc, #164]	@ (800ef34 <_vfiprintf_r+0x220>)
 800ee90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee94:	2206      	movs	r2, #6
 800ee96:	f7f1 f973 	bl	8000180 <memchr>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d03f      	beq.n	800ef1e <_vfiprintf_r+0x20a>
 800ee9e:	4b26      	ldr	r3, [pc, #152]	@ (800ef38 <_vfiprintf_r+0x224>)
 800eea0:	bb1b      	cbnz	r3, 800eeea <_vfiprintf_r+0x1d6>
 800eea2:	9b03      	ldr	r3, [sp, #12]
 800eea4:	3307      	adds	r3, #7
 800eea6:	f023 0307 	bic.w	r3, r3, #7
 800eeaa:	3308      	adds	r3, #8
 800eeac:	9303      	str	r3, [sp, #12]
 800eeae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeb0:	443b      	add	r3, r7
 800eeb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eeb4:	e76a      	b.n	800ed8c <_vfiprintf_r+0x78>
 800eeb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800eeba:	460c      	mov	r4, r1
 800eebc:	2001      	movs	r0, #1
 800eebe:	e7a8      	b.n	800ee12 <_vfiprintf_r+0xfe>
 800eec0:	2300      	movs	r3, #0
 800eec2:	3401      	adds	r4, #1
 800eec4:	9305      	str	r3, [sp, #20]
 800eec6:	4619      	mov	r1, r3
 800eec8:	f04f 0c0a 	mov.w	ip, #10
 800eecc:	4620      	mov	r0, r4
 800eece:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eed2:	3a30      	subs	r2, #48	@ 0x30
 800eed4:	2a09      	cmp	r2, #9
 800eed6:	d903      	bls.n	800eee0 <_vfiprintf_r+0x1cc>
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d0c6      	beq.n	800ee6a <_vfiprintf_r+0x156>
 800eedc:	9105      	str	r1, [sp, #20]
 800eede:	e7c4      	b.n	800ee6a <_vfiprintf_r+0x156>
 800eee0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eee4:	4604      	mov	r4, r0
 800eee6:	2301      	movs	r3, #1
 800eee8:	e7f0      	b.n	800eecc <_vfiprintf_r+0x1b8>
 800eeea:	ab03      	add	r3, sp, #12
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	462a      	mov	r2, r5
 800eef0:	4b12      	ldr	r3, [pc, #72]	@ (800ef3c <_vfiprintf_r+0x228>)
 800eef2:	a904      	add	r1, sp, #16
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7fd fbbf 	bl	800c678 <_printf_float>
 800eefa:	4607      	mov	r7, r0
 800eefc:	1c78      	adds	r0, r7, #1
 800eefe:	d1d6      	bne.n	800eeae <_vfiprintf_r+0x19a>
 800ef00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef02:	07d9      	lsls	r1, r3, #31
 800ef04:	d405      	bmi.n	800ef12 <_vfiprintf_r+0x1fe>
 800ef06:	89ab      	ldrh	r3, [r5, #12]
 800ef08:	059a      	lsls	r2, r3, #22
 800ef0a:	d402      	bmi.n	800ef12 <_vfiprintf_r+0x1fe>
 800ef0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef0e:	f7fe fa81 	bl	800d414 <__retarget_lock_release_recursive>
 800ef12:	89ab      	ldrh	r3, [r5, #12]
 800ef14:	065b      	lsls	r3, r3, #25
 800ef16:	f53f af1f 	bmi.w	800ed58 <_vfiprintf_r+0x44>
 800ef1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef1c:	e71e      	b.n	800ed5c <_vfiprintf_r+0x48>
 800ef1e:	ab03      	add	r3, sp, #12
 800ef20:	9300      	str	r3, [sp, #0]
 800ef22:	462a      	mov	r2, r5
 800ef24:	4b05      	ldr	r3, [pc, #20]	@ (800ef3c <_vfiprintf_r+0x228>)
 800ef26:	a904      	add	r1, sp, #16
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f7fd fe3d 	bl	800cba8 <_printf_i>
 800ef2e:	e7e4      	b.n	800eefa <_vfiprintf_r+0x1e6>
 800ef30:	0800fb58 	.word	0x0800fb58
 800ef34:	0800fb62 	.word	0x0800fb62
 800ef38:	0800c679 	.word	0x0800c679
 800ef3c:	0800ecef 	.word	0x0800ecef
 800ef40:	0800fb5e 	.word	0x0800fb5e

0800ef44 <__sflush_r>:
 800ef44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4c:	0716      	lsls	r6, r2, #28
 800ef4e:	4605      	mov	r5, r0
 800ef50:	460c      	mov	r4, r1
 800ef52:	d454      	bmi.n	800effe <__sflush_r+0xba>
 800ef54:	684b      	ldr	r3, [r1, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	dc02      	bgt.n	800ef60 <__sflush_r+0x1c>
 800ef5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	dd48      	ble.n	800eff2 <__sflush_r+0xae>
 800ef60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef62:	2e00      	cmp	r6, #0
 800ef64:	d045      	beq.n	800eff2 <__sflush_r+0xae>
 800ef66:	2300      	movs	r3, #0
 800ef68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef6c:	682f      	ldr	r7, [r5, #0]
 800ef6e:	6a21      	ldr	r1, [r4, #32]
 800ef70:	602b      	str	r3, [r5, #0]
 800ef72:	d030      	beq.n	800efd6 <__sflush_r+0x92>
 800ef74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	0759      	lsls	r1, r3, #29
 800ef7a:	d505      	bpl.n	800ef88 <__sflush_r+0x44>
 800ef7c:	6863      	ldr	r3, [r4, #4]
 800ef7e:	1ad2      	subs	r2, r2, r3
 800ef80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef82:	b10b      	cbz	r3, 800ef88 <__sflush_r+0x44>
 800ef84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef86:	1ad2      	subs	r2, r2, r3
 800ef88:	2300      	movs	r3, #0
 800ef8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef8c:	6a21      	ldr	r1, [r4, #32]
 800ef8e:	4628      	mov	r0, r5
 800ef90:	47b0      	blx	r6
 800ef92:	1c43      	adds	r3, r0, #1
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	d106      	bne.n	800efa6 <__sflush_r+0x62>
 800ef98:	6829      	ldr	r1, [r5, #0]
 800ef9a:	291d      	cmp	r1, #29
 800ef9c:	d82b      	bhi.n	800eff6 <__sflush_r+0xb2>
 800ef9e:	4a2a      	ldr	r2, [pc, #168]	@ (800f048 <__sflush_r+0x104>)
 800efa0:	410a      	asrs	r2, r1
 800efa2:	07d6      	lsls	r6, r2, #31
 800efa4:	d427      	bmi.n	800eff6 <__sflush_r+0xb2>
 800efa6:	2200      	movs	r2, #0
 800efa8:	6062      	str	r2, [r4, #4]
 800efaa:	04d9      	lsls	r1, r3, #19
 800efac:	6922      	ldr	r2, [r4, #16]
 800efae:	6022      	str	r2, [r4, #0]
 800efb0:	d504      	bpl.n	800efbc <__sflush_r+0x78>
 800efb2:	1c42      	adds	r2, r0, #1
 800efb4:	d101      	bne.n	800efba <__sflush_r+0x76>
 800efb6:	682b      	ldr	r3, [r5, #0]
 800efb8:	b903      	cbnz	r3, 800efbc <__sflush_r+0x78>
 800efba:	6560      	str	r0, [r4, #84]	@ 0x54
 800efbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efbe:	602f      	str	r7, [r5, #0]
 800efc0:	b1b9      	cbz	r1, 800eff2 <__sflush_r+0xae>
 800efc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efc6:	4299      	cmp	r1, r3
 800efc8:	d002      	beq.n	800efd0 <__sflush_r+0x8c>
 800efca:	4628      	mov	r0, r5
 800efcc:	f7ff f880 	bl	800e0d0 <_free_r>
 800efd0:	2300      	movs	r3, #0
 800efd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800efd4:	e00d      	b.n	800eff2 <__sflush_r+0xae>
 800efd6:	2301      	movs	r3, #1
 800efd8:	4628      	mov	r0, r5
 800efda:	47b0      	blx	r6
 800efdc:	4602      	mov	r2, r0
 800efde:	1c50      	adds	r0, r2, #1
 800efe0:	d1c9      	bne.n	800ef76 <__sflush_r+0x32>
 800efe2:	682b      	ldr	r3, [r5, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d0c6      	beq.n	800ef76 <__sflush_r+0x32>
 800efe8:	2b1d      	cmp	r3, #29
 800efea:	d001      	beq.n	800eff0 <__sflush_r+0xac>
 800efec:	2b16      	cmp	r3, #22
 800efee:	d11e      	bne.n	800f02e <__sflush_r+0xea>
 800eff0:	602f      	str	r7, [r5, #0]
 800eff2:	2000      	movs	r0, #0
 800eff4:	e022      	b.n	800f03c <__sflush_r+0xf8>
 800eff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800effa:	b21b      	sxth	r3, r3
 800effc:	e01b      	b.n	800f036 <__sflush_r+0xf2>
 800effe:	690f      	ldr	r7, [r1, #16]
 800f000:	2f00      	cmp	r7, #0
 800f002:	d0f6      	beq.n	800eff2 <__sflush_r+0xae>
 800f004:	0793      	lsls	r3, r2, #30
 800f006:	680e      	ldr	r6, [r1, #0]
 800f008:	bf08      	it	eq
 800f00a:	694b      	ldreq	r3, [r1, #20]
 800f00c:	600f      	str	r7, [r1, #0]
 800f00e:	bf18      	it	ne
 800f010:	2300      	movne	r3, #0
 800f012:	eba6 0807 	sub.w	r8, r6, r7
 800f016:	608b      	str	r3, [r1, #8]
 800f018:	f1b8 0f00 	cmp.w	r8, #0
 800f01c:	dde9      	ble.n	800eff2 <__sflush_r+0xae>
 800f01e:	6a21      	ldr	r1, [r4, #32]
 800f020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f022:	4643      	mov	r3, r8
 800f024:	463a      	mov	r2, r7
 800f026:	4628      	mov	r0, r5
 800f028:	47b0      	blx	r6
 800f02a:	2800      	cmp	r0, #0
 800f02c:	dc08      	bgt.n	800f040 <__sflush_r+0xfc>
 800f02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f036:	81a3      	strh	r3, [r4, #12]
 800f038:	f04f 30ff 	mov.w	r0, #4294967295
 800f03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f040:	4407      	add	r7, r0
 800f042:	eba8 0800 	sub.w	r8, r8, r0
 800f046:	e7e7      	b.n	800f018 <__sflush_r+0xd4>
 800f048:	dfbffffe 	.word	0xdfbffffe

0800f04c <_fflush_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	690b      	ldr	r3, [r1, #16]
 800f050:	4605      	mov	r5, r0
 800f052:	460c      	mov	r4, r1
 800f054:	b913      	cbnz	r3, 800f05c <_fflush_r+0x10>
 800f056:	2500      	movs	r5, #0
 800f058:	4628      	mov	r0, r5
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	b118      	cbz	r0, 800f066 <_fflush_r+0x1a>
 800f05e:	6a03      	ldr	r3, [r0, #32]
 800f060:	b90b      	cbnz	r3, 800f066 <_fflush_r+0x1a>
 800f062:	f7fd ff4d 	bl	800cf00 <__sinit>
 800f066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d0f3      	beq.n	800f056 <_fflush_r+0xa>
 800f06e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f070:	07d0      	lsls	r0, r2, #31
 800f072:	d404      	bmi.n	800f07e <_fflush_r+0x32>
 800f074:	0599      	lsls	r1, r3, #22
 800f076:	d402      	bmi.n	800f07e <_fflush_r+0x32>
 800f078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f07a:	f7fe f9ca 	bl	800d412 <__retarget_lock_acquire_recursive>
 800f07e:	4628      	mov	r0, r5
 800f080:	4621      	mov	r1, r4
 800f082:	f7ff ff5f 	bl	800ef44 <__sflush_r>
 800f086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f088:	07da      	lsls	r2, r3, #31
 800f08a:	4605      	mov	r5, r0
 800f08c:	d4e4      	bmi.n	800f058 <_fflush_r+0xc>
 800f08e:	89a3      	ldrh	r3, [r4, #12]
 800f090:	059b      	lsls	r3, r3, #22
 800f092:	d4e1      	bmi.n	800f058 <_fflush_r+0xc>
 800f094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f096:	f7fe f9bd 	bl	800d414 <__retarget_lock_release_recursive>
 800f09a:	e7dd      	b.n	800f058 <_fflush_r+0xc>

0800f09c <__swhatbuf_r>:
 800f09c:	b570      	push	{r4, r5, r6, lr}
 800f09e:	460c      	mov	r4, r1
 800f0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a4:	2900      	cmp	r1, #0
 800f0a6:	b096      	sub	sp, #88	@ 0x58
 800f0a8:	4615      	mov	r5, r2
 800f0aa:	461e      	mov	r6, r3
 800f0ac:	da0d      	bge.n	800f0ca <__swhatbuf_r+0x2e>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f0b4:	f04f 0100 	mov.w	r1, #0
 800f0b8:	bf14      	ite	ne
 800f0ba:	2340      	movne	r3, #64	@ 0x40
 800f0bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	6031      	str	r1, [r6, #0]
 800f0c4:	602b      	str	r3, [r5, #0]
 800f0c6:	b016      	add	sp, #88	@ 0x58
 800f0c8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ca:	466a      	mov	r2, sp
 800f0cc:	f000 f862 	bl	800f194 <_fstat_r>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	dbec      	blt.n	800f0ae <__swhatbuf_r+0x12>
 800f0d4:	9901      	ldr	r1, [sp, #4]
 800f0d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0de:	4259      	negs	r1, r3
 800f0e0:	4159      	adcs	r1, r3
 800f0e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0e6:	e7eb      	b.n	800f0c0 <__swhatbuf_r+0x24>

0800f0e8 <__smakebuf_r>:
 800f0e8:	898b      	ldrh	r3, [r1, #12]
 800f0ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0ec:	079d      	lsls	r5, r3, #30
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	d507      	bpl.n	800f104 <__smakebuf_r+0x1c>
 800f0f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0f8:	6023      	str	r3, [r4, #0]
 800f0fa:	6123      	str	r3, [r4, #16]
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	6163      	str	r3, [r4, #20]
 800f100:	b003      	add	sp, #12
 800f102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f104:	ab01      	add	r3, sp, #4
 800f106:	466a      	mov	r2, sp
 800f108:	f7ff ffc8 	bl	800f09c <__swhatbuf_r>
 800f10c:	9f00      	ldr	r7, [sp, #0]
 800f10e:	4605      	mov	r5, r0
 800f110:	4639      	mov	r1, r7
 800f112:	4630      	mov	r0, r6
 800f114:	f7ff f850 	bl	800e1b8 <_malloc_r>
 800f118:	b948      	cbnz	r0, 800f12e <__smakebuf_r+0x46>
 800f11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f11e:	059a      	lsls	r2, r3, #22
 800f120:	d4ee      	bmi.n	800f100 <__smakebuf_r+0x18>
 800f122:	f023 0303 	bic.w	r3, r3, #3
 800f126:	f043 0302 	orr.w	r3, r3, #2
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	e7e2      	b.n	800f0f4 <__smakebuf_r+0xc>
 800f12e:	89a3      	ldrh	r3, [r4, #12]
 800f130:	6020      	str	r0, [r4, #0]
 800f132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f136:	81a3      	strh	r3, [r4, #12]
 800f138:	9b01      	ldr	r3, [sp, #4]
 800f13a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f13e:	b15b      	cbz	r3, 800f158 <__smakebuf_r+0x70>
 800f140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f144:	4630      	mov	r0, r6
 800f146:	f000 f837 	bl	800f1b8 <_isatty_r>
 800f14a:	b128      	cbz	r0, 800f158 <__smakebuf_r+0x70>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f023 0303 	bic.w	r3, r3, #3
 800f152:	f043 0301 	orr.w	r3, r3, #1
 800f156:	81a3      	strh	r3, [r4, #12]
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	431d      	orrs	r5, r3
 800f15c:	81a5      	strh	r5, [r4, #12]
 800f15e:	e7cf      	b.n	800f100 <__smakebuf_r+0x18>

0800f160 <memmove>:
 800f160:	4288      	cmp	r0, r1
 800f162:	b510      	push	{r4, lr}
 800f164:	eb01 0402 	add.w	r4, r1, r2
 800f168:	d902      	bls.n	800f170 <memmove+0x10>
 800f16a:	4284      	cmp	r4, r0
 800f16c:	4623      	mov	r3, r4
 800f16e:	d807      	bhi.n	800f180 <memmove+0x20>
 800f170:	1e43      	subs	r3, r0, #1
 800f172:	42a1      	cmp	r1, r4
 800f174:	d008      	beq.n	800f188 <memmove+0x28>
 800f176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f17e:	e7f8      	b.n	800f172 <memmove+0x12>
 800f180:	4402      	add	r2, r0
 800f182:	4601      	mov	r1, r0
 800f184:	428a      	cmp	r2, r1
 800f186:	d100      	bne.n	800f18a <memmove+0x2a>
 800f188:	bd10      	pop	{r4, pc}
 800f18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f192:	e7f7      	b.n	800f184 <memmove+0x24>

0800f194 <_fstat_r>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	4d07      	ldr	r5, [pc, #28]	@ (800f1b4 <_fstat_r+0x20>)
 800f198:	2300      	movs	r3, #0
 800f19a:	4604      	mov	r4, r0
 800f19c:	4608      	mov	r0, r1
 800f19e:	4611      	mov	r1, r2
 800f1a0:	602b      	str	r3, [r5, #0]
 800f1a2:	f7f2 feb1 	bl	8001f08 <_fstat>
 800f1a6:	1c43      	adds	r3, r0, #1
 800f1a8:	d102      	bne.n	800f1b0 <_fstat_r+0x1c>
 800f1aa:	682b      	ldr	r3, [r5, #0]
 800f1ac:	b103      	cbz	r3, 800f1b0 <_fstat_r+0x1c>
 800f1ae:	6023      	str	r3, [r4, #0]
 800f1b0:	bd38      	pop	{r3, r4, r5, pc}
 800f1b2:	bf00      	nop
 800f1b4:	20004b04 	.word	0x20004b04

0800f1b8 <_isatty_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4d06      	ldr	r5, [pc, #24]	@ (800f1d4 <_isatty_r+0x1c>)
 800f1bc:	2300      	movs	r3, #0
 800f1be:	4604      	mov	r4, r0
 800f1c0:	4608      	mov	r0, r1
 800f1c2:	602b      	str	r3, [r5, #0]
 800f1c4:	f7f2 feb0 	bl	8001f28 <_isatty>
 800f1c8:	1c43      	adds	r3, r0, #1
 800f1ca:	d102      	bne.n	800f1d2 <_isatty_r+0x1a>
 800f1cc:	682b      	ldr	r3, [r5, #0]
 800f1ce:	b103      	cbz	r3, 800f1d2 <_isatty_r+0x1a>
 800f1d0:	6023      	str	r3, [r4, #0]
 800f1d2:	bd38      	pop	{r3, r4, r5, pc}
 800f1d4:	20004b04 	.word	0x20004b04

0800f1d8 <_sbrk_r>:
 800f1d8:	b538      	push	{r3, r4, r5, lr}
 800f1da:	4d06      	ldr	r5, [pc, #24]	@ (800f1f4 <_sbrk_r+0x1c>)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4604      	mov	r4, r0
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	602b      	str	r3, [r5, #0]
 800f1e4:	f7f2 feb8 	bl	8001f58 <_sbrk>
 800f1e8:	1c43      	adds	r3, r0, #1
 800f1ea:	d102      	bne.n	800f1f2 <_sbrk_r+0x1a>
 800f1ec:	682b      	ldr	r3, [r5, #0]
 800f1ee:	b103      	cbz	r3, 800f1f2 <_sbrk_r+0x1a>
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	bd38      	pop	{r3, r4, r5, pc}
 800f1f4:	20004b04 	.word	0x20004b04

0800f1f8 <__assert_func>:
 800f1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1fa:	4614      	mov	r4, r2
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	4b09      	ldr	r3, [pc, #36]	@ (800f224 <__assert_func+0x2c>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4605      	mov	r5, r0
 800f204:	68d8      	ldr	r0, [r3, #12]
 800f206:	b954      	cbnz	r4, 800f21e <__assert_func+0x26>
 800f208:	4b07      	ldr	r3, [pc, #28]	@ (800f228 <__assert_func+0x30>)
 800f20a:	461c      	mov	r4, r3
 800f20c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f210:	9100      	str	r1, [sp, #0]
 800f212:	462b      	mov	r3, r5
 800f214:	4905      	ldr	r1, [pc, #20]	@ (800f22c <__assert_func+0x34>)
 800f216:	f000 f84f 	bl	800f2b8 <fiprintf>
 800f21a:	f000 f85f 	bl	800f2dc <abort>
 800f21e:	4b04      	ldr	r3, [pc, #16]	@ (800f230 <__assert_func+0x38>)
 800f220:	e7f4      	b.n	800f20c <__assert_func+0x14>
 800f222:	bf00      	nop
 800f224:	20000190 	.word	0x20000190
 800f228:	0800fba4 	.word	0x0800fba4
 800f22c:	0800fb76 	.word	0x0800fb76
 800f230:	0800fb69 	.word	0x0800fb69

0800f234 <_calloc_r>:
 800f234:	b570      	push	{r4, r5, r6, lr}
 800f236:	fba1 5402 	umull	r5, r4, r1, r2
 800f23a:	b93c      	cbnz	r4, 800f24c <_calloc_r+0x18>
 800f23c:	4629      	mov	r1, r5
 800f23e:	f7fe ffbb 	bl	800e1b8 <_malloc_r>
 800f242:	4606      	mov	r6, r0
 800f244:	b928      	cbnz	r0, 800f252 <_calloc_r+0x1e>
 800f246:	2600      	movs	r6, #0
 800f248:	4630      	mov	r0, r6
 800f24a:	bd70      	pop	{r4, r5, r6, pc}
 800f24c:	220c      	movs	r2, #12
 800f24e:	6002      	str	r2, [r0, #0]
 800f250:	e7f9      	b.n	800f246 <_calloc_r+0x12>
 800f252:	462a      	mov	r2, r5
 800f254:	4621      	mov	r1, r4
 800f256:	f7fe f809 	bl	800d26c <memset>
 800f25a:	e7f5      	b.n	800f248 <_calloc_r+0x14>

0800f25c <_realloc_r>:
 800f25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f260:	4680      	mov	r8, r0
 800f262:	4615      	mov	r5, r2
 800f264:	460c      	mov	r4, r1
 800f266:	b921      	cbnz	r1, 800f272 <_realloc_r+0x16>
 800f268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f26c:	4611      	mov	r1, r2
 800f26e:	f7fe bfa3 	b.w	800e1b8 <_malloc_r>
 800f272:	b92a      	cbnz	r2, 800f280 <_realloc_r+0x24>
 800f274:	f7fe ff2c 	bl	800e0d0 <_free_r>
 800f278:	2400      	movs	r4, #0
 800f27a:	4620      	mov	r0, r4
 800f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f280:	f000 f833 	bl	800f2ea <_malloc_usable_size_r>
 800f284:	4285      	cmp	r5, r0
 800f286:	4606      	mov	r6, r0
 800f288:	d802      	bhi.n	800f290 <_realloc_r+0x34>
 800f28a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f28e:	d8f4      	bhi.n	800f27a <_realloc_r+0x1e>
 800f290:	4629      	mov	r1, r5
 800f292:	4640      	mov	r0, r8
 800f294:	f7fe ff90 	bl	800e1b8 <_malloc_r>
 800f298:	4607      	mov	r7, r0
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d0ec      	beq.n	800f278 <_realloc_r+0x1c>
 800f29e:	42b5      	cmp	r5, r6
 800f2a0:	462a      	mov	r2, r5
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	bf28      	it	cs
 800f2a6:	4632      	movcs	r2, r6
 800f2a8:	f7fe f8b5 	bl	800d416 <memcpy>
 800f2ac:	4621      	mov	r1, r4
 800f2ae:	4640      	mov	r0, r8
 800f2b0:	f7fe ff0e 	bl	800e0d0 <_free_r>
 800f2b4:	463c      	mov	r4, r7
 800f2b6:	e7e0      	b.n	800f27a <_realloc_r+0x1e>

0800f2b8 <fiprintf>:
 800f2b8:	b40e      	push	{r1, r2, r3}
 800f2ba:	b503      	push	{r0, r1, lr}
 800f2bc:	4601      	mov	r1, r0
 800f2be:	ab03      	add	r3, sp, #12
 800f2c0:	4805      	ldr	r0, [pc, #20]	@ (800f2d8 <fiprintf+0x20>)
 800f2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2c6:	6800      	ldr	r0, [r0, #0]
 800f2c8:	9301      	str	r3, [sp, #4]
 800f2ca:	f7ff fd23 	bl	800ed14 <_vfiprintf_r>
 800f2ce:	b002      	add	sp, #8
 800f2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d4:	b003      	add	sp, #12
 800f2d6:	4770      	bx	lr
 800f2d8:	20000190 	.word	0x20000190

0800f2dc <abort>:
 800f2dc:	b508      	push	{r3, lr}
 800f2de:	2006      	movs	r0, #6
 800f2e0:	f000 f834 	bl	800f34c <raise>
 800f2e4:	2001      	movs	r0, #1
 800f2e6:	f7f2 fddb 	bl	8001ea0 <_exit>

0800f2ea <_malloc_usable_size_r>:
 800f2ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2ee:	1f18      	subs	r0, r3, #4
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	bfbc      	itt	lt
 800f2f4:	580b      	ldrlt	r3, [r1, r0]
 800f2f6:	18c0      	addlt	r0, r0, r3
 800f2f8:	4770      	bx	lr

0800f2fa <_raise_r>:
 800f2fa:	291f      	cmp	r1, #31
 800f2fc:	b538      	push	{r3, r4, r5, lr}
 800f2fe:	4605      	mov	r5, r0
 800f300:	460c      	mov	r4, r1
 800f302:	d904      	bls.n	800f30e <_raise_r+0x14>
 800f304:	2316      	movs	r3, #22
 800f306:	6003      	str	r3, [r0, #0]
 800f308:	f04f 30ff 	mov.w	r0, #4294967295
 800f30c:	bd38      	pop	{r3, r4, r5, pc}
 800f30e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f310:	b112      	cbz	r2, 800f318 <_raise_r+0x1e>
 800f312:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f316:	b94b      	cbnz	r3, 800f32c <_raise_r+0x32>
 800f318:	4628      	mov	r0, r5
 800f31a:	f000 f831 	bl	800f380 <_getpid_r>
 800f31e:	4622      	mov	r2, r4
 800f320:	4601      	mov	r1, r0
 800f322:	4628      	mov	r0, r5
 800f324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f328:	f000 b818 	b.w	800f35c <_kill_r>
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d00a      	beq.n	800f346 <_raise_r+0x4c>
 800f330:	1c59      	adds	r1, r3, #1
 800f332:	d103      	bne.n	800f33c <_raise_r+0x42>
 800f334:	2316      	movs	r3, #22
 800f336:	6003      	str	r3, [r0, #0]
 800f338:	2001      	movs	r0, #1
 800f33a:	e7e7      	b.n	800f30c <_raise_r+0x12>
 800f33c:	2100      	movs	r1, #0
 800f33e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f342:	4620      	mov	r0, r4
 800f344:	4798      	blx	r3
 800f346:	2000      	movs	r0, #0
 800f348:	e7e0      	b.n	800f30c <_raise_r+0x12>
	...

0800f34c <raise>:
 800f34c:	4b02      	ldr	r3, [pc, #8]	@ (800f358 <raise+0xc>)
 800f34e:	4601      	mov	r1, r0
 800f350:	6818      	ldr	r0, [r3, #0]
 800f352:	f7ff bfd2 	b.w	800f2fa <_raise_r>
 800f356:	bf00      	nop
 800f358:	20000190 	.word	0x20000190

0800f35c <_kill_r>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	4d07      	ldr	r5, [pc, #28]	@ (800f37c <_kill_r+0x20>)
 800f360:	2300      	movs	r3, #0
 800f362:	4604      	mov	r4, r0
 800f364:	4608      	mov	r0, r1
 800f366:	4611      	mov	r1, r2
 800f368:	602b      	str	r3, [r5, #0]
 800f36a:	f7f2 fd89 	bl	8001e80 <_kill>
 800f36e:	1c43      	adds	r3, r0, #1
 800f370:	d102      	bne.n	800f378 <_kill_r+0x1c>
 800f372:	682b      	ldr	r3, [r5, #0]
 800f374:	b103      	cbz	r3, 800f378 <_kill_r+0x1c>
 800f376:	6023      	str	r3, [r4, #0]
 800f378:	bd38      	pop	{r3, r4, r5, pc}
 800f37a:	bf00      	nop
 800f37c:	20004b04 	.word	0x20004b04

0800f380 <_getpid_r>:
 800f380:	f7f2 bd76 	b.w	8001e70 <_getpid>

0800f384 <_init>:
 800f384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f386:	bf00      	nop
 800f388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f38a:	bc08      	pop	{r3}
 800f38c:	469e      	mov	lr, r3
 800f38e:	4770      	bx	lr

0800f390 <_fini>:
 800f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f392:	bf00      	nop
 800f394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f396:	bc08      	pop	{r3}
 800f398:	469e      	mov	lr, r3
 800f39a:	4770      	bx	lr
