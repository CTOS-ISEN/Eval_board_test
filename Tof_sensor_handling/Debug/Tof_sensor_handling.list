
Tof_sensor_handling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dd24  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0801de64  0801de64  0001ee64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e340  0801e340  0001f340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e348  0801e348  0001f348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e34c  0801e34c  0001f34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  20000008  0801e350  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000be40  200000d8  0801e420  000200d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000bf18  0801e420  00020f18  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007906f  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000864a  00000000  00000000  00099177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000043d8  00000000  00000000  000a17c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00003482  00000000  00000000  000a5ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000d13e  00000000  00000000  000a9022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00049f9b  00000000  00000000  000b6160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012a6d8  00000000  00000000  001000fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022a7d3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00012e94  00000000  00000000  0022a818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  0023d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d8 	.word	0x200000d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801de4c 	.word	0x0801de4c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000dc 	.word	0x200000dc
 800017c:	0801de4c 	.word	0x0801de4c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_ldivmod>:
 8000230:	b97b      	cbnz	r3, 8000252 <__aeabi_ldivmod+0x22>
 8000232:	b972      	cbnz	r2, 8000252 <__aeabi_ldivmod+0x22>
 8000234:	2900      	cmp	r1, #0
 8000236:	bfbe      	ittt	lt
 8000238:	2000      	movlt	r0, #0
 800023a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800023e:	e006      	blt.n	800024e <__aeabi_ldivmod+0x1e>
 8000240:	bf08      	it	eq
 8000242:	2800      	cmpeq	r0, #0
 8000244:	bf1c      	itt	ne
 8000246:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800024a:	f04f 30ff 	movne.w	r0, #4294967295
 800024e:	f000 b9b5 	b.w	80005bc <__aeabi_idiv0>
 8000252:	f1ad 0c08 	sub.w	ip, sp, #8
 8000256:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800025a:	2900      	cmp	r1, #0
 800025c:	db09      	blt.n	8000272 <__aeabi_ldivmod+0x42>
 800025e:	2b00      	cmp	r3, #0
 8000260:	db1a      	blt.n	8000298 <__aeabi_ldivmod+0x68>
 8000262:	f000 f84d 	bl	8000300 <__udivmoddi4>
 8000266:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026e:	b004      	add	sp, #16
 8000270:	4770      	bx	lr
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	2b00      	cmp	r3, #0
 800027a:	db1b      	blt.n	80002b4 <__aeabi_ldivmod+0x84>
 800027c:	f000 f840 	bl	8000300 <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	4252      	negs	r2, r2
 8000292:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000296:	4770      	bx	lr
 8000298:	4252      	negs	r2, r2
 800029a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800029e:	f000 f82f 	bl	8000300 <__udivmoddi4>
 80002a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002aa:	b004      	add	sp, #16
 80002ac:	4240      	negs	r0, r0
 80002ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b2:	4770      	bx	lr
 80002b4:	4252      	negs	r2, r2
 80002b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ba:	f000 f821 	bl	8000300 <__udivmoddi4>
 80002be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c6:	b004      	add	sp, #16
 80002c8:	4252      	negs	r2, r2
 80002ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d013      	beq.n	8000600 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00b      	beq.n	8000600 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e8:	e000      	b.n	80005ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f9      	beq.n	80005ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800061a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800061e:	f023 0218 	bic.w	r2, r3, #24
 8000622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000656:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	e009      	b.n	8000692 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	60ba      	str	r2, [r7, #8]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff9a 	bl	80005c0 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	dbf1      	blt.n	800067e <_write+0x12>
}
return len;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f013 f982 	bl	80139b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f890 	bl	80007d0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b0:	f000 f904 	bl	80008bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 fa0a 	bl	8000acc <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006b8:	f000 f9e0 	bl	8000a7c <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80006bc:	f000 f992 	bl	80009e4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006c0:	f000 f91a 	bl	80008f8 <MX_TIM2_Init>
  MX_TIM16_Init();
 80006c4:	f000 f966 	bl	8000994 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  log_init(&huart1);
 80006c8:	4829      	ldr	r0, [pc, #164]	@ (8000770 <main+0xcc>)
 80006ca:	f013 f8c5 	bl	8013858 <log_init>
  ToF_init();
 80006ce:	f018 f823 	bl	8018718 <ToF_init>
  MyInitLSM6DSO();
 80006d2:	f013 f905 	bl	80138e0 <MyInitLSM6DSO>
  MyEnableLSM6DSO();
 80006d6:	f013 f931 	bl	801393c <MyEnableLSM6DSO>

      HAL_TIM_Base_Start_IT(&htim16);
 80006da:	4826      	ldr	r0, [pc, #152]	@ (8000774 <main+0xd0>)
 80006dc:	f016 fdca 	bl	8017274 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Start_IT(&htim2);
 80006e0:	4825      	ldr	r0, [pc, #148]	@ (8000778 <main+0xd4>)
 80006e2:	f016 fdc7 	bl	8017274 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e6:	f018 fa97 	bl	8018c18 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSend */
  MutexSendHandle = osMutexNew(&MutexSend_attributes);
 80006ea:	4824      	ldr	r0, [pc, #144]	@ (800077c <main+0xd8>)
 80006ec:	f018 fc70 	bl	8018fd0 <osMutexNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a23      	ldr	r2, [pc, #140]	@ (8000780 <main+0xdc>)
 80006f4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ToFData_Queue */
  ToFData_QueueHandle = osMessageQueueNew (16, sizeof(RANGING_SENSOR_Result_t), &ToFData_Queue_attributes);
 80006f6:	4a23      	ldr	r2, [pc, #140]	@ (8000784 <main+0xe0>)
 80006f8:	2148      	movs	r1, #72	@ 0x48
 80006fa:	2010      	movs	r0, #16
 80006fc:	f018 fd76 	bl	80191ec <osMessageQueueNew>
 8000700:	4603      	mov	r3, r0
 8000702:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <main+0xe4>)
 8000704:	6013      	str	r3, [r2, #0]

  /* creation of LSM6DSOData_Queue */
  LSM6DSOData_QueueHandle = osMessageQueueNew (16, sizeof(LSM6DSO_data), &LSM6DSOData_Queue_attributes);
 8000706:	4a21      	ldr	r2, [pc, #132]	@ (800078c <main+0xe8>)
 8000708:	2118      	movs	r1, #24
 800070a:	2010      	movs	r0, #16
 800070c:	f018 fd6e 	bl	80191ec <osMessageQueueNew>
 8000710:	4603      	mov	r3, r0
 8000712:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <main+0xec>)
 8000714:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <main+0xf0>)
 8000718:	2100      	movs	r1, #0
 800071a:	481f      	ldr	r0, [pc, #124]	@ (8000798 <main+0xf4>)
 800071c:	f018 fadb 	bl	8018cd6 <osThreadNew>
 8000720:	4603      	mov	r3, r0
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <main+0xf8>)
 8000724:	6013      	str	r3, [r2, #0]

  /* creation of Ack_ToF_Data */
  Ack_ToF_DataHandle = osThreadNew(StartAck_ToF_Data, NULL, &Ack_ToF_Data_attributes);
 8000726:	4a1e      	ldr	r2, [pc, #120]	@ (80007a0 <main+0xfc>)
 8000728:	2100      	movs	r1, #0
 800072a:	481e      	ldr	r0, [pc, #120]	@ (80007a4 <main+0x100>)
 800072c:	f018 fad3 	bl	8018cd6 <osThreadNew>
 8000730:	4603      	mov	r3, r0
 8000732:	4a1d      	ldr	r2, [pc, #116]	@ (80007a8 <main+0x104>)
 8000734:	6013      	str	r3, [r2, #0]

  /* creation of SendData */
  SendDataHandle = osThreadNew(StartSendData, NULL, &SendData_attributes);
 8000736:	4a1d      	ldr	r2, [pc, #116]	@ (80007ac <main+0x108>)
 8000738:	2100      	movs	r1, #0
 800073a:	481d      	ldr	r0, [pc, #116]	@ (80007b0 <main+0x10c>)
 800073c:	f018 facb 	bl	8018cd6 <osThreadNew>
 8000740:	4603      	mov	r3, r0
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <main+0x110>)
 8000744:	6013      	str	r3, [r2, #0]

  /* creation of Ack_LSM6DSO_Dat */
  Ack_LSM6DSO_DatHandle = osThreadNew(StartAck_LSM6DSO_Data, NULL, &Ack_LSM6DSO_Dat_attributes);
 8000746:	4a1c      	ldr	r2, [pc, #112]	@ (80007b8 <main+0x114>)
 8000748:	2100      	movs	r1, #0
 800074a:	481c      	ldr	r0, [pc, #112]	@ (80007bc <main+0x118>)
 800074c:	f018 fac3 	bl	8018cd6 <osThreadNew>
 8000750:	4603      	mov	r3, r0
 8000752:	4a1b      	ldr	r2, [pc, #108]	@ (80007c0 <main+0x11c>)
 8000754:	6013      	str	r3, [r2, #0]

  /* creation of SendDataLSM6 */
  SendDataLSM6Handle = osThreadNew(StartSendDataLSM6, NULL, &SendDataLSM6_attributes);
 8000756:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <main+0x120>)
 8000758:	2100      	movs	r1, #0
 800075a:	481b      	ldr	r0, [pc, #108]	@ (80007c8 <main+0x124>)
 800075c:	f018 fabb 	bl	8018cd6 <osThreadNew>
 8000760:	4603      	mov	r3, r0
 8000762:	4a1a      	ldr	r2, [pc, #104]	@ (80007cc <main+0x128>)
 8000764:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000766:	f018 fa7b 	bl	8018c60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076a:	bf00      	nop
 800076c:	e7fd      	b.n	800076a <main+0xc6>
 800076e:	bf00      	nop
 8000770:	2000018c 	.word	0x2000018c
 8000774:	20000140 	.word	0x20000140
 8000778:	200000f4 	.word	0x200000f4
 800077c:	0801e234 	.word	0x0801e234
 8000780:	20000bb8 	.word	0x20000bb8
 8000784:	0801e204 	.word	0x0801e204
 8000788:	20000510 	.word	0x20000510
 800078c:	0801e21c 	.word	0x0801e21c
 8000790:	200009e4 	.word	0x200009e4
 8000794:	0801e150 	.word	0x0801e150
 8000798:	08000b99 	.word	0x08000b99
 800079c:	200004fc 	.word	0x200004fc
 80007a0:	0801e174 	.word	0x0801e174
 80007a4:	08000ba9 	.word	0x08000ba9
 80007a8:	20000500 	.word	0x20000500
 80007ac:	0801e198 	.word	0x0801e198
 80007b0:	08000be5 	.word	0x08000be5
 80007b4:	20000504 	.word	0x20000504
 80007b8:	0801e1bc 	.word	0x0801e1bc
 80007bc:	08000c4d 	.word	0x08000c4d
 80007c0:	20000508 	.word	0x20000508
 80007c4:	0801e1e0 	.word	0x0801e1e0
 80007c8:	08000c95 	.word	0x08000c95
 80007cc:	2000050c 	.word	0x2000050c

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09a      	sub	sp, #104	@ 0x68
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2248      	movs	r2, #72	@ 0x48
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f01c fb5c 	bl	801ce9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000804:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	f023 0303 	bic.w	r3, r3, #3
 8000810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800081a:	f014 feb5 	bl	8015588 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fef5 	bl	800060e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <SystemClock_Config+0xe8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800082c:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <SystemClock_Config+0xe8>)
 800082e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <SystemClock_Config+0xe8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000840:	2327      	movs	r3, #39	@ 0x27
 8000842:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000844:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800084a:	2301      	movs	r3, #1
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2340      	movs	r3, #64	@ 0x40
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800085c:	2300      	movs	r3, #0
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000860:	2360      	movs	r3, #96	@ 0x60
 8000862:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f015 fa2b 	bl	8015cc8 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000878:	f000 fa94 	bl	8000da4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800087c:	236f      	movs	r3, #111	@ 0x6f
 800087e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000880:	2302      	movs	r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2101      	movs	r1, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f015 fd87 	bl	80163b0 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008a8:	f000 fa7c 	bl	8000da4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008ac:	f016 fb74 	bl	8016f98 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008b0:	bf00      	nop
 80008b2:	3768      	adds	r7, #104	@ 0x68
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58000400 	.word	0x58000400

080008bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	@ 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2250      	movs	r2, #80	@ 0x50
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f01c fae7 	bl	801ce9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80008ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80008d8:	2300      	movs	r3, #0
 80008da:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4618      	mov	r0, r3
 80008e0:	f016 f9e4 	bl	8016cac <HAL_RCCEx_PeriphCLKConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80008ea:	f000 fa5b 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	@ 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000918:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800091c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000920:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_TIM2_Init+0x98>)
 800092e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_TIM2_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000940:	4813      	ldr	r0, [pc, #76]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000942:	f016 fc40 	bl	80171c6 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800094c:	f000 fa2a 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000954:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <MX_TIM2_Init+0x98>)
 800095e:	f016 fdde 	bl	801751e <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000968:	f000 fa1c 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_TIM2_Init+0x98>)
 800097a:	f016 ffcd 	bl	8017918 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000984:	f000 fa0e 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000f4 	.word	0x200000f4

08000994 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000998:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_TIM16_Init+0x48>)
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <MX_TIM16_Init+0x4c>)
 800099c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31999;
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_TIM16_Init+0x48>)
 80009a0:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80009a4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <MX_TIM16_Init+0x48>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80009ac:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_TIM16_Init+0x48>)
 80009ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_TIM16_Init+0x48>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_TIM16_Init+0x48>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_TIM16_Init+0x48>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_TIM16_Init+0x48>)
 80009c8:	f016 fbfd 	bl	80171c6 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80009d2:	f000 f9e7 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000140 	.word	0x20000140
 80009e0:	40014400 	.word	0x40014400

080009e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 80009ea:	4a23      	ldr	r2, [pc, #140]	@ (8000a78 <MX_USART1_UART_Init+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2c:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a2e:	f017 f811 	bl	8017a54 <HAL_UART_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 f9b4 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a40:	f017 fd66 	bl	8018510 <HAL_UARTEx_SetTxFifoThreshold>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4a:	f000 f9ab 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4808      	ldr	r0, [pc, #32]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a52:	f017 fd9b 	bl	801858c <HAL_UARTEx_SetRxFifoThreshold>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 f9a2 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a62:	f017 fd1c 	bl	801849e <HAL_UARTEx_DisableFifoMode>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 f99a 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000018c 	.word	0x2000018c
 8000a78:	40013800 	.word	0x40013800

08000a7c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a80:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a82:	4a11      	ldr	r2, [pc, #68]	@ (8000ac8 <MX_USB_PCD_Init+0x4c>)
 8000a84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000ab2:	f014 fc70 	bl	8015396 <HAL_PCD_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000abc:	f000 f972 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000220 	.word	0x20000220
 8000ac8:	40006800 	.word	0x40006800

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	2004      	movs	r0, #4
 8000ae2:	f7ff fdaa 	bl	800063a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f7ff fda7 	bl	800063a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff fda4 	bl	800063a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2008      	movs	r0, #8
 8000af4:	f7ff fda1 	bl	800063a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2123      	movs	r1, #35	@ 0x23
 8000afc:	4823      	ldr	r0, [pc, #140]	@ (8000b8c <MX_GPIO_Init+0xc0>)
 8000afe:	f013 faf5 	bl	80140ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b02:	2310      	movs	r3, #16
 8000b04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	481e      	ldr	r0, [pc, #120]	@ (8000b90 <MX_GPIO_Init+0xc4>)
 8000b16:	f013 f89b 	bl	8013c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b1a:	2323      	movs	r3, #35	@ 0x23
 8000b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4817      	ldr	r0, [pc, #92]	@ (8000b8c <MX_GPIO_Init+0xc0>)
 8000b30:	f013 f88e 	bl	8013c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000b34:	2301      	movs	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <MX_GPIO_Init+0xc8>)
 8000b48:	f013 f882 	bl	8013c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <MX_GPIO_Init+0xc8>)
 8000b5e:	f013 f877 	bl	8013c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2105      	movs	r1, #5
 8000b66:	2006      	movs	r0, #6
 8000b68:	f013 f84a 	bl	8013c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b6c:	2006      	movs	r0, #6
 8000b6e:	f013 f861 	bl	8013c34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	200a      	movs	r0, #10
 8000b78:	f013 f842 	bl	8013c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f013 f859 	bl	8013c34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	48000800 	.word	0x48000800
 8000b94:	48000c00 	.word	0x48000c00

08000b98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f018 f9fa 	bl	8018f9a <osDelay>
 8000ba6:	e7fb      	b.n	8000ba0 <StartDefaultTask+0x8>

08000ba8 <StartAck_ToF_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAck_ToF_Data */
void StartAck_ToF_Data(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

	static RANGING_SENSOR_Result_t result;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f018 f96e 	bl	8018e98 <osThreadFlagsWait>
	  ToF_acquire_data(&result);
 8000bbc:	4807      	ldr	r0, [pc, #28]	@ (8000bdc <StartAck_ToF_Data+0x34>)
 8000bbe:	f017 fe33 	bl	8018828 <ToF_acquire_data>
	        osMessageQueuePut(ToFData_QueueHandle, &result, 1, osWaitForever);
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <StartAck_ToF_Data+0x38>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4903      	ldr	r1, [pc, #12]	@ (8000bdc <StartAck_ToF_Data+0x34>)
 8000bce:	f018 fb81 	bl	80192d4 <osMessageQueuePut>
	      osDelay(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f018 f9e1 	bl	8018f9a <osDelay>
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000bd8:	bf00      	nop
 8000bda:	e7e9      	b.n	8000bb0 <StartAck_ToF_Data+0x8>
 8000bdc:	20000bbc 	.word	0x20000bbc
 8000be0:	20000510 	.word	0x20000510

08000be4 <StartSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendData */
	static RANGING_SENSOR_Result_t result;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f018 f950 	bl	8018e98 <osThreadFlagsWait>
	  osMutexAcquire(MutexSendHandle, osWaitForever);
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <StartSendData+0x5c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	4618      	mov	r0, r3
 8000c02:	f018 fa6b 	bl	80190dc <osMutexAcquire>
	  while(osMessageQueueGetCount(ToFData_QueueHandle)>0){
 8000c06:	e00a      	b.n	8000c1e <StartSendData+0x3a>

			osMessageQueueGet(ToFData_QueueHandle, &result, (uint8_t*) 1,osWaitForever);
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <StartSendData+0x60>)
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	2201      	movs	r2, #1
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <StartSendData+0x64>)
 8000c14:	f018 fbbe 	bl	8019394 <osMessageQueueGet>
			//print_result(&result);

			logger_print_result(&result);
 8000c18:	480b      	ldr	r0, [pc, #44]	@ (8000c48 <StartSendData+0x64>)
 8000c1a:	f017 fed7 	bl	80189cc <logger_print_result>
	  while(osMessageQueueGetCount(ToFData_QueueHandle)>0){
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <StartSendData+0x60>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f018 fc14 	bl	8019450 <osMessageQueueGetCount>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1ec      	bne.n	8000c08 <StartSendData+0x24>
		}
	  osMutexRelease(MutexSendHandle);
 8000c2e:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <StartSendData+0x5c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f018 fa9d 	bl	8019172 <osMutexRelease>

    osDelay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f018 f9ae 	bl	8018f9a <osDelay>
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000c3e:	e7d5      	b.n	8000bec <StartSendData+0x8>
 8000c40:	20000bb8 	.word	0x20000bb8
 8000c44:	20000510 	.word	0x20000510
 8000c48:	20000c04 	.word	0x20000c04

08000c4c <StartAck_LSM6DSO_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAck_LSM6DSO_Data */
void StartAck_LSM6DSO_Data(void *argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAck_LSM6DSO_Data */
  /* Infinite loop */
  for(;;)
  {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f018 f91c 	bl	8018e98 <osThreadFlagsWait>
		LSM6DSO_data mov_data;
		MyGettingLSM6DSO(&mov_data.Acc, &mov_data.Gyr);
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	f103 020c 	add.w	r2, r3, #12
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f012 fe70 	bl	8013954 <MyGettingLSM6DSO>
				"Xgyro: %ld | Ygyro: %ld | Zgyro: %ld | Xacc: %ld | Yacc: %ld | Zacc: %ld\n",
				mov_data.axes_gyro.x, mov_data.axes_gyro.y,
				mov_data.axes_gyro.z, mov_data.axes_acce.x,
				mov_data.axes_acce.y, mov_data.axes_acce.z);
		printf("Get at : %ld\n", osKernelGetTickCount());*/
		osMessageQueuePut(LSM6DSOData_QueueHandle, &mov_data, 1, osWaitForever);
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <StartAck_LSM6DSO_Data+0x44>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	f107 0108 	add.w	r1, r7, #8
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	2201      	movs	r2, #1
 8000c82:	f018 fb27 	bl	80192d4 <osMessageQueuePut>
		osDelay(1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f018 f987 	bl	8018f9a <osDelay>
  {
 8000c8c:	bf00      	nop
 8000c8e:	e7e1      	b.n	8000c54 <StartAck_LSM6DSO_Data+0x8>
 8000c90:	200009e4 	.word	0x200009e4

08000c94 <StartSendDataLSM6>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendDataLSM6 */
void StartSendDataLSM6(void *argument)
{
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b08c      	sub	sp, #48	@ 0x30
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendDataLSM6 */
  /* Infinite loop */
  for(;;)
  {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f018 f8f8 	bl	8018e98 <osThreadFlagsWait>
		osMutexAcquire(MutexSendHandle, osWaitForever);
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <StartSendDataLSM6+0x84>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f018 fa13 	bl	80190dc <osMutexAcquire>
		LSM6DSO_data send_data;
		while(osMessageQueueGetCount(LSM6DSOData_QueueHandle)>0) {
 8000cb6:	e017      	b.n	8000ce8 <StartSendDataLSM6+0x54>
			osMessageQueueGet(LSM6DSOData_QueueHandle, &send_data, (uint8_t*) 1,
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <StartSendDataLSM6+0x88>)
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	f107 0108 	add.w	r1, r7, #8
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f018 fb65 	bl	8019394 <osMessageQueueGet>
					osWaitForever);
			log_printf(
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	69bc      	ldr	r4, [r7, #24]
 8000cce:	69fd      	ldr	r5, [r7, #28]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	6939      	ldr	r1, [r7, #16]
 8000cd6:	9102      	str	r1, [sp, #8]
 8000cd8:	9201      	str	r2, [sp, #4]
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	462b      	mov	r3, r5
 8000cde:	4622      	mov	r2, r4
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	480f      	ldr	r0, [pc, #60]	@ (8000d20 <StartSendDataLSM6+0x8c>)
 8000ce4:	f012 fddc 	bl	80138a0 <log_printf>
		while(osMessageQueueGetCount(LSM6DSOData_QueueHandle)>0) {
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <StartSendDataLSM6+0x88>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f018 fbaf 	bl	8019450 <osMessageQueueGetCount>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1df      	bne.n	8000cb8 <StartSendDataLSM6+0x24>
					"SEND : Xgyro: %ld | Ygyro: %ld | Zgyro: %ld | Xacc: %ld | Yacc: %ld | Zacc: %ld\n",
					send_data.Gyr.x, send_data.Gyr.y,
					send_data.Gyr.z, send_data.Acc.x,
					send_data.Acc.y, send_data.Acc.z);
		}
		printf("Send at : %ld\n", osKernelGetTickCount());
 8000cf8:	f017 ffd8 	bl	8018cac <osKernelGetTickCount>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <StartSendDataLSM6+0x90>)
 8000d02:	f01b ff43 	bl	801cb8c <iprintf>
		osMutexRelease(MutexSendHandle);
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <StartSendDataLSM6+0x84>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f018 fa31 	bl	8019172 <osMutexRelease>
		osDelay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f018 f942 	bl	8018f9a <osDelay>
  {
 8000d16:	e7c1      	b.n	8000c9c <StartSendDataLSM6+0x8>
 8000d18:	20000bb8 	.word	0x20000bb8
 8000d1c:	200009e4 	.word	0x200009e4
 8000d20:	0801dedc 	.word	0x0801dedc
 8000d24:	0801df30 	.word	0x0801df30

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM16) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a15      	ldr	r2, [pc, #84]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10c      	bne.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x2c>
			osThreadFlagsSet(Ack_LSM6DSO_DatHandle, 1);
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4618      	mov	r0, r3
 8000d42:	f018 f85b 	bl	8018dfc <osThreadFlagsSet>
			osThreadFlagsSet(Ack_ToF_DataHandle,1);
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f018 f855 	bl	8018dfc <osThreadFlagsSet>
 8000d52:	e010      	b.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x4e>

	}else if(htim->Instance == TIM2){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d5c:	d10b      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x4e>
			osThreadFlagsSet(SendDataLSM6Handle, 1);
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2101      	movs	r1, #1
 8000d64:	4618      	mov	r0, r3
 8000d66:	f018 f849 	bl	8018dfc <osThreadFlagsSet>
			osThreadFlagsSet(SendDataHandle, 1);
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4618      	mov	r0, r3
 8000d72:	f018 f843 	bl	8018dfc <osThreadFlagsSet>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a09      	ldr	r2, [pc, #36]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d101      	bne.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0x5c>
    HAL_IncTick();
 8000d80:	f012 fe36 	bl	80139f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40014400 	.word	0x40014400
 8000d90:	20000508 	.word	0x20000508
 8000d94:	20000500 	.word	0x20000500
 8000d98:	2000050c 	.word	0x2000050c
 8000d9c:	20000504 	.word	0x20000504
 8000da0:	40014800 	.word	0x40014800

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <Error_Handler+0x8>

08000db0 <LL_AHB2_GRP1_EnableClock>:
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000df0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dfe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4013      	ands	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e38:	68fb      	ldr	r3, [r7, #12]
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	f06f 0001 	mvn.w	r0, #1
 8000e52:	f012 fed5 	bl	8013c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e6c:	d10b      	bne.n	8000e86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff ffb7 	bl	8000de2 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2105      	movs	r1, #5
 8000e78:	201c      	movs	r0, #28
 8000e7a:	f012 fec1 	bl	8013c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e7e:	201c      	movs	r0, #28
 8000e80:	f012 fed8 	bl	8013c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000e84:	e010      	b.n	8000ea8 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM16)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a09      	ldr	r2, [pc, #36]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x54>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d10b      	bne.n	8000ea8 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e90:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e94:	f7ff ffbe 	bl	8000e14 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	2019      	movs	r0, #25
 8000e9e:	f012 feaf 	bl	8013c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ea2:	2019      	movs	r0, #25
 8000ea4:	f012 fec6 	bl	8013c34 <HAL_NVIC_EnableIRQ>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40014400 	.word	0x40014400

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b09c      	sub	sp, #112	@ 0x70
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2250      	movs	r2, #80	@ 0x50
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f01b ffe1 	bl	801ce9c <memset>
  if(huart->Instance==USART1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a16      	ldr	r2, [pc, #88]	@ (8000f38 <HAL_UART_MspInit+0x84>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d124      	bne.n	8000f2e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f015 fedb 	bl	8016cac <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff ff52 	bl	8000da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f00:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f04:	f7ff ff86 	bl	8000e14 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff ff51 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f0e:	23c0      	movs	r3, #192	@ 0xc0
 8000f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f26:	4619      	mov	r1, r3
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <HAL_UART_MspInit+0x88>)
 8000f2a:	f012 fe91 	bl	8013c50 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f2e:	bf00      	nop
 8000f30:	3770      	adds	r7, #112	@ 0x70
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	48000400 	.word	0x48000400

08000f40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b09c      	sub	sp, #112	@ 0x70
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2250      	movs	r2, #80	@ 0x50
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f01b ff9b 	bl	801ce9c <memset>
  if(hpcd->Instance==USB)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe8 <HAL_PCD_MspInit+0xa8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d136      	bne.n	8000fde <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f74:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000f76:	2318      	movs	r3, #24
 8000f78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000f7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000f80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000f86:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000f8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000f96:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f015 fe85 	bl	8016cac <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000fa8:	f7ff fefc 	bl	8000da4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff feff 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fb2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd2:	f012 fe3d 	bl	8013c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fd6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000fda:	f7ff ff02 	bl	8000de2 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000fde:	bf00      	nop
 8000fe0:	3770      	adds	r7, #112	@ 0x70
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40006800 	.word	0x40006800

08000fec <LL_APB2_GRP1_EnableClock>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001008:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001010:	68fb      	ldr	r3, [r7, #12]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	201a      	movs	r0, #26
 8001036:	f012 fde3 	bl	8013c00 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800103a:	201a      	movs	r0, #26
 800103c:	f012 fdfa 	bl	8013c34 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001040:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001044:	f7ff ffd2 	bl	8000fec <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001048:	f107 0208 	add.w	r2, r7, #8
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f015 fb98 	bl	8016788 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001058:	f015 fb80 	bl	801675c <HAL_RCC_GetPCLK2Freq>
 800105c:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800105e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001060:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <HAL_InitTick+0x8c>)
 8001062:	fba2 2303 	umull	r2, r3, r2, r3
 8001066:	0c9b      	lsrs	r3, r3, #18
 8001068:	3b01      	subs	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <HAL_InitTick+0x90>)
 800106e:	4a11      	ldr	r2, [pc, #68]	@ (80010b4 <HAL_InitTick+0x94>)
 8001070:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_InitTick+0x90>)
 8001074:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001078:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800107a:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <HAL_InitTick+0x90>)
 800107c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_InitTick+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_InitTick+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800108c:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <HAL_InitTick+0x90>)
 800108e:	f016 f89a 	bl	80171c6 <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d104      	bne.n	80010a2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_InitTick+0x90>)
 800109a:	f016 f8eb 	bl	8017274 <HAL_TIM_Base_Start_IT>
 800109e:	4603      	mov	r3, r0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3730      	adds	r7, #48	@ 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	431bde83 	.word	0x431bde83
 80010b0:	20000c4c 	.word	0x20000c4c
 80010b4:	40014800 	.word	0x40014800

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <NMI_Handler+0x4>

080010c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <MemManage_Handler+0x4>

080010d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <UsageFault_Handler+0x4>

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f013 f812 	bl	801411c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001100:	2010      	movs	r0, #16
 8001102:	f013 f80b 	bl	801411c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001112:	f016 f8fd 	bl	8017310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000140 	.word	0x20000140

08001120 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001126:	f016 f8f3 	bl	8017310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000c4c 	.word	0x20000c4c

08001134 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <TIM2_IRQHandler+0x10>)
 800113a:	f016 f8e9 	bl	8017310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000f4 	.word	0x200000f4

08001148 <LL_AHB2_GRP1_EnableClock>:
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001154:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001164:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116c:	68fb      	ldr	r3, [r7, #12]
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_APB1_GRP1_EnableClock>:
{
 800117a:	b480      	push	{r7}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001186:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001188:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4313      	orrs	r3, r2
 8001190:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001196:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_APB1_GRP1_DisableClock>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80011b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	43db      	mvns	r3, r3
 80011be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011c2:	4013      	ands	r3, r2
 80011c4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <BSP_I2C1_Init+0x70>)
 80011e0:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <BSP_I2C1_Init+0x74>)
 80011e2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80011e4:	4b19      	ldr	r3, [pc, #100]	@ (800124c <BSP_I2C1_Init+0x78>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	4918      	ldr	r1, [pc, #96]	@ (800124c <BSP_I2C1_Init+0x78>)
 80011ec:	600a      	str	r2, [r1, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d122      	bne.n	8001238 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80011f2:	4814      	ldr	r0, [pc, #80]	@ (8001244 <BSP_I2C1_Init+0x70>)
 80011f4:	f013 fcd0 	bl	8014b98 <HAL_I2C_GetState>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d11c      	bne.n	8001238 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80011fe:	4811      	ldr	r0, [pc, #68]	@ (8001244 <BSP_I2C1_Init+0x70>)
 8001200:	f000 f952 	bl	80014a8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <BSP_I2C1_Init+0x70>)
 800120c:	f000 f908 	bl	8001420 <MX_I2C1_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001216:	f06f 0307 	mvn.w	r3, #7
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	e00c      	b.n	8001238 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	4808      	ldr	r0, [pc, #32]	@ (8001244 <BSP_I2C1_Init+0x70>)
 8001222:	f014 f821 	bl	8015268 <HAL_I2CEx_ConfigAnalogFilter>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800122c:	f06f 0307 	mvn.w	r3, #7
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	e001      	b.n	8001238 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000c98 	.word	0x20000c98
 8001248:	40005400 	.word	0x40005400
 800124c:	20000cec 	.word	0x20000cec

08001250 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <BSP_I2C1_DeInit+0x48>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d014      	beq.n	800128c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <BSP_I2C1_DeInit+0x48>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3b01      	subs	r3, #1
 8001268:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <BSP_I2C1_DeInit+0x48>)
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <BSP_I2C1_DeInit+0x48>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10b      	bne.n	800128c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001274:	4809      	ldr	r0, [pc, #36]	@ (800129c <BSP_I2C1_DeInit+0x4c>)
 8001276:	f000 f95b 	bl	8001530 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800127a:	4808      	ldr	r0, [pc, #32]	@ (800129c <BSP_I2C1_DeInit+0x4c>)
 800127c:	f013 f80c 	bl	8014298 <HAL_I2C_DeInit>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001286:	f06f 0307 	mvn.w	r3, #7
 800128a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000cec 	.word	0x20000cec
 800129c:	20000c98 	.word	0x20000c98

080012a0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	81fb      	strh	r3, [r7, #14]
 80012ae:	460b      	mov	r3, r1
 80012b0:	81bb      	strh	r3, [r7, #12]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80012ba:	89ba      	ldrh	r2, [r7, #12]
 80012bc:	89f9      	ldrh	r1, [r7, #14]
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	480c      	ldr	r0, [pc, #48]	@ (8001300 <BSP_I2C1_WriteReg+0x60>)
 80012d0:	f013 fa34 	bl	801473c <HAL_I2C_Mem_Write>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80012da:	4809      	ldr	r0, [pc, #36]	@ (8001300 <BSP_I2C1_WriteReg+0x60>)
 80012dc:	f013 fc6a 	bl	8014bb4 <HAL_I2C_GetError>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d103      	bne.n	80012ee <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80012e6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e002      	b.n	80012f4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80012ee:	f06f 0303 	mvn.w	r3, #3
 80012f2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80012f4:	697b      	ldr	r3, [r7, #20]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000c98 	.word	0x20000c98

08001304 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af04      	add	r7, sp, #16
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	461a      	mov	r2, r3
 800130e:	4603      	mov	r3, r0
 8001310:	81fb      	strh	r3, [r7, #14]
 8001312:	460b      	mov	r3, r1
 8001314:	81bb      	strh	r3, [r7, #12]
 8001316:	4613      	mov	r3, r2
 8001318:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800131e:	89ba      	ldrh	r2, [r7, #12]
 8001320:	89f9      	ldrh	r1, [r7, #14]
 8001322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	480c      	ldr	r0, [pc, #48]	@ (8001364 <BSP_I2C1_ReadReg+0x60>)
 8001334:	f013 fb16 	bl	8014964 <HAL_I2C_Mem_Read>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00c      	beq.n	8001358 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800133e:	4809      	ldr	r0, [pc, #36]	@ (8001364 <BSP_I2C1_ReadReg+0x60>)
 8001340:	f013 fc38 	bl	8014bb4 <HAL_I2C_GetError>
 8001344:	4603      	mov	r3, r0
 8001346:	2b04      	cmp	r3, #4
 8001348:	d103      	bne.n	8001352 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800134a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e002      	b.n	8001358 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001352:	f06f 0303 	mvn.w	r3, #3
 8001356:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001358:	697b      	ldr	r3, [r7, #20]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000c98 	.word	0x20000c98

08001368 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	80fb      	strh	r3, [r7, #6]
 8001374:	4613      	mov	r3, r2
 8001376:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	88f9      	ldrh	r1, [r7, #6]
 8001380:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001384:	9200      	str	r2, [sp, #0]
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	480b      	ldr	r0, [pc, #44]	@ (80013b8 <BSP_I2C1_Send+0x50>)
 800138a:	f012 ffc9 	bl	8014320 <HAL_I2C_Master_Transmit>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00c      	beq.n	80013ae <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001394:	4808      	ldr	r0, [pc, #32]	@ (80013b8 <BSP_I2C1_Send+0x50>)
 8001396:	f013 fc0d 	bl	8014bb4 <HAL_I2C_GetError>
 800139a:	4603      	mov	r3, r0
 800139c:	2b04      	cmp	r3, #4
 800139e:	d003      	beq.n	80013a8 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013a0:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e002      	b.n	80013ae <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80013a8:	f06f 0303 	mvn.w	r3, #3
 80013ac:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000c98 	.word	0x20000c98

080013bc <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	4613      	mov	r3, r2
 80013ca:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	88f9      	ldrh	r1, [r7, #6]
 80013d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	480b      	ldr	r0, [pc, #44]	@ (800140c <BSP_I2C1_Recv+0x50>)
 80013de:	f013 f8b7 	bl	8014550 <HAL_I2C_Master_Receive>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00c      	beq.n	8001402 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80013e8:	4808      	ldr	r0, [pc, #32]	@ (800140c <BSP_I2C1_Recv+0x50>)
 80013ea:	f013 fbe3 	bl	8014bb4 <HAL_I2C_GetError>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d003      	beq.n	80013fc <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013f4:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e002      	b.n	8001402 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80013fc:	f06f 0303 	mvn.w	r3, #3
 8001400:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000c98 	.word	0x20000c98

08001410 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001414:	f012 fb00 	bl	8013a18 <HAL_GetTick>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_I2C1_Init+0x80>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B07CB4;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <MX_I2C1_Init+0x84>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f012 fe7d 	bl	8014162 <HAL_I2C_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f013 fef7 	bl	8015268 <HAL_I2CEx_ConfigAnalogFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f013 ff39 	bl	80152fe <HAL_I2CEx_ConfigDigitalFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	00b07cb4 	.word	0x00b07cb4

080014a8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b09c      	sub	sp, #112	@ 0x70
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2250      	movs	r2, #80	@ 0x50
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f01b fcef 	bl	801ce9c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014be:	2304      	movs	r3, #4
 80014c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014c2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4618      	mov	r0, r3
 80014ce:	f015 fbed 	bl	8016cac <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2002      	movs	r0, #2
 80014d4:	f7ff fe38 	bl	8001148 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80014d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014de:	2312      	movs	r3, #18
 80014e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80014ea:	2304      	movs	r3, #4
 80014ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80014ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014f2:	4619      	mov	r1, r3
 80014f4:	480d      	ldr	r0, [pc, #52]	@ (800152c <I2C1_MspInit+0x84>)
 80014f6:	f012 fbab 	bl	8013c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80014fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800150c:	2304      	movs	r3, #4
 800150e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001510:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <I2C1_MspInit+0x84>)
 8001518:	f012 fb9a 	bl	8013c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800151c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001520:	f7ff fe2b 	bl	800117a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001524:	bf00      	nop
 8001526:	3770      	adds	r7, #112	@ 0x70
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	48000400 	.word	0x48000400

08001530 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001538:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800153c:	f7ff fe36 	bl	80011ac <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001540:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001544:	4805      	ldr	r0, [pc, #20]	@ (800155c <I2C1_MspDeInit+0x2c>)
 8001546:	f012 fcf3 	bl	8013f30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800154a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <I2C1_MspDeInit+0x2c>)
 8001550:	f012 fcee 	bl	8013f30 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	48000400 	.word	0x48000400

08001560 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e00a      	b.n	8001588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001572:	f3af 8000 	nop.w
 8001576:	4601      	mov	r1, r0
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf0      	blt.n	8001572 <_read+0x12>
  }

  return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:
  }
  return len;
}

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f01b fcea 	bl	801d00c <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20030000 	.word	0x20030000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000cf0 	.word	0x20000cf0
 800166c:	2000bf18 	.word	0x2000bf18

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001674:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <SystemInit+0x98>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167a:	4a23      	ldr	r2, [pc, #140]	@ (8001708 <SystemInit+0x98>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001698:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800169c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <SystemInit+0x9c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ba:	f023 0305 	bic.w	r3, r3, #5
 80016be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016da:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <SystemInit+0xa0>)
 80016dc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <SystemInit+0xa0>)
 80016e4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	faf6fefb 	.word	0xfaf6fefb
 8001710:	22041000 	.word	0x22041000

08001714 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001714:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001716:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001718:	3304      	adds	r3, #4

0800171a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800171e:	d3f9      	bcc.n	8001714 <CopyDataInit>
  bx lr
 8001720:	4770      	bx	lr

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001722:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001724:	3004      	adds	r0, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001726:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>
  bx lr
 800172a:	4770      	bx	lr

0800172c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800172e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001730:	f7ff ff9e 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001734:	480b      	ldr	r0, [pc, #44]	@ (8001764 <LoopForever+0x6>)
 8001736:	490c      	ldr	r1, [pc, #48]	@ (8001768 <LoopForever+0xa>)
 8001738:	4a0c      	ldr	r2, [pc, #48]	@ (800176c <LoopForever+0xe>)
 800173a:	2300      	movs	r3, #0
 800173c:	f7ff ffed 	bl	800171a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001740:	480b      	ldr	r0, [pc, #44]	@ (8001770 <LoopForever+0x12>)
 8001742:	490c      	ldr	r1, [pc, #48]	@ (8001774 <LoopForever+0x16>)
 8001744:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <LoopForever+0x1a>)
 8001746:	2300      	movs	r3, #0
 8001748:	f7ff ffe7 	bl	800171a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800174c:	480b      	ldr	r0, [pc, #44]	@ (800177c <LoopForever+0x1e>)
 800174e:	490c      	ldr	r1, [pc, #48]	@ (8001780 <LoopForever+0x22>)
 8001750:	2300      	movs	r3, #0
 8001752:	f7ff ffe8 	bl	8001726 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001756:	f01b fc5f 	bl	801d018 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800175a:	f7fe ffa3 	bl	80006a4 <main>

0800175e <LoopForever>:

LoopForever:
  b LoopForever
 800175e:	e7fe      	b.n	800175e <LoopForever>
  ldr   r0, =_estack
 8001760:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001764:	20000008 	.word	0x20000008
 8001768:	200000d8 	.word	0x200000d8
 800176c:	0801e350 	.word	0x0801e350
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001770:	20030000 	.word	0x20030000
 8001774:	20030000 	.word	0x20030000
 8001778:	0801e420 	.word	0x0801e420
  INIT_BSS _sbss, _ebss
 800177c:	200000d8 	.word	0x200000d8
 8001780:	2000bf18 	.word	0x2000bf18

08001784 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC1_IRQHandler>

08001786 <VL53L4A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d903      	bls.n	800179c <VL53L4A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001794:	f06f 0301 	mvn.w	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e003      	b.n	80017a4 <VL53L4A2_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L4CX_Probe(Instance);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8c9 	bl	8001934 <VL53L4CX_Probe>
 80017a2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <VL53L4A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d903      	bls.n	80017c8 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017c0:	f06f 0301 	mvn.w	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e012      	b.n	80017ee <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	490b      	ldr	r1, [pc, #44]	@ (80017fc <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	4610      	mov	r0, r2
 80017da:	4798      	blx	r3
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da03      	bge.n	80017ea <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80017e2:	f06f 0304 	mvn.w	r3, #4
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e001      	b.n	80017ee <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000d00 	.word	0x20000d00
 80017fc:	20000cf4 	.word	0x20000cf4

08001800 <VL53L4A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d903      	bls.n	8001818 <VL53L4A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001810:	f06f 0301 	mvn.w	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e012      	b.n	800183e <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->GetDistance(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <VL53L4A2_RANGING_SENSOR_GetDistance+0x48>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	490b      	ldr	r1, [pc, #44]	@ (800184c <VL53L4A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001826:	6839      	ldr	r1, [r7, #0]
 8001828:	4610      	mov	r0, r2
 800182a:	4798      	blx	r3
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	da03      	bge.n	800183a <VL53L4A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001832:	f06f 0304 	mvn.w	r3, #4
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e001      	b.n	800183e <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000d00 	.word	0x20000d00
 800184c:	20000cf4 	.word	0x20000cf4

08001850 <VL53L4A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d903      	bls.n	8001868 <VL53L4A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001860:	f06f 0301 	mvn.w	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e012      	b.n	800188e <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Start(VL53L4A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <VL53L4A2_RANGING_SENSOR_Start+0x48>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	490b      	ldr	r1, [pc, #44]	@ (800189c <VL53L4A2_RANGING_SENSOR_Start+0x4c>)
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	4610      	mov	r0, r2
 800187a:	4798      	blx	r3
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	da03      	bge.n	800188a <VL53L4A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001882:	f06f 0304 	mvn.w	r3, #4
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e001      	b.n	800188e <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000d00 	.word	0x20000d00
 800189c:	20000cf4 	.word	0x20000cf4

080018a0 <VL53L4A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d903      	bls.n	80018b6 <VL53L4A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018ae:	f06f 0301 	mvn.w	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e011      	b.n	80018da <VL53L4A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Stop(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <VL53L4A2_RANGING_SENSOR_Stop+0x44>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <VL53L4A2_RANGING_SENSOR_Stop+0x48>)
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018c4:	4610      	mov	r0, r2
 80018c6:	4798      	blx	r3
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da03      	bge.n	80018d6 <VL53L4A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80018ce:	f06f 0304 	mvn.w	r3, #4
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e001      	b.n	80018da <VL53L4A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000d00 	.word	0x20000d00
 80018e8:	20000cf4 	.word	0x20000cf4

080018ec <VL53L4A2_RANGING_SENSOR_OffsetCalibration>:
  * @param Instance    Ranging sensor instance.
  * @param CalDistance   Calibration distance in mm.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_OffsetCalibration(uint32_t Instance, uint32_t CalDistance)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d903      	bls.n	8001904 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018fc:	f06f 0301 	mvn.w	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e010      	b.n	8001926 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x3a>
  }
  else if (VL53L4CX_OffsetCalibration(VL53L4A2_RANGING_SENSOR_CompObj[Instance], CalDistance) < 0)
 8001904:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x44>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f011 fe30 	bl	8013574 <VL53L4CX_OffsetCalibration>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	da03      	bge.n	8001922 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800191a:	f06f 0304 	mvn.w	r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e001      	b.n	8001926 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000cf4 	.word	0x20000cf4

08001934 <VL53L4CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L4CX_Probe(uint32_t Instance)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	@ 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  VL53L4CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L4CX_Object_t   VL53L4CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L4CX_ADDRESS;
 800193c:	2352      	movs	r3, #82	@ 0x52
 800193e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L4A2_I2C_INIT;
 8001940:	4b38      	ldr	r3, [pc, #224]	@ (8001a24 <VL53L4CX_Probe+0xf0>)
 8001942:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L4A2_I2C_DEINIT;
 8001944:	4b38      	ldr	r3, [pc, #224]	@ (8001a28 <VL53L4CX_Probe+0xf4>)
 8001946:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L4A2_I2C_WRITEREG;
 8001948:	4b38      	ldr	r3, [pc, #224]	@ (8001a2c <VL53L4CX_Probe+0xf8>)
 800194a:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L4A2_I2C_READREG;
 800194c:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <VL53L4CX_Probe+0xfc>)
 800194e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L4A2_GETTICK;
 8001950:	4b38      	ldr	r3, [pc, #224]	@ (8001a34 <VL53L4CX_Probe+0x100>)
 8001952:	623b      	str	r3, [r7, #32]

  if (VL53L4CX_RegisterBusIO(&(VL53L4CXObj[Instance]), &IOCtx) != VL53L4CX_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	4a36      	ldr	r2, [pc, #216]	@ (8001a38 <VL53L4CX_Probe+0x104>)
 8001960:	4413      	add	r3, r2
 8001962:	f107 020c 	add.w	r2, r7, #12
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f011 fb1a 	bl	8012fa2 <VL53L4CX_RegisterBusIO>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <VL53L4CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001974:	f06f 0304 	mvn.w	r3, #4
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
 800197a:	e04d      	b.n	8001a18 <VL53L4CX_Probe+0xe4>
  }
  else
  {
    VL53L4A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L4CX_RANGING_SENSOR_Driver;
 800197c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <VL53L4CX_Probe+0x108>)
 800197e:	4a30      	ldr	r2, [pc, #192]	@ (8001a40 <VL53L4CX_Probe+0x10c>)
 8001980:	601a      	str	r2, [r3, #0]
    VL53L4A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L4CXObj[Instance]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a38 <VL53L4CX_Probe+0x104>)
 800198e:	441a      	add	r2, r3
 8001990:	492c      	ldr	r1, [pc, #176]	@ (8001a44 <VL53L4CX_Probe+0x110>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L4CX_ReadID(&(VL53L4CXObj[Instance]), &id) != VL53L4CX_OK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	4a25      	ldr	r2, [pc, #148]	@ (8001a38 <VL53L4CX_Probe+0x104>)
 80019a4:	4413      	add	r3, r2
 80019a6:	f107 0208 	add.w	r2, r7, #8
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f011 fbaa 	bl	8013106 <VL53L4CX_ReadID>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <VL53L4CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80019b8:	f06f 0304 	mvn.w	r3, #4
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019be:	e02b      	b.n	8001a18 <VL53L4CX_Probe+0xe4>
    }
    else if (id != VL53L4CX_ID)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d003      	beq.n	80019d2 <VL53L4CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80019ca:	f06f 0306 	mvn.w	r3, #6
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d0:	e022      	b.n	8001a18 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->Init(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) != VL53L4CX_OK)
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <VL53L4CX_Probe+0x108>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	491a      	ldr	r1, [pc, #104]	@ (8001a44 <VL53L4CX_Probe+0x110>)
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019e0:	4610      	mov	r0, r2
 80019e2:	4798      	blx	r3
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <VL53L4CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80019ea:	f06f 0304 	mvn.w	r3, #4
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f0:	e012      	b.n	8001a18 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L4A2_RANGING_SENSOR_CompObj[Instance],
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <VL53L4CX_Probe+0x108>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4912      	ldr	r1, [pc, #72]	@ (8001a44 <VL53L4CX_Probe+0x110>)
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a00:	4911      	ldr	r1, [pc, #68]	@ (8001a48 <VL53L4CX_Probe+0x114>)
 8001a02:	4610      	mov	r0, r2
 8001a04:	4798      	blx	r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <VL53L4CX_Probe+0xe0>
                                                          &VL53L4A2_RANGING_SENSOR_Cap) != VL53L4CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a0c:	f06f 0304 	mvn.w	r3, #4
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a12:	e001      	b.n	8001a18 <VL53L4CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3728      	adds	r7, #40	@ 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	080011d5 	.word	0x080011d5
 8001a28:	08001251 	.word	0x08001251
 8001a2c:	08001369 	.word	0x08001369
 8001a30:	080013bd 	.word	0x080013bd
 8001a34:	08001411 	.word	0x08001411
 8001a38:	20000d18 	.word	0x20000d18
 8001a3c:	20000d00 	.word	0x20000d00
 8001a40:	20000038 	.word	0x20000038
 8001a44:	20000cf4 	.word	0x20000cf4
 8001a48:	20000d04 	.word	0x20000d04

08001a4c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e051      	b.n	8001b0c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	7b1a      	ldrb	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <LSM6DSO_RegisterBusIO+0xcc>)
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <LSM6DSO_RegisterBusIO+0xd0>)
 8001aaa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	69da      	ldr	r2, [r3, #28]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e020      	b.n	8001b0c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4798      	blx	r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e016      	b.n	8001b0c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d112      	bne.n	8001b0c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10d      	bne.n	8001b0c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001af0:	230c      	movs	r3, #12
 8001af2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8001af4:	7afb      	ldrb	r3, [r7, #11]
 8001af6:	461a      	mov	r2, r3
 8001af8:	2112      	movs	r1, #18
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fa23 	bl	8001f46 <LSM6DSO_Write_Reg>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	08001fc9 	.word	0x08001fc9
 8001b1c:	08001fff 	.word	0x08001fff

08001b20 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d00b      	beq.n	8001b48 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3320      	adds	r3, #32
 8001b34:	2180      	movs	r1, #128	@ 0x80
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fe5f 	bl	80027fa <lsm6dso_i3c_disable_set>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e06a      	b.n	8001c1e <LSM6DSO_Init+0xfe>
    }
  }

  /* Set main memory bank */
  if (LSM6DSO_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO_USER_BANK) != LSM6DSO_OK)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fa16 	bl	8001f7c <LSM6DSO_Set_Mem_Bank>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <LSM6DSO_Init+0x3c>
  {
    return LSM6DSO_ERROR;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e060      	b.n	8001c1e <LSM6DSO_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3320      	adds	r3, #32
 8001b60:	2101      	movs	r1, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fe23 	bl	80027ae <lsm6dso_auto_increment_set>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <LSM6DSO_Init+0x54>
  {
    return LSM6DSO_ERROR;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e054      	b.n	8001c1e <LSM6DSO_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3320      	adds	r3, #32
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fd44 	bl	8002608 <lsm6dso_block_data_update_set>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <LSM6DSO_Init+0x6c>
  {
    return LSM6DSO_ERROR;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e048      	b.n	8001c1e <LSM6DSO_Init+0xfe>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3320      	adds	r3, #32
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fe79 	bl	800288a <lsm6dso_fifo_mode_set>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <LSM6DSO_Init+0x84>
  {
    return LSM6DSO_ERROR;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e03c      	b.n	8001c1e <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3320      	adds	r3, #32
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 facc 	bl	8002150 <lsm6dso_xl_data_rate_set>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <LSM6DSO_Init+0xa4>
  {
    return LSM6DSO_ERROR;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e02c      	b.n	8001c1e <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3320      	adds	r3, #32
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fa62 	bl	8002094 <lsm6dso_xl_full_scale_set>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <LSM6DSO_Init+0xbc>
  {
    return LSM6DSO_ERROR;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e020      	b.n	8001c1e <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2204      	movs	r2, #4
 8001be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3320      	adds	r3, #32
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fc12 	bl	8002414 <lsm6dso_gy_data_rate_set>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <LSM6DSO_Init+0xdc>
  {
    return LSM6DSO_ERROR;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e010      	b.n	8001c1e <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3320      	adds	r3, #32
 8001c00:	2106      	movs	r1, #6
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fb9e 	bl	8002344 <lsm6dso_gy_full_scale_set>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <LSM6DSO_Init+0xf4>
  {
    return LSM6DSO_ERROR;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e004      	b.n	8001c1e <LSM6DSO_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e014      	b.n	8001c66 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f103 0220 	add.w	r2, r3, #32
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 fa80 	bl	8002150 <lsm6dso_xl_data_rate_set>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e004      	b.n	8001c66 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3320      	adds	r3, #32
 8001c82:	f107 020b 	add.w	r2, r7, #11
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fa29 	bl	80020e0 <lsm6dso_xl_full_scale_get>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
 8001c98:	e023      	b.n	8001ce2 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d81b      	bhi.n	8001cd8 <LSM6DSO_ACC_GetSensitivity+0x68>
 8001ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca8 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cd1 	.word	0x08001cd1
 8001cb0:	08001cc1 	.word	0x08001cc1
 8001cb4:	08001cc9 	.word	0x08001cc9
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4a0c      	ldr	r2, [pc, #48]	@ (8001cec <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8001cbc:	601a      	str	r2, [r3, #0]
      break;
 8001cbe:	e00f      	b.n	8001ce0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf0 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8001cc4:	601a      	str	r2, [r3, #0]
      break;
 8001cc6:	e00b      	b.n	8001ce0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8001ccc:	601a      	str	r2, [r3, #0]
      break;
 8001cce:	e007      	b.n	8001ce0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8001cd4:	601a      	str	r2, [r3, #0]
      break;
 8001cd6:	e003      	b.n	8001ce0 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	60fb      	str	r3, [r7, #12]
      break;
 8001cde:	bf00      	nop
  }

  return ret;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	3d79db23 	.word	0x3d79db23
 8001cf0:	3df9db23 	.word	0x3df9db23
 8001cf4:	3e79db23 	.word	0x3e79db23
 8001cf8:	3ef9db23 	.word	0x3ef9db23

08001cfc <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3320      	adds	r3, #32
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fce4 	bl	80026e4 <lsm6dso_acceleration_raw_get>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	e03c      	b.n	8001da2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff9e 	bl	8001c70 <LSM6DSO_ACC_GetSensitivity>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e030      	b.n	8001da2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001d40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d58:	ee17 2a90 	vmov	r2, s15
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001d60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d78:	ee17 2a90 	vmov	r2, s15
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001d80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d98:	ee17 2a90 	vmov	r2, s15
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e014      	b.n	8001dea <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f103 0220 	add.w	r2, r3, #32
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f000 fb20 	bl	8002414 <lsm6dso_gy_data_rate_set>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e004      	b.n	8001dea <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3320      	adds	r3, #32
 8001e06:	f107 020b 	add.w	r2, r7, #11
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fabf 	bl	8002390 <lsm6dso_gy_full_scale_get>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	e02d      	b.n	8001e7a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d825      	bhi.n	8001e70 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8001e24:	a201      	add	r2, pc, #4	@ (adr r2, 8001e2c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e51 	.word	0x08001e51
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001e59 	.word	0x08001e59
 8001e38:	08001e71 	.word	0x08001e71
 8001e3c:	08001e61 	.word	0x08001e61
 8001e40:	08001e71 	.word	0x08001e71
 8001e44:	08001e69 	.word	0x08001e69
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e84 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8001e4c:	601a      	str	r2, [r3, #0]
      break;
 8001e4e:	e013      	b.n	8001e78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8001e54:	601a      	str	r2, [r3, #0]
      break;
 8001e56:	e00f      	b.n	8001e78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8001e5c:	601a      	str	r2, [r3, #0]
      break;
 8001e5e:	e00b      	b.n	8001e78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8001e64:	601a      	str	r2, [r3, #0]
      break;
 8001e66:	e007      	b.n	8001e78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8001e6c:	601a      	str	r2, [r3, #0]
      break;
 8001e6e:	e003      	b.n	8001e78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	60fb      	str	r3, [r7, #12]
      break;
 8001e76:	bf00      	nop
  }

  return ret;
 8001e78:	68fb      	ldr	r3, [r7, #12]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	408c0000 	.word	0x408c0000
 8001e88:	410c0000 	.word	0x410c0000
 8001e8c:	418c0000 	.word	0x418c0000
 8001e90:	420c0000 	.word	0x420c0000
 8001e94:	428c0000 	.word	0x428c0000

08001e98 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3320      	adds	r3, #32
 8001eac:	f107 0210 	add.w	r2, r7, #16
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fbce 	bl	8002654 <lsm6dso_angular_rate_raw_get>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <LSM6DSO_GYRO_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e03c      	b.n	8001f3e <LSM6DSO_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ff92 	bl	8001df4 <LSM6DSO_GYRO_GetSensitivity>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <LSM6DSO_GYRO_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e030      	b.n	8001f3e <LSM6DSO_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001edc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef4:	ee17 2a90 	vmov	r2, s15
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001efc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f14:	ee17 2a90 	vmov	r2, s15
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001f1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f34:	ee17 2a90 	vmov	r2, s15
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70fb      	strb	r3, [r7, #3]
 8001f52:	4613      	mov	r3, r2
 8001f54:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f103 0020 	add.w	r0, r3, #32
 8001f5c:	1cba      	adds	r2, r7, #2
 8001f5e:	78f9      	ldrb	r1, [r7, #3]
 8001f60:	2301      	movs	r3, #1
 8001f62:	f000 f87f 	bl	8002064 <lsm6dso_write_reg>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	e000      	b.n	8001f74 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <LSM6DSO_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO_USER_BANK, 1 - LSM6DSO_SENSOR_HUB_BANK, 2 - LSM6DSO_EMBEDDED_FUNC_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Set_Mem_Bank(LSM6DSO_Object_t *pObj, uint8_t Val)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  lsm6dso_reg_access_t reg;

  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
        : (Val == 2U) ? LSM6DSO_EMBEDDED_FUNC_BANK
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d006      	beq.n	8001fa0 <LSM6DSO_Set_Mem_Bank+0x24>
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d101      	bne.n	8001f9c <LSM6DSO_Set_Mem_Bank+0x20>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <LSM6DSO_Set_Mem_Bank+0x26>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <LSM6DSO_Set_Mem_Bank+0x26>
 8001fa0:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
 8001fa2:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO_USER_BANK;

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	7afa      	ldrb	r2, [r7, #11]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fbe1 	bl	8002774 <lsm6dso_mem_bank_set>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <LSM6DSO_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO_ERROR;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	72fb      	strb	r3, [r7, #11]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	695c      	ldr	r4, [r3, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	7b1b      	ldrb	r3, [r3, #12]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	7afb      	ldrb	r3, [r7, #11]
 8001fec:	b299      	uxth	r1, r3
 8001fee:	893b      	ldrh	r3, [r7, #8]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	47a0      	blx	r4
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd90      	pop	{r4, r7, pc}

08001ffe <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ffe:	b590      	push	{r4, r7, lr}
 8002000:	b087      	sub	sp, #28
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	461a      	mov	r2, r3
 800200a:	460b      	mov	r3, r1
 800200c:	72fb      	strb	r3, [r7, #11]
 800200e:	4613      	mov	r3, r2
 8002010:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	691c      	ldr	r4, [r3, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	7b1b      	ldrb	r3, [r3, #12]
 800201e:	4618      	mov	r0, r3
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	b299      	uxth	r1, r3
 8002024:	893b      	ldrh	r3, [r7, #8]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	47a0      	blx	r4
 800202a:	4603      	mov	r3, r0
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}

08002034 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	461a      	mov	r2, r3
 8002040:	460b      	mov	r3, r1
 8002042:	72fb      	strb	r3, [r7, #11]
 8002044:	4613      	mov	r3, r2
 8002046:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685c      	ldr	r4, [r3, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68d8      	ldr	r0, [r3, #12]
 8002050:	893b      	ldrh	r3, [r7, #8]
 8002052:	7af9      	ldrb	r1, [r7, #11]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	47a0      	blx	r4
 8002058:	6178      	str	r0, [r7, #20]

  return ret;
 800205a:	697b      	ldr	r3, [r7, #20]
}
 800205c:	4618      	mov	r0, r3
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd90      	pop	{r4, r7, pc}

08002064 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	72fb      	strb	r3, [r7, #11]
 8002074:	4613      	mov	r3, r2
 8002076:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681c      	ldr	r4, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68d8      	ldr	r0, [r3, #12]
 8002080:	893b      	ldrh	r3, [r7, #8]
 8002082:	7af9      	ldrb	r1, [r7, #11]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	47a0      	blx	r4
 8002088:	6178      	str	r0, [r7, #20]

  return ret;
 800208a:	697b      	ldr	r3, [r7, #20]
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80020a0:	f107 0208 	add.w	r2, r7, #8
 80020a4:	2301      	movs	r3, #1
 80020a6:	2110      	movs	r1, #16
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ffc3 	bl	8002034 <lsm6dso_read_reg>
 80020ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	7a3b      	ldrb	r3, [r7, #8]
 80020c0:	f362 0383 	bfi	r3, r2, #2, #2
 80020c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80020c6:	f107 0208 	add.w	r2, r7, #8
 80020ca:	2301      	movs	r3, #1
 80020cc:	2110      	movs	r1, #16
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffc8 	bl	8002064 <lsm6dso_write_reg>
 80020d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80020ea:	f107 0208 	add.w	r2, r7, #8
 80020ee:	2301      	movs	r3, #1
 80020f0:	2110      	movs	r1, #16
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff9e 	bl	8002034 <lsm6dso_read_reg>
 80020f8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80020fa:	7a3b      	ldrb	r3, [r7, #8]
 80020fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b03      	cmp	r3, #3
 8002104:	d81a      	bhi.n	800213c <lsm6dso_xl_full_scale_get+0x5c>
 8002106:	a201      	add	r2, pc, #4	@ (adr r2, 800210c <lsm6dso_xl_full_scale_get+0x2c>)
 8002108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210c:	0800211d 	.word	0x0800211d
 8002110:	08002125 	.word	0x08002125
 8002114:	0800212d 	.word	0x0800212d
 8002118:	08002135 	.word	0x08002135
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
      break;
 8002122:	e00f      	b.n	8002144 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
      break;
 800212a:	e00b      	b.n	8002144 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2202      	movs	r2, #2
 8002130:	701a      	strb	r2, [r3, #0]
      break;
 8002132:	e007      	b.n	8002144 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2203      	movs	r2, #3
 8002138:	701a      	strb	r2, [r3, #0]
      break;
 800213a:	e003      	b.n	8002144 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
      break;
 8002142:	bf00      	nop
  }

  return ret;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop

08002150 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fbb5 	bl	80028d6 <lsm6dso_fsm_enable_get>
 800216c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <lsm6dso_xl_data_rate_set+0x28>
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	e0e0      	b.n	800233a <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002178:	7b3b      	ldrb	r3, [r7, #12]
 800217a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800217e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002186:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002188:	4313      	orrs	r3, r2
 800218a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800218c:	7b3b      	ldrb	r3, [r7, #12]
 800218e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002192:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002194:	4313      	orrs	r3, r2
 8002196:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002198:	7b3b      	ldrb	r3, [r7, #12]
 800219a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800219e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80021a4:	7b3b      	ldrb	r3, [r7, #12]
 80021a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80021b0:	7b3b      	ldrb	r3, [r7, #12]
 80021b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80021bc:	7b3b      	ldrb	r3, [r7, #12]
 80021be:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80021c2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80021c8:	7b3b      	ldrb	r3, [r7, #12]
 80021ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80021ce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80021d4:	7b7b      	ldrb	r3, [r7, #13]
 80021d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021da:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80021dc:	4313      	orrs	r3, r2
 80021de:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80021e0:	7b7b      	ldrb	r3, [r7, #13]
 80021e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021e6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80021ec:	7b7b      	ldrb	r3, [r7, #13]
 80021ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021f2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80021f8:	7b7b      	ldrb	r3, [r7, #13]
 80021fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021fe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002200:	4313      	orrs	r3, r2
 8002202:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002204:	7b7b      	ldrb	r3, [r7, #13]
 8002206:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800220a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800220c:	4313      	orrs	r3, r2
 800220e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002210:	7b7b      	ldrb	r3, [r7, #13]
 8002212:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002216:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002218:	4313      	orrs	r3, r2
 800221a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800221c:	7b7b      	ldrb	r3, [r7, #13]
 800221e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002222:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002224:	4313      	orrs	r3, r2
 8002226:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002228:	7b7b      	ldrb	r3, [r7, #13]
 800222a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800222e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002230:	4313      	orrs	r3, r2
 8002232:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002234:	2b01      	cmp	r3, #1
 8002236:	d164      	bne.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002238:	f107 030b 	add.w	r3, r7, #11
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fb6a 	bl	8002918 <lsm6dso_fsm_data_rate_get>
 8002244:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <lsm6dso_xl_data_rate_set+0x100>
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	e074      	b.n	800233a <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d852      	bhi.n	80022fc <lsm6dso_xl_data_rate_set+0x1ac>
 8002256:	a201      	add	r2, pc, #4	@ (adr r2, 800225c <lsm6dso_xl_data_rate_set+0x10c>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800226d 	.word	0x0800226d
 8002260:	0800227f 	.word	0x0800227f
 8002264:	0800229d 	.word	0x0800229d
 8002268:	080022c7 	.word	0x080022c7
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002276:	e044      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	75fb      	strb	r3, [r7, #23]
        break;
 800227c:	e041      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002284:	2302      	movs	r3, #2
 8002286:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002288:	e03b      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002290:	2302      	movs	r3, #2
 8002292:	75fb      	strb	r3, [r7, #23]
        break;
 8002294:	e035      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	75fb      	strb	r3, [r7, #23]
        break;
 800229a:	e032      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80022a2:	2303      	movs	r3, #3
 80022a4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80022a6:	e02c      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80022ae:	2303      	movs	r3, #3
 80022b0:	75fb      	strb	r3, [r7, #23]
        break;
 80022b2:	e026      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d102      	bne.n	80022c0 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80022ba:	2303      	movs	r3, #3
 80022bc:	75fb      	strb	r3, [r7, #23]
        break;
 80022be:	e020      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	75fb      	strb	r3, [r7, #23]
        break;
 80022c4:	e01d      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80022cc:	2304      	movs	r3, #4
 80022ce:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80022d0:	e017      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80022d8:	2304      	movs	r3, #4
 80022da:	75fb      	strb	r3, [r7, #23]
        break;
 80022dc:	e011      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d102      	bne.n	80022ea <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80022e4:	2304      	movs	r3, #4
 80022e6:	75fb      	strb	r3, [r7, #23]
        break;
 80022e8:	e00b      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d102      	bne.n	80022f6 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80022f0:	2304      	movs	r3, #4
 80022f2:	75fb      	strb	r3, [r7, #23]
        break;
 80022f4:	e005      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	75fb      	strb	r3, [r7, #23]
        break;
 80022fa:	e002      	b.n	8002302 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	75fb      	strb	r3, [r7, #23]
        break;
 8002300:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002302:	f107 0208 	add.w	r2, r7, #8
 8002306:	2301      	movs	r3, #1
 8002308:	2110      	movs	r1, #16
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fe92 	bl	8002034 <lsm6dso_read_reg>
 8002310:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	b2da      	uxtb	r2, r3
 800231a:	7a3b      	ldrb	r3, [r7, #8]
 800231c:	f362 1307 	bfi	r3, r2, #4, #4
 8002320:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002322:	f107 0208 	add.w	r2, r7, #8
 8002326:	2301      	movs	r3, #1
 8002328:	2110      	movs	r1, #16
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fe9a 	bl	8002064 <lsm6dso_write_reg>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	613b      	str	r3, [r7, #16]

  return ret;
 8002338:	693b      	ldr	r3, [r7, #16]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop

08002344 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002350:	f107 0208 	add.w	r2, r7, #8
 8002354:	2301      	movs	r3, #1
 8002356:	2111      	movs	r1, #17
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fe6b 	bl	8002034 <lsm6dso_read_reg>
 800235e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	b2da      	uxtb	r2, r3
 800236e:	7a3b      	ldrb	r3, [r7, #8]
 8002370:	f362 0343 	bfi	r3, r2, #1, #3
 8002374:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002376:	f107 0208 	add.w	r2, r7, #8
 800237a:	2301      	movs	r3, #1
 800237c:	2111      	movs	r1, #17
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fe70 	bl	8002064 <lsm6dso_write_reg>
 8002384:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800239a:	f107 0208 	add.w	r2, r7, #8
 800239e:	2301      	movs	r3, #1
 80023a0:	2111      	movs	r1, #17
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fe46 	bl	8002034 <lsm6dso_read_reg>
 80023a8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80023aa:	7a3b      	ldrb	r3, [r7, #8]
 80023ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d824      	bhi.n	8002400 <lsm6dso_gy_full_scale_get+0x70>
 80023b6:	a201      	add	r2, pc, #4	@ (adr r2, 80023bc <lsm6dso_gy_full_scale_get+0x2c>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	080023d9 	.word	0x080023d9
 80023c0:	080023e1 	.word	0x080023e1
 80023c4:	080023e9 	.word	0x080023e9
 80023c8:	08002401 	.word	0x08002401
 80023cc:	080023f1 	.word	0x080023f1
 80023d0:	08002401 	.word	0x08002401
 80023d4:	080023f9 	.word	0x080023f9
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
      break;
 80023de:	e013      	b.n	8002408 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e00f      	b.n	8002408 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2202      	movs	r2, #2
 80023ec:	701a      	strb	r2, [r3, #0]
      break;
 80023ee:	e00b      	b.n	8002408 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2204      	movs	r2, #4
 80023f4:	701a      	strb	r2, [r3, #0]
      break;
 80023f6:	e007      	b.n	8002408 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2206      	movs	r2, #6
 80023fc:	701a      	strb	r2, [r3, #0]
      break;
 80023fe:	e003      	b.n	8002408 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
      break;
 8002406:	bf00      	nop
  }

  return ret;
 8002408:	68fb      	ldr	r3, [r7, #12]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop

08002414 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa53 	bl	80028d6 <lsm6dso_fsm_enable_get>
 8002430:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <lsm6dso_gy_data_rate_set+0x28>
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	e0e0      	b.n	80025fe <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800243c:	7b3b      	ldrb	r3, [r7, #12]
 800243e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002442:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002444:	7b3b      	ldrb	r3, [r7, #12]
 8002446:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800244a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800244c:	4313      	orrs	r3, r2
 800244e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002450:	7b3b      	ldrb	r3, [r7, #12]
 8002452:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002456:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002458:	4313      	orrs	r3, r2
 800245a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800245c:	7b3b      	ldrb	r3, [r7, #12]
 800245e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002462:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002464:	4313      	orrs	r3, r2
 8002466:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002468:	7b3b      	ldrb	r3, [r7, #12]
 800246a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800246e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002470:	4313      	orrs	r3, r2
 8002472:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002474:	7b3b      	ldrb	r3, [r7, #12]
 8002476:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800247a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800247c:	4313      	orrs	r3, r2
 800247e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002480:	7b3b      	ldrb	r3, [r7, #12]
 8002482:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002486:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002488:	4313      	orrs	r3, r2
 800248a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800248c:	7b3b      	ldrb	r3, [r7, #12]
 800248e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002492:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002494:	4313      	orrs	r3, r2
 8002496:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002498:	7b7b      	ldrb	r3, [r7, #13]
 800249a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800249e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80024a4:	7b7b      	ldrb	r3, [r7, #13]
 80024a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80024b0:	7b7b      	ldrb	r3, [r7, #13]
 80024b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80024b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80024bc:	7b7b      	ldrb	r3, [r7, #13]
 80024be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80024c2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80024c8:	7b7b      	ldrb	r3, [r7, #13]
 80024ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024ce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80024d4:	7b7b      	ldrb	r3, [r7, #13]
 80024d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80024da:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80024dc:	4313      	orrs	r3, r2
 80024de:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80024e0:	7b7b      	ldrb	r3, [r7, #13]
 80024e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80024e6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80024ec:	7b7b      	ldrb	r3, [r7, #13]
 80024ee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80024f2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d164      	bne.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80024fc:	f107 030b 	add.w	r3, r7, #11
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa08 	bl	8002918 <lsm6dso_fsm_data_rate_get>
 8002508:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <lsm6dso_gy_data_rate_set+0x100>
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	e074      	b.n	80025fe <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d852      	bhi.n	80025c0 <lsm6dso_gy_data_rate_set+0x1ac>
 800251a:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <lsm6dso_gy_data_rate_set+0x10c>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	08002531 	.word	0x08002531
 8002524:	08002543 	.word	0x08002543
 8002528:	08002561 	.word	0x08002561
 800252c:	0800258b 	.word	0x0800258b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800253a:	e044      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	75fb      	strb	r3, [r7, #23]
        break;
 8002540:	e041      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002548:	2302      	movs	r3, #2
 800254a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800254c:	e03b      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002554:	2302      	movs	r3, #2
 8002556:	75fb      	strb	r3, [r7, #23]
        break;
 8002558:	e035      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	75fb      	strb	r3, [r7, #23]
        break;
 800255e:	e032      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002566:	2303      	movs	r3, #3
 8002568:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800256a:	e02c      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002572:	2303      	movs	r3, #3
 8002574:	75fb      	strb	r3, [r7, #23]
        break;
 8002576:	e026      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d102      	bne.n	8002584 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800257e:	2303      	movs	r3, #3
 8002580:	75fb      	strb	r3, [r7, #23]
        break;
 8002582:	e020      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	75fb      	strb	r3, [r7, #23]
        break;
 8002588:	e01d      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002590:	2304      	movs	r3, #4
 8002592:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002594:	e017      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800259c:	2304      	movs	r3, #4
 800259e:	75fb      	strb	r3, [r7, #23]
        break;
 80025a0:	e011      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d102      	bne.n	80025ae <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80025a8:	2304      	movs	r3, #4
 80025aa:	75fb      	strb	r3, [r7, #23]
        break;
 80025ac:	e00b      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d102      	bne.n	80025ba <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80025b4:	2304      	movs	r3, #4
 80025b6:	75fb      	strb	r3, [r7, #23]
        break;
 80025b8:	e005      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	75fb      	strb	r3, [r7, #23]
        break;
 80025be:	e002      	b.n	80025c6 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	75fb      	strb	r3, [r7, #23]
        break;
 80025c4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80025c6:	f107 0208 	add.w	r2, r7, #8
 80025ca:	2301      	movs	r3, #1
 80025cc:	2111      	movs	r1, #17
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fd30 	bl	8002034 <lsm6dso_read_reg>
 80025d4:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	7a3b      	ldrb	r3, [r7, #8]
 80025e0:	f362 1307 	bfi	r3, r2, #4, #4
 80025e4:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80025e6:	f107 0208 	add.w	r2, r7, #8
 80025ea:	2301      	movs	r3, #1
 80025ec:	2111      	movs	r1, #17
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fd38 	bl	8002064 <lsm6dso_write_reg>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

  return ret;
 80025fc:	693b      	ldr	r3, [r7, #16]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop

08002608 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8002614:	f107 0208 	add.w	r2, r7, #8
 8002618:	2301      	movs	r3, #1
 800261a:	2112      	movs	r1, #18
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fd09 	bl	8002034 <lsm6dso_read_reg>
 8002622:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	b2da      	uxtb	r2, r3
 8002632:	7a3b      	ldrb	r3, [r7, #8]
 8002634:	f362 1386 	bfi	r3, r2, #6, #1
 8002638:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800263a:	f107 0208 	add.w	r2, r7, #8
 800263e:	2301      	movs	r3, #1
 8002640:	2112      	movs	r1, #18
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fd0e 	bl	8002064 <lsm6dso_write_reg>
 8002648:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800265e:	f107 020c 	add.w	r2, r7, #12
 8002662:	2306      	movs	r3, #6
 8002664:	2122      	movs	r1, #34	@ 0x22
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fce4 	bl	8002034 <lsm6dso_read_reg>
 800266c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800266e:	7b7b      	ldrb	r3, [r7, #13]
 8002670:	b21a      	sxth	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267c:	b29b      	uxth	r3, r3
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b29b      	uxth	r3, r3
 8002682:	7b3a      	ldrb	r2, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	b29b      	uxth	r3, r3
 8002688:	b21a      	sxth	r2, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3302      	adds	r3, #2
 8002694:	b212      	sxth	r2, r2
 8002696:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	3302      	adds	r3, #2
 800269c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	7bba      	ldrb	r2, [r7, #14]
 80026a8:	4413      	add	r3, r2
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	3302      	adds	r3, #2
 80026b0:	b212      	sxth	r2, r2
 80026b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80026b4:	7c7a      	ldrb	r2, [r7, #17]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3304      	adds	r3, #4
 80026ba:	b212      	sxth	r2, r2
 80026bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3304      	adds	r3, #4
 80026c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	7c3a      	ldrb	r2, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	3304      	adds	r3, #4
 80026d6:	b212      	sxth	r2, r2
 80026d8:	801a      	strh	r2, [r3, #0]

  return ret;
 80026da:	697b      	ldr	r3, [r7, #20]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80026ee:	f107 020c 	add.w	r2, r7, #12
 80026f2:	2306      	movs	r3, #6
 80026f4:	2128      	movs	r1, #40	@ 0x28
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fc9c 	bl	8002034 <lsm6dso_read_reg>
 80026fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80026fe:	7b7b      	ldrb	r3, [r7, #13]
 8002700:	b21a      	sxth	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270c:	b29b      	uxth	r3, r3
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	b29b      	uxth	r3, r3
 8002712:	7b3a      	ldrb	r2, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	b21a      	sxth	r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	3302      	adds	r3, #2
 8002724:	b212      	sxth	r2, r2
 8002726:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	3302      	adds	r3, #2
 800272c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002730:	b29b      	uxth	r3, r3
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b29b      	uxth	r3, r3
 8002736:	7bba      	ldrb	r2, [r7, #14]
 8002738:	4413      	add	r3, r2
 800273a:	b29a      	uxth	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	3302      	adds	r3, #2
 8002740:	b212      	sxth	r2, r2
 8002742:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002744:	7c7a      	ldrb	r2, [r7, #17]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	3304      	adds	r3, #4
 800274a:	b212      	sxth	r2, r2
 800274c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3304      	adds	r3, #4
 8002752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002756:	b29b      	uxth	r3, r3
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	b29b      	uxth	r3, r3
 800275c:	7c3a      	ldrb	r2, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	b29a      	uxth	r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3304      	adds	r3, #4
 8002766:	b212      	sxth	r2, r2
 8002768:	801a      	strh	r2, [r3, #0]

  return ret;
 800276a:	697b      	ldr	r3, [r7, #20]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8002780:	2300      	movs	r3, #0
 8002782:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	b2da      	uxtb	r2, r3
 800278c:	7a3b      	ldrb	r3, [r7, #8]
 800278e:	f362 1387 	bfi	r3, r2, #6, #2
 8002792:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8002794:	f107 0208 	add.w	r2, r7, #8
 8002798:	2301      	movs	r3, #1
 800279a:	2101      	movs	r1, #1
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fc61 	bl	8002064 <lsm6dso_write_reg>
 80027a2:	60f8      	str	r0, [r7, #12]

  return ret;
 80027a4:	68fb      	ldr	r3, [r7, #12]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80027ba:	f107 0208 	add.w	r2, r7, #8
 80027be:	2301      	movs	r3, #1
 80027c0:	2112      	movs	r1, #18
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fc36 	bl	8002034 <lsm6dso_read_reg>
 80027c8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10f      	bne.n	80027f0 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	7a3b      	ldrb	r3, [r7, #8]
 80027da:	f362 0382 	bfi	r3, r2, #2, #1
 80027de:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80027e0:	f107 0208 	add.w	r2, r7, #8
 80027e4:	2301      	movs	r3, #1
 80027e6:	2112      	movs	r1, #18
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff fc3b 	bl	8002064 <lsm6dso_write_reg>
 80027ee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027f0:	68fb      	ldr	r3, [r7, #12]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8002806:	f107 020c 	add.w	r2, r7, #12
 800280a:	2301      	movs	r3, #1
 800280c:	2118      	movs	r1, #24
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fc10 	bl	8002034 <lsm6dso_read_reg>
 8002814:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	09db      	lsrs	r3, r3, #7
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	7b3b      	ldrb	r3, [r7, #12]
 8002824:	f362 0341 	bfi	r3, r2, #1, #1
 8002828:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800282a:	f107 020c 	add.w	r2, r7, #12
 800282e:	2301      	movs	r3, #1
 8002830:	2118      	movs	r1, #24
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff fc16 	bl	8002064 <lsm6dso_write_reg>
 8002838:	4602      	mov	r2, r0
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	4413      	add	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <lsm6dso_i3c_disable_set+0x50>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	e01b      	b.n	8002882 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 800284a:	f107 0210 	add.w	r2, r7, #16
 800284e:	2301      	movs	r3, #1
 8002850:	2162      	movs	r1, #98	@ 0x62
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fbee 	bl	8002034 <lsm6dso_read_reg>
 8002858:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	b2da      	uxtb	r2, r3
 8002862:	7c3b      	ldrb	r3, [r7, #16]
 8002864:	f362 03c4 	bfi	r3, r2, #3, #2
 8002868:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 800286a:	f107 0210 	add.w	r2, r7, #16
 800286e:	2301      	movs	r3, #1
 8002870:	2162      	movs	r1, #98	@ 0x62
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fbf6 	bl	8002064 <lsm6dso_write_reg>
 8002878:	4602      	mov	r2, r0
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  return ret;
 8002880:	697b      	ldr	r3, [r7, #20]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8002896:	f107 0208 	add.w	r2, r7, #8
 800289a:	2301      	movs	r3, #1
 800289c:	210a      	movs	r1, #10
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fbc8 	bl	8002034 <lsm6dso_read_reg>
 80028a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10f      	bne.n	80028cc <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	7a3b      	ldrb	r3, [r7, #8]
 80028b6:	f362 0302 	bfi	r3, r2, #0, #3
 80028ba:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80028bc:	f107 0208 	add.w	r2, r7, #8
 80028c0:	2301      	movs	r3, #1
 80028c2:	210a      	movs	r1, #10
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fbcd 	bl	8002064 <lsm6dso_write_reg>
 80028ca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80028e0:	2102      	movs	r1, #2
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff46 	bl	8002774 <lsm6dso_mem_bank_set>
 80028e8:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80028ea:	2302      	movs	r3, #2
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	2146      	movs	r1, #70	@ 0x46
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fb9f 	bl	8002034 <lsm6dso_read_reg>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80028fe:	2100      	movs	r1, #0
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff37 	bl	8002774 <lsm6dso_mem_bank_set>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  return ret;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8002922:	2102      	movs	r1, #2
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff25 	bl	8002774 <lsm6dso_mem_bank_set>
 800292a:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <lsm6dso_fsm_data_rate_get+0x1e>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	e03a      	b.n	80029ac <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8002936:	f107 0208 	add.w	r2, r7, #8
 800293a:	2301      	movs	r3, #1
 800293c:	215f      	movs	r1, #95	@ 0x5f
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff fb78 	bl	8002034 <lsm6dso_read_reg>
 8002944:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d125      	bne.n	8002998 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 800294c:	7a3b      	ldrb	r3, [r7, #8]
 800294e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d81b      	bhi.n	8002990 <lsm6dso_fsm_data_rate_get+0x78>
 8002958:	a201      	add	r2, pc, #4	@ (adr r2, 8002960 <lsm6dso_fsm_data_rate_get+0x48>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002979 	.word	0x08002979
 8002968:	08002981 	.word	0x08002981
 800296c:	08002989 	.word	0x08002989
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
      break;
 8002976:	e010      	b.n	800299a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
      break;
 800297e:	e00c      	b.n	800299a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2202      	movs	r2, #2
 8002984:	701a      	strb	r2, [r3, #0]
      break;
 8002986:	e008      	b.n	800299a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2203      	movs	r2, #3
 800298c:	701a      	strb	r2, [r3, #0]
      break;
 800298e:	e004      	b.n	800299a <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
      break;
 8002996:	e000      	b.n	800299a <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8002998:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800299a:	2100      	movs	r1, #0
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff fee9 	bl	8002774 <lsm6dso_mem_bank_set>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  return ret;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3318      	adds	r3, #24
 80029c8:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 80029d0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	2101      	movs	r1, #1
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f010 f8e7 	bl	8012bb0 <VL53LX_WrByte>
 80029e2:	4603      	mov	r3, r0
 80029e4:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80029f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8002a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8002a16:	2101      	movs	r1, #1
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f001 fe7a 	bl	8004712 <VL53LX_data_init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8002a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8002a2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a2e:	2102      	movs	r1, #2
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f885 	bl	8002b40 <SetPresetModeL3CX>
 8002a36:	4603      	mov	r3, r0
 8002a38:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8002a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002a42:	f248 2135 	movw	r1, #33333	@ 0x8235
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f980 	bl	8002d4c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8002a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002a64:	220c      	movs	r2, #12
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f01a fa17 	bl	801ce9c <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8002a76:	2102      	movs	r1, #2
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f004 f86e 	bl	8006b5a <VL53LX_set_dmax_mode>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8002a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d105      	bne.n	8002a96 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 ff57 	bl	8003940 <VL53LX_SmudgeCorrectionEnable>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002a96:	2320      	movs	r3, #32
 8002a98:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8002aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8002ac4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f00f fc2a 	bl	8012322 <VL53LX_poll_for_boot_completion>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8002ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8002af0:	4a12      	ldr	r2, [pc, #72]	@ (8002b3c <ComputeDevicePresetMode+0x5c>)
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	4611      	mov	r1, r2
 8002afa:	8019      	strh	r1, [r3, #0]
 8002afc:	3302      	adds	r3, #2
 8002afe:	0c12      	lsrs	r2, r2, #16
 8002b00:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d002      	beq.n	8002b0e <ComputeDevicePresetMode+0x2e>
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d003      	beq.n	8002b14 <ComputeDevicePresetMode+0x34>
 8002b0c:	e005      	b.n	8002b1a <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
		break;
 8002b12:	e004      	b.n	8002b1e <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
		break;
 8002b18:	e001      	b.n	8002b1e <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	3310      	adds	r3, #16
 8002b22:	443b      	add	r3, r7
 8002b24:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	701a      	strb	r2, [r3, #0]

	return Status;
 8002b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	0801df40 	.word	0x0801df40

08002b40 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b08e      	sub	sp, #56	@ 0x38
 8002b44:	af04      	add	r7, sp, #16
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002b64:	2320      	movs	r3, #32
 8002b66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8002b6a:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffb4 	bl	8002ae0 <ComputeDevicePresetMode>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8002b7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d112      	bne.n	8002bac <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8002b86:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002b8a:	f107 001c 	add.w	r0, r7, #28
 8002b8e:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	f107 0318 	add.w	r3, r7, #24
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f002 fa19 	bl	8004fd8 <VL53LX_get_preset_mode_timing_cfg>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8002bac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d112      	bne.n	8002bda <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8002bb4:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8002bb8:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8002bba:	69fd      	ldr	r5, [r7, #28]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	9102      	str	r1, [sp, #8]
 8002bc4:	9201      	str	r2, [sp, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	462b      	mov	r3, r5
 8002bca:	4622      	mov	r2, r4
 8002bcc:	4601      	mov	r1, r0
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f002 fa63 	bl	800509a <VL53LX_set_preset_mode>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8002bda:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002be8:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3728      	adds	r7, #40	@ 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdb0      	pop	{r4, r5, r7, pc}

08002bf6 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3318      	adds	r3, #24
 8002c06:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f893 3393 	ldrb.w	r3, [r3, #915]	@ 0x393
 8002c0e:	2baa      	cmp	r3, #170	@ 0xaa
 8002c10:	d106      	bne.n	8002c20 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f893 3392 	ldrb.w	r3, [r3, #914]	@ 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8002c18:	2beb      	cmp	r3, #235	@ 0xeb
 8002c1a:	d101      	bne.n	8002c20 <IsL4+0x2a>
		devL4 = 1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
	return devL4;
 8002c20:	68fb      	ldr	r3, [r7, #12]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002c3a:	793b      	ldrb	r3, [r7, #4]
 8002c3c:	2b0f      	cmp	r3, #15
 8002c3e:	d808      	bhi.n	8002c52 <CheckValidRectRoi+0x24>
 8002c40:	797b      	ldrb	r3, [r7, #5]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	d805      	bhi.n	8002c52 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002c46:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d802      	bhi.n	8002c52 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	d901      	bls.n	8002c56 <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002c52:	23fc      	movs	r3, #252	@ 0xfc
 8002c54:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8002c56:	793a      	ldrb	r2, [r7, #4]
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d803      	bhi.n	8002c66 <CheckValidRectRoi+0x38>
 8002c5e:	797a      	ldrb	r2, [r7, #5]
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d201      	bcs.n	8002c6a <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002c66:	23fc      	movs	r3, #252	@ 0xfc
 8002c68:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b088      	sub	sp, #32
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d008      	beq.n	8002cae <VL53LX_SetDistanceMode+0x34>
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d005      	beq.n	8002cae <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d002      	beq.n	8002cae <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8002ca8:	f06f 0303 	mvn.w	r3, #3
 8002cac:	e049      	b.n	8002d42 <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffa1 	bl	8002bf6 <IsL4>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <VL53LX_SetDistanceMode+0x4c>
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8002cc0:	f06f 0303 	mvn.w	r3, #3
 8002cc4:	e03d      	b.n	8002d42 <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8002ccc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	f107 0210 	add.w	r2, r7, #16
 8002cdc:	f107 010c 	add.w	r1, r7, #12
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f002 f854 	bl	8004d8e <VL53LX_get_timeouts_us>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8002cea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d107      	bne.n	8002d02 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff21 	bl	8002b40 <SetPresetModeL3CX>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8002d02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d10:	461a      	mov	r2, r3
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	f882 34e0 	strb.w	r3, [r2, #1248]	@ 0x4e0
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002d18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10e      	bne.n	8002d3e <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 fff8 	bl	8004d1c <VL53LX_set_timeouts_us>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8002d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	629a      	str	r2, [r3, #40]	@ 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002d3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	@ 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8002d68:	4b31      	ldr	r3, [pc, #196]	@ (8002e30 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8002d6a:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4a31      	ldr	r2, [pc, #196]	@ (8002e34 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d902      	bls.n	8002d7a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002d74:	23fc      	movs	r3, #252	@ 0xfc
 8002d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53LX_ERROR_NONE)
 8002d7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	f107 0210 	add.w	r2, r7, #16
 8002d8a:	f107 010c 	add.w	r1, r7, #12
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f001 fffd 	bl	8004d8e <VL53LX_get_timeouts_us>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8002d9a:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8002d9e:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8002da0:	2306      	movs	r3, #6
 8002da2:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff26 	bl	8002bf6 <IsL4>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8002db0:	4b21      	ldr	r3, [pc, #132]	@ (8002e38 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8002db2:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d803      	bhi.n	8002dc4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002dbc:	23fc      	movs	r3, #252	@ 0xfc
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002dc2:	e003      	b.n	8002dcc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8002dca:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11c      	bne.n	8002e0e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d203      	bcs.n	8002de4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8002ddc:	23fc      	movs	r3, #252	@ 0xfc
 8002dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002de2:	e00d      	b.n	8002e00 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8002dee:	68f9      	ldr	r1, [r7, #12]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 ff91 	bl	8004d1c <VL53LX_set_timeouts_us>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8002e00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	629a      	str	r2, [r3, #40]	@ 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002e0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f8c2 34e4 	str.w	r3, [r2, #1252]	@ 0x4e4
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002e24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	@ 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	00086470 	.word	0x00086470
 8002e34:	00989680 	.word	0x00989680
 8002e38:	00030d40 	.word	0x00030d40

08002e3c <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b092      	sub	sp, #72	@ 0x48
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff feeb 	bl	8002c2e <CheckValidRectRoi>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (Status != VL53LX_ERROR_NONE)
 8002e5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <VL53LX_SetUserROI+0x30>
		return VL53LX_ERROR_INVALID_PARAMS;
 8002e66:	f06f 0303 	mvn.w	r3, #3
 8002e6a:	e050      	b.n	8002f0e <VL53LX_SetUserROI+0xd2>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	789b      	ldrb	r3, [r3, #2]
 8002e70:	461a      	mov	r2, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	3301      	adds	r3, #1
 8002e7a:	0fda      	lsrs	r2, r3, #31
 8002e7c:	4413      	add	r3, r2
 8002e7e:	105b      	asrs	r3, r3, #1
 8002e80:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	78db      	ldrb	r3, [r3, #3]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3301      	adds	r3, #1
 8002e92:	0fda      	lsrs	r2, r3, #31
 8002e94:	4413      	add	r3, r2
 8002e96:	105b      	asrs	r3, r3, #1
 8002e98:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	789a      	ldrb	r2, [r3, #2]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	785a      	ldrb	r2, [r3, #1]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	78db      	ldrb	r3, [r3, #3]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	zone_cfg.max_zones = 1;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8002ec0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ec4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8002ec8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002ecc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	zone_cfg.user_zones[0].width = width;
 8002ed0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002ed4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	zone_cfg.user_zones[0].height = height;
 8002ed8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ((width < 3) || (height < 3))
 8002ee0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d903      	bls.n	8002ef0 <VL53LX_SetUserROI+0xb4>
 8002ee8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d803      	bhi.n	8002ef8 <VL53LX_SetUserROI+0xbc>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002ef0:	23fc      	movs	r3, #252	@ 0xfc
 8002ef2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002ef6:	e008      	b.n	8002f0a <VL53LX_SetUserROI+0xce>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f002 f827 	bl	8004f52 <VL53LX_set_zone_config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8002f0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3748      	adds	r7, #72	@ 0x48
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3318      	adds	r3, #24
 8002f26:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f001 fa8f 	bl	800444c <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75bb      	strb	r3, [r7, #22]
 8002f32:	e01a      	b.n	8002f6a <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002f34:	7dbb      	ldrb	r3, [r7, #22]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	2100      	movs	r1, #0
 8002f40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002f44:	7dbb      	ldrb	r3, [r7, #22]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002f4e:	3318      	adds	r3, #24
 8002f50:	22ff      	movs	r2, #255	@ 0xff
 8002f52:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002f54:	7dbb      	ldrb	r3, [r7, #22]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002f5e:	331c      	adds	r3, #28
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002f64:	7dbb      	ldrb	r3, [r7, #22]
 8002f66:	3301      	adds	r3, #1
 8002f68:	75bb      	strb	r3, [r7, #22]
 8002f6a:	7dbb      	ldrb	r3, [r7, #22]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d9e1      	bls.n	8002f34 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	pdev->PreviousRangeActiveResults = 0;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7edb      	ldrb	r3, [r3, #27]
 8002f8c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8002f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2206      	movs	r2, #6
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f002 f93f 	bl	8005220 <VL53LX_init_and_start_range>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8002fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f002 fbfc 	bl	80057bc <VL53LX_stop_range>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f001 fb6d 	bl	80046a8 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7edb      	ldrb	r3, [r3, #27]
 8002fea:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f003 f8fa 	bl	80061ea <VL53LX_clear_interrupt_and_enable_next_range>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8003014:	6839      	ldr	r1, [r7, #0]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f00f f949 	bl	80122ae <VL53LX_is_new_data_ready>
 800301c:	4603      	mov	r3, r0
 800301e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <VL53LX_WaitMeasurementDataReady>:

VL53LX_Error VL53LX_WaitMeasurementDataReady(VL53LX_DEV Dev)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	Status = VL53LX_poll_for_range_completion(Dev,
 8003038:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f00f f99c 	bl	801237a <VL53LX_poll_for_range_completion>
 8003042:	4603      	mov	r3, r0
 8003044:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8003046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <ConvertStatusHisto>:

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	3b05      	subs	r3, #5
 8003062:	2b12      	cmp	r3, #18
 8003064:	d840      	bhi.n	80030e8 <ConvertStatusHisto+0x94>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <ConvertStatusHisto+0x18>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	080030b9 	.word	0x080030b9
 8003070:	080030bf 	.word	0x080030bf
 8003074:	080030cb 	.word	0x080030cb
 8003078:	080030e9 	.word	0x080030e9
 800307c:	080030e3 	.word	0x080030e3
 8003080:	080030e9 	.word	0x080030e9
 8003084:	080030e9 	.word	0x080030e9
 8003088:	080030e9 	.word	0x080030e9
 800308c:	080030e9 	.word	0x080030e9
 8003090:	080030e9 	.word	0x080030e9
 8003094:	080030e9 	.word	0x080030e9
 8003098:	080030e9 	.word	0x080030e9
 800309c:	080030e9 	.word	0x080030e9
 80030a0:	080030e9 	.word	0x080030e9
 80030a4:	080030c5 	.word	0x080030c5
 80030a8:	080030d7 	.word	0x080030d7
 80030ac:	080030e9 	.word	0x080030e9
 80030b0:	080030dd 	.word	0x080030dd
 80030b4:	080030d1 	.word	0x080030d1
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80030b8:	2304      	movs	r3, #4
 80030ba:	73fb      	strb	r3, [r7, #15]
		break;
 80030bc:	e016      	b.n	80030ec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
		break;
 80030c2:	e013      	b.n	80030ec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 80030c4:	2306      	movs	r3, #6
 80030c6:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 80030c8:	e010      	b.n	80030ec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80030ca:	2307      	movs	r3, #7
 80030cc:	73fb      	strb	r3, [r7, #15]
		break;
 80030ce:	e00d      	b.n	80030ec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 80030d0:	230c      	movs	r3, #12
 80030d2:	73fb      	strb	r3, [r7, #15]
		break;
 80030d4:	e00a      	b.n	80030ec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80030d6:	2307      	movs	r3, #7
 80030d8:	73fb      	strb	r3, [r7, #15]
		break;
 80030da:	e007      	b.n	80030ec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 80030dc:	230b      	movs	r3, #11
 80030de:	73fb      	strb	r3, [r7, #15]
		break;
 80030e0:	e004      	b.n	80030ec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]
		break;
 80030e6:	e001      	b.n	80030ec <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 80030e8:	23ff      	movs	r3, #255	@ 0xff
 80030ea:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop

080030fc <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08e      	sub	sp, #56	@ 0x38
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	4608      	mov	r0, r1
 8003106:	4611      	mov	r1, r2
 8003108:	461a      	mov	r2, r3
 800310a:	4603      	mov	r3, r0
 800310c:	70fb      	strb	r3, [r7, #3]
 800310e:	460b      	mov	r3, r1
 8003110:	70bb      	strb	r3, [r7, #2]
 8003112:	4613      	mov	r3, r2
 8003114:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	VL53LX_LLDriverData_t *pdev =
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3318      	adds	r3, #24
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8003122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003124:	33f8      	adds	r3, #248	@ 0xf8
 8003126:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
	int16_t AddOffset;
	uint8_t histo_merge_nb;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800312c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800312e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800313a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800313e:	025b      	lsls	r3, r3, #9
 8003140:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8003142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8003148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800314a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800314c:	025b      	lsls	r3, r3, #9
 800314e:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8003150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8003156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003158:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800315a:	025b      	lsls	r3, r3, #9
 800315c:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800315e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8003164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003166:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 800316a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800316c:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 800316e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003170:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8003174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003176:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8003178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800317a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 800317e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003180:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8003182:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003186:	2b11      	cmp	r3, #17
 8003188:	d009      	beq.n	800319e <SetTargetData+0xa2>
 800318a:	2b11      	cmp	r3, #17
 800318c:	dc0f      	bgt.n	80031ae <SetTargetData+0xb2>
 800318e:	2b03      	cmp	r3, #3
 8003190:	dc02      	bgt.n	8003198 <SetTargetData+0x9c>
 8003192:	2b00      	cmp	r3, #0
 8003194:	dc03      	bgt.n	800319e <SetTargetData+0xa2>
 8003196:	e00a      	b.n	80031ae <SetTargetData+0xb2>
 8003198:	2b0d      	cmp	r3, #13
 800319a:	d004      	beq.n	80031a6 <SetTargetData+0xaa>
 800319c:	e007      	b.n	80031ae <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 800319e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031a0:	2205      	movs	r2, #5
 80031a2:	749a      	strb	r2, [r3, #18]
		break;
 80031a4:	e006      	b.n	80031b4 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 80031a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031a8:	220d      	movs	r2, #13
 80031aa:	749a      	strb	r2, [r3, #18]
		break;
 80031ac:	e002      	b.n	80031b4 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 80031ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031b0:	2200      	movs	r2, #0
 80031b2:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 80031b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031b6:	7c9b      	ldrb	r3, [r3, #18]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d117      	bne.n	80031ec <SetTargetData+0xf0>
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d114      	bne.n	80031ec <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 80031c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031c4:	22ff      	movs	r2, #255	@ 0xff
 80031c6:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 80031c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ca:	2200      	movs	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 80031ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d0:	2200      	movs	r2, #0
 80031d2:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 80031d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d6:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80031da:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 80031dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031de:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80031e2:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 80031e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031e6:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80031ea:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 80031ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ee:	7c9b      	ldrb	r3, [r3, #18]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d108      	bne.n	8003206 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 80031f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff2b 	bl	8003054 <ConvertStatusHisto>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8003202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003204:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	461a      	mov	r2, r3
 800320c:	f248 0191 	movw	r1, #32913	@ 0x8091
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f003 fcf9 	bl	8006c08 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8003216:	78bb      	ldrb	r3, [r7, #2]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8003224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003226:	8a1b      	ldrh	r3, [r3, #16]
 8003228:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	86bb      	strh	r3, [r7, #52]	@ 0x34

	pRangeData->ExtendedRange = 0;
 800322e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003230:	2200      	movs	r2, #0
 8003232:	74da      	strb	r2, [r3, #19]


	Status = VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8003234:	f107 030b 	add.w	r3, r7, #11
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f009 fc03 	bl	800ca46 <VL53LX_compute_histo_merge_nb>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if ((active_results != 1) ||
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d109      	bne.n	8003260 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003252:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
	if ((active_results != 1) ||
 8003256:	2b01      	cmp	r3, #1
 8003258:	d102      	bne.n	8003260 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <SetTargetData+0x168>
		ExtendedRangeEnabled = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 81db 	beq.w	8003622 <SetTargetData+0x526>
		(pRangeData->RangeStatus ==
 800326c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800326e:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8003270:	2b07      	cmp	r3, #7
 8003272:	d004      	beq.n	800327e <SetTargetData+0x182>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8003274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003276:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8003278:	2b04      	cmp	r3, #4
 800327a:	f040 81d2 	bne.w	8003622 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 800327e:	787b      	ldrb	r3, [r7, #1]
 8003280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003282:	4413      	add	r3, r2
 8003284:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003288:	3318      	adds	r3, #24
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b07      	cmp	r3, #7
 800328e:	d01c      	beq.n	80032ca <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8003290:	787b      	ldrb	r3, [r7, #1]
 8003292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003294:	4413      	add	r3, r2
 8003296:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800329a:	3318      	adds	r3, #24
 800329c:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d013      	beq.n	80032ca <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80032a2:	787b      	ldrb	r3, [r7, #1]
 80032a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80032ac:	3318      	adds	r3, #24
 80032ae:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 81b6 	bne.w	8003622 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80032b6:	787b      	ldrb	r3, [r7, #1]
 80032b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80032c0:	331c      	adds	r3, #28
 80032c2:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 81ac 	bne.w	8003622 <SetTargetData+0x526>
	{
		if (((pdev->PreviousStreamCount) ==
 80032ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80032d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80032d4:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d8:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 80032dc:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80032de:	429a      	cmp	r2, r3
 80032e0:	d00c      	beq.n	80032fc <SetTargetData+0x200>
		|| ((pdev->PreviousStreamCount) ==
 80032e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80032e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80032ec:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80032ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f0:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 80032f4:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80032f6:	429a      	cmp	r2, r3
 80032f8:	f040 816b 	bne.w	80035d2 <SetTargetData+0x4d6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80032fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003302:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003308:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800330c:	3308      	adds	r3, #8
 800330e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003312:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	b29b      	uxth	r3, r3
 8003318:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch (pdev->preset_mode) {
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	2b21      	cmp	r3, #33	@ 0x21
 8003326:	d008      	beq.n	800333a <SetTargetData+0x23e>
 8003328:	2b21      	cmp	r3, #33	@ 0x21
 800332a:	f300 814e 	bgt.w	80035ca <SetTargetData+0x4ce>
 800332e:	2b1b      	cmp	r3, #27
 8003330:	f000 80d7 	beq.w	80034e2 <SetTargetData+0x3e6>
 8003334:	2b1e      	cmp	r3, #30
 8003336:	d004      	beq.n	8003342 <SetTargetData+0x246>
 8003338:	e147      	b.n	80035ca <SetTargetData+0x4ce>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8003340:	e147      	b.n	80035d2 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8003348:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800334c:	429a      	cmp	r2, r3
 800334e:	dd0e      	ble.n	800336e <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003352:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003356:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800335a:	429a      	cmp	r2, r3
 800335c:	da07      	bge.n	800336e <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d104      	bne.n	800336e <SetTargetData+0x272>
					sequency == 1) {
					AddOffset =
 8003364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003366:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800336a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800336c:	e0b8      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800336e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003374:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8003378:	425b      	negs	r3, r3
 800337a:	429a      	cmp	r2, r3
 800337c:	da0f      	bge.n	800339e <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800337e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003384:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
 8003388:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800338a:	429a      	cmp	r2, r3
 800338c:	dd07      	ble.n	800339e <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <SetTargetData+0x2a2>
					sequency == 0) {
					AddOffset =
 8003394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003396:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800339a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800339c:	e0a0      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800339e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a0:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80033a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	dd0e      	ble.n	80033ca <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80033ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ae:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80033b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	da07      	bge.n	80033ca <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <SetTargetData+0x2ce>
					sequency == 0) {
					AddOffset =
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80033c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80033c8:	e08a      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80033ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80033d4:	425b      	negs	r3, r3
 80033d6:	429a      	cmp	r2, r3
 80033d8:	da0f      	bge.n	80033fa <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80033da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80033de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e0:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 80033e4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80033e6:	429a      	cmp	r2, r3
 80033e8:	dd07      	ble.n	80033fa <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d104      	bne.n	80033fa <SetTargetData+0x2fe>
					sequency == 1) {
					AddOffset =
 80033f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80033f6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80033f8:	e072      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80033fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fc:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8003400:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003404:	429a      	cmp	r2, r3
 8003406:	dd0e      	ble.n	8003426 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800340e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003412:	429a      	cmp	r2, r3
 8003414:	da07      	bge.n	8003426 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d104      	bne.n	8003426 <SetTargetData+0x32a>
					sequency == 1) {
					AddOffset =
 800341c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003422:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003424:	e05c      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003426:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8003430:	425b      	negs	r3, r3
 8003432:	429a      	cmp	r2, r3
 8003434:	da0f      	bge.n	8003456 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003436:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800343a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343c:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8003440:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003442:	429a      	cmp	r2, r3
 8003444:	dd07      	ble.n	8003456 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <SetTargetData+0x35a>
					sequency == 0) {
					AddOffset =
 800344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8003452:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003454:	e044      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003458:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 800345c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003460:	429a      	cmp	r2, r3
 8003462:	dd0e      	ble.n	8003482 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800346a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800346e:	429a      	cmp	r2, r3
 8003470:	da07      	bge.n	8003482 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <SetTargetData+0x386>
					sequency == 0) {
					AddOffset =
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800347e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003480:	e02e      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8003482:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003488:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 800348c:	425b      	negs	r3, r3
 800348e:	429a      	cmp	r2, r3
 8003490:	da0f      	bge.n	80034b2 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8003492:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 800349c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800349e:	429a      	cmp	r2, r3
 80034a0:	dd07      	ble.n	80034b2 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d104      	bne.n	80034b2 <SetTargetData+0x3b6>
					sequency == 1) {
					AddOffset =
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80034ae:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80034b0:	e016      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80034b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b4:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 80034b8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80034bc:	429a      	cmp	r2, r3
 80034be:	da0b      	bge.n	80034d8 <SetTargetData+0x3dc>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80034c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	dd04      	ble.n	80034d8 <SetTargetData+0x3dc>
					AddOffset =
 80034ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d0:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80034d4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80034d6:	e003      	b.n	80034e0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80034de:	e078      	b.n	80035d2 <SetTargetData+0x4d6>
 80034e0:	e077      	b.n	80035d2 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80034e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e4:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80034e8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dd0e      	ble.n	800350e <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80034f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f2:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80034f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	da07      	bge.n	800350e <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <SetTargetData+0x412>
					sequency == 0) {
					AddOffset =
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 800350a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800350c:	e05c      	b.n	80035c8 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800350e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003514:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8003518:	425b      	negs	r3, r3
 800351a:	429a      	cmp	r2, r3
 800351c:	da0f      	bge.n	800353e <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800351e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003524:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8003528:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800352a:	429a      	cmp	r2, r3
 800352c:	dd07      	ble.n	800353e <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d104      	bne.n	800353e <SetTargetData+0x442>
					sequency == 1) {
					AddOffset =
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800353a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800353c:	e044      	b.n	80035c8 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8003544:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003548:	429a      	cmp	r2, r3
 800354a:	dd0e      	ble.n	800356a <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800354c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354e:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003552:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003556:	429a      	cmp	r2, r3
 8003558:	da07      	bge.n	800356a <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d104      	bne.n	800356a <SetTargetData+0x46e>
					sequency == 1) {
					AddOffset =
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8003566:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003568:	e02e      	b.n	80035c8 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800356a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003570:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8003574:	425b      	negs	r3, r3
 8003576:	429a      	cmp	r2, r3
 8003578:	da0f      	bge.n	800359a <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800357a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8003584:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003586:	429a      	cmp	r2, r3
 8003588:	dd07      	ble.n	800359a <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <SetTargetData+0x49e>
					sequency == 0) {
					AddOffset =
 8003590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003592:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8003596:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003598:	e016      	b.n	80035c8 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359c:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 80035a0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	da0b      	bge.n	80035c0 <SetTargetData+0x4c4>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80035ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	dd04      	ble.n	80035c0 <SetTargetData+0x4c4>
					AddOffset =
 80035b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 80035bc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80035be:	e003      	b.n	80035c8 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80035c6:	e004      	b.n	80035d2 <SetTargetData+0x4d6>
 80035c8:	e003      	b.n	80035d2 <SetTargetData+0x4d6>

			default:
				uwr_status = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80035d0:	bf00      	nop
			}
		}

		if (uwr_status) {
 80035d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d023      	beq.n	8003622 <SetTargetData+0x526>
			pRangeData->RangeMilliMeter += AddOffset;
 80035da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80035e4:	4413      	add	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b21a      	sxth	r2, r3
 80035ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ec:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80035ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80035f8:	4413      	add	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	b21a      	sxth	r2, r3
 80035fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003600:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003608:	b29a      	uxth	r2, r3
 800360a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800360c:	4413      	add	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	b21a      	sxth	r2, r3
 8003612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003614:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8003616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003618:	2201      	movs	r2, #1
 800361a:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 800361c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800361e:	2200      	movs	r2, #0
 8003620:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003622:	787b      	ldrb	r3, [r7, #1]
 8003624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003626:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800362a:	3308      	adds	r3, #8
 800362c:	8ab9      	ldrh	r1, [r7, #20]
 800362e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003632:	787b      	ldrb	r3, [r7, #1]
 8003634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003636:	7c91      	ldrb	r1, [r2, #18]
 8003638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800363a:	4413      	add	r3, r2
 800363c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003640:	3318      	adds	r3, #24
 8003642:	460a      	mov	r2, r1
 8003644:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003646:	787b      	ldrb	r3, [r7, #1]
 8003648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800364a:	7cd1      	ldrb	r1, [r2, #19]
 800364c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364e:	4413      	add	r3, r2
 8003650:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003654:	331c      	adds	r3, #28
 8003656:	460a      	mov	r2, r1
 8003658:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 800365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003660:	461a      	mov	r2, r3
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f882 30a0 	strb.w	r3, [r2, #160]	@ 0xa0

	Range = pRangeData->RangeMilliMeter;
 8003668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800366a:	8a1b      	ldrh	r3, [r3, #16]
 800366c:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 800366e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003670:	7c9b      	ldrb	r3, [r3, #18]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d110      	bne.n	8003698 <SetTargetData+0x59c>
 8003676:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	da0c      	bge.n	8003698 <SetTargetData+0x59c>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 800367e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003682:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <SetTargetData+0x5a8>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	da03      	bge.n	8003692 <SetTargetData+0x596>
			pRangeData->RangeStatus =
 800368a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800368c:	220e      	movs	r2, #14
 800368e:	749a      	strb	r2, [r3, #18]
 8003690:	e002      	b.n	8003698 <SetTargetData+0x59c>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8003692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003694:	2200      	movs	r2, #0
 8003696:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8003698:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
}
 800369c:	4618      	mov	r0, r3
 800369e:	3738      	adds	r7, #56	@ 0x38
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	2000000c 	.word	0x2000000c

080036a8 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b08f      	sub	sp, #60	@ 0x3c
 80036ac:	af04      	add	r7, sp, #16
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3318      	adds	r3, #24
 80036b8:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	7c9a      	ldrb	r2, [r3, #18]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


	pMultiRangingData->TimeStamp = 0;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	78da      	ldrb	r2, [r3, #3]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	7c9b      	ldrb	r3, [r3, #18]
 80036e6:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80036e8:	7ffb      	ldrb	r3, [r7, #31]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <SetMeasurementData+0x4e>

		iteration = 1;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80036f4:	e002      	b.n	80036fc <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80036f6:	7ffb      	ldrb	r3, [r7, #31]
 80036f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (i = 0; i < iteration; i++) {
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003702:	e035      	b.n	8003770 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003704:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3308      	adds	r3, #8
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8003718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800371c:	224c      	movs	r2, #76	@ 0x4c
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	3310      	adds	r3, #16
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	4413      	add	r3, r2
 8003728:	3304      	adds	r3, #4
 800372a:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 800372c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003730:	2b00      	cmp	r3, #0
 8003732:	d113      	bne.n	800375c <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7918      	ldrb	r0, [r3, #4]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	7c1b      	ldrb	r3, [r3, #16]
 800373c:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8003740:	7ff9      	ldrb	r1, [r7, #31]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	9202      	str	r2, [sp, #8]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	9201      	str	r2, [sp, #4]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4623      	mov	r3, r4
 800374e:	4602      	mov	r2, r0
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff fcd3 	bl	80030fc <SetTargetData>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	for (i = 0; i < iteration; i++) {
 8003766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800376a:	3301      	adds	r3, #1
 800376c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003770:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003774:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003778:	429a      	cmp	r2, r3
 800377a:	d3c3      	bcc.n	8003704 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f893 243f 	ldrb.w	r2, [r3, #1087]	@ 0x43f
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003788:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800378c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003794:	e01f      	b.n	80037d6 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80037a0:	3308      	adds	r3, #8
 80037a2:	2100      	movs	r1, #0
 80037a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80037a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037ac:	6a3a      	ldr	r2, [r7, #32]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80037b4:	3318      	adds	r3, #24
 80037b6:	22ff      	movs	r2, #255	@ 0xff
 80037b8:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80037ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80037c6:	331c      	adds	r3, #28
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80037cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037d0:	3301      	adds	r3, #1
 80037d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80037d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d9db      	bls.n	8003796 <SetMeasurementData+0xee>
	}

	return Status;
 80037de:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	372c      	adds	r7, #44	@ 0x2c
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}

080037ea <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3318      	adds	r3, #24
 80037fc:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8003804:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8003806:	225c      	movs	r2, #92	@ 0x5c
 8003808:	21ff      	movs	r1, #255	@ 0xff
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f019 fb46 	bl	801ce9c <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	2102      	movs	r1, #2
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f002 f8e0 	bl	80059da <VL53LX_get_device_results>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff40 	bl	80036a8 <SetMeasurementData>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 800382c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b090      	sub	sp, #64	@ 0x40
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8003846:	f240 3305 	movw	r3, #773	@ 0x305
 800384a:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3318      	adds	r3, #24
 8003850:	63bb      	str	r3, [r7, #56]	@ 0x38
	pc = &pdev->customer;
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	3348      	adds	r3, #72	@ 0x48
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34

	DistanceMode = VL53LXDevDataGet(Dev,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800385e:	f893 34e0 	ldrb.w	r3, [r3, #1248]	@ 0x4e0
 8003862:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			CurrentParameters.DistanceMode);

	if (Status == VL53LX_ERROR_NONE)
 8003866:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800386a:	2b00      	cmp	r3, #0
 800386c:	d108      	bne.n	8003880 <VL53LX_PerformRefSpadManagement+0x48>
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 800386e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fa45 	bl	8003d04 <VL53LX_run_ref_spad_char>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003880:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003884:	f113 0f1d 	cmn.w	r3, #29
 8003888:	d14e      	bne.n	8003928 <VL53LX_PerformRefSpadManagement+0xf0>

		Status = VL53LX_read_nvm_raw_data(Dev,
 800388a:	f107 0310 	add.w	r3, r7, #16
 800388e:	2206      	movs	r2, #6
 8003890:	2128      	movs	r1, #40	@ 0x28
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f00c ff58 	bl	8010748 <VL53LX_read_nvm_raw_data>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 800389e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <VL53LX_PerformRefSpadManagement+0x82>
			Status = VL53LX_WriteMulti(Dev,
 80038a6:	f107 020c 	add.w	r2, r7, #12
 80038aa:	2302      	movs	r3, #2
 80038ac:	2114      	movs	r1, #20
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f00f f912 	bl	8012ad8 <VL53LX_WriteMulti>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 80038ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <VL53LX_PerformRefSpadManagement+0x96>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c6:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80038c8:	7b7a      	ldrb	r2, [r7, #13]
 80038ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038cc:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80038ce:	f107 0310 	add.w	r3, r7, #16
 80038d2:	3310      	adds	r3, #16
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c



		if (Status == VL53LX_ERROR_NONE)
 80038d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d108      	bne.n	80038f0 <VL53LX_PerformRefSpadManagement+0xb8>
			Status = VL53LX_WriteMulti(Dev,
 80038de:	2306      	movs	r3, #6
 80038e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e2:	210d      	movs	r1, #13
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f00f f8f7 	bl	8012ad8 <VL53LX_WriteMulti>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80038f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d117      	bne.n	8003928 <VL53LX_PerformRefSpadManagement+0xf0>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80038f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fe:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003902:	785a      	ldrb	r2, [r3, #1]
 8003904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003906:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8003908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390a:	789a      	ldrb	r2, [r3, #2]
 800390c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390e:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8003910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003912:	78da      	ldrb	r2, [r3, #3]
 8003914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003916:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	791a      	ldrb	r2, [r3, #4]
 800391c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391e:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	795a      	ldrb	r2, [r3, #5]
 8003924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003926:	715a      	strb	r2, [r3, #5]
		}

	}


	VL53LX_SetDistanceMode(Dev, DistanceMode);
 8003928:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff f9a3 	bl	8002c7a <VL53LX_SetDistanceMode>

	LOG_FUNCTION_END(Status);
	return Status;
 8003934:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003938:	4618      	mov	r0, r3
 800393a:	3740      	adds	r7, #64	@ 0x40
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8003950:	2300      	movs	r3, #0
 8003952:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8003954:	2300      	movs	r3, #0
 8003956:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8003958:	2300      	movs	r3, #0
 800395a:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d84a      	bhi.n	80039f8 <VL53LX_SmudgeCorrectionEnable+0xb8>
 8003962:	a201      	add	r2, pc, #4	@ (adr r2, 8003968 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003979 	.word	0x08003979
 800396c:	08003999 	.word	0x08003999
 8003970:	080039b9 	.word	0x080039b9
 8003974:	080039d9 	.word	0x080039d9
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f004 f850 	bl	8007a1e <VL53LX_dynamic_xtalk_correction_disable>
 800397e:	4603      	mov	r3, r0
 8003980:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f004 f862 	bl	8007a4c <VL53LX_dynamic_xtalk_correction_apply_disable>
 8003988:	4603      	mov	r3, r0
 800398a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f004 f88b 	bl	8007aa8 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8003992:	4603      	mov	r3, r0
 8003994:	733b      	strb	r3, [r7, #12]
		break;
 8003996:	e032      	b.n	80039fe <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f004 f829 	bl	80079f0 <VL53LX_dynamic_xtalk_correction_enable>
 800399e:	4603      	mov	r3, r0
 80039a0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f004 f897 	bl	8007ad6 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80039a8:	4603      	mov	r3, r0
 80039aa:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f004 f87b 	bl	8007aa8 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80039b2:	4603      	mov	r3, r0
 80039b4:	733b      	strb	r3, [r7, #12]
		break;
 80039b6:	e022      	b.n	80039fe <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f004 f819 	bl	80079f0 <VL53LX_dynamic_xtalk_correction_enable>
 80039be:	4603      	mov	r3, r0
 80039c0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f004 f887 	bl	8007ad6 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80039c8:	4603      	mov	r3, r0
 80039ca:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f004 f854 	bl	8007a7a <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 80039d2:	4603      	mov	r3, r0
 80039d4:	733b      	strb	r3, [r7, #12]
		break;
 80039d6:	e012      	b.n	80039fe <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f004 f809 	bl	80079f0 <VL53LX_dynamic_xtalk_correction_enable>
 80039de:	4603      	mov	r3, r0
 80039e0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f004 f832 	bl	8007a4c <VL53LX_dynamic_xtalk_correction_apply_disable>
 80039e8:	4603      	mov	r3, r0
 80039ea:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f004 f85b 	bl	8007aa8 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80039f2:	4603      	mov	r3, r0
 80039f4:	733b      	strb	r3, [r7, #12]
		break;
 80039f6:	e002      	b.n	80039fe <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80039f8:	23fc      	movs	r3, #252	@ 0xfc
 80039fa:	73fb      	strb	r3, [r7, #15]
		break;
 80039fc:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80039fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8003a06:	7bbb      	ldrb	r3, [r7, #14]
 8003a08:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003a12:	7b7b      	ldrb	r3, [r7, #13]
 8003a14:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8003a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003a1e:	7b3b      	ldrb	r3, [r7, #12]
 8003a20:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop

08003a30 <VL53LX_SetOffsetCorrectionMode>:
}


VL53LX_Error VL53LX_SetOffsetCorrectionMode(VL53LX_DEV Dev,
		VL53LX_OffsetCorrectionModes OffsetCorrectionMode)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
	VL53LX_OffsetCorrectionMode offset_cor_mode;

	LOG_FUNCTION_START("");

	if (OffsetCorrectionMode ==
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d102      	bne.n	8003a4c <VL53LX_SetOffsetCorrectionMode+0x1c>
		VL53LX_OFFSETCORRECTIONMODE_PERVCSEL)
		offset_cor_mode =
 8003a46:	2303      	movs	r3, #3
 8003a48:	73bb      	strb	r3, [r7, #14]
 8003a4a:	e006      	b.n	8003a5a <VL53LX_SetOffsetCorrectionMode+0x2a>
				VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS;
	else {
		offset_cor_mode =
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73bb      	strb	r3, [r7, #14]
			VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
		if (OffsetCorrectionMode !=
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <VL53LX_SetOffsetCorrectionMode+0x2a>
			VL53LX_OFFSETCORRECTIONMODE_STANDARD)
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8003a56:	23fc      	movs	r3, #252	@ 0xfc
 8003a58:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53LX_ERROR_NONE)
 8003a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <VL53LX_SetOffsetCorrectionMode+0x40>
		Status =  VL53LX_set_offset_correction_mode(Dev,
 8003a62:	7bbb      	ldrb	r3, [r7, #14]
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f003 f8b7 	bl	8006bda <VL53LX_set_offset_correction_mode>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73fb      	strb	r3, [r7, #15]
				offset_cor_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <VL53LX_PerformOffsetSimpleCalibration>:


VL53LX_Error VL53LX_PerformOffsetSimpleCalibration(VL53LX_DEV Dev,
	int32_t CalDistanceMilliMeter)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b0a6      	sub	sp, #152	@ 0x98
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	int16_t meanDistance_mm;
	int16_t offset;
	VL53LX_MultiRangingData_t RangingMeasurementData;
	VL53LX_LLDriverData_t *pdev;
	uint8_t goodmeas;
	VL53LX_Error SmudgeStatus = VL53LX_ERROR_NONE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	uint8_t smudge_corr_en;
	VL53LX_TargetRangeData_t *pRange;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3318      	adds	r3, #24
 8003a96:	67fb      	str	r3, [r7, #124]	@ 0x7c

	smudge_corr_en = pdev->smudge_correct_config.smudge_corr_enabled;
 8003a98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a9e:	f893 3394 	ldrb.w	r3, [r3, #916]	@ 0x394
 8003aa2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	SmudgeStatus = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f003 ffb9 	bl	8007a1e <VL53LX_dynamic_xtalk_correction_disable>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	pdev->customer.algo__part_to_part_range_offset_mm = 0;
 8003ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	pdev->customer.mm_config__inner_offset_mm = 0;
 8003aba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	pdev->customer.mm_config__outer_offset_mm = 0;
 8003ac2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	memset(&pdev->per_vcsel_cal_data, 0, sizeof(pdev->per_vcsel_cal_data));
 8003aca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003acc:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8003ad0:	220c      	movs	r2, #12
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f019 f9e1 	bl	801ce9c <memset>
	Repeat = BDTable[VL53LX_TUNING_SIMPLE_OFFSET_CALIBRATION_REPEAT];
 8003ada:	4b89      	ldr	r3, [pc, #548]	@ (8003d00 <VL53LX_PerformOffsetSimpleCalibration+0x284>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	Max = BDTable[
 8003ae2:	4b87      	ldr	r3, [pc, #540]	@ (8003d00 <VL53LX_PerformOffsetSimpleCalibration+0x284>)
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
		VL53LX_TUNING_MAX_SIMPLE_OFFSET_CALIBRATION_SAMPLE_NUMBER];
	UnderMax = 1 + (Max / 2);
 8003aea:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 8003aee:	0fda      	lsrs	r2, r3, #31
 8003af0:	4413      	add	r3, r2
 8003af2:	105b      	asrs	r3, r3, #1
 8003af4:	b21b      	sxth	r3, r3
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	OverMax = Max + (Max / 2);
 8003b00:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 8003b04:	0fda      	lsrs	r2, r3, #31
 8003b06:	4413      	add	r3, r2
 8003b08:	105b      	asrs	r3, r3, #1
 8003b0a:	b21b      	sxth	r3, r3
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8003b12:	4413      	add	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	sum_ranging = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	total_count = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	while ((Repeat > 0) && (Status == VL53LX_ERROR_NONE)) {
 8003b26:	e087      	b.n	8003c38 <VL53LX_PerformOffsetSimpleCalibration+0x1bc>
		Status = VL53LX_StartMeasurement(Dev);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff f9f4 	bl	8002f16 <VL53LX_StartMeasurement>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		if (Status == VL53LX_ERROR_NONE) {
 8003b34:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <VL53LX_PerformOffsetSimpleCalibration+0xd8>
			VL53LX_WaitMeasurementDataReady(Dev);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fa75 	bl	800302c <VL53LX_WaitMeasurementDataReady>
			VL53LX_GetMultiRangingData(Dev,
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fe4e 	bl	80037ea <VL53LX_GetMultiRangingData>
				&RangingMeasurementData);
			VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fa43 	bl	8002fda <VL53LX_ClearInterruptAndStartMeasurement>
		}

		inloopcount = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		offset_meas = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 8003b60:	e040      	b.n	8003be4 <VL53LX_PerformOffsetSimpleCalibration+0x168>
				(offset_meas < OverMax)) {
			Status = VL53LX_WaitMeasurementDataReady(Dev);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fa62 	bl	800302c <VL53LX_WaitMeasurementDataReady>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			if (Status == VL53LX_ERROR_NONE)
 8003b6e:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d108      	bne.n	8003b88 <VL53LX_PerformOffsetSimpleCalibration+0x10c>
				Status = VL53LX_GetMultiRangingData(Dev,
 8003b76:	f107 0308 	add.w	r3, r7, #8
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff fe34 	bl	80037ea <VL53LX_GetMultiRangingData>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						&RangingMeasurementData);
			pRange = &(RangingMeasurementData.RangeData[0]);
 8003b88:	f107 0308 	add.w	r3, r7, #8
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	673b      	str	r3, [r7, #112]	@ 0x70
			goodmeas = (pRange->RangeStatus ==
 8003b90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b92:	7c9b      	ldrb	r3, [r3, #18]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				VL53LX_RANGESTATUS_RANGE_VALID);
			if ((Status == VL53LX_ERROR_NONE) && goodmeas) {
 8003ba2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d111      	bne.n	8003bce <VL53LX_PerformOffsetSimpleCalibration+0x152>
 8003baa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <VL53LX_PerformOffsetSimpleCalibration+0x152>
				sum_ranging += pRange->RangeMilliMeter;
 8003bb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bb4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				inloopcount++;
 8003bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			}
			Status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff fa03 	bl	8002fda <VL53LX_ClearInterruptAndStartMeasurement>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			offset_meas++;
 8003bda:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003bde:	3301      	adds	r3, #1
 8003be0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 8003be4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <VL53LX_PerformOffsetSimpleCalibration+0x188>
 8003bec:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 8003bf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	da05      	bge.n	8003c04 <VL53LX_PerformOffsetSimpleCalibration+0x188>
				(offset_meas < OverMax)) {
 8003bf8:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8003bfc:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 8003c00:	429a      	cmp	r2, r3
 8003c02:	dbae      	blt.n	8003b62 <VL53LX_PerformOffsetSimpleCalibration+0xe6>
		}
		total_count += inloopcount;
 8003c04:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88


		if (inloopcount < UnderMax)
 8003c12:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8003c16:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	da02      	bge.n	8003c24 <VL53LX_PerformOffsetSimpleCalibration+0x1a8>
			Status = VL53LX_ERROR_OFFSET_CAL_NO_SAMPLE_FAIL;
 8003c1e:	23e8      	movs	r3, #232	@ 0xe8
 8003c20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		VL53LX_StopMeasurement(Dev);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff f9c4 	bl	8002fb2 <VL53LX_StopMeasurement>

		Repeat--;
 8003c2a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	while ((Repeat > 0) && (Status == VL53LX_ERROR_NONE)) {
 8003c38:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	dd04      	ble.n	8003c4a <VL53LX_PerformOffsetSimpleCalibration+0x1ce>
 8003c40:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f43f af6f 	beq.w	8003b28 <VL53LX_PerformOffsetSimpleCalibration+0xac>

	}

	if ((SmudgeStatus == VL53LX_ERROR_NONE) && (smudge_corr_en == 1))
 8003c4a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <VL53LX_PerformOffsetSimpleCalibration+0x1ea>
 8003c52:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <VL53LX_PerformOffsetSimpleCalibration+0x1ea>
		SmudgeStatus = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f003 fec8 	bl	80079f0 <VL53LX_dynamic_xtalk_correction_enable>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	if ((sum_ranging < 0) ||
 8003c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	db08      	blt.n	8003c80 <VL53LX_PerformOffsetSimpleCalibration+0x204>
		(sum_ranging > ((int32_t) total_count * 0xffff)))
 8003c6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003c72:	4613      	mov	r3, r2
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	1a9b      	subs	r3, r3, r2
	if ((sum_ranging < 0) ||
 8003c78:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	dd02      	ble.n	8003c86 <VL53LX_PerformOffsetSimpleCalibration+0x20a>
		Status = VL53LX_WARNING_OFFSET_CAL_SIGMA_TOO_HIGH;
 8003c80:	23e0      	movs	r3, #224	@ 0xe0
 8003c82:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

	if ((Status == VL53LX_ERROR_NONE) && (total_count > 0)) {
 8003c86:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d132      	bne.n	8003cf4 <VL53LX_PerformOffsetSimpleCalibration+0x278>
 8003c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dd2e      	ble.n	8003cf4 <VL53LX_PerformOffsetSimpleCalibration+0x278>
		IncRounding = total_count / 2;
 8003c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c9a:	0fda      	lsrs	r2, r3, #31
 8003c9c:	4413      	add	r3, r2
 8003c9e:	105b      	asrs	r3, r3, #1
 8003ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 8003ca2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003ca6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ca8:	441a      	add	r2, r3
				/ total_count);
 8003caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cae:	fb92 f3f3 	sdiv	r3, r2, r3
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 8003cb2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		offset = (int16_t)CalDistanceMilliMeter - meanDistance_mm;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		pdev->customer.algo__part_to_part_range_offset_mm = 0;
 8003cc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
		pdev->customer.mm_config__inner_offset_mm = offset;
 8003cce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cd0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8003cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		pdev->customer.mm_config__outer_offset_mm = offset;
 8003cd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cda:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8003cde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

		Status = VL53LX_set_customer_nvm_managed(Dev,
 8003ce2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ce4:	3348      	adds	r3, #72	@ 0x48
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f00c ffe8 	bl	8010cbe <VL53LX_set_customer_nvm_managed>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				&(pdev->customer));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003cf4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3798      	adds	r7, #152	@ 0x98
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	2000000c 	.word	0x2000000c

08003d04 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	b08c      	sub	sp, #48	@ 0x30
 8003d08:	af04      	add	r7, sp, #16
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3318      	adds	r3, #24
 8003d16:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003d1e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8003d20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f005 feaa 	bl	8009a82 <VL53LX_enable_powerforce>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8003d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d117      	bne.n	8003d6a <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	7858      	ldrb	r0, [r3, #1]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	685c      	ldr	r4, [r3, #4]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	891d      	ldrh	r5, [r3, #8]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	899b      	ldrh	r3, [r3, #12]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	8952      	ldrh	r2, [r2, #10]
 8003d4e:	69b9      	ldr	r1, [r7, #24]
 8003d50:	f8b1 12de 	ldrh.w	r1, [r1, #734]	@ 0x2de
 8003d54:	9102      	str	r1, [sp, #8]
 8003d56:	9201      	str	r2, [sp, #4]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	4601      	mov	r1, r0
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f007 fd7d 	bl	800b860 <VL53LX_set_ref_spad_char_config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8003d6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f890 	bl	8003e9e <VL53LX_run_device_test>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8003d82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d108      	bne.n	8003d9c <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8003d8a:	f107 020c 	add.w	r2, r7, #12
 8003d8e:	2302      	movs	r3, #2
 8003d90:	21d9      	movs	r1, #217	@ 0xd9
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f00e fed6 	bl	8012b44 <VL53LX_ReadMulti>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8003d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <VL53LX_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8003da4:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dac:	f883 235f 	strb.w	r2, [r3, #863]	@ 0x35f
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003db0:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db8:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
	}



	if (status == VL53LX_ERROR_NONE)
 8003dbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d108      	bne.n	8003dd6 <VL53LX_run_ref_spad_char+0xd2>
		status =
			VL53LX_WriteMulti(
 8003dc4:	f107 020c 	add.w	r2, r7, #12
 8003dc8:	2302      	movs	r3, #2
 8003dca:	2114      	movs	r1, #20
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f00e fe83 	bl	8012ad8 <VL53LX_WriteMulti>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8003dd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <VL53LX_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003dde:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003de6:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8003dee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <VL53LX_run_ref_spad_char+0x104>
		status =
			VL53LX_ReadMulti(
 8003df6:	f107 020c 	add.w	r2, r7, #12
 8003dfa:	2306      	movs	r3, #6
 8003dfc:	21ac      	movs	r1, #172	@ 0xac
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f00e fea0 	bl	8012b44 <VL53LX_ReadMulti>
 8003e04:	4603      	mov	r3, r0
 8003e06:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8003e08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d108      	bne.n	8003e22 <VL53LX_run_ref_spad_char+0x11e>
		status =
			VL53LX_WriteMulti(
 8003e10:	f107 020c 	add.w	r2, r7, #12
 8003e14:	2306      	movs	r3, #6
 8003e16:	210d      	movs	r1, #13
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f00e fe5d 	bl	8012ad8 <VL53LX_WriteMulti>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8003e22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d117      	bne.n	8003e5a <VL53LX_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003e2a:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003e32:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003e3a:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003e4a:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003e52:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8003e5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d114      	bne.n	8003e8c <VL53LX_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d00c      	beq.n	8003e86 <VL53LX_run_ref_spad_char+0x182>
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	dc0d      	bgt.n	8003e8c <VL53LX_run_ref_spad_char+0x188>
 8003e70:	2b0e      	cmp	r3, #14
 8003e72:	d002      	beq.n	8003e7a <VL53LX_run_ref_spad_char+0x176>
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	d003      	beq.n	8003e80 <VL53LX_run_ref_spad_char+0x17c>
 8003e78:	e008      	b.n	8003e8c <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003e7a:	23e4      	movs	r3, #228	@ 0xe4
 8003e7c:	77fb      	strb	r3, [r7, #31]
			break;
 8003e7e:	e005      	b.n	8003e8c <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003e80:	23e3      	movs	r3, #227	@ 0xe3
 8003e82:	77fb      	strb	r3, [r7, #31]
			break;
 8003e84:	e002      	b.n	8003e8c <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003e86:	23e2      	movs	r3, #226	@ 0xe2
 8003e88:	77fb      	strb	r3, [r7, #31]
			break;
 8003e8a:	bf00      	nop
		}
	}



	*pcal_status = status;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	7ffa      	ldrb	r2, [r7, #31]
 8003e90:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003e92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bdb0      	pop	{r4, r5, r7, pc}

08003e9e <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3318      	adds	r3, #24
 8003eb2:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8003eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d108      	bne.n	8003ed2 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8003ec0:	f107 030b 	add.w	r3, r7, #11
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2130      	movs	r1, #48	@ 0x30
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f00e fecd 	bl	8012c68 <VL53LX_RdByte>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8003ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003eda:	7afa      	ldrb	r2, [r7, #11]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a


	if (status == VL53LX_ERROR_NONE)
 8003ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f005 fd4b 	bl	800998a <VL53LX_start_test>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8003ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f00e f99b 	bl	801223c <VL53LX_wait_for_test_completion>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8003f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d108      	bne.n	8003f24 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8003f12:	f107 020c 	add.w	r2, r7, #12
 8003f16:	2302      	movs	r3, #2
 8003f18:	2189      	movs	r1, #137	@ 0x89
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f00e fe12 	bl	8012b44 <VL53LX_ReadMulti>
 8003f20:	4603      	mov	r3, r0
 8003f22:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8003f24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003f2c:	7b3a      	ldrb	r2, [r7, #12]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003f34:	7b7a      	ldrb	r2, [r7, #13]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
	}



	pdev->sys_results.result__range_status &=
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8003f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d108      	bne.n	8003f68 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8003f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f005 fdb3 	bl	8009aca <VL53LX_clear_interrupt>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8003f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8003f70:	2100      	movs	r1, #0
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f005 fd09 	bl	800998a <VL53LX_start_test>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	785b      	ldrb	r3, [r3, #1]
 8003f9a:	2b21      	cmp	r3, #33	@ 0x21
 8003f9c:	d006      	beq.n	8003fac <select_offset_per_vcsel+0x24>
 8003f9e:	2b21      	cmp	r3, #33	@ 0x21
 8003fa0:	dc2b      	bgt.n	8003ffa <select_offset_per_vcsel+0x72>
 8003fa2:	2b1b      	cmp	r3, #27
 8003fa4:	d01c      	beq.n	8003fe0 <select_offset_per_vcsel+0x58>
 8003fa6:	2b1e      	cmp	r3, #30
 8003fa8:	d00d      	beq.n	8003fc6 <select_offset_per_vcsel+0x3e>
 8003faa:	e026      	b.n	8003ffa <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb2:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8003fb6:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fbe:	f8b3 3c02 	ldrh.w	r3, [r3, #3074]	@ 0xc02
 8003fc2:	817b      	strh	r3, [r7, #10]
		break;
 8003fc4:	e02b      	b.n	800401e <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fcc:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	@ 0xc04
 8003fd0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd8:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	@ 0xc06
 8003fdc:	817b      	strh	r3, [r7, #10]
		break;
 8003fde:	e01e      	b.n	800401e <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe6:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8003fea:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff2:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8003ff6:	817b      	strh	r3, [r7, #10]
		break;
 8003ff8:	e011      	b.n	800401e <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004000:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8004004:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800400c:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8004010:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004012:	23fc      	movs	r3, #252	@ 0xfc
 8004014:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2200      	movs	r2, #0
 800401a:	801a      	strh	r2, [r3, #0]
		break;
 800401c:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004024:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8004026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 800402e:	7a7b      	ldrb	r3, [r7, #9]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <select_offset_per_vcsel+0xb6>
 8004038:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800403c:	e001      	b.n	8004042 <select_offset_per_vcsel+0xba>
 800403e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	8013      	strh	r3, [r2, #0]

	return status;
 8004046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8004056:	b490      	push	{r4, r7}
 8004058:	b08a      	sub	sp, #40	@ 0x28
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	4611      	mov	r1, r2
 8004062:	461a      	mov	r2, r3
 8004064:	460b      	mov	r3, r1
 8004066:	71fb      	strb	r3, [r7, #7]
 8004068:	4613      	mov	r3, r2
 800406a:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int32_t    total_rate_pre = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	b29b      	uxth	r3, r3
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004088:	e021      	b.n	80040ce <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 800408a:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	461a      	mov	r2, r3
 8004096:	0052      	lsls	r2, r2, #1
 8004098:	441a      	add	r2, r3
 800409a:	00d3      	lsls	r3, r2, #3
 800409c:	461a      	mov	r2, r3
 800409e:	460b      	mov	r3, r1
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	440b      	add	r3, r1
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	4413      	add	r3, r2
 80040a8:	4423      	add	r3, r4
 80040aa:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 80040ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80040b2:	6a3a      	ldr	r2, [r7, #32]
 80040b4:	4413      	add	r3, r2
 80040b6:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80040b8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3206      	adds	r2, #6
 80040be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80040c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80040ca:	3301      	adds	r3, #1
 80040cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80040ce:	79bb      	ldrb	r3, [r7, #6]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d3d8      	bcc.n	800408a <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d047      	beq.n	800416e <vl53lx_diff_histo_stddev+0x118>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d044      	beq.n	800416e <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80040ec:	e03a      	b.n	8004164 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 80040ee:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	461a      	mov	r2, r3
 80040fa:	0052      	lsls	r2, r2, #1
 80040fc:	441a      	add	r2, r3
 80040fe:	00d3      	lsls	r3, r2, #3
 8004100:	461a      	mov	r2, r3
 8004102:	460b      	mov	r3, r1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	440b      	add	r3, r1
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	4413      	add	r3, r2
 800410c:	4423      	add	r3, r4
 800410e:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8004112:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004116:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800411e:	fb03 f202 	mul.w	r2, r3, r2
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	fb92 f3f3 	sdiv	r3, r2, r3
 8004128:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 800412a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	3206      	adds	r2, #6
 8004130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004134:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004138:	fb03 f202 	mul.w	r2, r3, r2
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004142:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8004144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	69b9      	ldr	r1, [r7, #24]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 800414e:	69b8      	ldr	r0, [r7, #24]
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	441a      	add	r2, r3
 800415a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415c:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800415e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004160:	3301      	adds	r3, #1
 8004162:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004164:	79bb      	ldrb	r3, [r7, #6]
 8004166:	b29b      	uxth	r3, r3
 8004168:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800416a:	429a      	cmp	r2, r3
 800416c:	d3bf      	bcc.n	80040ee <vl53lx_diff_histo_stddev+0x98>
	}
}
 800416e:	bf00      	nop
 8004170:	3728      	adds	r7, #40	@ 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bc90      	pop	{r4, r7}
 8004176:	4770      	bx	lr

08004178 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8004178:	b5b0      	push	{r4, r5, r7, lr}
 800417a:	b08c      	sub	sp, #48	@ 0x30
 800417c:	af02      	add	r7, sp, #8
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3318      	adds	r3, #24
 8004186:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t    i                        = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	int32_t    TuningBinRecSize		    = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t    timing					= 0;
 800419c:	2300      	movs	r3, #0
 800419e:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80041a8:	2318      	movs	r3, #24
 80041aa:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	461a      	mov	r2, r3
 80041b2:	f248 018f 	movw	r1, #32911	@ 0x808f
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f002 fd26 	bl	8006c08 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	461a      	mov	r2, r3
 80041c2:	f248 018e 	movw	r1, #32910	@ 0x808e
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f002 fd1e 	bl	8006c08 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d2:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 811a 	bne.w	8004410 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf0c      	ite	eq
 80041ea:	2301      	moveq	r3, #1
 80041ec:	2300      	movne	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 80041f6:	7efb      	ldrb	r3, [r7, #27]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	7eba      	ldrb	r2, [r7, #26]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004208:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004216:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 800421a:	3b01      	subs	r3, #1
 800421c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004220:	e004      	b.n	800422c <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 800422c:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8004230:	7efb      	ldrb	r3, [r7, #27]
 8004232:	69f8      	ldr	r0, [r7, #28]
 8004234:	461a      	mov	r2, r3
 8004236:	0052      	lsls	r2, r2, #1
 8004238:	441a      	add	r2, r3
 800423a:	0153      	lsls	r3, r2, #5
 800423c:	461a      	mov	r2, r3
 800423e:	460b      	mov	r3, r1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	440b      	add	r3, r1
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	4413      	add	r3, r2
 8004248:	4403      	add	r3, r0
 800424a:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	dd0c      	ble.n	800426e <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8004254:	7e79      	ldrb	r1, [r7, #25]
 8004256:	7efa      	ldrb	r2, [r7, #27]
 8004258:	f107 030c 	add.w	r3, r7, #12
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	460b      	mov	r3, r1
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	69f8      	ldr	r0, [r7, #28]
 800426a:	f7ff fef4 	bl	8004056 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	db23      	blt.n	80042be <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 800427c:	3310      	adds	r3, #16
 800427e:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f018 fe09 	bl	801ce9c <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

			recom_been_reset = 1;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			if (timing == 0)
 800429c:	7efb      	ldrb	r3, [r7, #27]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042a8:	2206      	movs	r2, #6
 80042aa:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 80042ae:	e034      	b.n	800431a <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042b6:	2207      	movs	r2, #7
 80042b8:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 80042bc:	e02d      	b.n	800431a <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c4:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 80042c8:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80042d0:	e01e      	b.n	8004310 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80042d2:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80042d6:	7e39      	ldrb	r1, [r7, #24]
 80042d8:	7efb      	ldrb	r3, [r7, #27]
 80042da:	f897 5025 	ldrb.w	r5, [r7, #37]	@ 0x25
					pdata->bin_data[i];
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	3006      	adds	r0, #6
 80042e2:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80042e6:	69f8      	ldr	r0, [r7, #28]
 80042e8:	461a      	mov	r2, r3
 80042ea:	0052      	lsls	r2, r2, #1
 80042ec:	441a      	add	r2, r3
 80042ee:	00d3      	lsls	r3, r2, #3
 80042f0:	461a      	mov	r2, r3
 80042f2:	460b      	mov	r3, r1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	440b      	add	r3, r1
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	4413      	add	r3, r2
 80042fc:	442b      	add	r3, r5
 80042fe:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8004302:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8004306:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800430a:	3301      	adds	r3, #1
 800430c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004310:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004314:	7ebb      	ldrb	r3, [r7, #26]
 8004316:	429a      	cmp	r2, r3
 8004318:	d3db      	bcc.n	80042d2 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004320:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8004324:	461a      	mov	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3b01      	subs	r3, #1
 800432a:	429a      	cmp	r2, r3
 800432c:	d109      	bne.n	8004342 <vl53lx_histo_merge+0x1ca>
 800432e:	7efb      	ldrb	r3, [r7, #27]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
 8004340:	e00e      	b.n	8004360 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8004342:	7efb      	ldrb	r3, [r7, #27]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10b      	bne.n	8004360 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434e:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8004352:	3301      	adds	r3, #1
 8004354:	b2da      	uxtb	r2, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800435c:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004360:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004364:	2b01      	cmp	r3, #1
 8004366:	d102      	bne.n	800436e <vl53lx_histo_merge+0x1f6>
 8004368:	7efb      	ldrb	r3, [r7, #27]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d069      	beq.n	8004442 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004374:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004378:	2b00      	cmp	r3, #0
 800437a:	d162      	bne.n	8004442 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 800437c:	2300      	movs	r3, #0
 800437e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004380:	e008      	b.n	8004394 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8004382:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	3206      	adds	r2, #6
 8004388:	2100      	movs	r1, #0
 800438a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 800438e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004390:	3301      	adds	r3, #1
 8004392:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004394:	7ebb      	ldrb	r3, [r7, #26]
 8004396:	b29b      	uxth	r3, r3
 8004398:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800439a:	429a      	cmp	r2, r3
 800439c:	d3f1      	bcc.n	8004382 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 800439e:	2300      	movs	r3, #0
 80043a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80043a2:	e02f      	b.n	8004404 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80043aa:	e023      	b.n	80043f4 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 80043ac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	3206      	adds	r2, #6
 80043b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80043b6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80043ba:	7efb      	ldrb	r3, [r7, #27]
 80043bc:	8cfd      	ldrh	r5, [r7, #38]	@ 0x26
 80043be:	69fc      	ldr	r4, [r7, #28]
 80043c0:	461a      	mov	r2, r3
 80043c2:	0052      	lsls	r2, r2, #1
 80043c4:	441a      	add	r2, r3
 80043c6:	00d3      	lsls	r3, r2, #3
 80043c8:	461a      	mov	r2, r3
 80043ca:	460b      	mov	r3, r1
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	440b      	add	r3, r1
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4413      	add	r3, r2
 80043d4:	442b      	add	r3, r5
 80043d6:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 80043da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80043de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80043e0:	18c1      	adds	r1, r0, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	3206      	adds	r2, #6
 80043e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80043ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043ee:	3301      	adds	r3, #1
 80043f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80043f4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	dbd6      	blt.n	80043ac <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 80043fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004400:	3301      	adds	r3, #1
 8004402:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004404:	7ebb      	ldrb	r3, [r7, #26]
 8004406:	b29b      	uxth	r3, r3
 8004408:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800440a:	429a      	cmp	r2, r3
 800440c:	d3ca      	bcc.n	80043a4 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 800440e:	e018      	b.n	8004442 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004416:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 800441a:	3b01      	subs	r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004424:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
		if (pdev->pos_before_next_recom == 255)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800442e:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8004432:	2bff      	cmp	r3, #255	@ 0xff
 8004434:	d105      	bne.n	8004442 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
}
 8004442:	bf00      	nop
 8004444:	3728      	adds	r7, #40	@ 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800444c <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b0c6      	sub	sp, #280	@ 0x118
 8004450:	af00      	add	r7, sp, #0
 8004452:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004456:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800445a:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 800445c:	2300      	movs	r3, #0
 800445e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int32_t patch_tuning = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8004468:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8004470:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004474:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004478:	2200      	movs	r2, #0
 800447a:	2185      	movs	r1, #133	@ 0x85
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	f00e fb97 	bl	8012bb0 <VL53LX_WrByte>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8004488:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8004490:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004494:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f005 faf2 	bl	8009a82 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 800449e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 80044a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80044a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80044aa:	f248 018c 	movw	r1, #32908	@ 0x808c
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	f002 fbaa 	bl	8006c08 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80044b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d81b      	bhi.n	80044f4 <VL53LX_load_patch+0xa8>
 80044bc:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <VL53LX_load_patch+0x78>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044dd 	.word	0x080044dd
 80044cc:	080044e5 	.word	0x080044e5
 80044d0:	080044ed 	.word	0x080044ed
	case 0:
		patch_power = 0x00;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80044da:	e00e      	b.n	80044fa <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80044dc:	2310      	movs	r3, #16
 80044de:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80044e2:	e00a      	b.n	80044fa <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80044e4:	2320      	movs	r3, #32
 80044e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80044ea:	e006      	b.n	80044fa <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80044ec:	2340      	movs	r3, #64	@ 0x40
 80044ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80044f2:	e002      	b.n	80044fa <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 80044fa:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d134      	bne.n	800456c <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8004502:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004506:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800450a:	2229      	movs	r2, #41	@ 0x29
 800450c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800450e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004512:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004516:	22c9      	movs	r2, #201	@ 0xc9
 8004518:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800451a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800451e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004522:	220e      	movs	r2, #14
 8004524:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8004526:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800452a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800452e:	2240      	movs	r2, #64	@ 0x40
 8004530:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8004532:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004536:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800453a:	2228      	movs	r2, #40	@ 0x28
 800453c:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800453e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004542:	b2da      	uxtb	r2, r3
 8004544:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004548:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800454c:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 800454e:	f107 020c 	add.w	r2, r7, #12
 8004552:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004556:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800455a:	2306      	movs	r3, #6
 800455c:	f240 4176 	movw	r1, #1142	@ 0x476
 8004560:	6800      	ldr	r0, [r0, #0]
 8004562:	f00e fab9 	bl	8012ad8 <VL53LX_WriteMulti>
 8004566:	4603      	mov	r3, r0
 8004568:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800456c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004570:	2b00      	cmp	r3, #0
 8004572:	d132      	bne.n	80045da <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8004574:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004578:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800457c:	2203      	movs	r2, #3
 800457e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004580:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004584:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004588:	226d      	movs	r2, #109	@ 0x6d
 800458a:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800458c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004590:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004594:	2203      	movs	r2, #3
 8004596:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004598:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800459c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80045a0:	226f      	movs	r2, #111	@ 0x6f
 80045a2:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80045a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80045a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80045ac:	2207      	movs	r2, #7
 80045ae:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80045b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80045b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80045b8:	2229      	movs	r2, #41	@ 0x29
 80045ba:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 80045bc:	f107 020c 	add.w	r2, r7, #12
 80045c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80045c4:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80045c8:	2306      	movs	r3, #6
 80045ca:	f240 4196 	movw	r1, #1174	@ 0x496
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	f00e fa82 	bl	8012ad8 <VL53LX_WriteMulti>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80045da:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d11a      	bne.n	8004618 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80045e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80045e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80045ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80045f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80045f6:	2207      	movs	r2, #7
 80045f8:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80045fa:	f107 020c 	add.w	r2, r7, #12
 80045fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004602:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8004606:	2302      	movs	r3, #2
 8004608:	f240 4172 	movw	r1, #1138	@ 0x472
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f00e fa63 	bl	8012ad8 <VL53LX_WriteMulti>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004618:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11a      	bne.n	8004656 <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8004620:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004624:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800462c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004630:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004634:	2207      	movs	r2, #7
 8004636:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8004638:	f107 020c 	add.w	r2, r7, #12
 800463c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004640:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8004644:	2302      	movs	r3, #2
 8004646:	f240 4174 	movw	r1, #1140	@ 0x474
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	f00e fa44 	bl	8012ad8 <VL53LX_WriteMulti>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8004656:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10c      	bne.n	8004678 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 800465e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004662:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004666:	2201      	movs	r2, #1
 8004668:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f00e fa9f 	bl	8012bb0 <VL53LX_WrByte>
 8004672:	4603      	mov	r3, r0
 8004674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8004678:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8004680:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004684:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004688:	2201      	movs	r2, #1
 800468a:	2185      	movs	r1, #133	@ 0x85
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	f00e fa8f 	bl	8012bb0 <VL53LX_WrByte>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004698:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 800469c:	4618      	mov	r0, r3
 800469e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop

080046a8 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 80046b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 80046bc:	2200      	movs	r2, #0
 80046be:	2185      	movs	r1, #133	@ 0x85
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f00e fa75 	bl	8012bb0 <VL53LX_WrByte>
 80046c6:	4603      	mov	r3, r0
 80046c8:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f005 f9e7 	bl	8009aa6 <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 80046d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 80046e0:	2200      	movs	r2, #0
 80046e2:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f00e fa62 	bl	8012bb0 <VL53LX_WrByte>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80046f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 80046f8:	2201      	movs	r2, #1
 80046fa:	2185      	movs	r1, #133	@ 0x85
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f00e fa57 	bl	8012bb0 <VL53LX_WrByte>
 8004702:	4603      	mov	r3, r0
 8004704:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004706:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004712:	b5b0      	push	{r4, r5, r7, lr}
 8004714:	b08a      	sub	sp, #40	@ 0x28
 8004716:	af04      	add	r7, sp, #16
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3318      	adds	r3, #24
 8004726:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800472e:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8004734:	2162      	movs	r1, #98	@ 0x62
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f004 fa28 	bl	8008b8c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2204      	movs	r2, #4
 8004740:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2205      	movs	r2, #5
 800474c:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
	pres->zone_results.active_zones    = 0;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004758:	2300      	movs	r3, #0
 800475a:	75bb      	strb	r3, [r7, #22]
 800475c:	e01b      	b.n	8004796 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 800475e:	7dba      	ldrb	r2, [r7, #22]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	3308      	adds	r3, #8
 8004772:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	639a      	str	r2, [r3, #56]	@ 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2200      	movs	r2, #0
 8004784:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		pobjects->xmonitor.range_status =
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004790:	7dbb      	ldrb	r3, [r7, #22]
 8004792:	3301      	adds	r3, #1
 8004794:	75bb      	strb	r3, [r7, #22]
 8004796:	7dbb      	ldrb	r3, [r7, #22]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d9e0      	bls.n	800475e <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2205      	movs	r2, #5
 80047a0:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	pres->zone_hists.active_zones      = 0;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2205      	movs	r2, #5
 80047b0:	f883 238f 	strb.w	r2, [r3, #911]	@ 0x38f
	pres->zone_cal.active_zones        = 0;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80047bc:	2300      	movs	r3, #0
 80047be:	75bb      	strb	r3, [r7, #22]
 80047c0:	e039      	b.n	8004836 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 80047c2:	7dba      	ldrb	r2, [r7, #22]
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 80047d8:	7dba      	ldrb	r2, [r7, #22]
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 80047ee:	7dba      	ldrb	r2, [r7, #22]
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8004804:	7dba      	ldrb	r2, [r7, #22]
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 800481a:	7dba      	ldrb	r2, [r7, #22]
 800481c:	68f9      	ldr	r1, [r7, #12]
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	f503 736b 	add.w	r3, r3, #940	@ 0x3ac
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004830:	7dbb      	ldrb	r3, [r7, #22]
 8004832:	3301      	adds	r3, #1
 8004834:	75bb      	strb	r3, [r7, #22]
 8004836:	7dbb      	ldrb	r3, [r7, #22]
 8004838:	2b04      	cmp	r3, #4
 800483a:	d9c2      	bls.n	80047c2 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	221e      	movs	r2, #30
 8004846:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2200      	movs	r2, #0
 800484c:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2200      	movs	r2, #0
 8004852:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2201      	movs	r2, #1
 8004858:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2201      	movs	r2, #1
 800485e:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2201      	movs	r2, #1
 8004864:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800486c:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004874:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 800487c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2264      	movs	r2, #100	@ 0x64
 8004882:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800488a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800489a:	2203      	movs	r2, #3
 800489c:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
	pdev->offset_results.active_results = 0;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3



	pdev->gain_cal.standard_ranging_gain_factor =
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f240 72db 	movw	r2, #2011	@ 0x7db
 80048b2:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 80048bc:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f004 f947 	bl	8008b54 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 80048cc:	3310      	adds	r3, #16
 80048ce:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f018 fae1 	bl	801ce9c <memset>
	pdev->bin_rec_pos = 0;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
	pdev->pos_before_next_recom = 0;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <VL53LX_data_init+0x1f8>
 80048f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8b7 	bl	8004a74 <VL53LX_read_p2p_data>
 8004906:	4603      	mov	r3, r0
 8004908:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 800490a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004918:	4618      	mov	r0, r3
 800491a:	f003 f8f3 	bl	8007b04 <VL53LX_init_refspadchar_config_struct>
 800491e:	4603      	mov	r3, r0
 8004920:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 8004922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d107      	bne.n	800493a <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004930:	4618      	mov	r0, r3
 8004932:	f003 f90b 	bl	8007b4c <VL53LX_init_ssc_config_struct>
 8004936:	4603      	mov	r3, r0
 8004938:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 800493a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f003 f91c 	bl	8007b8e <VL53LX_init_xtalk_config_struct>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 800495a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d107      	bne.n	8004972 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8004968:	4618      	mov	r0, r3
 800496a:	f003 f983 	bl	8007c74 <VL53LX_init_xtalk_extract_config_struct>
 800496e:	4603      	mov	r3, r0
 8004970:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004972:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8004980:	4618      	mov	r0, r3
 8004982:	f003 f9a6 	bl	8007cd2 <VL53LX_init_offset_cal_config_struct>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800498a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004998:	4618      	mov	r0, r3
 800499a:	f003 f9c1 	bl	8007d20 <VL53LX_init_zone_cal_config_struct>
 800499e:	4603      	mov	r3, r0
 80049a0:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80049a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f003 f9d5 	bl	8007d68 <VL53LX_init_hist_post_process_config_struct>
 80049be:	4603      	mov	r3, r0
 80049c0:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 80049c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80049d0:	4618      	mov	r0, r3
 80049d2:	f003 fbd4 	bl	800817e <VL53LX_init_hist_gen3_dmax_config_struct>
 80049d6:	4603      	mov	r3, r0
 80049d8:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 80049da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	33f8      	adds	r3, #248	@ 0xf8
 80049e6:	4618      	mov	r0, r3
 80049e8:	f003 fa2d 	bl	8007e46 <VL53LX_init_tuning_parm_storage_struct>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 80049f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d116      	bne.n	8004a26 <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	7858      	ldrb	r0, [r3, #1]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	8b1c      	ldrh	r4, [r3, #24]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	689d      	ldr	r5, [r3, #8]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	6912      	ldr	r2, [r2, #16]
 8004a0c:	6939      	ldr	r1, [r7, #16]
 8004a0e:	6949      	ldr	r1, [r1, #20]
 8004a10:	9102      	str	r1, [sp, #8]
 8004a12:	9201      	str	r2, [sp, #4]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	462b      	mov	r3, r5
 8004a18:	4622      	mov	r2, r4
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fb3c 	bl	800509a <VL53LX_set_preset_mode>
 8004a22:	4603      	mov	r3, r0
 8004a24:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2118      	movs	r1, #24
 8004a30:	2000      	movs	r0, #0
 8004a32:	f008 fc8a 	bl	800d34a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2118      	movs	r1, #24
 8004a40:	2000      	movs	r0, #0
 8004a42:	f008 fc82 	bl	800d34a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f203 531c 	addw	r3, r3, #1308	@ 0x51c
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	210c      	movs	r1, #12
 8004a50:	2000      	movs	r0, #0
 8004a52:	f004 fe3b 	bl	80096cc <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f007 fe5b 	bl	800c712 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f007 fd61 	bl	800c524 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f007 fe80 	bl	800c768 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bdb0      	pop	{r4, r5, r7, pc}

08004a74 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b091      	sub	sp, #68	@ 0x44
 8004a78:	af04      	add	r7, sp, #16
 8004a7a:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3318      	adds	r3, #24
 8004a86:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	3348      	adds	r3, #72	@ 0x48
 8004a94:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8004a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a98:	339c      	adds	r3, #156	@ 0x9c
 8004a9a:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8004a9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f00b ffc8 	bl	8010a42 <VL53LX_get_static_nvm_managed>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8004ab8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d108      	bne.n	8004ad2 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	3348      	adds	r3, #72	@ 0x48
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f00c f920 	bl	8010d0c <VL53LX_get_customer_nvm_managed>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8004ad2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d117      	bne.n	8004b0a <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	f203 3392 	addw	r3, r3, #914	@ 0x392
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f00d f81c 	bl	8011b20 <VL53LX_get_nvm_copy_data>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8004aee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8004af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af8:	f203 3292 	addw	r2, r3, #914	@ 0x392
 8004afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afe:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004b02:	4619      	mov	r1, r3
 8004b04:	4610      	mov	r0, r2
 8004b06:	f004 fb37 	bl	8009178 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8004b0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10e      	bne.n	8004b30 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	895b      	ldrh	r3, [r3, #10]
 8004b16:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	865a      	strh	r2, [r3, #50]	@ 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8004b30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d108      	bne.n	8004b4a <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	33c0      	adds	r3, #192	@ 0xc0
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f00b fe33 	bl	80107aa <VL53LX_read_nvm_optical_centre>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8004b4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	3360      	adds	r3, #96	@ 0x60
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f00b fe49 	bl	80107f0 <VL53LX_read_nvm_cal_peak_rate_map>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8004b64:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d12d      	bne.n	8004bc8 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	339c      	adds	r3, #156	@ 0x9c
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f00b fe62 	bl	801083c <VL53LX_read_nvm_additional_offset_cal_data>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	889b      	ldrh	r3, [r3, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d120      	bne.n	8004bc8 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d11c      	bne.n	8004bc8 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2280      	movs	r2, #128	@ 0x80
 8004b92:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004b9a:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	f893 03c2 	ldrb.w	r0, [r3, #962]	@ 0x3c2
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	f893 43c3 	ldrb.w	r4, [r3, #963]	@ 0x3c3
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	69f9      	ldr	r1, [r7, #28]
 8004bb2:	3102      	adds	r1, #2
 8004bb4:	9103      	str	r1, [sp, #12]
 8004bb6:	9202      	str	r2, [sp, #8]
 8004bb8:	2238      	movs	r2, #56	@ 0x38
 8004bba:	9201      	str	r2, [sp, #4]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	23ff      	movs	r3, #255	@ 0xff
 8004bc0:	22c7      	movs	r2, #199	@ 0xc7
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	f006 fb46 	bl	800b254 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8004bc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d12f      	bne.n	8004c30 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8004bd0:	f107 030c 	add.w	r3, r7, #12
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f00b fe51 	bl	8010882 <VL53LX_read_nvm_fmt_range_results_data>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8004be6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d120      	bne.n	8004c30 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8004bee:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004bf6:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8004bfe:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d006      	beq.n	8004c1e <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 8004c1c:	e003      	b.n	8004c26 <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	2214      	movs	r2, #20
 8004c22:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c2c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8004c30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 8004c3e:	3304      	adds	r3, #4
 8004c40:	461a      	mov	r2, r3
 8004c42:	21de      	movs	r1, #222	@ 0xde
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f00e f843 	bl	8012cd0 <VL53LX_RdWord>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c52:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5a:	d204      	bcs.n	8004c66 <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8004c62:	f8a3 22de 	strh.w	r2, [r3, #734]	@ 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 8004c66:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	33bc      	adds	r3, #188	@ 0xbc
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f918 	bl	8004eaa <VL53LX_get_mode_mitigation_roi>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d114      	bne.n	8004cb4 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8004c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10f      	bne.n	8004cb4 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c96:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca6:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004cb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3734      	adds	r7, #52	@ 0x34
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd90      	pop	{r4, r7, pc}

08004cc0 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cda:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004ce2:	23f1      	movs	r3, #241	@ 0xf1
 8004ce4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8004ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10e      	bne.n	8004d0c <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cfa:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8004cfe:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8004d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3318      	adds	r3, #24
 8004d32:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004d3e:	23f1      	movs	r3, #241	@ 0xf1
 8004d40:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8004d42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d11b      	bne.n	8004d82 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f8b3 12de 	ldrh.w	r1, [r3, #734]	@ 0x2de
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 8004d6e:	9201      	str	r2, [sp, #4]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	460b      	mov	r3, r1
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	68b8      	ldr	r0, [r7, #8]
 8004d7a:	f005 f84a 	bl	8009e12 <VL53LX_calc_timeout_register_values>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b088      	sub	sp, #32
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3318      	adds	r3, #24
 8004da4:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004db8:	23f1      	movs	r3, #241	@ 0xf1
 8004dba:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8004dbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d148      	bne.n	8004e56 <VL53LX_get_timeouts_us+0xc8>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f8b3 22de 	ldrh.w	r2, [r3, #734]	@ 0x2de
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f004 fe96 	bl	8009b04 <VL53LX_calc_macro_period_us>
 8004dd8:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
			VL53LX_calc_timeout_us(
 8004de0:	6979      	ldr	r1, [r7, #20]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f004 ff55 	bl	8009c92 <VL53LX_calc_timeout_us>
 8004de8:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
		timeout_encoded =
 8004df4:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004df6:	8a7b      	ldrh	r3, [r7, #18]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	f892 2335 	ldrb.w	r2, [r2, #821]	@ 0x335
		timeout_encoded = (timeout_encoded << 8) +
 8004e02:	4413      	add	r3, r2
 8004e04:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8004e06:	8a7b      	ldrh	r3, [r7, #18]
 8004e08:	6979      	ldr	r1, [r7, #20]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f004 ffa8 	bl	8009d60 <VL53LX_calc_decoded_timeout_us>
 8004e10:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
		timeout_encoded =
 8004e1c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004e1e:	8a7b      	ldrh	r3, [r7, #18]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	b29b      	uxth	r3, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	f892 2339 	ldrb.w	r2, [r2, #825]	@ 0x339
		timeout_encoded = (timeout_encoded << 8) +
 8004e2a:	4413      	add	r3, r2
 8004e2c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8004e2e:	8a7b      	ldrh	r3, [r7, #18]
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f004 ff94 	bl	8009d60 <VL53LX_calc_decoded_timeout_us>
 8004e38:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004e56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3318      	adds	r3, #24
 8004e74:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	7858      	ldrb	r0, [r3, #1]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	7819      	ldrb	r1, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f203 335b 	addw	r3, r3, #859	@ 0x35b
 8004e84:	461a      	mov	r2, r3
 8004e86:	f006 f864 	bl	800af52 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	7898      	ldrb	r0, [r3, #2]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	78d9      	ldrb	r1, [r3, #3]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f006 f899 	bl	800afd0 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b086      	sub	sp, #24
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3318      	adds	r3, #24
 8004ebc:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8004ed0:	f107 020e 	add.w	r2, r7, #14
 8004ed4:	f107 010d 	add.w	r1, r7, #13
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f008 fadf 	bl	800d49c <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004ede:	7bba      	ldrb	r2, [r7, #14]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004ee4:	7b7a      	ldrb	r2, [r7, #13]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f893 33c3 	ldrb.w	r3, [r3, #963]	@ 0x3c3
 8004ef0:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	e008      	b.n	8004f38 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3301      	adds	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3f1      	bcc.n	8004f26 <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8004f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3318      	adds	r3, #24
 8004f64:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f103 00de 	add.w	r0, r3, #222	@ 0xde
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	331c      	adds	r3, #28
 8004f70:	2214      	movs	r2, #20
 8004f72:	4619      	mov	r1, r3
 8004f74:	f018 f877 	bl	801d066 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	785a      	ldrb	r2, [r3, #1]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	33c2      	adds	r3, #194	@ 0xc2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ffbf 	bl	8004f14 <VL53LX_init_zone_config_histogram_bins>
 8004f96:	4603      	mov	r3, r0
 8004f98:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8004faa:	e00f      	b.n	8004fcc <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d807      	bhi.n	8004fc4 <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8004fc2:	e003      	b.n	8004fcc <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2206      	movs	r2, #6
 8004fc8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	2b21      	cmp	r3, #33	@ 0x21
 8004ff6:	d030      	beq.n	800505a <VL53LX_get_preset_mode_timing_cfg+0x82>
 8004ff8:	2b21      	cmp	r3, #33	@ 0x21
 8004ffa:	dc43      	bgt.n	8005084 <VL53LX_get_preset_mode_timing_cfg+0xac>
 8004ffc:	2b1b      	cmp	r3, #27
 8004ffe:	d002      	beq.n	8005006 <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8005000:	2b1e      	cmp	r3, #30
 8005002:	d015      	beq.n	8005030 <VL53LX_get_preset_mode_timing_cfg+0x58>
 8005004:	e03e      	b.n	8005084 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
		*pphasecal_config_timeout_us =
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	601a      	str	r2, [r3, #0]

	break;
 800502e:	e02c      	b.n	800508a <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
		*pphasecal_config_timeout_us =
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	601a      	str	r2, [r3, #0]
	break;
 8005058:	e017      	b.n	800508a <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
		*pphasecal_config_timeout_us =
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	601a      	str	r2, [r3, #0]
	break;
 8005082:	e002      	b.n	800508a <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005084:	23fc      	movs	r3, #252	@ 0xfc
 8005086:	75fb      	strb	r3, [r7, #23]
		break;
 8005088:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800508a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800508e:	4618      	mov	r0, r3
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b096      	sub	sp, #88	@ 0x58
 800509e:	af06      	add	r7, sp, #24
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	72fb      	strb	r3, [r7, #11]
 80050a8:	4613      	mov	r3, r2
 80050aa:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_LLDriverData_t *pdev =
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3318      	adds	r3, #24
 80050b6:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 80050c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c2:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80050c6:	633b      	str	r3, [r7, #48]	@ 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 80050ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80050d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050da:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80050e6:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80050ee:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80050f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80050f6:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	33c2      	adds	r3, #194	@ 0xc2
 80050fc:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	33f8      	adds	r3, #248	@ 0xf8
 8005102:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	7afa      	ldrb	r2, [r7, #11]
 8005108:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800510e:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8005110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005112:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005114:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005118:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800511a:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 800511c:	2103      	movs	r1, #3
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f003 fd34 	bl	8008b8c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8005124:	7afb      	ldrb	r3, [r7, #11]
 8005126:	2b21      	cmp	r3, #33	@ 0x21
 8005128:	d02e      	beq.n	8005188 <VL53LX_set_preset_mode+0xee>
 800512a:	2b21      	cmp	r3, #33	@ 0x21
 800512c:	dc40      	bgt.n	80051b0 <VL53LX_set_preset_mode+0x116>
 800512e:	2b1b      	cmp	r3, #27
 8005130:	d002      	beq.n	8005138 <VL53LX_set_preset_mode+0x9e>
 8005132:	2b1e      	cmp	r3, #30
 8005134:	d014      	beq.n	8005160 <VL53LX_set_preset_mode+0xc6>
 8005136:	e03b      	b.n	80051b0 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	9304      	str	r3, [sp, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	9303      	str	r3, [sp, #12]
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	9302      	str	r3, [sp, #8]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005152:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005154:	f003 fa57 	bl	8008606 <VL53LX_preset_mode_histogram_long_range>
 8005158:	4603      	mov	r3, r0
 800515a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800515e:	e02b      	b.n	80051b8 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	9304      	str	r3, [sp, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	9303      	str	r3, [sp, #12]
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	9302      	str	r3, [sp, #8]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800517a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800517c:	f003 fae1 	bl	8008742 <VL53LX_preset_mode_histogram_medium_range>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005186:	e017      	b.n	80051b8 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	9304      	str	r3, [sp, #16]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	9303      	str	r3, [sp, #12]
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	9302      	str	r3, [sp, #8]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051a4:	f003 fb6b 	bl	800887e <VL53LX_preset_mode_histogram_short_range>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051ae:	e003      	b.n	80051b8 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80051b0:	23fc      	movs	r3, #252	@ 0xfc
 80051b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		break;
 80051b6:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 80051b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 80051c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c2:	893a      	ldrh	r2, [r7, #8]
 80051c4:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	893a      	ldrh	r2, [r7, #8]
 80051ca:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 80051cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d108      	bne.n	80051e6 <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 80051d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff fd9e 	bl	8004d1c <VL53LX_set_timeouts_us>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 80051e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 80051ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff fd65 	bl	8004cc0 <VL53LX_set_inter_measurement_period_ms>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80051fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fe:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8005202:	3301      	adds	r3, #1
 8005204:	b2da      	uxtb	r2, r3
 8005206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005208:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f004 f8d2 	bl	80093b8 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8005214:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005218:	4618      	mov	r0, r3
 800521a:	3740      	adds	r7, #64	@ 0x40
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b0d2      	sub	sp, #328	@ 0x148
 8005224:	af00      	add	r7, sp, #0
 8005226:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800522a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800522e:	6018      	str	r0, [r3, #0]
 8005230:	4608      	mov	r0, r1
 8005232:	4611      	mov	r1, r2
 8005234:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005238:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 800523c:	4602      	mov	r2, r0
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005244:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005248:	460a      	mov	r2, r1
 800524a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800524c:	2300      	movs	r3, #0
 800524e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005252:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005256:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3318      	adds	r3, #24
 800525e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	VL53LX_LLDriverResults_t  *pres =
 8005262:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005266:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8005270:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005274:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005278:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800527c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005280:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005284:	3348      	adds	r3, #72	@ 0x48
 8005286:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800528a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800528e:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8005292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005296:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800529a:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800529e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80052a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052a6:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80052aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80052ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052b2:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80052b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80052ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052be:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80052c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80052c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052ca:	332c      	adds	r3, #44	@ 0x2c
 80052cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80052d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052d4:	3348      	adds	r3, #72	@ 0x48
 80052d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80052da:	f107 030c 	add.w	r3, r7, #12
 80052de:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint16_t i                          = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t i2c_index                  = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 80052fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052fe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8005302:	f2a2 1245 	subw	r2, r2, #325	@ 0x145
 8005306:	7812      	ldrb	r2, [r2, #0]
 8005308:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 800530a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800530e:	791b      	ldrb	r3, [r3, #4]
 8005310:	b25b      	sxtb	r3, r3
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005318:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800531c:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8005320:	f993 3000 	ldrsb.w	r3, [r3]
 8005324:	4313      	orrs	r3, r2
 8005326:	b25b      	sxtb	r3, r3
 8005328:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800532a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800532e:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8005330:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005334:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
		VL53LX_set_user_zone(
 8005338:	3336      	adds	r3, #54	@ 0x36
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8005340:	4413      	add	r3, r2
 8005342:	1d9a      	adds	r2, r3, #6
 8005344:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005348:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800534c:	4611      	mov	r1, r2
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	f7ff fd87 	bl	8004e62 <VL53LX_set_user_zone>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 800535a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800535e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d019      	beq.n	800539a <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8005366:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800536a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800536e:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800537c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8005380:	4413      	add	r3, r2
 8005382:	1c9a      	adds	r2, r3, #2
 8005384:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005388:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800538c:	4611      	mov	r1, r2
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	f001 fbbc 	bl	8006b0c <VL53LX_set_zone_dss_config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 800539a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800539e:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 80053aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d107      	bne.n	80053c6 <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80053b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053ba:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	@ 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80053be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053c2:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80053c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ce:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 80053d2:	2bff      	cmp	r3, #255	@ 0xff
 80053d4:	d106      	bne.n	80053e4 <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80053d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80053e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ec:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d139      	bne.n	8005468 <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80053f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053fc:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005400:	2b00      	cmp	r3, #0
 8005402:	d131      	bne.n	8005468 <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005404:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005408:	f893 2320 	ldrb.w	r2, [r3, #800]	@ 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 800540c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005414:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005418:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800541c:	2220      	movs	r2, #32
 800541e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005422:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005426:	f893 335d 	ldrb.w	r3, [r3, #861]	@ 0x35d
 800542a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005432:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005436:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800543a:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 800543c:	b21a      	sxth	r2, r3
 800543e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005442:	825a      	strh	r2, [r3, #18]
 8005444:	e003      	b.n	800544e <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005446:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800544a:	2200      	movs	r2, #0
 800544c:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 800544e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005452:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b04      	cmp	r3, #4
 800545a:	d805      	bhi.n	8005468 <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800545c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005460:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005464:	2205      	movs	r2, #5
 8005466:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005468:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800546c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005470:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d117      	bne.n	80054a8 <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005478:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800547c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005480:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005484:	2b01      	cmp	r3, #1
 8005486:	d10f      	bne.n	80054a8 <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005488:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800548c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005490:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005494:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005498:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 800549c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80054a0:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80054a4:	2206      	movs	r2, #6
 80054a6:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 80054a8:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 80054b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80054b4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	f006 f835 	bl	800b528 <VL53LX_save_cfg_data>
 80054be:	4603      	mov	r3, r0
 80054c0:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147



	switch (device_config_level) {
 80054c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80054c8:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	2b05      	cmp	r3, #5
 80054d2:	d827      	bhi.n	8005524 <VL53LX_init_and_start_range+0x304>
 80054d4:	a201      	add	r2, pc, #4	@ (adr r2, 80054dc <VL53LX_init_and_start_range+0x2bc>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	0800551d 	.word	0x0800551d
 80054e0:	08005515 	.word	0x08005515
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005505 	.word	0x08005505
 80054ec:	080054fd 	.word	0x080054fd
 80054f0:	080054f5 	.word	0x080054f5
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 80054fa:	e017      	b.n	800552c <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80054fc:	230d      	movs	r3, #13
 80054fe:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005502:	e013      	b.n	800552c <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8005504:	2324      	movs	r3, #36	@ 0x24
 8005506:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800550a:	e00f      	b.n	800552c <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 800550c:	2344      	movs	r3, #68	@ 0x44
 800550e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005512:	e00b      	b.n	800552c <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8005514:	235a      	movs	r3, #90	@ 0x5a
 8005516:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800551a:	e007      	b.n	800552c <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 800551c:	2371      	movs	r3, #113	@ 0x71
 800551e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005522:	e003      	b.n	800552c <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8005524:	2383      	movs	r3, #131	@ 0x83
 8005526:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800552a:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 800552c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005530:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8005534:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005538:	f107 030c 	add.w	r3, r7, #12
 800553c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005540:	2300      	movs	r3, #0
 8005542:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8005546:	e00b      	b.n	8005560 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005548:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005556:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800555a:	3301      	adds	r3, #1
 800555c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8005560:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 8005564:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8005568:	429a      	cmp	r2, r3
 800556a:	d3ed      	bcc.n	8005548 <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 800556c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005570:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b05      	cmp	r3, #5
 8005578:	d917      	bls.n	80055aa <VL53LX_init_and_start_range+0x38a>
 800557a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800557e:	2b00      	cmp	r3, #0
 8005580:	d113      	bne.n	80055aa <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005582:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005586:	f1c3 0301 	rsb	r3, r3, #1
 800558a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800558e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8005592:	f107 020c 	add.w	r2, r7, #12
 8005596:	4413      	add	r3, r2
 8005598:	461a      	mov	r2, r3
 800559a:	210b      	movs	r1, #11
 800559c:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80055a0:	f00b f99a 	bl	80108d8 <VL53LX_i2c_encode_static_nvm_managed>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80055aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80055ae:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d917      	bls.n	80055e8 <VL53LX_init_and_start_range+0x3c8>
 80055b8:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d113      	bne.n	80055e8 <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80055c0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80055c4:	f1c3 030d 	rsb	r3, r3, #13
 80055c8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80055cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 80055d0:	f107 020c 	add.w	r2, r7, #12
 80055d4:	4413      	add	r3, r2
 80055d6:	461a      	mov	r2, r3
 80055d8:	2117      	movs	r1, #23
 80055da:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80055de:	f00b fa57 	bl	8010a90 <VL53LX_i2c_encode_customer_nvm_managed>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80055e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80055ec:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d917      	bls.n	8005626 <VL53LX_init_and_start_range+0x406>
 80055f6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d113      	bne.n	8005626 <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80055fe:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005602:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005606:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800560a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_config(
 800560e:	f107 020c 	add.w	r2, r7, #12
 8005612:	4413      	add	r3, r2
 8005614:	461a      	mov	r2, r3
 8005616:	2120      	movs	r1, #32
 8005618:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800561c:	f00b fbc1 	bl	8010da2 <VL53LX_i2c_encode_static_config>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005626:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800562a:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d917      	bls.n	8005664 <VL53LX_init_and_start_range+0x444>
 8005634:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005638:	2b00      	cmp	r3, #0
 800563a:	d113      	bne.n	8005664 <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800563c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005640:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8005644:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005648:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_general_config(
 800564c:	f107 020c 	add.w	r2, r7, #12
 8005650:	4413      	add	r3, r2
 8005652:	461a      	mov	r2, r3
 8005654:	2116      	movs	r1, #22
 8005656:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800565a:	f00b fc85 	bl	8010f68 <VL53LX_i2c_encode_general_config>
 800565e:	4603      	mov	r3, r0
 8005660:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005664:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005668:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d917      	bls.n	80056a2 <VL53LX_init_and_start_range+0x482>
 8005672:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005676:	2b00      	cmp	r3, #0
 8005678:	d113      	bne.n	80056a2 <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800567a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800567e:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8005682:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005686:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_timing_config(
 800568a:	f107 020c 	add.w	r2, r7, #12
 800568e:	4413      	add	r3, r2
 8005690:	461a      	mov	r2, r3
 8005692:	2117      	movs	r1, #23
 8005694:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8005698:	f00b fcea 	bl	8011070 <VL53LX_i2c_encode_timing_config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80056a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80056a6:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d036      	beq.n	800571e <VL53LX_init_and_start_range+0x4fe>
 80056b0:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d132      	bne.n	800571e <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80056b8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80056bc:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 80056c0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80056c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80056c8:	791b      	ldrb	r3, [r3, #4]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d017      	beq.n	8005702 <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 80056d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d6:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056e2:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e8:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056f4:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 80056fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005700:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005702:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8005706:	f107 020c 	add.w	r2, r7, #12
 800570a:	4413      	add	r3, r2
 800570c:	461a      	mov	r2, r3
 800570e:	2112      	movs	r1, #18
 8005710:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8005714:	f00b fd2e 	bl	8011174 <VL53LX_i2c_encode_dynamic_config>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 800571e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005722:	2b00      	cmp	r3, #0
 8005724:	d113      	bne.n	800574e <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8005726:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800572a:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 800572e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005732:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_system_control(
 8005736:	f107 020c 	add.w	r2, r7, #12
 800573a:	4413      	add	r3, r2
 800573c:	461a      	mov	r2, r3
 800573e:	2105      	movs	r1, #5
 8005740:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8005744:	f00b fd9b 	bl	801127e <VL53LX_i2c_encode_system_control>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 800574e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 8005756:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800575a:	f107 020c 	add.w	r2, r7, #12
 800575e:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 8005762:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8005766:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	f00d f9b4 	bl	8012ad8 <VL53LX_WriteMulti>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8005776:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 800577e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005782:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	f003 fa30 	bl	8008bec <VL53LX_update_ll_driver_rd_state>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	if (status == VL53LX_ERROR_NONE)
 8005792:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 800579a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800579e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	f003 fbc2 	bl	8008f2c <VL53LX_update_ll_driver_cfg_state>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	LOG_FUNCTION_END(status);

	return status;
 80057ae:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3318      	adds	r3, #24
 80057cc:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80057d4:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80057dc:	b25b      	sxtb	r3, r3
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80057e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057e8:	b25b      	sxtb	r3, r3
 80057ea:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f00b fd7a 	bl	80112f4 <VL53LX_set_system_control>
 8005800:	4603      	mov	r3, r0
 8005802:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 8005816:	2103      	movs	r1, #3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f003 f9b7 	bl	8008b8c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8005824:	3301      	adds	r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f003 fdc1 	bl	80093b8 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f003 fdf3 	bl	8009422 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005842:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d102      	bne.n	8005850 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f006 ffd4 	bl	800c7f8 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8005850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b0c8      	sub	sp, #288	@ 0x120
 8005860:	af00      	add	r7, sp, #0
 8005862:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005866:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800586a:	6018      	str	r0, [r3, #0]
 800586c:	460a      	mov	r2, r1
 800586e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005872:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8005876:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005878:	2300      	movs	r3, #0
 800587a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800587e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005882:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3318      	adds	r3, #24
 800588a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 800588e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005892:	f203 3366 	addw	r3, r3, #870	@ 0x366
 8005896:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 800589a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800589e:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 80058a2:	3318      	adds	r3, #24
 80058a4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80058a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058ac:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 80058b0:	331c      	adds	r3, #28
 80058b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 80058b6:	2388      	movs	r3, #136	@ 0x88
 80058b8:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80058c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058cc:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d008      	beq.n	80058e8 <VL53LX_get_measurement_results+0x8c>
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d10d      	bne.n	80058f6 <VL53LX_get_measurement_results+0x9a>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80058da:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80058de:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 80058e2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80058e6:	e00a      	b.n	80058fe <VL53LX_get_measurement_results+0xa2>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80058e8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80058ec:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80058f0:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80058f4:	e003      	b.n	80058fe <VL53LX_get_measurement_results+0xa2>
	default:
		i2c_buffer_size_bytes =
 80058f6:	232c      	movs	r3, #44	@ 0x2c
 80058f8:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80058fc:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80058fe:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10f      	bne.n	8005926 <VL53LX_get_measurement_results+0xca>
		status =
			VL53LX_ReadMulti(
 8005906:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800590a:	f107 0208 	add.w	r2, r7, #8
 800590e:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 8005912:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8005916:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	f00d f912 	bl	8012b44 <VL53LX_ReadMulti>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8005926:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800592a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d917      	bls.n	8005964 <VL53LX_get_measurement_results+0x108>
 8005934:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8005938:	2b00      	cmp	r3, #0
 800593a:	d113      	bne.n	8005964 <VL53LX_get_measurement_results+0x108>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800593c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8005940:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 8005944:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005948:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_debug_results(
 800594c:	f107 0208 	add.w	r2, r7, #8
 8005950:	4413      	add	r3, r2
 8005952:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005956:	4619      	mov	r1, r3
 8005958:	2038      	movs	r0, #56	@ 0x38
 800595a:	f00b fe49 	bl	80115f0 <VL53LX_i2c_decode_debug_results>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005964:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005968:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d017      	beq.n	80059a2 <VL53LX_get_measurement_results+0x146>
 8005972:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8005976:	2b00      	cmp	r3, #0
 8005978:	d113      	bne.n	80059a2 <VL53LX_get_measurement_results+0x146>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800597a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800597e:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8005982:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005986:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_core_results(
 800598a:	f107 0208 	add.w	r2, r7, #8
 800598e:	4413      	add	r3, r2
 8005990:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8005994:	4619      	mov	r1, r3
 8005996:	2021      	movs	r0, #33	@ 0x21
 8005998:	f00b fdc9 	bl	801152e <VL53LX_i2c_decode_core_results>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 80059a2:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d110      	bne.n	80059cc <VL53LX_get_measurement_results+0x170>

		i2c_buffer_offset_bytes = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80059b0:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_system_results(
 80059b4:	f107 0208 	add.w	r2, r7, #8
 80059b8:	4413      	add	r3, r2
 80059ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80059be:	4619      	mov	r1, r3
 80059c0:	202c      	movs	r0, #44	@ 0x2c
 80059c2:	f00b fcbe 	bl	8011342 <VL53LX_i2c_decode_system_results>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80059cc:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80059da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	b0a0      	sub	sp, #128	@ 0x80
 80059e0:	af06      	add	r7, sp, #24
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	460b      	mov	r3, r1
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	VL53LX_LLDriverData_t *pdev =
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3318      	adds	r3, #24
 80059f4:	663b      	str	r3, [r7, #96]	@ 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80059fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80059fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a00:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8005a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a04:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8005a08:	657b      	str	r3, [r7, #84]	@ 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8005a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a0c:	332c      	adds	r3, #44	@ 0x2c
 8005a0e:	653b      	str	r3, [r7, #80]	@ 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8005a10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a12:	33c2      	adds	r3, #194	@ 0xc2
 8005a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 8005a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a18:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8005a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8005a1e:	f107 0314 	add.w	r3, r7, #20
 8005a22:	647b      	str	r3, [r7, #68]	@ 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005a24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a26:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8005a2a:	643b      	str	r3, [r7, #64]	@ 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8005a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a2e:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8005a34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a36:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 8005a3a:	3310      	adds	r3, #16
 8005a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8005a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a40:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8005a44:	637b      	str	r3, [r7, #52]	@ 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8005a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a48:	3348      	adds	r3, #72	@ 0x48
 8005a4a:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8005a4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a4e:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8005a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8005a54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a56:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8005a5a:	331c      	adds	r3, #28
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8005a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a60:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8296 	beq.w	8005f9a <VL53LX_get_device_results+0x5c0>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8005a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a70:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8005a74:	4619      	mov	r1, r3
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fbd2 	bl	8006220 <VL53LX_get_histogram_bin_data>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8005a82:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d118      	bne.n	8005abc <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d114      	bne.n	8005abc <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8005a92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a94:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8005a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aa4:	4413      	add	r3, r2
 8005aa6:	1d1a      	adds	r2, r3, #4
 8005aa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aaa:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	f004 fa27 	bl	8009f04 <VL53LX_hist_copy_and_scale_ambient_info>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8005abc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f040 8206 	bne.w	8005ed2 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005ac6:	f107 0313 	add.w	r3, r7, #19
 8005aca:	4619      	mov	r1, r3
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f006 ffba 	bl	800ca46 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8005ad2:	7cfb      	ldrb	r3, [r7, #19]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8005ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ae6:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d107      	bne.n	8005afe <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8005aee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	3202      	adds	r2, #2
 8005af6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8005afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005afc:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8005afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b00:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
		pHP->gain_factor =
 8005b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b06:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8005b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f004 f8fd 	bl	8009d14 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8005b1a:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b22:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b28:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b2c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b32:	865a      	strh	r2, [r3, #50]	@ 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8005b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b36:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8005b38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b3a:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8005b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b40:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8005b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b44:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8005b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b4a:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8005b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b4e:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8005b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b54:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	@ 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8005b58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b5a:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8005b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b60:	f893 2331 	ldrb.w	r2, [r3, #817]	@ 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8005b64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b66:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8005b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b72:	86da      	strh	r2, [r3, #54]	@ 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8005b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b76:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8005b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b7c:	869a      	strh	r2, [r3, #52]	@ 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8005b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b84:	871a      	strh	r2, [r3, #56]	@ 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8005b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b88:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8005b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b8c:	875a      	strh	r2, [r3, #58]	@ 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8005b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b90:	f203 3292 	addw	r2, r3, #914	@ 0x392
 8005b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b96:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f003 faeb 	bl	8009178 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8005ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ba4:	795b      	ldrb	r3, [r3, #5]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d002      	beq.n	8005bb0 <VL53LX_get_device_results+0x1d6>
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d02e      	beq.n	8005c0c <VL53LX_get_device_results+0x232>
 8005bae:	e03d      	b.n	8005c2c <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8005bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bb2:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
 8005bb6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8005bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bc8:	f893 e3c2 	ldrb.w	lr, [r3, #962]	@ 0x3c2
 8005bcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bce:	f893 83c3 	ldrb.w	r8, [r3, #963]	@ 0x3c3
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8005bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bda:	f892 20a9 	ldrb.w	r2, [r2, #169]	@ 0xa9
 8005bde:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005be0:	319c      	adds	r1, #156	@ 0x9c
 8005be2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8005be4:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8005be8:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
 8005bec:	b2a4      	uxth	r4, r4
 8005bee:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8005bf0:	351c      	adds	r5, #28
 8005bf2:	9505      	str	r5, [sp, #20]
 8005bf4:	9404      	str	r4, [sp, #16]
 8005bf6:	9003      	str	r0, [sp, #12]
 8005bf8:	9102      	str	r1, [sp, #8]
 8005bfa:	9201      	str	r2, [sp, #4]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	4643      	mov	r3, r8
 8005c00:	4672      	mov	r2, lr
 8005c02:	4661      	mov	r1, ip
 8005c04:	4630      	mov	r0, r6
 8005c06:	f005 f8f4 	bl	800adf2 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8005c0a:	e013      	b.n	8005c34 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8005c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c0e:	331c      	adds	r3, #28
 8005c10:	4619      	mov	r1, r3
 8005c12:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8005c14:	f7fe f9b8 	bl	8003f88 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8005c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c1a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	b21a      	sxth	r2, r3
 8005c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c28:	839a      	strh	r2, [r3, #28]
		break;
 8005c2a:	e003      	b.n	8005c34 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c2e:	2200      	movs	r2, #0
 8005c30:	839a      	strh	r2, [r3, #28]
		break;
 8005c32:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8005c34:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 814c 	bne.w	8005ed6 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c40:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 8005c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c46:	f893 10a9 	ldrb.w	r1, [r3, #169]	@ 0xa9
 8005c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c4c:	f503 72ec 	add.w	r2, r3, #472	@ 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8005c50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c52:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
		VL53LX_calc_max_effective_spads(
 8005c56:	461c      	mov	r4, r3
 8005c58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c5a:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4623      	mov	r3, r4
 8005c62:	f005 fa69 	bl	800b138 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8005c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c68:	799b      	ldrb	r3, [r3, #6]
 8005c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 ff89 	bl	8006b86 <VL53LX_get_dmax_calibration_data>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8005c7a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f040 812b 	bne.w	8005eda <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8005c84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c86:	f503 7515 	add.w	r5, r3, #596	@ 0x254
 8005c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c8c:	f503 7605 	add.w	r6, r3, #532	@ 0x214
 8005c90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c92:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8005c96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c98:	f202 521c 	addw	r2, r2, #1308	@ 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8005c9c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005c9e:	f501 51a0 	add.w	r1, r1, #5120	@ 0x1400
				pdev->wArea2,
 8005ca2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8005ca4:	f500 50d0 	add.w	r0, r0, #6656	@ 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8005ca8:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8005caa:	9405      	str	r4, [sp, #20]
 8005cac:	f107 0413 	add.w	r4, r7, #19
 8005cb0:	9404      	str	r4, [sp, #16]
 8005cb2:	9003      	str	r0, [sp, #12]
 8005cb4:	9102      	str	r1, [sp, #8]
 8005cb6:	9201      	str	r2, [sp, #4]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4633      	mov	r3, r6
 8005cbc:	462a      	mov	r2, r5
 8005cbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f00d f94d 	bl	8012f60 <VL53LX_ipp_hist_process_data>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8005ccc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cce:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d150      	bne.n	8005d78 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d94d      	bls.n	8005d78 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8005ce2:	e045      	b.n	8005d70 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8005ce4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005ce8:	224c      	movs	r2, #76	@ 0x4c
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	3310      	adds	r3, #16
 8005cf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	7cfa      	ldrb	r2, [r7, #19]
 8005cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0a:	7cfa      	ldrb	r2, [r7, #19]
 8005d0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	7cfa      	ldrb	r2, [r7, #19]
 8005d1a:	fb93 f2f2 	sdiv	r2, r3, r2
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005d26:	461a      	mov	r2, r3
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d38:	461a      	mov	r2, r3
 8005d3a:	7cfb      	ldrb	r3, [r7, #19]
 8005d3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	7cfb      	ldrb	r3, [r7, #19]
 8005d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	7cfa      	ldrb	r2, [r7, #19]
 8005d5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	639a      	str	r2, [r3, #56]	@ 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8005d66:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8005d70:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d9b5      	bls.n	8005ce4 <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8005d78:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f040 80ae 	bne.w	8005ede <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8005d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d84:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8005d88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d8a:	f503 7171 	add.w	r1, r3, #964	@ 0x3c4
 8005d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d90:	330e      	adds	r3, #14
 8005d92:	461a      	mov	r2, r3
 8005d94:	f004 fff7 	bl	800ad86 <VL53LX_hist_wrap_dmax>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8005d9e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f040 809d 	bne.w	8005ee2 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8005da8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005daa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8005db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dba:	4413      	add	r3, r2
 8005dbc:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8005dbe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8005dce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f103 0208 	add.w	r2, r3, #8
 8005dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f004 faf2 	bl	800a3c2 <VL53LX_hist_phase_consistency_check>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8005de4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d17c      	bne.n	8005ee6 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8005dec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8005df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dfe:	4413      	add	r3, r2
 8005e00:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8005e02:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8005e06:	4613      	mov	r3, r2
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8005e12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e14:	4413      	add	r3, r2
 8005e16:	f103 0208 	add.w	r2, r3, #8
 8005e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e1c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f004 ff58 	bl	800acd6 <VL53LX_hist_xmonitor_consistency_check>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8005e2c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d15a      	bne.n	8005eea <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8005e34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e36:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8005e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e40:	2205      	movs	r2, #5
 8005e42:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8005e44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e46:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8005e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e50:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8005e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005e58:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8005e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e5c:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
		if (zid <
 8005e60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d222      	bcs.n	8005eae <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8005e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			phist_info =
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e70:	4413      	add	r3, r2
 8005e72:	3304      	adds	r3, #4
 8005e74:	64bb      	str	r3, [r7, #72]	@ 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8005e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e78:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8005e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e7c:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e80:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8005e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e84:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8005e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e88:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
			phist_info->result__dss_actual_effective_spads =
 8005e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e8e:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8005e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e92:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
			phist_info->VL53LX_p_005 =
 8005e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e98:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
			phist_info->total_periods_elapsed =
 8005ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea2:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			phist_info->ambient_events_sum =
 8005eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eac:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8005eae:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d11b      	bne.n	8005eee <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8005eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eb8:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
 8005ebc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ebe:	f203 3266 	addw	r2, r3, #870	@ 0x366
 8005ec2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ec4:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8005ec8:	3318      	adds	r3, #24
 8005eca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ecc:	f005 fa91 	bl	800b3f2 <VL53LX_hist_copy_results_to_sys_and_core>
 8005ed0:	e00e      	b.n	8005ef0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8005ed2:	bf00      	nop
 8005ed4:	e00c      	b.n	8005ef0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8005ed6:	bf00      	nop
 8005ed8:	e00a      	b.n	8005ef0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8005eda:	bf00      	nop
 8005edc:	e008      	b.n	8005ef0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8005ede:	bf00      	nop
 8005ee0:	e006      	b.n	8005ef0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8005ee2:	bf00      	nop
 8005ee4:	e004      	b.n	8005ef0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8005eee:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8005ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d036      	beq.n	8005f66 <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8005ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005efa:	79db      	ldrb	r3, [r3, #7]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d00a      	beq.n	8005f16 <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8005f00:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8005f08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f005 fb45 	bl	800b59a <VL53LX_dynamic_zone_update>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005f16:	2300      	movs	r3, #0
 8005f18:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8005f1c:	e015      	b.n	8005f4a <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8005f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f20:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
						& 0x01) ?
 8005f24:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <VL53LX_get_device_results+0x556>
 8005f2c:	2103      	movs	r1, #3
 8005f2e:	e000      	b.n	8005f32 <VL53LX_get_device_results+0x558>
 8005f30:	2101      	movs	r1, #1
 8005f32:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005f36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f38:	4413      	add	r3, r2
 8005f3a:	460a      	mov	r2, r1
 8005f3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005f40:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005f44:	3301      	adds	r3, #1
 8005f46:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8005f4a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d9e5      	bls.n	8005f1e <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8005f52:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d105      	bne.n	8005f66 <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f005 fb97 	bl	800b68e <VL53LX_multizone_hist_bins_update>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8005f66:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d105      	bne.n	8005f7a <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f006 f832 	bl	800bfd8 <VL53LX_dynamic_xtalk_correction_corrector>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8005f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f7c:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d157      	bne.n	8006034 <VL53LX_get_device_results+0x65a>
			(histo_merge_nb != 0))
 8005f84:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d054      	beq.n	8006034 <VL53LX_get_device_results+0x65a>
			pC->algo__crosstalk_compensation_plane_offset_kcps /=
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	7cfa      	ldrb	r2, [r7, #19]
 8005f90:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e04c      	b.n	8006034 <VL53LX_get_device_results+0x65a>
				histo_merge_nb;
	} else {

		if (status == VL53LX_ERROR_NONE)
 8005f9a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d107      	bne.n	8005fb2 <VL53LX_get_device_results+0x5d8>
			status = VL53LX_get_measurement_results(
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff fc58 	bl	800585c <VL53LX_get_measurement_results>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8005fb2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10d      	bne.n	8005fd6 <VL53LX_get_device_results+0x5fc>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8005fba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fbc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fc4:	f203 3166 	addw	r1, r3, #870	@ 0x366
 8005fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fca:	f503 5299 	add.w	r2, r3, #4896	@ 0x1320
 8005fce:	3218      	adds	r2, #24
 8005fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fd2:	f000 fc27 	bl	8006824 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d12a      	bne.n	8006034 <VL53LX_get_device_results+0x65a>

			if ((status == VL53LX_ERROR_NONE) &&
 8005fde:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10d      	bne.n	8006002 <VL53LX_get_device_results+0x628>
				(pL->low_power_auto_range_count == 0)) {
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe8:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <VL53LX_get_device_results+0x628>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f006 fc4e 	bl	800c890 <VL53LX_low_power_auto_setup_manual_calibration>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	709a      	strb	r2, [r3, #2]
 8006000:	e00a      	b.n	8006018 <VL53LX_get_device_results+0x63e>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8006002:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <VL53LX_get_device_results+0x63e>
				(pL->low_power_auto_range_count == 1)) {
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 800600e:	2b01      	cmp	r3, #1
 8006010:	d102      	bne.n	8006018 <VL53LX_get_device_results+0x63e>
				pL->low_power_auto_range_count = 2;
 8006012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006014:	2202      	movs	r2, #2
 8006016:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8006018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601a:	789b      	ldrb	r3, [r3, #2]
 800601c:	2bff      	cmp	r3, #255	@ 0xff
 800601e:	d009      	beq.n	8006034 <VL53LX_get_device_results+0x65a>
 8006020:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006024:	2b00      	cmp	r3, #0
 8006026:	d105      	bne.n	8006034 <VL53LX_get_device_results+0x65a>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f006 fc83 	bl	800c934 <VL53LX_low_power_auto_update_DSS>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006034:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006036:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800603a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800603c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800603e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006040:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8006044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006046:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8006048:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800604a:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800604e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006050:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8006052:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 80b0 	bne.w	80061bc <VL53LX_get_device_results+0x7e2>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 800605c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800605e:	2205      	movs	r2, #5
 8006060:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8006064:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006066:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 800606a:	3301      	adds	r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006070:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8006074:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006076:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800607a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (zid < pres->zone_results.max_zones) {
 800607e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006080:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 8006084:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006088:	429a      	cmp	r2, r3
 800608a:	f080 8097 	bcs.w	80061bc <VL53LX_get_device_results+0x7e2>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 800608e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
			pobjects =
 8006092:	4613      	mov	r3, r2
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800609e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80060a0:	4413      	add	r3, r2
 80060a2:	3308      	adds	r3, #8
 80060a4:	657b      	str	r3, [r7, #84]	@ 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 80060a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060a8:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 80060aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ac:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 80060ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060b0:	785a      	ldrb	r2, [r3, #1]
 80060b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b4:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 80060b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060b8:	789a      	ldrb	r2, [r3, #2]
 80060ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060bc:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 80060be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060c0:	78da      	ldrb	r2, [r3, #3]
 80060c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c4:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 80060c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060c8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 80060cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ce:	639a      	str	r2, [r3, #56]	@ 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 80060d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 80060d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d8:	63da      	str	r2, [r3, #60]	@ 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 80060da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060dc:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 80060e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80060e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060e8:	f893 218e 	ldrb.w	r2, [r3, #398]	@ 0x18e
			pobjects->xmonitor.range_status =
 80060ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			pobjects->max_objects      = presults->max_results;
 80060f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060f4:	7c5a      	ldrb	r2, [r3, #17]
 80060f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f8:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80060fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060fc:	7c9a      	ldrb	r2, [r3, #18]
 80060fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006100:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8006108:	e052      	b.n	80061b0 <VL53LX_get_device_results+0x7d6>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 800610a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 800610e:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8006112:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006114:	204c      	movs	r0, #76	@ 0x4c
 8006116:	fb00 f303 	mul.w	r3, r0, r3
 800611a:	440b      	add	r3, r1
 800611c:	3338      	adds	r3, #56	@ 0x38
 800611e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8006120:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006122:	4613      	mov	r3, r2
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4403      	add	r3, r0
 800612c:	3308      	adds	r3, #8
 800612e:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8006130:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8006134:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8006138:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800613a:	204c      	movs	r0, #76	@ 0x4c
 800613c:	fb00 f303 	mul.w	r3, r0, r3
 8006140:	440b      	add	r3, r1
 8006142:	333c      	adds	r3, #60	@ 0x3c
 8006144:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8006146:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006148:	4613      	mov	r3, r2
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4403      	add	r3, r0
 8006152:	330c      	adds	r3, #12
 8006154:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8006156:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 800615a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 800615e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006160:	204c      	movs	r0, #76	@ 0x4c
 8006162:	fb00 f303 	mul.w	r3, r0, r3
 8006166:	440b      	add	r3, r1
 8006168:	3354      	adds	r3, #84	@ 0x54
 800616a:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 800616c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800616e:	4613      	mov	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3310      	adds	r3, #16
 800617a:	4602      	mov	r2, r0
 800617c:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 800617e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8006182:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].range_status;
 8006186:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006188:	204c      	movs	r0, #76	@ 0x4c
 800618a:	fb00 f303 	mul.w	r3, r0, r3
 800618e:	440b      	add	r3, r1
 8006190:	335e      	adds	r3, #94	@ 0x5e
 8006192:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8006194:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006196:	4613      	mov	r3, r2
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	3312      	adds	r3, #18
 80061a2:	4602      	mov	r2, r0
 80061a4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 80061a6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80061aa:	3301      	adds	r3, #1
 80061ac:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80061b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061b2:	7c9b      	ldrb	r3, [r3, #18]
 80061b4:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d3a6      	bcc.n	800610a <VL53LX_get_device_results+0x730>
		}
	}



	memcpy(
 80061bc:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80061c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f016 ff4f 	bl	801d066 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 80061c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <VL53LX_get_device_results+0x802>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f002 fdf9 	bl	8008dc8 <VL53LX_check_ll_driver_rd_state>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80061dc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3768      	adds	r7, #104	@ 0x68
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080061ea <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 80061fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d107      	bne.n	8006212 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	2203      	movs	r2, #3
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff f809 	bl	8005220 <VL53LX_init_and_start_range>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b0d2      	sub	sp, #328	@ 0x148
 8006224:	af00      	add	r7, sp, #0
 8006226:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800622a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800622e:	6018      	str	r0, [r3, #0]
 8006230:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006234:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006238:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800623a:	2300      	movs	r3, #0
 800623c:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev =
 8006240:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006244:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3318      	adds	r3, #24
 800624c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8006250:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006254:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800625e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8006262:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006266:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800626a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 800626e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006272:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8006276:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 800627a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800627e:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8006282:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8006286:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800628a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800628e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8006292:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006296:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 800629a:	f107 030c 	add.w	r3, r7, #12
 800629e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint8_t    bin_23_0 = 0x00;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t   bin                      = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint16_t   encoded_timeout          = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

	uint32_t   pll_period_us            = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t    i                        = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

	int32_t    hist_merge				= 0;
 80062cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80062d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80062d8:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10d      	bne.n	80062fc <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 80062e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80062e4:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 80062e8:	2353      	movs	r3, #83	@ 0x53
 80062ea:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80062ee:	2188      	movs	r1, #136	@ 0x88
 80062f0:	6800      	ldr	r0, [r0, #0]
 80062f2:	f00c fc27 	bl	8012b44 <VL53LX_ReadMulti>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 80062fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006306:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006310:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006314:	785a      	ldrb	r2, [r3, #1]
 8006316:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800631a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8006324:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006328:	789a      	ldrb	r2, [r3, #2]
 800632a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800632e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8006338:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800633c:	78da      	ldrb	r2, [r3, #3]
 800633e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006342:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 800634c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006350:	3304      	adds	r3, #4
 8006352:	4619      	mov	r1, r3
 8006354:	2002      	movs	r0, #2
 8006356:	f003 fa37 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 800635a:	4603      	mov	r3, r0
 800635c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 800635e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006362:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c



	i2c_buffer_offset_bytes =
 800636c:	234e      	movs	r3, #78	@ 0x4e
 800636e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006372:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006376:	f107 020c 	add.w	r2, r7, #12
 800637a:	4413      	add	r3, r2
 800637c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8006380:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006384:	2002      	movs	r0, #2
 8006386:	f003 fa1f 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800638e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006392:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	i2c_buffer_offset_bytes =
 800639c:	2350      	movs	r3, #80	@ 0x50
 800639e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80063a2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80063a6:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80063aa:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80063ae:	5cd2      	ldrb	r2, [r2, r3]
 80063b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80063b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 80063be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80063c2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8b3 207e 	ldrh.w	r2, [r3, #126]	@ 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 80063cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80063d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d4:	f8a3 235c 	strh.w	r2, [r3, #860]	@ 0x35c
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 80063d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80063dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 80063e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80063ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ee:	f883 235e 	strb.w	r2, [r3, #862]	@ 0x35e



	i2c_buffer_offset_bytes =
 80063f2:	2351      	movs	r3, #81	@ 0x51
 80063f4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 80063f8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80063fc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8006400:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8006404:	5cd3      	ldrb	r3, [r2, r3]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 800640c:	2352      	movs	r3, #82	@ 0x52
 800640e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006412:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006416:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800641a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800641e:	5cd2      	ldrb	r2, [r2, r3]
 8006420:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006424:	4413      	add	r3, r2
 8006426:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 800642a:	234d      	movs	r3, #77	@ 0x4d
 800642c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006430:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006434:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8006438:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800643c:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8006440:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006442:	2306      	movs	r3, #6
 8006444:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006448:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800644c:	f107 020c 	add.w	r2, r7, #12
 8006450:	4413      	add	r3, r2
 8006452:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006456:	2300      	movs	r3, #0
 8006458:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 800645c:	e01a      	b.n	8006494 <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800645e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006462:	2003      	movs	r0, #3
 8006464:	f003 fa4f 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 8006468:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 800646a:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800646e:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006470:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006474:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3206      	adds	r2, #6
 800647c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006480:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006484:	3303      	adds	r3, #3
 8006486:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800648a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800648e:	3301      	adds	r3, #1
 8006490:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8006494:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006498:	2b17      	cmp	r3, #23
 800649a:	d9e0      	bls.n	800645e <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 800649c:	f107 0208 	add.w	r2, r7, #8
 80064a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80064a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80064a8:	f248 018d 	movw	r1, #32909	@ 0x808d
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	f000 fbab 	bl	8006c08 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 80064b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80064b6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d118      	bne.n	80064f6 <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80064c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064c8:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 80064cc:	3310      	adds	r3, #16
 80064ce:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f016 fce1 	bl	801ce9c <memset>
		pdev->bin_rec_pos = 0;
 80064da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
		pdev->pos_before_next_recom = 0;
 80064e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
	}

	if (hist_merge == 1)
 80064f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80064fa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10b      	bne.n	800651c <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 8006504:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006508:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 800650c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006510:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006514:	6811      	ldr	r1, [r2, #0]
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	f7fd fe2e 	bl	8004178 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 800651c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006520:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8006524:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006528:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8006530:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006534:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800653e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006542:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2218      	movs	r2, #24
 800654a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800654c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006550:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2218      	movs	r2, #24
 8006558:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800655a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800655e:	78da      	ldrb	r2, [r3, #3]
 8006560:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006564:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 800656e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006572:	799b      	ldrb	r3, [r3, #6]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006578:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800657c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->vcsel_width +=
 8006586:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800658a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006594:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006598:	7c12      	ldrb	r2, [r2, #16]
	pdata->vcsel_width +=
 800659a:	4413      	add	r3, r2
 800659c:	b29a      	uxth	r2, r3
 800659e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80065a2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 80065ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065b0:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 80065b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80065b6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 80065c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80065c4:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 80065c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80065cc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80065d0:	6811      	ldr	r1, [r2, #0]
 80065d2:	6818      	ldr	r0, [r3, #0]
 80065d4:	f003 fd97 	bl	800a106 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 80065d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80065dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d115      	bne.n	8006610 <VL53LX_get_histogram_bin_data+0x3f0>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80065e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80065e8:	791b      	ldrb	r3, [r3, #4]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80065ee:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80065f2:	7952      	ldrb	r2, [r2, #5]
		encoded_timeout =
 80065f4:	4413      	add	r3, r2
 80065f6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 80065fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80065fe:	799a      	ldrb	r2, [r3, #6]
 8006600:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006604:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800660e:	e014      	b.n	800663a <VL53LX_get_histogram_bin_data+0x41a>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006610:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006614:	79db      	ldrb	r3, [r3, #7]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800661a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800661e:	7a12      	ldrb	r2, [r2, #8]
		encoded_timeout =
 8006620:	4413      	add	r3, r2
 8006622:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8006626:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800662a:	7a5a      	ldrb	r2, [r3, #9]
 800662c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006630:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 800663a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800663e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2200      	movs	r2, #0
 8006646:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006648:	2300      	movs	r3, #0
 800664a:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800664e:	e01f      	b.n	8006690 <VL53LX_get_histogram_bin_data+0x470>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006650:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8006654:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8006658:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	4413      	add	r3, r2
 8006660:	7b1b      	ldrb	r3, [r3, #12]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	2b07      	cmp	r3, #7
 8006668:	d10d      	bne.n	8006686 <VL53LX_get_histogram_bin_data+0x466>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800666a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800666e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	7adb      	ldrb	r3, [r3, #11]
 8006676:	3304      	adds	r3, #4
 8006678:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800667a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800667e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006686:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800668a:	3301      	adds	r3, #1
 800668c:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8006690:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8006694:	2b05      	cmp	r3, #5
 8006696:	d9db      	bls.n	8006650 <VL53LX_get_histogram_bin_data+0x430>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8006698:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800669c:	4618      	mov	r0, r3
 800669e:	f003 fba2 	bl	8009de6 <VL53LX_decode_timeout>
 80066a2:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 80066a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80066a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 80066b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80066b6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80066c0:	4618      	mov	r0, r3
 80066c2:	f006 fa00 	bl	800cac6 <VL53LX_calc_pll_period_us>
 80066c6:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80066ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80066ce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d8:	3301      	adds	r3, #1
 80066da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80066de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80066e2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		VL53LX_duration_maths(
 80066ec:	4619      	mov	r1, r3
 80066ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80066f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066f6:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80066fa:	f006 f9fb 	bl	800caf4 <VL53LX_duration_maths>
 80066fe:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006700:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006704:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 800670e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006712:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2200      	movs	r2, #0
 800671a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 800671e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006722:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	f006 fb0a 	bl	800cd40 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 800672c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006730:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	f006 ff22 	bl	800d57e <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800673a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800673e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006742:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006746:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800674e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006752:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8006756:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800675a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8006762:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006766:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	789b      	ldrb	r3, [r3, #2]
 800676e:	461a      	mov	r2, r3
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800677c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006780:	4413      	add	r3, r2
 8006782:	3302      	adds	r3, #2
 8006784:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8006788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800678c:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 800678e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006792:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800679c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a0:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80067a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80067a6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80067b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067b4:	2200      	movs	r2, #0
 80067b6:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 80067b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80067bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2b11      	cmp	r3, #17
 80067cc:	bf8c      	ite	hi
 80067ce:	2201      	movhi	r2, #1
 80067d0:	2200      	movls	r2, #0
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	2a00      	cmp	r2, #0
 80067d6:	d11c      	bne.n	8006812 <VL53LX_get_histogram_bin_data+0x5f2>
 80067d8:	4a11      	ldr	r2, [pc, #68]	@ (8006820 <VL53LX_get_histogram_bin_data+0x600>)
 80067da:	fa22 f303 	lsr.w	r3, r2, r3
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bf14      	ite	ne
 80067e6:	2301      	movne	r3, #1
 80067e8:	2300      	moveq	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d010      	beq.n	8006812 <VL53LX_get_histogram_bin_data+0x5f2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80067f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80067f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	b2da      	uxtb	r2, r3
 8006804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006808:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 800680a:	23fa      	movs	r3, #250	@ 0xfa
 800680c:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	break;
 8006810:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006812:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 8006816:	4618      	mov	r0, r3
 8006818:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	0002200e 	.word	0x0002200e

08006824 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8006824:	b480      	push	{r7}
 8006826:	b08b      	sub	sp, #44	@ 0x2c
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	78da      	ldrb	r2, [r3, #3]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2200      	movs	r2, #0
 8006852:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2204      	movs	r2, #4
 8006858:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2201      	movs	r2, #1
 800685e:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	8a1b      	ldrh	r3, [r3, #16]
 8006864:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	8a9b      	ldrh	r3, [r3, #20]
 800686a:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	8a5b      	ldrh	r3, [r3, #18]
 8006870:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8006872:	2300      	movs	r3, #0
 8006874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006878:	e00b      	b.n	8006892 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800687a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	4413      	add	r3, r2
 8006884:	2200      	movs	r2, #0
 8006886:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8006888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800688c:	3301      	adds	r3, #1
 800688e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006896:	2b04      	cmp	r3, #4
 8006898:	d9ef      	bls.n	800687a <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	3314      	adds	r3, #20
 800689e:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80068a6:	e0fe      	b.n	8006aa6 <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80068ae:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	2200      	movs	r2, #0
 80068b4:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	78db      	ldrb	r3, [r3, #3]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10a      	bne.n	80068d4 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80068c6:	2b09      	cmp	r3, #9
 80068c8:	d104      	bne.n	80068d4 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	2213      	movs	r2, #19
 80068ce:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 80068d2:	e007      	b.n	80068e4 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	2200      	movs	r2, #0
 80068e8:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2200      	movs	r2, #0
 80068ee:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	2200      	movs	r2, #0
 80068f4:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2200      	movs	r2, #0
 80068fa:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	2200      	movs	r2, #0
 8006900:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	2200      	movs	r2, #0
 8006906:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8006908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8006910:	2b01      	cmp	r3, #1
 8006912:	d05c      	beq.n	80069ce <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 8006914:	e0a8      	b.n	8006a68 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	789b      	ldrb	r3, [r3, #2]
 800691a:	2b07      	cmp	r3, #7
 800691c:	d103      	bne.n	8006926 <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	8a7a      	ldrh	r2, [r7, #18]
 8006922:	82da      	strh	r2, [r3, #22]
 8006924:	e00b      	b.n	800693e <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	789b      	ldrb	r3, [r3, #2]
 800692a:	2b08      	cmp	r3, #8
 800692c:	d103      	bne.n	8006936 <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	8aba      	ldrh	r2, [r7, #20]
 8006932:	82da      	strh	r2, [r3, #22]
 8006934:	e003      	b.n	800693e <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	8afa      	ldrh	r2, [r7, #22]
 8006942:	861a      	strh	r2, [r3, #48]	@ 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	895b      	ldrh	r3, [r3, #10]
 8006958:	015b      	lsls	r3, r3, #5
 800695a:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006962:	d302      	bcc.n	800696a <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8006964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006968:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	b29a      	uxth	r2, r3
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8006980:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006992:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	2b00      	cmp	r3, #0
 8006998:	da01      	bge.n	800699e <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 800699a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800699e:	12db      	asrs	r3, r3, #11
 80069a0:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	b21a      	sxth	r2, r3
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 80069cc:	e04c      	b.n	8006a68 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069e4:	865a      	strh	r2, [r3, #50]	@ 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	8bdb      	ldrh	r3, [r3, #30]
 80069f2:	015b      	lsls	r3, r3, #5
 80069f4:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069fc:	d302      	bcc.n	8006a04 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80069fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a02:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm = (int32_t)(
 8006a1a:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	fb02 f303 	mul.w	r3, r2, r3
 8006a24:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a2c:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	da01      	bge.n	8006a38 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8006a34:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8006a38:	12db      	asrs	r3, r3, #11
 8006a3a:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	b21a      	sxth	r2, r3
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 8006a66:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	87da      	strh	r2, [r3, #62]	@ 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

		pdata++;
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	334c      	adds	r3, #76	@ 0x4c
 8006a9a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8006a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	f67f aefc 	bls.w	80068a8 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	f003 031f 	and.w	r3, r3, #31
 8006abe:	2b11      	cmp	r3, #17
 8006ac0:	bf8c      	ite	hi
 8006ac2:	2201      	movhi	r2, #1
 8006ac4:	2200      	movls	r2, #0
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	d117      	bne.n	8006afc <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 8006acc:	4a0e      	ldr	r2, [pc, #56]	@ (8006b08 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 8006ace:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bf14      	ite	ne
 8006ada:	2301      	movne	r3, #1
 8006adc:	2300      	moveq	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8006afa:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8006afc:	bf00      	nop
 8006afe:	372c      	adds	r7, #44	@ 0x2c
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	0002200e 	.word	0x0002200e

08006b0c <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3318      	adds	r3, #24
 8006b1e:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	332c      	adds	r3, #44	@ 0x2c
 8006b24:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	d109      	bne.n	8006b42 <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
 8006b40:	e003      	b.n	8006b4a <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8006b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3318      	adds	r3, #24
 8006b6e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8006b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3318      	adds	r3, #24
 8006b9c:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8006b9e:	7afb      	ldrb	r3, [r7, #11]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d009      	beq.n	8006bb8 <VL53LX_get_dmax_calibration_data+0x32>
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d10f      	bne.n	8006bc8 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	33ae      	adds	r3, #174	@ 0xae
		memcpy(
 8006bac:	220a      	movs	r2, #10
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f016 fa58 	bl	801d066 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8006bb6:	e00a      	b.n	8006bce <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	33a4      	adds	r3, #164	@ 0xa4
		memcpy(
 8006bbc:	220a      	movs	r2, #10
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f016 fa50 	bl	801d066 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8006bc6:	e002      	b.n	8006bce <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006bc8:	23fc      	movs	r3, #252	@ 0xfc
 8006bca:	75fb      	strb	r3, [r7, #23]
	break;
 8006bcc:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <VL53LX_set_offset_correction_mode>:


VL53LX_Error VL53LX_set_offset_correction_mode(
	VL53LX_DEV                     Dev,
	VL53LX_OffsetCorrectionMode    offset_cor_mode)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3318      	adds	r3, #24
 8006bee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->offset_correction_mode = offset_cor_mode;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	715a      	strb	r2, [r3, #5]

	LOG_FUNCTION_END(status);

	return status;
 8006bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b089      	sub	sp, #36	@ 0x24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	460b      	mov	r3, r1
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006c26:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8006c2e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8006c30:	897b      	ldrh	r3, [r7, #10]
 8006c32:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006c36:	2bb9      	cmp	r3, #185	@ 0xb9
 8006c38:	f200 86ca 	bhi.w	80079d0 <VL53LX_get_tuning_parm+0xdc8>
 8006c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <VL53LX_get_tuning_parm+0x3c>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006f2d 	.word	0x08006f2d
 8006c48:	08006f3d 	.word	0x08006f3d
 8006c4c:	08006f4d 	.word	0x08006f4d
 8006c50:	08006f5d 	.word	0x08006f5d
 8006c54:	08006f6b 	.word	0x08006f6b
 8006c58:	08006f79 	.word	0x08006f79
 8006c5c:	08006f87 	.word	0x08006f87
 8006c60:	08006f95 	.word	0x08006f95
 8006c64:	08006fa3 	.word	0x08006fa3
 8006c68:	08006fb1 	.word	0x08006fb1
 8006c6c:	08006fbf 	.word	0x08006fbf
 8006c70:	08006fcb 	.word	0x08006fcb
 8006c74:	08006fd9 	.word	0x08006fd9
 8006c78:	08006fe7 	.word	0x08006fe7
 8006c7c:	08006ff3 	.word	0x08006ff3
 8006c80:	08007001 	.word	0x08007001
 8006c84:	0800700f 	.word	0x0800700f
 8006c88:	0800701f 	.word	0x0800701f
 8006c8c:	0800702f 	.word	0x0800702f
 8006c90:	0800703d 	.word	0x0800703d
 8006c94:	0800704d 	.word	0x0800704d
 8006c98:	0800705b 	.word	0x0800705b
 8006c9c:	0800706b 	.word	0x0800706b
 8006ca0:	0800707b 	.word	0x0800707b
 8006ca4:	0800708b 	.word	0x0800708b
 8006ca8:	0800709b 	.word	0x0800709b
 8006cac:	080070ab 	.word	0x080070ab
 8006cb0:	080070bb 	.word	0x080070bb
 8006cb4:	080070cb 	.word	0x080070cb
 8006cb8:	080070db 	.word	0x080070db
 8006cbc:	080070eb 	.word	0x080070eb
 8006cc0:	080070f9 	.word	0x080070f9
 8006cc4:	08007109 	.word	0x08007109
 8006cc8:	08007119 	.word	0x08007119
 8006ccc:	08007129 	.word	0x08007129
 8006cd0:	08007139 	.word	0x08007139
 8006cd4:	08007149 	.word	0x08007149
 8006cd8:	08007159 	.word	0x08007159
 8006cdc:	08007169 	.word	0x08007169
 8006ce0:	08007179 	.word	0x08007179
 8006ce4:	08007189 	.word	0x08007189
 8006ce8:	08007199 	.word	0x08007199
 8006cec:	080071a9 	.word	0x080071a9
 8006cf0:	080071b9 	.word	0x080071b9
 8006cf4:	080071c9 	.word	0x080071c9
 8006cf8:	080071d9 	.word	0x080071d9
 8006cfc:	080071e7 	.word	0x080071e7
 8006d00:	080071f5 	.word	0x080071f5
 8006d04:	08007203 	.word	0x08007203
 8006d08:	08007211 	.word	0x08007211
 8006d0c:	0800721f 	.word	0x0800721f
 8006d10:	0800722d 	.word	0x0800722d
 8006d14:	0800723b 	.word	0x0800723b
 8006d18:	08007249 	.word	0x08007249
 8006d1c:	08007257 	.word	0x08007257
 8006d20:	08007265 	.word	0x08007265
 8006d24:	08007273 	.word	0x08007273
 8006d28:	08007281 	.word	0x08007281
 8006d2c:	0800728f 	.word	0x0800728f
 8006d30:	0800729d 	.word	0x0800729d
 8006d34:	080072ab 	.word	0x080072ab
 8006d38:	080072b9 	.word	0x080072b9
 8006d3c:	080072c7 	.word	0x080072c7
 8006d40:	080072d5 	.word	0x080072d5
 8006d44:	080072e3 	.word	0x080072e3
 8006d48:	080072f1 	.word	0x080072f1
 8006d4c:	080072ff 	.word	0x080072ff
 8006d50:	0800730d 	.word	0x0800730d
 8006d54:	0800731b 	.word	0x0800731b
 8006d58:	08007329 	.word	0x08007329
 8006d5c:	08007337 	.word	0x08007337
 8006d60:	08007345 	.word	0x08007345
 8006d64:	08007353 	.word	0x08007353
 8006d68:	08007361 	.word	0x08007361
 8006d6c:	0800736d 	.word	0x0800736d
 8006d70:	0800737b 	.word	0x0800737b
 8006d74:	08007389 	.word	0x08007389
 8006d78:	08007395 	.word	0x08007395
 8006d7c:	080073a1 	.word	0x080073a1
 8006d80:	080073ad 	.word	0x080073ad
 8006d84:	080073b9 	.word	0x080073b9
 8006d88:	080073c5 	.word	0x080073c5
 8006d8c:	080073d1 	.word	0x080073d1
 8006d90:	080073df 	.word	0x080073df
 8006d94:	080073ed 	.word	0x080073ed
 8006d98:	080073fb 	.word	0x080073fb
 8006d9c:	08007409 	.word	0x08007409
 8006da0:	08007417 	.word	0x08007417
 8006da4:	08007425 	.word	0x08007425
 8006da8:	08007433 	.word	0x08007433
 8006dac:	08007441 	.word	0x08007441
 8006db0:	0800744f 	.word	0x0800744f
 8006db4:	0800745d 	.word	0x0800745d
 8006db8:	0800746b 	.word	0x0800746b
 8006dbc:	08007479 	.word	0x08007479
 8006dc0:	08007487 	.word	0x08007487
 8006dc4:	08007495 	.word	0x08007495
 8006dc8:	080074a3 	.word	0x080074a3
 8006dcc:	080074b1 	.word	0x080074b1
 8006dd0:	080074bf 	.word	0x080074bf
 8006dd4:	080074cd 	.word	0x080074cd
 8006dd8:	080074db 	.word	0x080074db
 8006ddc:	080074e9 	.word	0x080074e9
 8006de0:	080074f7 	.word	0x080074f7
 8006de4:	08007505 	.word	0x08007505
 8006de8:	08007513 	.word	0x08007513
 8006dec:	08007521 	.word	0x08007521
 8006df0:	0800752f 	.word	0x0800752f
 8006df4:	0800753d 	.word	0x0800753d
 8006df8:	0800754b 	.word	0x0800754b
 8006dfc:	08007559 	.word	0x08007559
 8006e00:	08007567 	.word	0x08007567
 8006e04:	08007575 	.word	0x08007575
 8006e08:	08007583 	.word	0x08007583
 8006e0c:	08007591 	.word	0x08007591
 8006e10:	0800759f 	.word	0x0800759f
 8006e14:	080075ad 	.word	0x080075ad
 8006e18:	080075bb 	.word	0x080075bb
 8006e1c:	080075c9 	.word	0x080075c9
 8006e20:	080075db 	.word	0x080075db
 8006e24:	080075ed 	.word	0x080075ed
 8006e28:	080075ff 	.word	0x080075ff
 8006e2c:	08007611 	.word	0x08007611
 8006e30:	08007623 	.word	0x08007623
 8006e34:	08007635 	.word	0x08007635
 8006e38:	08007647 	.word	0x08007647
 8006e3c:	08007659 	.word	0x08007659
 8006e40:	0800766b 	.word	0x0800766b
 8006e44:	0800767d 	.word	0x0800767d
 8006e48:	0800768f 	.word	0x0800768f
 8006e4c:	080076a1 	.word	0x080076a1
 8006e50:	080076b3 	.word	0x080076b3
 8006e54:	080076c5 	.word	0x080076c5
 8006e58:	080076d7 	.word	0x080076d7
 8006e5c:	080076e9 	.word	0x080076e9
 8006e60:	080076fb 	.word	0x080076fb
 8006e64:	0800770d 	.word	0x0800770d
 8006e68:	0800771f 	.word	0x0800771f
 8006e6c:	0800772d 	.word	0x0800772d
 8006e70:	0800773b 	.word	0x0800773b
 8006e74:	08007749 	.word	0x08007749
 8006e78:	08007757 	.word	0x08007757
 8006e7c:	08007765 	.word	0x08007765
 8006e80:	08007773 	.word	0x08007773
 8006e84:	08007781 	.word	0x08007781
 8006e88:	08007793 	.word	0x08007793
 8006e8c:	080077a1 	.word	0x080077a1
 8006e90:	080077af 	.word	0x080077af
 8006e94:	080077bd 	.word	0x080077bd
 8006e98:	080077cb 	.word	0x080077cb
 8006e9c:	080077d9 	.word	0x080077d9
 8006ea0:	080077e7 	.word	0x080077e7
 8006ea4:	080077f5 	.word	0x080077f5
 8006ea8:	08007803 	.word	0x08007803
 8006eac:	08007811 	.word	0x08007811
 8006eb0:	0800781f 	.word	0x0800781f
 8006eb4:	0800782d 	.word	0x0800782d
 8006eb8:	0800783b 	.word	0x0800783b
 8006ebc:	08007849 	.word	0x08007849
 8006ec0:	08007857 	.word	0x08007857
 8006ec4:	08007865 	.word	0x08007865
 8006ec8:	08007873 	.word	0x08007873
 8006ecc:	08007881 	.word	0x08007881
 8006ed0:	0800788f 	.word	0x0800788f
 8006ed4:	0800789d 	.word	0x0800789d
 8006ed8:	080078ab 	.word	0x080078ab
 8006edc:	080078b9 	.word	0x080078b9
 8006ee0:	080078c7 	.word	0x080078c7
 8006ee4:	080078d5 	.word	0x080078d5
 8006ee8:	080078e3 	.word	0x080078e3
 8006eec:	080078f1 	.word	0x080078f1
 8006ef0:	080078ff 	.word	0x080078ff
 8006ef4:	0800790d 	.word	0x0800790d
 8006ef8:	0800791b 	.word	0x0800791b
 8006efc:	08007929 	.word	0x08007929
 8006f00:	08007937 	.word	0x08007937
 8006f04:	08007945 	.word	0x08007945
 8006f08:	08007953 	.word	0x08007953
 8006f0c:	08007961 	.word	0x08007961
 8006f10:	0800796f 	.word	0x0800796f
 8006f14:	0800797d 	.word	0x0800797d
 8006f18:	0800798b 	.word	0x0800798b
 8006f1c:	08007999 	.word	0x08007999
 8006f20:	080079a7 	.word	0x080079a7
 8006f24:	080079b5 	.word	0x080079b5
 8006f28:	080079c3 	.word	0x080079c3

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006f32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	601a      	str	r2, [r3, #0]
	break;
 8006f38:	f000 bd51 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8006f42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	601a      	str	r2, [r3, #0]
	break;
 8006f48:	f000 bd49 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8006f52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	601a      	str	r2, [r3, #0]
	break;
 8006f58:	f000 bd41 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
	break;
 8006f66:	f000 bd3a 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	601a      	str	r2, [r3, #0]
	break;
 8006f74:	f000 bd33 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	789b      	ldrb	r3, [r3, #2]
 8006f7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	601a      	str	r2, [r3, #0]
	break;
 8006f82:	f000 bd2c 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	78db      	ldrb	r3, [r3, #3]
 8006f8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	601a      	str	r2, [r3, #0]
	break;
 8006f90:	f000 bd25 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	791b      	ldrb	r3, [r3, #4]
 8006f98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]
	break;
 8006f9e:	f000 bd1e 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	795b      	ldrb	r3, [r3, #5]
 8006fa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	601a      	str	r2, [r3, #0]
	break;
 8006fac:	f000 bd17 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	799b      	ldrb	r3, [r3, #6]
 8006fb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	601a      	str	r2, [r3, #0]
	break;
 8006fba:	f000 bd10 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	601a      	str	r2, [r3, #0]
	break;
 8006fc6:	f000 bd0a 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	891b      	ldrh	r3, [r3, #8]
 8006fce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
	break;
 8006fd4:	f000 bd03 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	8a1b      	ldrh	r3, [r3, #16]
 8006fdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
	break;
 8006fe2:	f000 bcfc 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	601a      	str	r2, [r3, #0]
	break;
 8006fee:	f000 bcf6 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	7e1b      	ldrb	r3, [r3, #24]
 8006ff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	601a      	str	r2, [r3, #0]
	break;
 8006ffc:	f000 bcef 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	8b5b      	ldrh	r3, [r3, #26]
 8007004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	601a      	str	r2, [r3, #0]
	break;
 800700a:	f000 bce8 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8007014:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
	break;
 800701a:	f000 bce0 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007024:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	601a      	str	r2, [r3, #0]
	break;
 800702a:	f000 bcd8 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007032:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]
	break;
 8007038:	f000 bcd1 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007042:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]
	break;
 8007048:	f000 bcc9 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
	break;
 8007056:	f000 bcc2 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8007060:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
	break;
 8007066:	f000 bcba 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8007070:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	601a      	str	r2, [r3, #0]
	break;
 8007076:	f000 bcb2 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8007080:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	601a      	str	r2, [r3, #0]
	break;
 8007086:	f000 bcaa 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8007090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
	break;
 8007096:	f000 bca2 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80070a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	601a      	str	r2, [r3, #0]
	break;
 80070a6:	f000 bc9a 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 80070b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	601a      	str	r2, [r3, #0]
	break;
 80070b6:	f000 bc92 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	@ 0x2a6
		*ptuning_parm_value = (int32_t)(
 80070c0:	461a      	mov	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]
	break;
 80070c6:	f000 bc8a 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	@ 0x2a8
		*ptuning_parm_value = (int32_t)(
 80070d0:	461a      	mov	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
	break;
 80070d6:	f000 bc82 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
 80070e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	601a      	str	r2, [r3, #0]
	break;
 80070e6:	f000 bc7a 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	601a      	str	r2, [r3, #0]
	break;
 80070f4:	f000 bc73 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	@ 0x2aa
		*ptuning_parm_value = (int32_t)(
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]
	break;
 8007104:	f000 bc6b 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800710e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	601a      	str	r2, [r3, #0]
	break;
 8007114:	f000 bc63 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	@ 0x29e
 800711e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	601a      	str	r2, [r3, #0]
	break;
 8007124:	f000 bc5b 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 800712e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]
	break;
 8007134:	f000 bc53 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800713e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	601a      	str	r2, [r3, #0]
	break;
 8007144:	f000 bc4b 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800714e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]
	break;
 8007154:	f000 bc43 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 800715e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]
	break;
 8007164:	f000 bc3b 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800716e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]
	break;
 8007174:	f000 bc33 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 800717e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	601a      	str	r2, [r3, #0]
	break;
 8007184:	f000 bc2b 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 800718e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
	break;
 8007194:	f000 bc23 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 800719e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
	break;
 80071a4:	f000 bc1b 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
		*ptuning_parm_value = (int32_t)(
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
	break;
 80071b4:	f000 bc13 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 80071be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	601a      	str	r2, [r3, #0]
	break;
 80071c4:	f000 bc0b 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
		*ptuning_parm_value = (int32_t)(
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	601a      	str	r2, [r3, #0]
	break;
 80071d4:	f000 bc03 	b.w	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80071de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	601a      	str	r2, [r3, #0]
	break;
 80071e4:	e3fb      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 80071ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	601a      	str	r2, [r3, #0]
	break;
 80071f2:	e3f4      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 80071fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	601a      	str	r2, [r3, #0]
	break;
 8007200:	e3ed      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8007208:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
	break;
 800720e:	e3e6      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8007216:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
	break;
 800721c:	e3df      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8007224:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
	break;
 800722a:	e3d8      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8007232:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	601a      	str	r2, [r3, #0]
	break;
 8007238:	e3d1      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	@ 0x2a0
 8007240:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
	break;
 8007246:	e3ca      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 800724e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
	break;
 8007254:	e3c3      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 800725c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
	break;
 8007262:	e3bc      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 800726a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	601a      	str	r2, [r3, #0]
	break;
 8007270:	e3b5      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8007278:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	601a      	str	r2, [r3, #0]
	break;
 800727e:	e3ae      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8007286:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	601a      	str	r2, [r3, #0]
	break;
 800728c:	e3a7      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8007294:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	601a      	str	r2, [r3, #0]
	break;
 800729a:	e3a0      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80072a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]
	break;
 80072a8:	e399      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80072b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
	break;
 80072b6:	e392      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f8b3 3260 	ldrh.w	r3, [r3, #608]	@ 0x260
 80072be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	601a      	str	r2, [r3, #0]
	break;
 80072c4:	e38b      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f8b3 3262 	ldrh.w	r3, [r3, #610]	@ 0x262
 80072cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	601a      	str	r2, [r3, #0]
	break;
 80072d2:	e384      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80072da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]
	break;
 80072e0:	e37d      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	f8b3 3266 	ldrh.w	r3, [r3, #614]	@ 0x266
 80072e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
	break;
 80072ee:	e376      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f8b3 3268 	ldrh.w	r3, [r3, #616]	@ 0x268
 80072f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
	break;
 80072fc:	e36f      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8007304:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
	break;
 800730a:	e368      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8007312:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]
	break;
 8007318:	e361      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8007320:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
	break;
 8007326:	e35a      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 800732e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	601a      	str	r2, [r3, #0]
	break;
 8007334:	e353      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 800733c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	601a      	str	r2, [r3, #0]
	break;
 8007342:	e34c      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800734a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	601a      	str	r2, [r3, #0]
	break;
 8007350:	e345      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8007358:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	601a      	str	r2, [r3, #0]
	break;
 800735e:	e33e      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	7c1b      	ldrb	r3, [r3, #16]
 8007364:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
	break;
 800736a:	e338      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007372:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	601a      	str	r2, [r3, #0]
	break;
 8007378:	e331      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007380:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
	break;
 8007386:	e32a      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	601a      	str	r2, [r3, #0]
	break;
 8007392:	e324      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
	break;
 800739e:	e31e      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	8adb      	ldrh	r3, [r3, #22]
 80073a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
	break;
 80073aa:	e318      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	8b1b      	ldrh	r3, [r3, #24]
 80073b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
	break;
 80073b6:	e312      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
	break;
 80073c2:	e30c      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	601a      	str	r2, [r3, #0]
	break;
 80073ce:	e306      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80073d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	601a      	str	r2, [r3, #0]
	break;
 80073dc:	e2ff      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
	break;
 80073ea:	e2f8      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]
	break;
 80073f8:	e2f1      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007400:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
	break;
 8007406:	e2ea      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f893 32c0 	ldrb.w	r3, [r3, #704]	@ 0x2c0
 800740e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
	break;
 8007414:	e2e3      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 800741c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	601a      	str	r2, [r3, #0]
	break;
 8007422:	e2dc      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f893 32c2 	ldrb.w	r3, [r3, #706]	@ 0x2c2
 800742a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	601a      	str	r2, [r3, #0]
	break;
 8007430:	e2d5      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 8007438:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	601a      	str	r2, [r3, #0]
	break;
 800743e:	e2ce      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007446:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	601a      	str	r2, [r3, #0]
	break;
 800744c:	e2c7      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8007454:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
	break;
 800745a:	e2c0      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	@ 0x2d4
 8007462:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
	break;
 8007468:	e2b9      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007470:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
	break;
 8007476:	e2b2      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	@ 0x2d6
 800747e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
	break;
 8007484:	e2ab      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 800748c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
	break;
 8007492:	e2a4      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 800749a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]
	break;
 80074a0:	e29d      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80074a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
	break;
 80074ae:	e296      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 80074b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
	break;
 80074bc:	e28f      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f8b3 3126 	ldrh.w	r3, [r3, #294]	@ 0x126
 80074c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
	break;
 80074ca:	e288      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 80074d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
	break;
 80074d8:	e281      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	f8b3 312a 	ldrh.w	r3, [r3, #298]	@ 0x12a
 80074e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
	break;
 80074e6:	e27a      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80074ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
	break;
 80074f4:	e273      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80074fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
	break;
 8007502:	e26c      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800750a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
	break;
 8007510:	e265      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007518:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
	break;
 800751e:	e25e      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007526:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	601a      	str	r2, [r3, #0]
	break;
 800752c:	e257      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8007534:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	601a      	str	r2, [r3, #0]
	break;
 800753a:	e250      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007542:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
	break;
 8007548:	e249      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8007550:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
	break;
 8007556:	e242      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800755e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	601a      	str	r2, [r3, #0]
	break;
 8007564:	e23b      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800756c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
	break;
 8007572:	e234      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800757a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	601a      	str	r2, [r3, #0]
	break;
 8007580:	e22d      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8007588:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
	break;
 800758e:	e226      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007596:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
	break;
 800759c:	e21f      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80075a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	601a      	str	r2, [r3, #0]
	break;
 80075aa:	e218      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80075b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
	break;
 80075b8:	e211      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80075c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	601a      	str	r2, [r3, #0]
	break;
 80075c6:	e20a      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ce:	f8b3 3398 	ldrh.w	r3, [r3, #920]	@ 0x398
 80075d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	601a      	str	r2, [r3, #0]
	break;
 80075d8:	e201      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075e0:	f8d3 339c 	ldr.w	r3, [r3, #924]	@ 0x39c
 80075e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
	break;
 80075ea:	e1f8      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075f2:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80075f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	601a      	str	r2, [r3, #0]
	break;
 80075fc:	e1ef      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007604:	f893 33a4 	ldrb.w	r3, [r3, #932]	@ 0x3a4
 8007608:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
	break;
 800760e:	e1e6      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007616:	f8d3 33a8 	ldr.w	r3, [r3, #936]	@ 0x3a8
 800761a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	601a      	str	r2, [r3, #0]
	break;
 8007620:	e1dd      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007628:	f8d3 33ac 	ldr.w	r3, [r3, #940]	@ 0x3ac
 800762c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
	break;
 8007632:	e1d4      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800763a:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800763e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
	break;
 8007644:	e1cb      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800764c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8007650:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	601a      	str	r2, [r3, #0]
	break;
 8007656:	e1c2      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800765e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8007662:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	601a      	str	r2, [r3, #0]
	break;
 8007668:	e1b9      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007670:	f9b3 33be 	ldrsh.w	r3, [r3, #958]	@ 0x3be
 8007674:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	601a      	str	r2, [r3, #0]
	break;
 800767a:	e1b0      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007682:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 8007686:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]
	break;
 800768c:	e1a7      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007694:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8007698:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	601a      	str	r2, [r3, #0]
	break;
 800769e:	e19e      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076a6:	f893 3396 	ldrb.w	r3, [r3, #918]	@ 0x396
 80076aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]
	break;
 80076b0:	e195      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b8:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
		*ptuning_parm_value = (int32_t)(
 80076bc:	461a      	mov	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	601a      	str	r2, [r3, #0]
	break;
 80076c2:	e18c      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80076ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
	break;
 80076d4:	e183      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80076e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	601a      	str	r2, [r3, #0]
	break;
 80076e6:	e17a      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ee:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80076f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]
	break;
 80076f8:	e171      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007700:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	@ 0x3d0
 8007704:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
	break;
 800770a:	e168      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007712:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 8007716:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	601a      	str	r2, [r3, #0]
	break;
 800771c:	e15f      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8007724:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
	break;
 800772a:	e158      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8007732:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	601a      	str	r2, [r3, #0]
	break;
 8007738:	e151      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 8007740:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
	break;
 8007746:	e14a      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800774e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	601a      	str	r2, [r3, #0]
	break;
 8007754:	e143      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800775c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	601a      	str	r2, [r3, #0]
	break;
 8007762:	e13c      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800776a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	601a      	str	r2, [r3, #0]
	break;
 8007770:	e135      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8007778:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
	break;
 800777e:	e12e      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007786:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800778a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	601a      	str	r2, [r3, #0]
	break;
 8007790:	e125      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8007798:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
	break;
 800779e:	e11e      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	@ 0x186
 80077a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	601a      	str	r2, [r3, #0]
	break;
 80077ac:	e117      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	@ 0x188
 80077b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]
	break;
 80077ba:	e110      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	@ 0x18a
 80077c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]
	break;
 80077c8:	e109      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	@ 0x18c
 80077d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	601a      	str	r2, [r3, #0]
	break;
 80077d6:	e102      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	@ 0x18e
 80077de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	601a      	str	r2, [r3, #0]
	break;
 80077e4:	e0fb      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	@ 0x190
 80077ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	601a      	str	r2, [r3, #0]
	break;
 80077f2:	e0f4      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	@ 0x192
 80077fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
	break;
 8007800:	e0ed      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 8007808:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
	break;
 800780e:	e0e6      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	@ 0x196
 8007816:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	601a      	str	r2, [r3, #0]
	break;
 800781c:	e0df      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	@ 0x198
 8007824:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
	break;
 800782a:	e0d8      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	@ 0x19a
 8007832:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	601a      	str	r2, [r3, #0]
	break;
 8007838:	e0d1      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	@ 0x19c
 8007840:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
	break;
 8007846:	e0ca      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	@ 0x19e
 800784e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]
	break;
 8007854:	e0c3      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	@ 0x1a0
 800785c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
	break;
 8007862:	e0bc      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	@ 0x1a2
 800786a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	601a      	str	r2, [r3, #0]
	break;
 8007870:	e0b5      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	@ 0x1a4
 8007878:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
	break;
 800787e:	e0ae      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	@ 0x1a6
 8007886:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	601a      	str	r2, [r3, #0]
	break;
 800788c:	e0a7      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	@ 0x1a8
 8007894:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
	break;
 800789a:	e0a0      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	@ 0x1aa
 80078a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]
	break;
 80078a8:	e099      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	@ 0x1ac
 80078b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
	break;
 80078b6:	e092      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	@ 0x1ae
 80078be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	601a      	str	r2, [r3, #0]
	break;
 80078c4:	e08b      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	@ 0x1b0
 80078cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
	break;
 80078d2:	e084      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	@ 0x1b2
 80078da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	601a      	str	r2, [r3, #0]
	break;
 80078e0:	e07d      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	@ 0x1b4
 80078e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
	break;
 80078ee:	e076      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	@ 0x1b6
 80078f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	601a      	str	r2, [r3, #0]
	break;
 80078fc:	e06f      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	@ 0x1b8
 8007904:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	601a      	str	r2, [r3, #0]
	break;
 800790a:	e068      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	@ 0x1ba
 8007912:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	601a      	str	r2, [r3, #0]
	break;
 8007918:	e061      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	@ 0x1bc
 8007920:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	601a      	str	r2, [r3, #0]
	break;
 8007926:	e05a      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 800792e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
	break;
 8007934:	e053      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 800793c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
	break;
 8007942:	e04c      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	@ 0x1c2
 800794a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]
	break;
 8007950:	e045      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	@ 0x1c4
 8007958:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
	break;
 800795e:	e03e      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	@ 0x1c6
 8007966:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
	break;
 800796c:	e037      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	@ 0x1c8
 8007974:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
	break;
 800797a:	e030      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	@ 0x1ca
 8007982:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	601a      	str	r2, [r3, #0]
	break;
 8007988:	e029      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	@ 0x1cc
 8007990:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]
	break;
 8007996:	e022      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	@ 0x1ce
 800799e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
	break;
 80079a4:	e01b      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	@ 0x1d0
 80079ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
	break;
 80079b2:	e014      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	@ 0x1d2
 80079ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	601a      	str	r2, [r3, #0]
	break;
 80079c0:	e00d      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	@ 0x1d4
 80079c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	601a      	str	r2, [r3, #0]
	break;
 80079ce:	e006      	b.n	80079de <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80079d6:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80079d8:	23fc      	movs	r3, #252	@ 0xfc
 80079da:	77fb      	strb	r3, [r7, #31]
	break;
 80079dc:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80079de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3724      	adds	r7, #36	@ 0x24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop

080079f0 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3318      	adds	r3, #24
 8007a00:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 8007a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3318      	adds	r3, #24
 8007a2e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 8007a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3318      	adds	r3, #24
 8007a5c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 8007a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3318      	adds	r3, #24
 8007a8a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 8007a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3318      	adds	r3, #24
 8007ab8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 8007ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3318      	adds	r3, #24
 8007ae6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 8007af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2208      	movs	r2, #8
 8007b14:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	220b      	movs	r2, #11
 8007b1a:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007b22:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8007b2a:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8007b32:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007b3a:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2212      	movs	r2, #18
 8007b62:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	220f      	movs	r2, #15
 8007b68:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8007b76:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	220c      	movs	r2, #12
 8007b7c:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	895b      	ldrh	r3, [r3, #10]
 8007ba0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	895b      	ldrh	r3, [r3, #10]
 8007bbe:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2200      	movs	r2, #0
 8007be2:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2240      	movs	r2, #64	@ 0x40
 8007be8:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10d      	bne.n	8007c0e <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d108      	bne.n	8007c0e <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	741a      	strb	r2, [r3, #16]
 8007c0c:	e002      	b.n	8007c14 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2201      	movs	r2, #1
 8007c12:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8007c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d114      	bne.n	8007c46 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d110      	bne.n	8007c46 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	7d9b      	ldrb	r3, [r3, #22]
 8007c38:	f001 ff94 	bl	8009b64 <VL53LX_calc_range_ignore_threshold>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	831a      	strh	r2, [r3, #24]
 8007c44:	e002      	b.n	8007c4c <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 8007c52:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2232      	movs	r2, #50	@ 0x32
 8007c58:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007c60:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	228c      	movs	r2, #140	@ 0x8c
 8007c66:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007c86:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007c8e:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2207      	movs	r2, #7
 8007c94:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8007c9c:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ca4:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 8007cac:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2246      	movs	r2, #70	@ 0x46
 8007cb2:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8007cba:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	228c      	movs	r2, #140	@ 0x8c
 8007cc0:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8007cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8007ce4:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8007cec:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8007cf4:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8007cfc:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2208      	movs	r2, #8
 8007d02:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2228      	movs	r2, #40	@ 0x28
 8007d08:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2209      	movs	r2, #9
 8007d0e:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007d32:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8007d3a:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d42:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007d4a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2210      	movs	r2, #16
 8007d50:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2208      	movs	r2, #8
 8007d56:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	6039      	str	r1, [r7, #0]
 8007d72:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2201      	movs	r2, #1
 8007d82:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2201      	movs	r2, #1
 8007d88:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2201      	movs	r2, #1
 8007d94:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2250      	movs	r2, #80	@ 0x50
 8007d9a:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2264      	movs	r2, #100	@ 0x64
 8007da0:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	f241 023d 	movw	r2, #4157	@ 0x103d
 8007da8:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2210      	movs	r2, #16
 8007dae:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2232      	movs	r2, #50	@ 0x32
 8007db4:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2264      	movs	r2, #100	@ 0x64
 8007dba:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	22b4      	movs	r2, #180	@ 0xb4
 8007dc6:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8007dd4:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2208      	movs	r2, #8
 8007dda:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2288      	movs	r2, #136	@ 0x88
 8007de2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2208      	movs	r2, #8
 8007dea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dfc:	849a      	strh	r2, [r3, #36]	@ 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2200      	movs	r2, #0
 8007e02:	84da      	strh	r2, [r3, #38]	@ 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	79fa      	ldrb	r2, [r7, #7]
 8007e08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 8007e12:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2232      	movs	r2, #50	@ 0x32
 8007e18:	86da      	strh	r2, [r3, #54]	@ 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007e20:	871a      	strh	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	228c      	movs	r2, #140	@ 0x8c
 8007e26:	875a      	strh	r2, [r3, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2250      	movs	r2, #80	@ 0x50
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2232      	movs	r2, #50	@ 0x32
 8007e34:	87da      	strh	r2, [r3, #62]	@ 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8007e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	221e      	movs	r2, #30
 8007e56:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	220e      	movs	r2, #14
 8007e5c:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f642 7294 	movw	r2, #12180	@ 0x2f94
 8007e64:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	220e      	movs	r2, #14
 8007e6a:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	220a      	movs	r2, #10
 8007e70:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2206      	movs	r2, #6
 8007e76:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220e      	movs	r2, #14
 8007e7c:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	220a      	movs	r2, #10
 8007e82:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2206      	movs	r2, #6
 8007e88:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2209      	movs	r2, #9
 8007e8e:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2205      	movs	r2, #5
 8007e94:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2206      	movs	r2, #6
 8007ea6:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2206      	movs	r2, #6
 8007eac:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2221      	movs	r2, #33	@ 0x21
 8007eb8:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	223c      	movs	r2, #60	@ 0x3c
 8007eca:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	223c      	movs	r2, #60	@ 0x3c
 8007ed0:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	223c      	movs	r2, #60	@ 0x3c
 8007ed6:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2280      	movs	r2, #128	@ 0x80
 8007edc:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2280      	movs	r2, #128	@ 0x80
 8007ee2:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2280      	movs	r2, #128	@ 0x80
 8007ee8:	845a      	strh	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2208      	movs	r2, #8
 8007eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2210      	movs	r2, #16
 8007ef6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2202      	movs	r2, #2
 8007f16:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007f30:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f640 22be 	movw	r2, #2750	@ 0xabe
 8007f3a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	22fa      	movs	r2, #250	@ 0xfa
 8007f42:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f4c:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8007f56:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8007f60:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8007f6a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8007f74:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8007f7e:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	22c8      	movs	r2, #200	@ 0xc8
 8007f86:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f640 1238 	movw	r2, #2360	@ 0x938
 8007f90:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f640 1247 	movw	r2, #2375	@ 0x947
 8007fa2:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f640 4235 	movw	r2, #3125	@ 0xc35
 8007fac:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f241 2270 	movw	r2, #4720	@ 0x1270
 8007fb6:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f640 429e 	movw	r2, #3230	@ 0xc9e
 8007fc0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f241 228e 	movw	r2, #4750	@ 0x128e
 8007fca:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f641 02ce 	movw	r2, #6350	@ 0x18ce
 8007fd4:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	22fa      	movs	r2, #250	@ 0xfa
 8007fec:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8007ff6:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 8008000:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f241 1294 	movw	r2, #4500	@ 0x1194
 800800a:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8008014:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	22c8      	movs	r2, #200	@ 0xc8
 800801c:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8008046:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8008050:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f640 720a 	movw	r2, #3850	@ 0xf0a
 800805a:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800809c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80080a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80080ac:	861a      	strh	r2, [r3, #48]	@ 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80080b4:	865a      	strh	r2, [r3, #50]	@ 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080bc:	639a      	str	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80080c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80080cc:	641a      	str	r2, [r3, #64]	@ 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80080d4:	645a      	str	r2, [r3, #68]	@ 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80080dc:	649a      	str	r2, [r3, #72]	@ 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f242 3228 	movw	r2, #9000	@ 0x2328
 80080e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f241 7270 	movw	r2, #6000	@ 0x1770
 80080ec:	651a      	str	r2, [r3, #80]	@ 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080f4:	655a      	str	r2, [r3, #84]	@ 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80080fc:	659a      	str	r2, [r3, #88]	@ 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008104:	65da      	str	r2, [r3, #92]	@ 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800810c:	661a      	str	r2, [r3, #96]	@ 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008114:	665a      	str	r2, [r3, #100]	@ 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f24f 6218 	movw	r2, #63000	@ 0xf618
 800811c:	66da      	str	r2, [r3, #108]	@ 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8008124:	671a      	str	r2, [r3, #112]	@ 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800812c:	675a      	str	r2, [r3, #116]	@ 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8008134:	679a      	str	r2, [r3, #120]	@ 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	669a      	str	r2, [r3, #104]	@ 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008142:	67da      	str	r2, [r3, #124]	@ 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800814a:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8008162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2206      	movs	r2, #6
 800816a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 800817e:	b480      	push	{r7}
 8008180:	b085      	sub	sp, #20
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008190:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2238      	movs	r2, #56	@ 0x38
 8008196:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2270      	movs	r2, #112	@ 0x70
 80081a2:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2210      	movs	r2, #16
 80081a8:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2264      	movs	r2, #100	@ 0x64
 80081ae:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081b6:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	220f      	movs	r2, #15
 80081bc:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2234      	movs	r2, #52	@ 0x34
 80081c2:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	22c8      	movs	r2, #200	@ 0xc8
 80081c8:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80081d0:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80081d8:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80081da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b087      	sub	sp, #28
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
 80081f6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8008202:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2211      	movs	r2, #17
 8008244:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2202      	movs	r2, #2
 800824a:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2202      	movs	r2, #2
 8008256:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2208      	movs	r2, #8
 800825c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008266:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	22ff      	movs	r2, #255	@ 0xff
 800829e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80082a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a2:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2220      	movs	r2, #32
 80082d2:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	220b      	movs	r2, #11
 80082d8:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2202      	movs	r2, #2
 80082e6:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	220d      	movs	r2, #13
 80082ec:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 80082ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f0:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8008314:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2238      	movs	r2, #56	@ 0x38
 8008320:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	22ff      	movs	r2, #255	@ 0xff
 8008326:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	221a      	movs	r2, #26
 8008338:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2200      	movs	r2, #0
 800833e:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2220      	movs	r2, #32
 8008344:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2201      	movs	r2, #1
 800834a:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	22cc      	movs	r2, #204	@ 0xcc
 8008350:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	220b      	movs	r2, #11
 8008356:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2201      	movs	r2, #1
 800835c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	22f5      	movs	r2, #245	@ 0xf5
 8008362:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2209      	movs	r2, #9
 8008368:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2208      	movs	r2, #8
 800837e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2278      	movs	r2, #120	@ 0x78
 8008384:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2200      	movs	r2, #0
 800838a:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2207      	movs	r2, #7
 8008396:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2221      	movs	r2, #33	@ 0x21
 800839c:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2243      	movs	r2, #67	@ 0x43
 80083a2:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2210      	movs	r2, #16
 80083a8:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2232      	movs	r2, #50	@ 0x32
 80083ae:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2254      	movs	r2, #84	@ 0x54
 80083b4:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2207      	movs	r2, #7
 80083ba:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2221      	movs	r2, #33	@ 0x21
 80083c0:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2243      	movs	r2, #67	@ 0x43
 80083c6:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2210      	movs	r2, #16
 80083cc:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2202      	movs	r2, #2
 80083d2:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2243      	movs	r2, #67	@ 0x43
 80083d8:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2205      	movs	r2, #5
 80083de:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2207      	movs	r2, #7
 80083ea:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2221      	movs	r2, #33	@ 0x21
 80083f0:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2243      	movs	r2, #67	@ 0x43
 80083f6:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2210      	movs	r2, #16
 80083fc:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2232      	movs	r2, #50	@ 0x32
 8008402:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2254      	movs	r2, #84	@ 0x54
 8008408:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008410:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008418:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8008420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008422:	2205      	movs	r2, #5
 8008424:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008428:	2200      	movs	r2, #0
 800842a:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 800842c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842e:	220f      	movs	r2, #15
 8008430:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	220f      	movs	r2, #15
 8008436:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843a:	2208      	movs	r2, #8
 800843c:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800843e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008440:	2208      	movs	r2, #8
 8008442:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	2201      	movs	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	2200      	movs	r2, #0
 800844e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	2200      	movs	r2, #0
 8008454:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	2200      	movs	r2, #0
 800845a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
	pdynamic->system__seed_config =
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	220b      	movs	r2, #11
 800846a:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	2209      	movs	r2, #9
 8008470:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800847a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	2201      	movs	r2, #1
 8008486:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008494:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	22c7      	movs	r2, #199	@ 0xc7
 80084a0:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	22ff      	movs	r2, #255	@ 0xff
 80084a6:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	22db      	movs	r2, #219	@ 0xdb
 80084ac:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	2202      	movs	r2, #2
 80084b2:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	2200      	movs	r2, #0
 80084b8:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	2201      	movs	r2, #1
 80084be:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	2201      	movs	r2, #1
 80084c4:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	2221      	movs	r2, #33	@ 0x21
 80084ca:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80084cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	371c      	adds	r7, #28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b090      	sub	sp, #64	@ 0x40
 80084e0:	af0a      	add	r7, sp, #40	@ 0x28
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	68b8      	ldr	r0, [r7, #8]
 8008506:	f7ff fe70 	bl	80081ea <VL53LX_preset_mode_standard_ranging>
 800850a:	4603      	mov	r3, r0
 800850c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800850e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d171      	bne.n	80085fa <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800851c:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	9308      	str	r3, [sp, #32]
 8008522:	2305      	movs	r3, #5
 8008524:	9307      	str	r3, [sp, #28]
 8008526:	2304      	movs	r3, #4
 8008528:	9306      	str	r3, [sp, #24]
 800852a:	2303      	movs	r3, #3
 800852c:	9305      	str	r3, [sp, #20]
 800852e:	2302      	movs	r3, #2
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	2301      	movs	r3, #1
 8008534:	9303      	str	r3, [sp, #12]
 8008536:	2300      	movs	r3, #0
 8008538:	9302      	str	r3, [sp, #8]
 800853a:	2304      	movs	r3, #4
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	2303      	movs	r3, #3
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	2302      	movs	r3, #2
 8008544:	2201      	movs	r2, #1
 8008546:	2100      	movs	r1, #0
 8008548:	2007      	movs	r0, #7
 800854a:	f000 ff9f 	bl	800948c <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	3302      	adds	r3, #2
 8008552:	9308      	str	r3, [sp, #32]
 8008554:	2305      	movs	r3, #5
 8008556:	9307      	str	r3, [sp, #28]
 8008558:	2304      	movs	r3, #4
 800855a:	9306      	str	r3, [sp, #24]
 800855c:	2303      	movs	r3, #3
 800855e:	9305      	str	r3, [sp, #20]
 8008560:	2302      	movs	r3, #2
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	2301      	movs	r3, #1
 8008566:	9303      	str	r3, [sp, #12]
 8008568:	2300      	movs	r3, #0
 800856a:	9302      	str	r3, [sp, #8]
 800856c:	2304      	movs	r3, #4
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	2303      	movs	r3, #3
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	2302      	movs	r3, #2
 8008576:	2201      	movs	r2, #1
 8008578:	2100      	movs	r1, #0
 800857a:	2007      	movs	r0, #7
 800857c:	f001 f816 	bl	80095ac <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	2209      	movs	r2, #9
 8008584:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	220b      	movs	r2, #11
 800858a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800858c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858e:	2209      	movs	r2, #9
 8008590:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	220b      	movs	r2, #11
 8008596:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	2220      	movs	r2, #32
 80085a2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	2200      	movs	r2, #0
 80085a8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	221a      	movs	r2, #26
 80085ae:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	2200      	movs	r2, #0
 80085b4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	2228      	movs	r2, #40	@ 0x28
 80085ba:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	2200      	movs	r2, #0
 80085c0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	2221      	movs	r2, #33	@ 0x21
 80085c6:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	22f5      	movs	r2, #245	@ 0xf5
 80085cc:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2208      	movs	r2, #8
 80085d2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2288      	movs	r2, #136	@ 0x88
 80085da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f9e6 	bl	80089ba <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	229b      	movs	r2, #155	@ 0x9b
 80085f2:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80085f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f6:	2226      	movs	r2, #38	@ 0x26
 80085f8:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80085fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b090      	sub	sp, #64	@ 0x40
 800860a:	af0a      	add	r7, sp, #40	@ 0x28
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008614:	2300      	movs	r3, #0
 8008616:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	9303      	str	r3, [sp, #12]
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff ff52 	bl	80084dc <VL53LX_preset_mode_histogram_ranging>
 8008638:	4603      	mov	r3, r0
 800863a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800863c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d178      	bne.n	8008736 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	9308      	str	r3, [sp, #32]
 8008648:	2305      	movs	r3, #5
 800864a:	9307      	str	r3, [sp, #28]
 800864c:	2304      	movs	r3, #4
 800864e:	9306      	str	r3, [sp, #24]
 8008650:	2303      	movs	r3, #3
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	2302      	movs	r3, #2
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	2301      	movs	r3, #1
 800865a:	9303      	str	r3, [sp, #12]
 800865c:	2300      	movs	r3, #0
 800865e:	9302      	str	r3, [sp, #8]
 8008660:	2304      	movs	r3, #4
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	2303      	movs	r3, #3
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	2302      	movs	r3, #2
 800866a:	2201      	movs	r2, #1
 800866c:	2100      	movs	r1, #0
 800866e:	2007      	movs	r0, #7
 8008670:	f000 ff0c 	bl	800948c <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	3302      	adds	r3, #2
 8008678:	9308      	str	r3, [sp, #32]
 800867a:	2305      	movs	r3, #5
 800867c:	9307      	str	r3, [sp, #28]
 800867e:	2304      	movs	r3, #4
 8008680:	9306      	str	r3, [sp, #24]
 8008682:	2303      	movs	r3, #3
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	2302      	movs	r3, #2
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	2301      	movs	r3, #1
 800868c:	9303      	str	r3, [sp, #12]
 800868e:	2300      	movs	r3, #0
 8008690:	9302      	str	r3, [sp, #8]
 8008692:	2304      	movs	r3, #4
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	2303      	movs	r3, #3
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2302      	movs	r3, #2
 800869c:	2201      	movs	r2, #1
 800869e:	2100      	movs	r1, #0
 80086a0:	2007      	movs	r0, #7
 80086a2:	f000 ff83 	bl	80095ac <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f982 	bl	80089ba <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	2209      	movs	r2, #9
 80086ba:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	220b      	movs	r2, #11
 80086c0:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	2221      	movs	r2, #33	@ 0x21
 80086cc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	2200      	movs	r2, #0
 80086d2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	221b      	movs	r2, #27
 80086d8:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	2200      	movs	r2, #0
 80086de:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	2229      	movs	r2, #41	@ 0x29
 80086e4:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	2200      	movs	r2, #0
 80086ea:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	2222      	movs	r2, #34	@ 0x22
 80086f0:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2209      	movs	r2, #9
 80086f6:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	22f5      	movs	r2, #245	@ 0xf5
 80086fc:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008700:	2209      	movs	r2, #9
 8008702:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8008704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008706:	220b      	movs	r2, #11
 8008708:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800870a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870c:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800870e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008710:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8008712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008714:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2208      	movs	r2, #8
 800871e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2288      	movs	r2, #136	@ 0x88
 8008726:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	229b      	movs	r2, #155	@ 0x9b
 800872e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	2226      	movs	r2, #38	@ 0x26
 8008734:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b090      	sub	sp, #64	@ 0x40
 8008746:	af0a      	add	r7, sp, #40	@ 0x28
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	607a      	str	r2, [r7, #4]
 800874e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008750:	2300      	movs	r3, #0
 8008752:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875a:	9303      	str	r3, [sp, #12]
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	9302      	str	r3, [sp, #8]
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff feb4 	bl	80084dc <VL53LX_preset_mode_histogram_ranging>
 8008774:	4603      	mov	r3, r0
 8008776:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d178      	bne.n	8008872 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	9308      	str	r3, [sp, #32]
 8008784:	2303      	movs	r3, #3
 8008786:	9307      	str	r3, [sp, #28]
 8008788:	2302      	movs	r3, #2
 800878a:	9306      	str	r3, [sp, #24]
 800878c:	2301      	movs	r3, #1
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	2302      	movs	r3, #2
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	2301      	movs	r3, #1
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	2300      	movs	r3, #0
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	2302      	movs	r3, #2
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	2302      	movs	r3, #2
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	2301      	movs	r3, #1
 80087a6:	2201      	movs	r2, #1
 80087a8:	2100      	movs	r1, #0
 80087aa:	2007      	movs	r0, #7
 80087ac:	f000 fe6e 	bl	800948c <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80087b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b2:	3302      	adds	r3, #2
 80087b4:	9308      	str	r3, [sp, #32]
 80087b6:	2303      	movs	r3, #3
 80087b8:	9307      	str	r3, [sp, #28]
 80087ba:	2302      	movs	r3, #2
 80087bc:	9306      	str	r3, [sp, #24]
 80087be:	2301      	movs	r3, #1
 80087c0:	9305      	str	r3, [sp, #20]
 80087c2:	2302      	movs	r3, #2
 80087c4:	9304      	str	r3, [sp, #16]
 80087c6:	2301      	movs	r3, #1
 80087c8:	9303      	str	r3, [sp, #12]
 80087ca:	2300      	movs	r3, #0
 80087cc:	9302      	str	r3, [sp, #8]
 80087ce:	2302      	movs	r3, #2
 80087d0:	9301      	str	r3, [sp, #4]
 80087d2:	2302      	movs	r3, #2
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	2301      	movs	r3, #1
 80087d8:	2201      	movs	r2, #1
 80087da:	2100      	movs	r1, #0
 80087dc:	2007      	movs	r0, #7
 80087de:	f000 fee5 	bl	80095ac <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f8e4 	bl	80089ba <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	2205      	movs	r2, #5
 80087f6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2207      	movs	r2, #7
 80087fc:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	2200      	movs	r2, #0
 8008802:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	2236      	movs	r2, #54	@ 0x36
 8008808:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	2200      	movs	r2, #0
 800880e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	2228      	movs	r2, #40	@ 0x28
 8008814:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	2200      	movs	r2, #0
 800881a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	2244      	movs	r2, #68	@ 0x44
 8008820:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	2200      	movs	r2, #0
 8008826:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	2233      	movs	r2, #51	@ 0x33
 800882c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2205      	movs	r2, #5
 8008832:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	22f5      	movs	r2, #245	@ 0xf5
 8008838:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	2205      	movs	r2, #5
 800883e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8008840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008842:	2207      	movs	r2, #7
 8008844:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8008846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008848:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800884a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800884e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008850:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8008852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008854:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2208      	movs	r2, #8
 800885a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2248      	movs	r2, #72	@ 0x48
 8008862:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	229b      	movs	r2, #155	@ 0x9b
 800886a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886e:	2226      	movs	r2, #38	@ 0x26
 8008870:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b090      	sub	sp, #64	@ 0x40
 8008882:	af0a      	add	r7, sp, #40	@ 0x28
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
 800888a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800888c:	2300      	movs	r3, #0
 800888e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008896:	9303      	str	r3, [sp, #12]
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	9302      	str	r3, [sp, #8]
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889e:	9301      	str	r3, [sp, #4]
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f7ff fe16 	bl	80084dc <VL53LX_preset_mode_histogram_ranging>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80088b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d178      	bne.n	80089ae <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	9308      	str	r3, [sp, #32]
 80088c0:	2302      	movs	r3, #2
 80088c2:	9307      	str	r3, [sp, #28]
 80088c4:	2302      	movs	r3, #2
 80088c6:	9306      	str	r3, [sp, #24]
 80088c8:	2301      	movs	r3, #1
 80088ca:	9305      	str	r3, [sp, #20]
 80088cc:	2301      	movs	r3, #1
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	2301      	movs	r3, #1
 80088d2:	9303      	str	r3, [sp, #12]
 80088d4:	2300      	movs	r3, #0
 80088d6:	9302      	str	r3, [sp, #8]
 80088d8:	2301      	movs	r3, #1
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	2301      	movs	r3, #1
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	2301      	movs	r3, #1
 80088e2:	2200      	movs	r2, #0
 80088e4:	2107      	movs	r1, #7
 80088e6:	2007      	movs	r0, #7
 80088e8:	f000 fdd0 	bl	800948c <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	3302      	adds	r3, #2
 80088f0:	9308      	str	r3, [sp, #32]
 80088f2:	2302      	movs	r3, #2
 80088f4:	9307      	str	r3, [sp, #28]
 80088f6:	2302      	movs	r3, #2
 80088f8:	9306      	str	r3, [sp, #24]
 80088fa:	2301      	movs	r3, #1
 80088fc:	9305      	str	r3, [sp, #20]
 80088fe:	2301      	movs	r3, #1
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	2301      	movs	r3, #1
 8008904:	9303      	str	r3, [sp, #12]
 8008906:	2300      	movs	r3, #0
 8008908:	9302      	str	r3, [sp, #8]
 800890a:	2301      	movs	r3, #1
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	2301      	movs	r3, #1
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	2301      	movs	r3, #1
 8008914:	2200      	movs	r2, #0
 8008916:	2107      	movs	r1, #7
 8008918:	2007      	movs	r0, #7
 800891a:	f000 fe47 	bl	80095ac <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	68b9      	ldr	r1, [r7, #8]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f846 	bl	80089ba <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	2203      	movs	r2, #3
 8008932:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	2205      	movs	r2, #5
 8008938:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	2200      	movs	r2, #0
 800893e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	2252      	movs	r2, #82	@ 0x52
 8008944:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	2200      	movs	r2, #0
 800894a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	2237      	movs	r2, #55	@ 0x37
 8008950:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	2200      	movs	r2, #0
 8008956:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	2266      	movs	r2, #102	@ 0x66
 800895c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	2200      	movs	r2, #0
 8008962:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	2244      	movs	r2, #68	@ 0x44
 8008968:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2203      	movs	r2, #3
 800896e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	22f5      	movs	r2, #245	@ 0xf5
 8008974:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8008976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008978:	2203      	movs	r2, #3
 800897a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	2205      	movs	r2, #5
 8008980:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800898a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898c:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2208      	movs	r2, #8
 8008996:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2228      	movs	r2, #40	@ 0x28
 800899e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	22bb      	movs	r2, #187	@ 0xbb
 80089a6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80089a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089aa:	2226      	movs	r2, #38	@ 0x26
 80089ac:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80089ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 80089fc:	021b      	lsls	r3, r3, #8
 80089fe:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	7a12      	ldrb	r2, [r2, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	7892      	ldrb	r2, [r2, #2]
 8008a48:	4413      	add	r3, r2
 8008a4a:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	7912      	ldrb	r2, [r2, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8008a8c:	bf00      	nop
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	7a12      	ldrb	r2, [r2, #8]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	7892      	ldrb	r2, [r2, #2]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	7912      	ldrb	r2, [r2, #4]
 8008b30:	4413      	add	r3, r2
 8008b32:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3318      	adds	r3, #24
 8008b60:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008b80:	bf00      	nop
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3318      	adds	r3, #24
 8008b9c:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	332c      	adds	r3, #44	@ 0x2c
 8008ba2:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2200      	movs	r2, #0
 8008bae:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	78fa      	ldrb	r2, [r7, #3]
 8008bc6:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	735a      	strb	r2, [r3, #13]

}
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3318      	adds	r3, #24
 8008bfc:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	332c      	adds	r3, #44	@ 0x2c
 8008c02:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8008c0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d115      	bne.n	8008c3e <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2203      	movs	r2, #3
 8008c16:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	735a      	strb	r2, [r3, #13]
 8008c3c:	e0be      	b.n	8008dbc <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	7a1b      	ldrb	r3, [r3, #8]
 8008c42:	2bff      	cmp	r3, #255	@ 0xff
 8008c44:	d103      	bne.n	8008c4e <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2280      	movs	r2, #128	@ 0x80
 8008c4a:	721a      	strb	r2, [r3, #8]
 8008c4c:	e005      	b.n	8008c5a <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	7a1b      	ldrb	r3, [r3, #8]
 8008c52:	3301      	adds	r3, #1
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	7a19      	ldrb	r1, [r3, #8]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f103 0209 	add.w	r2, r3, #9
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	330a      	adds	r3, #10
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f002 fdba 	bl	800b7e2 <VL53LX_update_internal_stream_counters>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	7adb      	ldrb	r3, [r3, #11]
 8008c76:	f083 0302 	eor.w	r3, r3, #2
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	79db      	ldrb	r3, [r3, #7]
 8008c84:	3b03      	subs	r3, #3
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	f200 8082 	bhi.w	8008d90 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8008c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c94 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008cad 	.word	0x08008cad
 8008c98:	08008d91 	.word	0x08008d91
 8008c9c:	08008d91 	.word	0x08008d91
 8008ca0:	08008cff 	.word	0x08008cff
 8008ca4:	08008d35 	.word	0x08008d35
 8008ca8:	08008d5f 	.word	0x08008d5f

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f893 335e 	ldrb.w	r3, [r3, #862]	@ 0x35e
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dd03      	ble.n	8008cc2 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2206      	movs	r2, #6
 8008cbe:	71da      	strb	r2, [r3, #7]
 8008cc0:	e00d      	b.n	8008cde <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
				if (pstate->rd_zone_id >=
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d303      	bcc.n	8008cd8 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	71da      	strb	r2, [r3, #7]
 8008cd6:	e002      	b.n	8008cde <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2207      	movs	r2, #7
 8008cdc:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	735a      	strb	r2, [r3, #13]

			break;
 8008cfc:	e05e      	b.n	8008dbc <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d303      	bcc.n	8008d2c <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2208      	movs	r2, #8
 8008d28:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8008d2a:	e047      	b.n	8008dbc <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2207      	movs	r2, #7
 8008d30:	71da      	strb	r2, [r3, #7]
			break;
 8008d32:	e043      	b.n	8008dbc <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	7b5b      	ldrb	r3, [r3, #13]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d303      	bcc.n	8008d56 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2208      	movs	r2, #8
 8008d52:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8008d54:	e032      	b.n	8008dbc <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2207      	movs	r2, #7
 8008d5a:	71da      	strb	r2, [r3, #7]
			break;
 8008d5c:	e02e      	b.n	8008dbc <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	7b1b      	ldrb	r3, [r3, #12]
 8008d68:	f083 0301 	eor.w	r3, r3, #1
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d303      	bcc.n	8008d88 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2208      	movs	r2, #8
 8008d84:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8008d86:	e019      	b.n	8008dbc <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2207      	movs	r2, #7
 8008d8c:	71da      	strb	r2, [r3, #7]
			break;
 8008d8e:	e015      	b.n	8008dbc <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2203      	movs	r2, #3
 8008d94:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2202      	movs	r2, #2
 8008dac:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	735a      	strb	r2, [r3, #13]
			break;
 8008dba:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8008dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b08d      	sub	sp, #52	@ 0x34
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3318      	adds	r3, #24
 8008dda:	62bb      	str	r3, [r7, #40]	@ 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8008de2:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8008de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de6:	332c      	adds	r3, #44	@ 0x2c
 8008de8:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dec:	f203 3366 	addw	r3, r3, #870	@ 0x366
 8008df0:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8008df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8008df8:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008e00:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t   histogram_mode        = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	78db      	ldrb	r3, [r3, #3]
 8008e2a:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8008e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2e:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8008e32:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bf14      	ite	ne
 8008e3a:	2301      	movne	r3, #1
 8008e3c:	2300      	moveq	r3, #0
 8008e3e:	b2db      	uxtb	r3, r3
	histogram_mode =
 8008e40:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8008e46:	111b      	asrs	r3, r3, #4
 8008e48:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (histogram_mode)
 8008e52:	7c7b      	ldrb	r3, [r7, #17]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d008      	beq.n	8008e6a <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8008e5e:	111b      	asrs	r3, r3, #4
 8008e60:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8008e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6c:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d04e      	beq.n	8008f16 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	79db      	ldrb	r3, [r3, #7]
 8008e7c:	2b06      	cmp	r3, #6
 8008e7e:	d109      	bne.n	8008e94 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8008e80:	7c7b      	ldrb	r3, [r7, #17]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d14a      	bne.n	8008f1c <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8008e86:	7cfb      	ldrb	r3, [r7, #19]
 8008e88:	2b12      	cmp	r3, #18
 8008e8a:	d047      	beq.n	8008f1c <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8008e8c:	23ef      	movs	r3, #239	@ 0xef
 8008e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008e92:	e043      	b.n	8008f1c <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	7a1b      	ldrb	r3, [r3, #8]
 8008e98:	7cba      	ldrb	r2, [r7, #18]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d002      	beq.n	8008ea4 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8008e9e:	23ee      	movs	r3, #238	@ 0xee
 8008ea0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	7adb      	ldrb	r3, [r3, #11]
 8008ea8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d002      	beq.n	8008eb6 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8008eb0:	23ed      	movs	r3, #237	@ 0xed
 8008eb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	7b5b      	ldrb	r3, [r3, #13]
 8008eba:	4619      	mov	r1, r3
		expected_stream_count =
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3302      	adds	r3, #2
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	7b5b      	ldrb	r3, [r3, #13]
 8008ed2:	4619      	mov	r1, r3
		expected_gph_id =
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	3303      	adds	r3, #3
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8008ee6:	7c3a      	ldrb	r2, [r7, #16]
 8008ee8:	7cbb      	ldrb	r3, [r7, #18]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d00a      	beq.n	8008f04 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8008eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef0:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <VL53LX_check_ll_driver_rd_state+0x136>
 8008ef8:	7cbb      	ldrb	r3, [r7, #18]
 8008efa:	2bff      	cmp	r3, #255	@ 0xff
 8008efc:	d002      	beq.n	8008f04 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8008efe:	23ec      	movs	r3, #236	@ 0xec
 8008f00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8008f04:	7bfa      	ldrb	r2, [r7, #15]
 8008f06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d005      	beq.n	8008f1a <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8008f0e:	23eb      	movs	r3, #235	@ 0xeb
 8008f10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008f14:	e002      	b.n	8008f1c <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8008f1a:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8008f1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3734      	adds	r7, #52	@ 0x34
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3318      	adds	r3, #24
 8008f3c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8008f44:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	332c      	adds	r3, #44	@ 0x2c
 8008f4a:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008f52:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8008f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d11b      	bne.n	8008f9a <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2203      	movs	r2, #3
 8008f66:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2200      	movs	r2, #0
 8008f72:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2200      	movs	r2, #0
 8008f78:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2200      	movs	r2, #0
 8008f84:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	773b      	strb	r3, [r7, #28]
 8008f98:	e0b1      	b.n	80090fe <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	791b      	ldrb	r3, [r3, #4]
 8008f9e:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	799b      	ldrb	r3, [r3, #6]
 8008fa4:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	785b      	ldrb	r3, [r3, #1]
 8008faa:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	785b      	ldrb	r3, [r3, #1]
 8008fb0:	2bff      	cmp	r3, #255	@ 0xff
 8008fb2:	d103      	bne.n	8008fbc <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	2280      	movs	r2, #128	@ 0x80
 8008fb8:	705a      	strb	r2, [r3, #1]
 8008fba:	e005      	b.n	8008fc8 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	7859      	ldrb	r1, [r3, #1]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	1c9a      	adds	r2, r3, #2
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	3303      	adds	r3, #3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f002 fc04 	bl	800b7e2 <VL53LX_update_internal_stream_counters>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	791b      	ldrb	r3, [r3, #4]
 8008fe2:	f083 0302 	eor.w	r3, r3, #2
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	2b05      	cmp	r3, #5
 8008ff2:	d053      	beq.n	800909c <VL53LX_update_ll_driver_cfg_state+0x170>
 8008ff4:	2b05      	cmp	r3, #5
 8008ff6:	dc69      	bgt.n	80090cc <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d002      	beq.n	8009002 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d02d      	beq.n	800905c <VL53LX_update_ll_driver_cfg_state+0x130>
 8009000:	e064      	b.n	80090cc <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2201      	movs	r2, #1
 8009006:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8009012:	429a      	cmp	r2, r3
 8009014:	d909      	bls.n	800902a <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2200      	movs	r2, #0
 800901a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	795b      	ldrb	r3, [r3, #5]
 8009020:	f083 0301 	eor.w	r3, r3, #1
 8009024:	b2da      	uxtb	r2, r3
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2201      	movs	r2, #1
 800902e:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009036:	2b00      	cmp	r3, #0
 8009038:	d106      	bne.n	8009048 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2201      	movs	r2, #1
 800903e:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2200      	movs	r2, #0
 8009044:	70da      	strb	r2, [r3, #3]
 8009046:	e005      	b.n	8009054 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2200      	movs	r2, #0
 800904c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2201      	movs	r2, #1
 8009052:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2204      	movs	r2, #4
 8009058:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800905a:	e050      	b.n	80090fe <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	799b      	ldrb	r3, [r3, #6]
 8009060:	3301      	adds	r3, #1
 8009062:	b2da      	uxtb	r2, r3
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8009072:	429a      	cmp	r2, r3
 8009074:	d940      	bls.n	80090f8 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	2200      	movs	r2, #0
 800907a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	795b      	ldrb	r3, [r3, #5]
 8009080:	f083 0301 	eor.w	r3, r3, #1
 8009084:	b2da      	uxtb	r2, r3
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d031      	beq.n	80090f8 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2205      	movs	r2, #5
 8009098:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800909a:	e02d      	b.n	80090f8 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	799b      	ldrb	r3, [r3, #6]
 80090a0:	3301      	adds	r3, #1
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d922      	bls.n	80090fc <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	2200      	movs	r2, #0
 80090ba:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	795b      	ldrb	r3, [r3, #5]
 80090c0:	f083 0301 	eor.w	r3, r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	715a      	strb	r2, [r3, #5]
			}
			break;
 80090ca:	e017      	b.n	80090fc <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	2203      	movs	r2, #3
 80090d0:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2200      	movs	r2, #0
 80090d6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2200      	movs	r2, #0
 80090dc:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2200      	movs	r2, #0
 80090e2:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	2202      	movs	r2, #2
 80090e8:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2200      	movs	r2, #0
 80090ee:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2200      	movs	r2, #0
 80090f4:	719a      	strb	r2, [r3, #6]
			break;
 80090f6:	e002      	b.n	80090fe <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 80090f8:	bf00      	nop
 80090fa:	e000      	b.n	80090fe <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 80090fc:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8009104:	2b00      	cmp	r3, #0
 8009106:	d11d      	bne.n	8009144 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8009108:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800910a:	7f3b      	ldrb	r3, [r7, #28]
 800910c:	3b01      	subs	r3, #1
 800910e:	b2d8      	uxtb	r0, r3
 8009110:	68f9      	ldr	r1, [r7, #12]
 8009112:	4613      	mov	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	440b      	add	r3, r1
 800911c:	3302      	adds	r3, #2
 800911e:	4602      	mov	r2, r0
 8009120:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	7b5b      	ldrb	r3, [r3, #13]
 8009126:	4619      	mov	r1, r3
 8009128:	7f7b      	ldrb	r3, [r7, #29]
 800912a:	f083 0302 	eor.w	r3, r3, #2
 800912e:	b2d8      	uxtb	r0, r3
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	460b      	mov	r3, r1
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	3303      	adds	r3, #3
 800913e:	4602      	mov	r2, r0
 8009140:	701a      	strb	r2, [r3, #0]
 8009142:	e013      	b.n	800916c <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8009144:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8009146:	68f9      	ldr	r1, [r7, #12]
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	440b      	add	r3, r1
 8009152:	3302      	adds	r3, #2
 8009154:	7f3a      	ldrb	r2, [r7, #28]
 8009156:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8009158:	7fba      	ldrb	r2, [r7, #30]
 800915a:	68f9      	ldr	r1, [r7, #12]
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	440b      	add	r3, r1
 8009166:	3303      	adds	r3, #3
 8009168:	7f7a      	ldrb	r2, [r7, #29]
 800916a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800916c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	7c1a      	ldrb	r2, [r3, #16]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	3301      	adds	r3, #1
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	7c52      	ldrb	r2, [r2, #17]
 8009192:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	3302      	adds	r3, #2
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	7c92      	ldrb	r2, [r2, #18]
 800919c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	3303      	adds	r3, #3
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	7cd2      	ldrb	r2, [r2, #19]
 80091a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	3304      	adds	r3, #4
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	7d12      	ldrb	r2, [r2, #20]
 80091b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	3305      	adds	r3, #5
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	7d52      	ldrb	r2, [r2, #21]
 80091ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	3306      	adds	r3, #6
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7d92      	ldrb	r2, [r2, #22]
 80091c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	3307      	adds	r3, #7
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	7dd2      	ldrb	r2, [r2, #23]
 80091ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	7e12      	ldrb	r2, [r2, #24]
 80091d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	3309      	adds	r3, #9
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	7e52      	ldrb	r2, [r2, #25]
 80091e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	330a      	adds	r3, #10
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	7e92      	ldrb	r2, [r2, #26]
 80091ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	330b      	adds	r3, #11
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	7ed2      	ldrb	r2, [r2, #27]
 80091f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	330c      	adds	r3, #12
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	7f12      	ldrb	r2, [r2, #28]
 8009200:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	330d      	adds	r3, #13
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	7f52      	ldrb	r2, [r2, #29]
 800920a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	330e      	adds	r3, #14
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7f92      	ldrb	r2, [r2, #30]
 8009214:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	330f      	adds	r3, #15
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	7fd2      	ldrb	r2, [r2, #31]
 800921e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	3310      	adds	r3, #16
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	f892 2020 	ldrb.w	r2, [r2, #32]
 800922a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	3311      	adds	r3, #17
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8009236:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	3312      	adds	r3, #18
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8009242:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	3313      	adds	r3, #19
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 800924e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	3314      	adds	r3, #20
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800925a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	3315      	adds	r3, #21
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8009266:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	3316      	adds	r3, #22
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8009272:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	3317      	adds	r3, #23
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 800927e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	3318      	adds	r3, #24
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 800928a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	3319      	adds	r3, #25
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8009296:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	331a      	adds	r3, #26
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80092a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	331b      	adds	r3, #27
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 80092ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	331c      	adds	r3, #28
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80092ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	331d      	adds	r3, #29
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 80092c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	331e      	adds	r3, #30
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80092d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	331f      	adds	r3, #31
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 80092de:	701a      	strb	r2, [r3, #0]
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	22ff      	movs	r2, #255	@ 0xff
 80092f8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	22ff      	movs	r2, #255	@ 0xff
 80092fe:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	22ff      	movs	r2, #255	@ 0xff
 8009304:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	22ff      	movs	r2, #255	@ 0xff
 800930a:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009312:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800931a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009322:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800932a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009332:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800933a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009342:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800934a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009352:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800935a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009362:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800936a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009372:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800937a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009382:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800938a:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009392:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800939a:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093a2:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	22ff      	movs	r2, #255	@ 0xff
 80093a8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2205      	movs	r2, #5
 80093cc:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	79fa      	ldrb	r2, [r7, #7]
 80093d2:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
 80093d8:	e017      	b.n	800940a <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 80093da:	7bfa      	ldrb	r2, [r7, #15]
 80093dc:	4613      	mov	r3, r2
 80093de:	011b      	lsls	r3, r3, #4
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	4413      	add	r3, r2
 80093e8:	3304      	adds	r3, #4
 80093ea:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2203      	movs	r2, #3
 80093f0:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2203      	movs	r2, #3
 80093f6:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2204      	movs	r2, #4
 80093fc:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	3301      	adds	r3, #1
 8009408:	73fb      	strb	r3, [r7, #15]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	7bfa      	ldrb	r2, [r7, #15]
 8009410:	429a      	cmp	r2, r3
 8009412:	d3e2      	bcc.n	80093da <V53L1_init_zone_results_structure+0x22>
	}
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8009422:	b480      	push	{r7}
 8009424:	b087      	sub	sp, #28
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009430:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8009436:	2305      	movs	r3, #5
 8009438:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009440:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
 8009446:	e016      	b.n	8009476 <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8009448:	7dfa      	ldrb	r2, [r7, #23]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	440b      	add	r3, r1
 8009456:	3304      	adds	r3, #4
 8009458:	2201      	movs	r2, #1
 800945a:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 800945c:	7dfa      	ldrb	r2, [r7, #23]
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	440b      	add	r3, r1
 800946a:	3306      	adds	r3, #6
 800946c:	2200      	movs	r2, #0
 800946e:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	3301      	adds	r3, #1
 8009474:	75fb      	strb	r3, [r7, #23]
 8009476:	7dfa      	ldrb	r2, [r7, #23]
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	429a      	cmp	r2, r3
 800947c:	d3e4      	bcc.n	8009448 <V53L1_init_zone_dss_configs+0x26>
	}
}
 800947e:	bf00      	nop
 8009480:	bf00      	nop
 8009482:	371c      	adds	r7, #28
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800948c:	b490      	push	{r4, r7}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	4611      	mov	r1, r2
 8009498:	461a      	mov	r2, r3
 800949a:	4623      	mov	r3, r4
 800949c:	71fb      	strb	r3, [r7, #7]
 800949e:	4603      	mov	r3, r0
 80094a0:	71bb      	strb	r3, [r7, #6]
 80094a2:	460b      	mov	r3, r1
 80094a4:	717b      	strb	r3, [r7, #5]
 80094a6:	4613      	mov	r3, r2
 80094a8:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80094aa:	79bb      	ldrb	r3, [r7, #6]
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	4413      	add	r3, r2
 80094b4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80094ba:	793b      	ldrb	r3, [r7, #4]
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	797b      	ldrb	r3, [r7, #5]
 80094c2:	4413      	add	r3, r2
 80094c4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80094ca:	7d3b      	ldrb	r3, [r7, #20]
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	7c3b      	ldrb	r3, [r7, #16]
 80094d2:	4413      	add	r3, r2
 80094d4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 80094da:	7f3b      	ldrb	r3, [r7, #28]
 80094dc:	011b      	lsls	r3, r3, #4
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	7e3b      	ldrb	r3, [r7, #24]
 80094e2:	4413      	add	r3, r2
 80094e4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80094e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e8:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 80094ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094f6:	4413      	add	r3, r2
 80094f8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 80094fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	b2da      	uxtb	r2, r3
 8009506:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800950a:	4413      	add	r3, r2
 800950c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800951e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009520:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8009522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009524:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800952a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952c:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8009532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009534:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009538:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800953a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	b2da      	uxtb	r2, r3
 8009542:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009546:	4413      	add	r3, r2
 8009548:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8009554:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8009556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009558:	2200      	movs	r2, #0
 800955a:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800956c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956e:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8009584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009586:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800958c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009592:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800959a:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]

}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc90      	pop	{r4, r7}
 80095aa:	4770      	bx	lr

080095ac <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 80095ac:	b490      	push	{r4, r7}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4604      	mov	r4, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	4611      	mov	r1, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4623      	mov	r3, r4
 80095bc:	71fb      	strb	r3, [r7, #7]
 80095be:	4603      	mov	r3, r0
 80095c0:	71bb      	strb	r3, [r7, #6]
 80095c2:	460b      	mov	r3, r1
 80095c4:	717b      	strb	r3, [r7, #5]
 80095c6:	4613      	mov	r3, r2
 80095c8:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80095ca:	79bb      	ldrb	r3, [r7, #6]
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	4413      	add	r3, r2
 80095d4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80095d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d8:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80095da:	793b      	ldrb	r3, [r7, #4]
 80095dc:	011b      	lsls	r3, r3, #4
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	797b      	ldrb	r3, [r7, #5]
 80095e2:	4413      	add	r3, r2
 80095e4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80095e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e8:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80095ea:	7d3b      	ldrb	r3, [r7, #20]
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	7c3b      	ldrb	r3, [r7, #16]
 80095f2:	4413      	add	r3, r2
 80095f4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80095fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fc:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	789a      	ldrb	r2, [r3, #2]
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	78da      	ldrb	r2, [r3, #3]
 800960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009610:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	789a      	ldrb	r2, [r3, #2]
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8009622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009624:	78da      	ldrb	r2, [r3, #3]
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962c:	791a      	ldrb	r2, [r3, #4]
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009638:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800963a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	b2da      	uxtb	r2, r3
 8009642:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009646:	4413      	add	r3, r2
 8009648:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964c:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8009654:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	2200      	movs	r2, #0
 800965a:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800965c:	7f3b      	ldrb	r3, [r7, #28]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	b2da      	uxtb	r2, r3
 8009662:	7e3b      	ldrb	r3, [r7, #24]
 8009664:	4413      	add	r3, r2
 8009666:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800966c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009670:	011b      	lsls	r3, r3, #4
 8009672:	b2da      	uxtb	r2, r3
 8009674:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009678:	4413      	add	r3, r2
 800967a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800967c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967e:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8009680:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	b2da      	uxtb	r2, r3
 8009688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800968c:	4413      	add	r3, r2
 800968e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8009694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009696:	7bda      	ldrb	r2, [r3, #15]
 8009698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969a:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800969c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969e:	7c1a      	ldrb	r2, [r3, #16]
 80096a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a2:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	7c5a      	ldrb	r2, [r3, #17]
 80096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096aa:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096b2:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096ba:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bc90      	pop	{r4, r7}
 80096ca:	4770      	bx	lr

080096cc <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	460b      	mov	r3, r1
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	220c      	movs	r2, #12
 80096f4:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80096f6:	897b      	ldrh	r3, [r7, #10]
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_015                = 0;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800972c:	2300      	movs	r3, #0
 800972e:	82fb      	strh	r3, [r7, #22]
 8009730:	e015      	b.n	800975e <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 8009732:	8afa      	ldrh	r2, [r7, #22]
 8009734:	897b      	ldrh	r3, [r7, #10]
 8009736:	429a      	cmp	r2, r3
 8009738:	d207      	bcs.n	800974a <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800973a:	8afb      	ldrh	r3, [r7, #22]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	3302      	adds	r3, #2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	605a      	str	r2, [r3, #4]
 8009748:	e006      	b.n	8009758 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800974a:	8afb      	ldrh	r3, [r7, #22]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	3302      	adds	r3, #2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8009758:	8afb      	ldrh	r3, [r7, #22]
 800975a:	3301      	adds	r3, #1
 800975c:	82fb      	strh	r3, [r7, #22]
 800975e:	8afb      	ldrh	r3, [r7, #22]
 8009760:	2b0b      	cmp	r3, #11
 8009762:	d9e6      	bls.n	8009732 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	4603      	mov	r3, r0
 800977a:	603a      	str	r2, [r7, #0]
 800977c:	80fb      	strh	r3, [r7, #6]
 800977e:	460b      	mov	r3, r1
 8009780:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800978e:	2300      	movs	r3, #0
 8009790:	81fb      	strh	r3, [r7, #14]
 8009792:	e00e      	b.n	80097b2 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8009794:	88ba      	ldrh	r2, [r7, #4]
 8009796:	89fb      	ldrh	r3, [r7, #14]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	4413      	add	r3, r2
 80097a0:	89ba      	ldrh	r2, [r7, #12]
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80097a6:	89bb      	ldrh	r3, [r7, #12]
 80097a8:	0a1b      	lsrs	r3, r3, #8
 80097aa:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80097ac:	89fb      	ldrh	r3, [r7, #14]
 80097ae:	3301      	adds	r3, #1
 80097b0:	81fb      	strh	r3, [r7, #14]
 80097b2:	89fa      	ldrh	r2, [r7, #14]
 80097b4:	88bb      	ldrh	r3, [r7, #4]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d3ec      	bcc.n	8009794 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	6039      	str	r1, [r7, #0]
 80097d2:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 80097d4:	2300      	movs	r3, #0
 80097d6:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80097d8:	e00a      	b.n	80097f0 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80097da:	89fb      	ldrh	r3, [r7, #14]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	b21a      	sxth	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	1c59      	adds	r1, r3, #1
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	b21b      	sxth	r3, r3
 80097ea:	4313      	orrs	r3, r2
 80097ec:	b21b      	sxth	r3, r3
 80097ee:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80097f0:	88fb      	ldrh	r3, [r7, #6]
 80097f2:	1e5a      	subs	r2, r3, #1
 80097f4:	80fa      	strh	r2, [r7, #6]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1ef      	bne.n	80097da <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 80097fa:	89fb      	ldrh	r3, [r7, #14]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	603a      	str	r2, [r7, #0]
 8009812:	80fb      	strh	r3, [r7, #6]
 8009814:	460b      	mov	r3, r1
 8009816:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8009820:	88fb      	ldrh	r3, [r7, #6]
 8009822:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8009824:	2300      	movs	r3, #0
 8009826:	81fb      	strh	r3, [r7, #14]
 8009828:	e00f      	b.n	800984a <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800982a:	88ba      	ldrh	r2, [r7, #4]
 800982c:	89fb      	ldrh	r3, [r7, #14]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	4413      	add	r3, r2
 8009836:	89ba      	ldrh	r2, [r7, #12]
 8009838:	b2d2      	uxtb	r2, r2
 800983a:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800983c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009840:	121b      	asrs	r3, r3, #8
 8009842:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8009844:	89fb      	ldrh	r3, [r7, #14]
 8009846:	3301      	adds	r3, #1
 8009848:	81fb      	strh	r3, [r7, #14]
 800984a:	89fa      	ldrh	r2, [r7, #14]
 800984c:	88bb      	ldrh	r3, [r7, #4]
 800984e:	429a      	cmp	r2, r3
 8009850:	d3eb      	bcc.n	800982a <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800986c:	2300      	movs	r3, #0
 800986e:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	b25b      	sxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	da0e      	bge.n	8009898 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800987a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800987e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8009880:	e00a      	b.n	8009898 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8009882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009886:	021b      	lsls	r3, r3, #8
 8009888:	b21a      	sxth	r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	1c59      	adds	r1, r3, #1
 800988e:	6039      	str	r1, [r7, #0]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	b21b      	sxth	r3, r3
 8009894:	4313      	orrs	r3, r2
 8009896:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8009898:	88fb      	ldrh	r3, [r7, #6]
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	80fa      	strh	r2, [r7, #6]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1ef      	bne.n	8009882 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 80098a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b087      	sub	sp, #28
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	460b      	mov	r3, r1
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 80098cc:	2300      	movs	r3, #0
 80098ce:	82fb      	strh	r3, [r7, #22]
 80098d0:	e00e      	b.n	80098f0 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80098d2:	897a      	ldrh	r2, [r7, #10]
 80098d4:	8afb      	ldrh	r3, [r7, #22]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	3b01      	subs	r3, #1
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4413      	add	r3, r2
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	b2d2      	uxtb	r2, r2
 80098e2:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	0a1b      	lsrs	r3, r3, #8
 80098e8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 80098ea:	8afb      	ldrh	r3, [r7, #22]
 80098ec:	3301      	adds	r3, #1
 80098ee:	82fb      	strh	r3, [r7, #22]
 80098f0:	8afa      	ldrh	r2, [r7, #22]
 80098f2:	897b      	ldrh	r3, [r7, #10]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d3ec      	bcc.n	80098d2 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 80098f8:	bf00      	nop
 80098fa:	bf00      	nop
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	4603      	mov	r3, r0
 800990e:	6039      	str	r1, [r7, #0]
 8009910:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8009916:	e007      	b.n	8009928 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	021a      	lsls	r2, r3, #8
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	1c59      	adds	r1, r3, #1
 8009920:	6039      	str	r1, [r7, #0]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	4313      	orrs	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8009928:	88fb      	ldrh	r3, [r7, #6]
 800992a:	1e5a      	subs	r2, r3, #1
 800992c:	80fa      	strh	r2, [r7, #6]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f2      	bne.n	8009918 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 8009932:	68fb      	ldr	r3, [r7, #12]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	6039      	str	r1, [r7, #0]
 800994a:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	b25b      	sxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	da0b      	bge.n	8009972 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800995a:	f04f 33ff 	mov.w	r3, #4294967295
 800995e:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8009960:	e007      	b.n	8009972 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	021a      	lsls	r2, r3, #8
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	1c59      	adds	r1, r3, #1
 800996a:	6039      	str	r1, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	1e5a      	subs	r2, r3, #1
 8009976:	80fa      	strh	r2, [r7, #6]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1f2      	bne.n	8009962 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 800997c:	68fb      	ldr	r3, [r7, #12]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800999a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d107      	bne.n	80099b2 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	461a      	mov	r2, r3
 80099a6:	2127      	movs	r1, #39	@ 0x27
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f009 f901 	bl	8012bb0 <VL53LX_WrByte>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 80099b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3318      	adds	r3, #24
 80099d2:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	78fa      	ldrb	r2, [r7, #3]
 80099d8:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362

	status = VL53LX_WrByte(
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 80099e2:	461a      	mov	r2, r3
 80099e4:	2185      	movs	r1, #133	@ 0x85
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f009 f8e2 	bl	8012bb0 <VL53LX_WrByte>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80099f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8009a08:	2101      	movs	r1, #1
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff ffd7 	bl	80099be <VL53LX_set_firmware_enable_register>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff ffc5 	bl	80099be <VL53LX_set_firmware_enable_register>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3318      	adds	r3, #24
 8009a58:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	78fa      	ldrb	r2, [r7, #3]
 8009a5e:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

	status = VL53LX_WrByte(
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8009a68:	461a      	mov	r2, r3
 8009a6a:	2183      	movs	r1, #131	@ 0x83
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f009 f89f 	bl	8012bb0 <VL53LX_WrByte>
 8009a72:	4603      	mov	r3, r0
 8009a74:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8009a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8009a8e:	2101      	movs	r1, #1
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff ffd7 	bl	8009a44 <VL53LX_set_powerforce_register>
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff ffc5 	bl	8009a44 <VL53LX_set_powerforce_register>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3318      	adds	r3, #24
 8009ada:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363

	status = VL53LX_WrByte(
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 8009aea:	461a      	mov	r2, r3
 8009aec:	2186      	movs	r1, #134	@ 0x86
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f009 f85e 	bl	8012bb0 <VL53LX_WrByte>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 8009af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	460a      	mov	r2, r1
 8009b0e:	80fb      	strh	r3, [r7, #6]
 8009b10:	4613      	mov	r3, r2
 8009b12:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8009b20:	88fb      	ldrh	r3, [r7, #6]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f002 ffcf 	bl	800cac6 <VL53LX_calc_pll_period_us>
 8009b28:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 8009b2a:	797b      	ldrb	r3, [r7, #5]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f003 fbbb 	bl	800d2a8 <VL53LX_decode_vcsel_period>
 8009b32:	4603      	mov	r3, r0
 8009b34:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	099b      	lsrs	r3, r3, #6
 8009b46:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8009b48:	7cfa      	ldrb	r2, [r7, #19]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	fb02 f303 	mul.w	r3, r2, r3
 8009b50:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	099b      	lsrs	r3, r3, #6
 8009b56:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 8009b58:	68fb      	ldr	r3, [r7, #12]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b089      	sub	sp, #36	@ 0x24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	461a      	mov	r2, r3
 8009b72:	4603      	mov	r3, r0
 8009b74:	817b      	strh	r3, [r7, #10]
 8009b76:	460b      	mov	r3, r1
 8009b78:	813b      	strh	r3, [r7, #8]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	011b      	lsls	r3, r3, #4
 8009b96:	4a23      	ldr	r2, [pc, #140]	@ (8009c24 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8009b98:	fb82 1203 	smull	r1, r2, r2, r3
 8009b9c:	1192      	asrs	r2, r2, #6
 8009b9e:	17db      	asrs	r3, r3, #31
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8009ba4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	da03      	bge.n	8009bb4 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8009bac:	897b      	ldrh	r3, [r7, #10]
 8009bae:	425b      	negs	r3, r3
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8009bb4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	da03      	bge.n	8009bc4 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8009bbc:	893b      	ldrh	r3, [r7, #8]
 8009bbe:	425b      	negs	r3, r3
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8009bc4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009bc8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009bcc:	4413      	add	r3, r2
 8009bce:	015b      	lsls	r3, r3, #5
 8009bd0:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	4a13      	ldr	r2, [pc, #76]	@ (8009c24 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8009bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8009bda:	1192      	asrs	r2, r2, #6
 8009bdc:	17db      	asrs	r3, r3, #31
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4413      	add	r3, r2
 8009be8:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8009bea:	79fa      	ldrb	r2, [r7, #7]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	fb02 f303 	mul.w	r3, r2, r3
 8009bf2:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	3310      	adds	r3, #16
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	da00      	bge.n	8009bfe <VL53LX_calc_range_ignore_threshold+0x9a>
 8009bfc:	331f      	adds	r3, #31
 8009bfe:	115b      	asrs	r3, r3, #5
 8009c00:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c08:	db03      	blt.n	8009c12 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8009c0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c0e:	83fb      	strh	r3, [r7, #30]
 8009c10:	e001      	b.n	8009c16 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8009c16:	8bfb      	ldrh	r3, [r7, #30]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3724      	adds	r7, #36	@ 0x24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	10624dd3 	.word	0x10624dd3

08009c28 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e008      	b.n	8009c54 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	031a      	lsls	r2, r3, #12
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	085b      	lsrs	r3, r3, #1
 8009c4a:	441a      	add	r2, r3
		timeout_mclks   =
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c52:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8009c54:	68fb      	ldr	r3, [r7, #12]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff ffd6 	bl	8009c28 <VL53LX_calc_timeout_mclks>
 8009c7c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f887 	bl	8009d92 <VL53LX_encode_timeout>
 8009c84:	4603      	mov	r3, r0
 8009c86:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8009c88:	897b      	ldrh	r3, [r7, #10]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8009c92:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f04f 0100 	mov.w	r1, #0
 8009caa:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	4688      	mov	r8, r1
 8009cb4:	4681      	mov	r9, r0
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	2000      	movs	r0, #0
 8009cba:	460c      	mov	r4, r1
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	fb04 f009 	mul.w	r0, r4, r9
 8009cc2:	fb08 f105 	mul.w	r1, r8, r5
 8009cc6:	4401      	add	r1, r0
 8009cc8:	fba8 2304 	umull	r2, r3, r8, r4
 8009ccc:	4419      	add	r1, r3
 8009cce:	460b      	mov	r3, r1
 8009cd0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009cd4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8009cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009cdc:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8009ce0:	f143 0b00 	adc.w	fp, r3, #0
 8009ce4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8009ce8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009cec:	f04f 0200 	mov.w	r2, #0
 8009cf0:	f04f 0300 	mov.w	r3, #0
 8009cf4:	0b02      	lsrs	r2, r0, #12
 8009cf6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009cfa:	0b0b      	lsrs	r3, r1, #12
 8009cfc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8009d04:	697b      	ldr	r3, [r7, #20]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	371c      	adds	r7, #28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009d10:	4770      	bx	lr
	...

08009d14 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8009d28:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8009d2c:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8009d2e:	4413      	add	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da02      	bge.n	8009d3e <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	e005      	b.n	8009d4a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d44:	db01      	blt.n	8009d4a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8009d46:	4b05      	ldr	r3, [pc, #20]	@ (8009d5c <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8009d48:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8009d4e:	68bb      	ldr	r3, [r7, #8]

}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	0003ffff 	.word	0x0003ffff

08009d60 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	6039      	str	r1, [r7, #0]
 8009d6a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 f835 	bl	8009de6 <VL53LX_decode_timeout>
 8009d7c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7ff ff86 	bl	8009c92 <VL53LX_calc_timeout_us>
 8009d86:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8009d88:	68bb      	ldr	r3, [r7, #8]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b087      	sub	sp, #28
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d015      	beq.n	8009dd8 <VL53LX_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009db2:	e005      	b.n	8009dc0 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	085b      	lsrs	r3, r3, #1
 8009db8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009dba:	89fb      	ldrh	r3, [r7, #14]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	2bff      	cmp	r3, #255	@ 0xff
 8009dc4:	d8f6      	bhi.n	8009db4 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009dc6:	89fb      	ldrh	r3, [r7, #14]
 8009dc8:	021b      	lsls	r3, r3, #8
 8009dca:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009dd4:	4413      	add	r3, r2
 8009dd6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009dd8:	8afb      	ldrh	r3, [r7, #22]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b085      	sub	sp, #20
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	4603      	mov	r3, r0
 8009dee:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009df4:	88fb      	ldrh	r3, [r7, #6]
 8009df6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009df8:	88fa      	ldrh	r2, [r7, #6]
 8009dfa:	0a12      	lsrs	r2, r2, #8
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009e00:	3301      	adds	r3, #1
 8009e02:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009e04:	68fb      	ldr	r3, [r7, #12]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b088      	sub	sp, #32
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
 8009e1e:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8009e30:	887b      	ldrh	r3, [r7, #2]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8009e36:	23f1      	movs	r3, #241	@ 0xf1
 8009e38:	77fb      	strb	r3, [r7, #31]
 8009e3a:	e05d      	b.n	8009ef8 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8009e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3e:	799a      	ldrb	r2, [r3, #6]
 8009e40:	887b      	ldrh	r3, [r7, #2]
 8009e42:	4611      	mov	r1, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff fe5d 	bl	8009b04 <VL53LX_calc_macro_period_us>
 8009e4a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8009e4c:	6979      	ldr	r1, [r7, #20]
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff feea 	bl	8009c28 <VL53LX_calc_timeout_mclks>
 8009e54:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	2bff      	cmp	r3, #255	@ 0xff
 8009e5a:	d901      	bls.n	8009e60 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8009e5c:	23ff      	movs	r3, #255	@ 0xff
 8009e5e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8009e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e66:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8009e68:	6979      	ldr	r1, [r7, #20]
 8009e6a:	68b8      	ldr	r0, [r7, #8]
 8009e6c:	f7ff fef9 	bl	8009c62 <VL53LX_calc_encoded_timeout>
 8009e70:	4603      	mov	r3, r0
 8009e72:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009e74:	8a7b      	ldrh	r3, [r7, #18]
 8009e76:	0a1b      	lsrs	r3, r3, #8
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8009e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009e80:	8a7b      	ldrh	r3, [r7, #18]
 8009e82:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8009e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e86:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8009e88:	6979      	ldr	r1, [r7, #20]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fee9 	bl	8009c62 <VL53LX_calc_encoded_timeout>
 8009e90:	4603      	mov	r3, r0
 8009e92:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009e94:	8a7b      	ldrh	r3, [r7, #18]
 8009e96:	0a1b      	lsrs	r3, r3, #8
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8009e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009ea0:	8a7b      	ldrh	r3, [r7, #18]
 8009ea2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8009ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea6:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8009ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eaa:	7a5a      	ldrb	r2, [r3, #9]
 8009eac:	887b      	ldrh	r3, [r7, #2]
 8009eae:	4611      	mov	r1, r2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff fe27 	bl	8009b04 <VL53LX_calc_macro_period_us>
 8009eb6:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8009eb8:	6979      	ldr	r1, [r7, #20]
 8009eba:	68b8      	ldr	r0, [r7, #8]
 8009ebc:	f7ff fed1 	bl	8009c62 <VL53LX_calc_encoded_timeout>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009ec4:	8a7b      	ldrh	r3, [r7, #18]
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8009ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ece:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009ed0:	8a7b      	ldrh	r3, [r7, #18]
 8009ed2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed6:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8009ed8:	6979      	ldr	r1, [r7, #20]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff fec1 	bl	8009c62 <VL53LX_calc_encoded_timeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009ee4:	8a7b      	ldrh	r3, [r7, #18]
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8009eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eee:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009ef0:	8a7b      	ldrh	r3, [r7, #18]
 8009ef2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8009ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef6:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8009ef8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8009f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f08:	b09e      	sub	sp, #120	@ 0x78
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6578      	str	r0, [r7, #84]	@ 0x54
 8009f0e:	6539      	str	r1, [r7, #80]	@ 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	int64_t  evts              = 0;
 8009f16:	f04f 0200 	mov.w	r2, #0
 8009f1a:	f04f 0300 	mov.w	r3, #0
 8009f1e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	int64_t  tmpi              = 0;
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t  tmpo              = 0;
 8009f2e:	f04f 0200 	mov.w	r2, #0
 8009f32:	f04f 0300 	mov.w	r3, #0
 8009f36:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8009f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f3c:	885b      	ldrh	r3, [r3, #2]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d103      	bne.n	8009f4a <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8009f42:	23f1      	movs	r3, #241	@ 0xf1
 8009f44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009f48:	e0d6      	b.n	800a0f8 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8009f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 80d2 	beq.w	800a0f8 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 8009f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f56:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f040 80cd 	bne.w	800a0f8 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8009f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f64:	2200      	movs	r2, #0
 8009f66:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f68:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009f6e:	460b      	mov	r3, r1
 8009f70:	3301      	adds	r3, #1
 8009f72:	623b      	str	r3, [r7, #32]
 8009f74:	4613      	mov	r3, r2
 8009f76:	f143 0300 	adc.w	r3, r3, #0
 8009f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f80:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8009f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f86:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f90:	64fa      	str	r2, [r7, #76]	@ 0x4c
			tmpo   *=
 8009f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f94:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8009f98:	4602      	mov	r2, r0
 8009f9a:	fb02 f203 	mul.w	r2, r2, r3
 8009f9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fa0:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8009fa4:	fb01 f303 	mul.w	r3, r1, r3
 8009fa8:	441a      	add	r2, r3
 8009faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009fae:	fba3 4501 	umull	r4, r5, r3, r1
 8009fb2:	1953      	adds	r3, r2, r5
 8009fb4:	461d      	mov	r5, r3
 8009fb6:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58
 8009fba:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8009fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009fc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009fc8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009fcc:	460b      	mov	r3, r1
 8009fce:	3301      	adds	r3, #1
 8009fd0:	61bb      	str	r3, [r7, #24]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	f143 0300 	adc.w	r3, r3, #0
 8009fd8:	61fb      	str	r3, [r7, #28]
 8009fda:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009fde:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8009fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fe4:	885b      	ldrh	r3, [r3, #2]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	2200      	movs	r2, #0
 8009fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fec:	637a      	str	r2, [r7, #52]	@ 0x34
			tmpi   *=
 8009fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ff0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	fb02 f203 	mul.w	r2, r2, r3
 8009ffa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	fb01 f303 	mul.w	r3, r1, r3
 800a002:	441a      	add	r2, r3
 800a004:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a006:	4621      	mov	r1, r4
 800a008:	fba3 ab01 	umull	sl, fp, r3, r1
 800a00c:	eb02 030b 	add.w	r3, r2, fp
 800a010:	469b      	mov	fp, r3
 800a012:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 800a016:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800a01a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	17da      	asrs	r2, r3, #31
 800a020:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a022:	62fa      	str	r2, [r7, #44]	@ 0x2c
			evts  = tmpo *
 800a024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a026:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800a02a:	4622      	mov	r2, r4
 800a02c:	fb02 f203 	mul.w	r2, r2, r3
 800a030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a032:	4629      	mov	r1, r5
 800a034:	fb01 f303 	mul.w	r3, r1, r3
 800a038:	4413      	add	r3, r2
 800a03a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a03c:	4621      	mov	r1, r4
 800a03e:	fba2 8901 	umull	r8, r9, r2, r1
 800a042:	444b      	add	r3, r9
 800a044:	4699      	mov	r9, r3
 800a046:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 800a04a:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
			evts += (tmpi/2);
 800a04e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a052:	0fd9      	lsrs	r1, r3, #31
 800a054:	2000      	movs	r0, #0
 800a056:	6139      	str	r1, [r7, #16]
 800a058:	6178      	str	r0, [r7, #20]
 800a05a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a05e:	4621      	mov	r1, r4
 800a060:	1889      	adds	r1, r1, r2
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	4629      	mov	r1, r5
 800a066:	eb43 0101 	adc.w	r1, r3, r1
 800a06a:	60f9      	str	r1, [r7, #12]
 800a06c:	f04f 0200 	mov.w	r2, #0
 800a070:	f04f 0300 	mov.w	r3, #0
 800a074:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a078:	4621      	mov	r1, r4
 800a07a:	084a      	lsrs	r2, r1, #1
 800a07c:	4629      	mov	r1, r5
 800a07e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800a082:	4629      	mov	r1, r5
 800a084:	104b      	asrs	r3, r1, #1
 800a086:	4610      	mov	r0, r2
 800a088:	4619      	mov	r1, r3
 800a08a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a08e:	1814      	adds	r4, r2, r0
 800a090:	603c      	str	r4, [r7, #0]
 800a092:	414b      	adcs	r3, r1
 800a094:	607b      	str	r3, [r7, #4]
 800a096:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a09a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68


			if (tmpi != 0)
 800a09e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	d009      	beq.n	800a0ba <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800a0a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a0aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a0ae:	f7f6 f8bf 	bl	8000230 <__aeabi_ldivmod>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800a0ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a0bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 800a0c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			podata->VL53LX_p_028 =
 800a0c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 +=
 800a0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800a0d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a0d6:	7852      	ldrb	r2, [r2, #1]
 800a0d8:	0852      	lsrs	r2, r2, #1
 800a0da:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 800a0dc:	441a      	add	r2, r3
 800a0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 /=
 800a0e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800a0ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a0ec:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 800a0ee:	fb93 f2f2 	sdiv	r2, r3, r2
 800a0f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800a0f8:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3778      	adds	r7, #120	@ 0x78
 800a100:	46bd      	mov	sp, r7
 800a102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a106 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800a106:	b480      	push	{r7}
 800a108:	b087      	sub	sp, #28
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3318      	adds	r3, #24
 800a114:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	@ 0x2fa
	amb_thresh_low  = 1024 *
 800a128:	029b      	lsls	r3, r3, #10
 800a12a:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
	amb_thresh_high = 1024 *
 800a132:	029b      	lsls	r3, r3, #10
 800a134:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	f040 8095 	bne.w	800a270 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
		pdata->bin_seq[5] =
 800a14c:	091b      	lsrs	r3, r3, #4
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
		pdata->bin_seq[3] =
 800a16a:	091b      	lsrs	r3, r3, #4
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
 800a178:	f003 030f 	and.w	r3, r3, #15
 800a17c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
		pdata->bin_seq[1] =
 800a188:	091b      	lsrs	r3, r3, #4
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
 800a196:	f003 030f 	and.w	r3, r3, #15
 800a19a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	da2c      	bge.n	800a206 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			pdata->bin_seq[5] =
 800a1b2:	091b      	lsrs	r3, r3, #4
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			& 0x0F;
 800a1c0:	f003 030f 	and.w	r3, r3, #15
 800a1c4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			pdata->bin_seq[3] =
 800a1d0:	091b      	lsrs	r3, r3, #4
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			& 0x0F;
 800a1de:	f003 030f 	and.w	r3, r3, #15
 800a1e2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			pdata->bin_seq[1] =
 800a1ee:	091b      	lsrs	r3, r3, #4
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			& 0x0F;
 800a1fc:	f003 030f 	and.w	r3, r3, #15
 800a200:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	429a      	cmp	r2, r3
 800a210:	f340 80c2 	ble.w	800a398 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			pdata->bin_seq[5] =
 800a21a:	091b      	lsrs	r3, r3, #4
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			& 0x0F;
 800a228:	f003 030f 	and.w	r3, r3, #15
 800a22c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			pdata->bin_seq[3] =
 800a238:	091b      	lsrs	r3, r3, #4
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			& 0x0F;
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			pdata->bin_seq[1] =
 800a256:	091b      	lsrs	r3, r3, #4
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			& 0x0F;
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	731a      	strb	r2, [r3, #12]
 800a26e:	e093      	b.n	800a398 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f893 32f1 	ldrb.w	r3, [r3, #753]	@ 0x2f1
			& 0x0F;
 800a276:	f003 030f 	and.w	r3, r3, #15
 800a27a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
			& 0x0F;
 800a286:	f003 030f 	and.w	r3, r3, #15
 800a28a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
		pdata->bin_seq[3] =
 800a296:	091b      	lsrs	r3, r3, #4
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f893 32ef 	ldrb.w	r3, [r3, #751]	@ 0x2ef
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
		pdata->bin_seq[1] =
 800a2b4:	091b      	lsrs	r3, r3, #4
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
			& 0x0F;
 800a2c2:	f003 030f 	and.w	r3, r3, #15
 800a2c6:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	da2c      	bge.n	800a332 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			pdata->bin_seq[5] =
 800a2de:	091b      	lsrs	r3, r3, #4
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			& 0x0F;
 800a2ec:	f003 030f 	and.w	r3, r3, #15
 800a2f0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			pdata->bin_seq[3] =
 800a2fc:	091b      	lsrs	r3, r3, #4
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			& 0x0F;
 800a30a:	f003 030f 	and.w	r3, r3, #15
 800a30e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			pdata->bin_seq[1] =
 800a31a:	091b      	lsrs	r3, r3, #4
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			& 0x0F;
 800a328:	f003 030f 	and.w	r3, r3, #15
 800a32c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	dd2c      	ble.n	800a398 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			pdata->bin_seq[5] =
 800a344:	091b      	lsrs	r3, r3, #4
 800a346:	b2da      	uxtb	r2, r3
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			& 0x0F;
 800a352:	f003 030f 	and.w	r3, r3, #15
 800a356:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			pdata->bin_seq[3] =
 800a362:	091b      	lsrs	r3, r3, #4
 800a364:	b2da      	uxtb	r2, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			& 0x0F;
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			pdata->bin_seq[1] =
 800a380:	091b      	lsrs	r3, r3, #4
 800a382:	b2da      	uxtb	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			& 0x0F;
 800a38e:	f003 030f 	and.w	r3, r3, #15
 800a392:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800a398:	2300      	movs	r3, #0
 800a39a:	75fb      	strb	r3, [r7, #23]
 800a39c:	e007      	b.n	800a3ae <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	2b05      	cmp	r3, #5
 800a3b2:	d9f4      	bls.n	800a39e <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop
 800a3b8:	371c      	adds	r7, #28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 800a3c2:	b590      	push	{r4, r7, lr}
 800a3c4:	b093      	sub	sp, #76	@ 0x4c
 800a3c6:	af04      	add	r7, sp, #16
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	607a      	str	r2, [r7, #4]
 800a3ce:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_LLDriverData_t *pdev =
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3318      	adds	r3, #24
 800a3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t   p = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	uint16_t  phase_delta      = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t  phase_tolerance  = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	857b      	strh	r3, [r7, #42]	@ 0x2a

	int32_t   events_delta     = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800a3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fe:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800a402:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800a406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a408:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 800a40c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800a40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a410:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 800a414:	84bb      	strh	r3, [r7, #36]	@ 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800a416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a418:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 800a41c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	phase_tolerance = (uint16_t)pht;
 800a420:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a424:	857b      	strh	r3, [r7, #42]	@ 0x2a
	phase_tolerance = phase_tolerance << 8;
 800a426:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a428:	021b      	lsls	r3, r3, #8
 800a42a:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (prange_prev->rd_device_state !=
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	785b      	ldrb	r3, [r3, #1]
 800a430:	2b07      	cmp	r3, #7
 800a432:	d006      	beq.n	800a442 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 800a438:	2b08      	cmp	r3, #8
 800a43a:	d002      	beq.n	800a442 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800a43c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a440:	e0ec      	b.n	800a61c <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800a442:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a444:	2b00      	cmp	r3, #0
 800a446:	d102      	bne.n	800a44e <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 800a448:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a44c:	e0e6      	b.n	800a61c <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800a44e:	2300      	movs	r3, #0
 800a450:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800a454:	e0d9      	b.n	800a60a <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 800a456:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	214c      	movs	r1, #76	@ 0x4c
 800a45e:	fb01 f303 	mul.w	r3, r1, r3
 800a462:	4413      	add	r3, r2
 800a464:	335e      	adds	r3, #94	@ 0x5e
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b09      	cmp	r3, #9
 800a46a:	d00b      	beq.n	800a484 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 800a46c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	214c      	movs	r1, #76	@ 0x4c
 800a474:	fb01 f303 	mul.w	r3, r1, r3
 800a478:	4413      	add	r3, r2
 800a47a:	335e      	adds	r3, #94	@ 0x5e
 800a47c:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 800a47e:	2b13      	cmp	r3, #19
 800a480:	f040 80bd 	bne.w	800a5fe <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	795b      	ldrb	r3, [r3, #5]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 800a48c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	214c      	movs	r1, #76	@ 0x4c
 800a494:	fb01 f303 	mul.w	r3, r1, r3
 800a498:	4413      	add	r3, r2
 800a49a:	335e      	adds	r3, #94	@ 0x5e
 800a49c:	2217      	movs	r2, #23
 800a49e:	701a      	strb	r2, [r3, #0]
 800a4a0:	e009      	b.n	800a4b6 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 800a4a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	214c      	movs	r1, #76	@ 0x4c
 800a4aa:	fb01 f303 	mul.w	r3, r1, r3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	335e      	adds	r3, #94	@ 0x5e
 800a4b2:	2207      	movs	r2, #7
 800a4b4:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800a4bc:	e097      	b.n	800a5ee <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800a4be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	214c      	movs	r1, #76	@ 0x4c
 800a4c6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	3354      	adds	r3, #84	@ 0x54
 800a4ce:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 800a4d0:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4403      	add	r3, r0
 800a4e0:	3310      	adds	r3, #16
 800a4e2:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800a4e4:	4299      	cmp	r1, r3
 800a4e6:	d915      	bls.n	800a514 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 800a4e8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	214c      	movs	r1, #76	@ 0x4c
 800a4f0:	fb01 f303 	mul.w	r3, r1, r3
 800a4f4:	4413      	add	r3, r2
 800a4f6:	3354      	adds	r3, #84	@ 0x54
 800a4f8:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 800a4fa:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	4613      	mov	r3, r2
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4403      	add	r3, r0
 800a50a:	3310      	adds	r3, #16
 800a50c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800a50e:	1acb      	subs	r3, r1, r3
 800a510:	867b      	strh	r3, [r7, #50]	@ 0x32
 800a512:	e014      	b.n	800a53e <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 800a514:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800a518:	6879      	ldr	r1, [r7, #4]
 800a51a:	4613      	mov	r3, r2
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	440b      	add	r3, r1
 800a524:	3310      	adds	r3, #16
 800a526:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 800a528:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	204c      	movs	r0, #76	@ 0x4c
 800a530:	fb00 f303 	mul.w	r3, r0, r3
 800a534:	440b      	add	r3, r1
 800a536:	3354      	adds	r3, #84	@ 0x54
 800a538:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	867b      	strh	r3, [r7, #50]	@ 0x32
			}

			if (phase_delta < phase_tolerance) {
 800a53e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a540:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a542:	429a      	cmp	r2, r3
 800a544:	d24e      	bcs.n	800a5e4 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 800a546:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d125      	bne.n	800a59a <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 800a54e:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
					VL53LX_hist_events_consistency_check(
 800a552:	4613      	mov	r3, r2
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	4413      	add	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	3308      	adds	r3, #8
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800a560:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_events_consistency_check(
 800a564:	224c      	movs	r2, #76	@ 0x4c
 800a566:	fb02 f303 	mul.w	r3, r2, r3
 800a56a:	3310      	adds	r3, #16
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	4413      	add	r3, r2
 800a570:	3304      	adds	r3, #4
 800a572:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800a574:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 800a578:	f107 0217 	add.w	r2, r7, #23
 800a57c:	9203      	str	r2, [sp, #12]
 800a57e:	f107 021c 	add.w	r2, r7, #28
 800a582:	9202      	str	r2, [sp, #8]
 800a584:	f107 0218 	add.w	r2, r7, #24
 800a588:	9201      	str	r2, [sp, #4]
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	4623      	mov	r3, r4
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	f000 f848 	bl	800a624 <VL53LX_hist_events_consistency_check>
 800a594:	4603      	mov	r3, r0
 800a596:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 800a59a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d115      	bne.n	800a5ce <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 800a5a4:	2b09      	cmp	r3, #9
 800a5a6:	d112      	bne.n	800a5ce <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 800a5a8:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 800a5ac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_merged_pulse_check(
 800a5b0:	224c      	movs	r2, #76	@ 0x4c
 800a5b2:	fb02 f303 	mul.w	r3, r2, r3
 800a5b6:	3310      	adds	r3, #16
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	3304      	adds	r3, #4
 800a5be:	f107 0217 	add.w	r2, r7, #23
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f000 fb44 	bl	800ac50 <VL53LX_hist_merged_pulse_check>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 800a5ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a5d2:	7df8      	ldrb	r0, [r7, #23]
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	214c      	movs	r1, #76	@ 0x4c
 800a5d8:	fb01 f303 	mul.w	r3, r1, r3
 800a5dc:	4413      	add	r3, r2
 800a5de:	335e      	adds	r3, #94	@ 0x5e
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800a5e4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	795b      	ldrb	r3, [r3, #5]
 800a5f2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	f4ff af61 	bcc.w	800a4be <VL53LX_hist_phase_consistency_check+0xfc>
 800a5fc:	e000      	b.n	800a600 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 800a5fe:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800a600:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a604:	3301      	adds	r3, #1
 800a606:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	7c9b      	ldrb	r3, [r3, #18]
 800a60e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a612:	429a      	cmp	r2, r3
 800a614:	f4ff af1f 	bcc.w	800a456 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800a618:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	373c      	adds	r7, #60	@ 0x3c
 800a620:	46bd      	mov	sp, r7
 800a622:	bd90      	pop	{r4, r7, pc}

0800a624 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 800a624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a628:	b0d4      	sub	sp, #336	@ 0x150
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800a630:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a634:	4603      	mov	r3, r0
 800a636:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800a63a:	460b      	mov	r3, r1
 800a63c:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a640:	2300      	movs	r3, #0
 800a642:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	int64_t   tmpp                   = 0;
 800a646:	f04f 0200 	mov.w	r2, #0
 800a64a:	f04f 0300 	mov.w	r3, #0
 800a64e:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int64_t   tmpc                   = 0;
 800a652:	f04f 0200 	mov.w	r2, #0
 800a656:	f04f 0300 	mov.w	r3, #0
 800a65a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t   events_scaler          = 0;
 800a65e:	f04f 0200 	mov.w	r2, #0
 800a662:	f04f 0300 	mov.w	r3, #0
 800a666:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	int64_t   events_scaler_sq       = 0;
 800a66a:	f04f 0200 	mov.w	r2, #0
 800a66e:	f04f 0300 	mov.w	r3, #0
 800a672:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int64_t   c_signal_events        = 0;
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int64_t   c_sig_noise_sq         = 0;
 800a682:	f04f 0200 	mov.w	r2, #0
 800a686:	f04f 0300 	mov.w	r3, #0
 800a68a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t   c_amb_noise_sq         = 0;
 800a68e:	f04f 0200 	mov.w	r2, #0
 800a692:	f04f 0300 	mov.w	r3, #0
 800a696:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	int64_t   p_amb_noise_sq         = 0;
 800a69a:	f04f 0200 	mov.w	r2, #0
 800a69e:	f04f 0300 	mov.w	r3, #0
 800a6a2:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

	int32_t   p_signal_events        = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint32_t  noise_sq_sum           = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100



	if (event_sigma == 0) {
 800a6b2:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a6ba:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800a6be:	2209      	movs	r2, #9
 800a6c0:	701a      	strb	r2, [r3, #0]
		return status;
 800a6c2:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800a6c6:	e2bd      	b.n	800ac44 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800a6c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6d4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800a6d8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a6dc:	460b      	mov	r3, r1
 800a6de:	3301      	adds	r3, #1
 800a6e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	f143 0300 	adc.w	r3, r3, #0
 800a6ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a6ee:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800a6f2:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800a6f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a6fa:	885b      	ldrh	r3, [r3, #2]
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	2200      	movs	r2, #0
 800a700:	469a      	mov	sl, r3
 800a702:	4693      	mov	fp, r2
 800a704:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800a708:	fb0a f203 	mul.w	r2, sl, r3
 800a70c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a710:	fb0b f303 	mul.w	r3, fp, r3
 800a714:	441a      	add	r2, r3
 800a716:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a71a:	fba3 450a 	umull	r4, r5, r3, sl
 800a71e:	1953      	adds	r3, r2, r5
 800a720:	461d      	mov	r5, r3
 800a722:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138
 800a726:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800a72a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	2200      	movs	r2, #0
 800a732:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a736:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a73a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a73e:	460b      	mov	r3, r1
 800a740:	3301      	adds	r3, #1
 800a742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a746:	4613      	mov	r3, r2
 800a748:	f143 0300 	adc.w	r3, r3, #0
 800a74c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a750:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800a754:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 800a758:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800a75c:	8adb      	ldrh	r3, [r3, #22]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	2200      	movs	r2, #0
 800a762:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a766:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a76a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a76e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800a772:	4622      	mov	r2, r4
 800a774:	fb02 f203 	mul.w	r2, r2, r3
 800a778:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a77c:	4629      	mov	r1, r5
 800a77e:	fb01 f303 	mul.w	r3, r1, r3
 800a782:	441a      	add	r2, r3
 800a784:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a788:	4621      	mov	r1, r4
 800a78a:	fba3 8901 	umull	r8, r9, r3, r1
 800a78e:	eb02 0309 	add.w	r3, r2, r9
 800a792:	4699      	mov	r9, r3
 800a794:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
 800a798:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130



	events_scaler  = tmpp * 4096;
 800a79c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800a7a0:	f04f 0000 	mov.w	r0, #0
 800a7a4:	f04f 0100 	mov.w	r1, #0
 800a7a8:	0319      	lsls	r1, r3, #12
 800a7aa:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800a7ae:	0310      	lsls	r0, r2, #12
 800a7b0:	e9c7 0152 	strd	r0, r1, [r7, #328]	@ 0x148
	if (tmpc != 0) {
 800a7b4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	d035      	beq.n	800a828 <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 800a7bc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800a7c0:	0fd9      	lsrs	r1, r3, #31
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800a7c8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800a7cc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	1889      	adds	r1, r1, r2
 800a7d4:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800a7d8:	4629      	mov	r1, r5
 800a7da:	eb43 0101 	adc.w	r1, r3, r1
 800a7de:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 800a7e2:	f04f 0200 	mov.w	r2, #0
 800a7e6:	f04f 0300 	mov.w	r3, #0
 800a7ea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	084a      	lsrs	r2, r1, #1
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	104b      	asrs	r3, r1, #1
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	4619      	mov	r1, r3
 800a800:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800a804:	1814      	adds	r4, r2, r0
 800a806:	67bc      	str	r4, [r7, #120]	@ 0x78
 800a808:	414b      	adcs	r3, r1
 800a80a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a80c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800a810:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 800a814:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800a818:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800a81c:	f7f5 fd08 	bl	8000230 <__aeabi_ldivmod>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 800a828:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800a82c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a830:	fb03 f102 	mul.w	r1, r3, r2
 800a834:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800a838:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a83c:	fb02 f303 	mul.w	r3, r2, r3
 800a840:	18ca      	adds	r2, r1, r3
 800a842:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a846:	fba3 1303 	umull	r1, r3, r3, r3
 800a84a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a84e:	460b      	mov	r3, r1
 800a850:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a854:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a858:	18d3      	adds	r3, r2, r3
 800a85a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a85e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800a862:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 800a866:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq += 2048;
 800a86a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800a86e:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800a872:	6739      	str	r1, [r7, #112]	@ 0x70
 800a874:	f143 0300 	adc.w	r3, r3, #0
 800a878:	677b      	str	r3, [r7, #116]	@ 0x74
 800a87a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800a87e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq /= 4096;
 800a882:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800a886:	2b00      	cmp	r3, #0
 800a888:	da08      	bge.n	800a89c <VL53LX_hist_events_consistency_check+0x278>
 800a88a:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800a88e:	1851      	adds	r1, r2, r1
 800a890:	66b9      	str	r1, [r7, #104]	@ 0x68
 800a892:	f143 0300 	adc.w	r3, r3, #0
 800a896:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a898:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a89c:	f04f 0000 	mov.w	r0, #0
 800a8a0:	f04f 0100 	mov.w	r1, #0
 800a8a4:	0b10      	lsrs	r0, r2, #12
 800a8a6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800a8aa:	1319      	asrs	r1, r3, #12
 800a8ac:	e9c7 014a 	strd	r0, r1, [r7, #296]	@ 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 800a8b0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8ba:	667a      	str	r2, [r7, #100]	@ 0x64
 800a8bc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800a8c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 800a8c4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8d0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800a8d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800a8d8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800a8dc:	4621      	mov	r1, r4
 800a8de:	1a51      	subs	r1, r2, r1
 800a8e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	eb63 0301 	sbc.w	r3, r3, r1
 800a8e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8ea:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800a8ee:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events *= (int64_t)events_scaler;
 800a8f2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a8f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a8fa:	fb03 f102 	mul.w	r1, r3, r2
 800a8fe:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800a902:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a906:	fb02 f303 	mul.w	r3, r2, r3
 800a90a:	4419      	add	r1, r3
 800a90c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800a910:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a914:	fba2 2303 	umull	r2, r3, r2, r3
 800a918:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a91c:	4613      	mov	r3, r2
 800a91e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a926:	18cb      	adds	r3, r1, r3
 800a928:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a92c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800a930:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800a934:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events += 2048;
 800a938:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800a93c:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800a940:	6539      	str	r1, [r7, #80]	@ 0x50
 800a942:	f143 0300 	adc.w	r3, r3, #0
 800a946:	657b      	str	r3, [r7, #84]	@ 0x54
 800a948:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800a94c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events /= 4096;
 800a950:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800a954:	2b00      	cmp	r3, #0
 800a956:	da08      	bge.n	800a96a <VL53LX_hist_events_consistency_check+0x346>
 800a958:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800a95c:	1851      	adds	r1, r2, r1
 800a95e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a960:	f143 0300 	adc.w	r3, r3, #0
 800a964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a966:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a96a:	f04f 0000 	mov.w	r0, #0
 800a96e:	f04f 0100 	mov.w	r1, #0
 800a972:	0b10      	lsrs	r0, r2, #12
 800a974:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800a978:	1319      	asrs	r1, r3, #12
 800a97a:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800a97e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800a982:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800a986:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800a98a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98c:	2200      	movs	r2, #0
 800a98e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a992:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a99a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800a99e:	4622      	mov	r2, r4
 800a9a0:	fb02 f203 	mul.w	r2, r2, r3
 800a9a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	fb01 f303 	mul.w	r3, r1, r3
 800a9ae:	441a      	add	r2, r3
 800a9b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	fba3 1301 	umull	r1, r3, r3, r1
 800a9ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9be:	460b      	mov	r3, r1
 800a9c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9c8:	18d3      	adds	r3, r2, r3
 800a9ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9ce:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800a9d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800a9d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq += 2048;
 800a9da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800a9de:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800a9e2:	6439      	str	r1, [r7, #64]	@ 0x40
 800a9e4:	f143 0300 	adc.w	r3, r3, #0
 800a9e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9ea:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800a9ee:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq /= 4096;
 800a9f2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	da08      	bge.n	800aa0c <VL53LX_hist_events_consistency_check+0x3e8>
 800a9fa:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800a9fe:	1851      	adds	r1, r2, r1
 800aa00:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aa02:	f143 0300 	adc.w	r3, r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aa0c:	f04f 0000 	mov.w	r0, #0
 800aa10:	f04f 0100 	mov.w	r1, #0
 800aa14:	0b10      	lsrs	r0, r2, #12
 800aa16:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800aa1a:	1319      	asrs	r1, r3, #12
 800aa1c:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800aa20:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800aa24:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 800aa28:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aa34:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800aa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa3c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800aa40:	4622      	mov	r2, r4
 800aa42:	fb02 f203 	mul.w	r2, r2, r3
 800aa46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	fb01 f303 	mul.w	r3, r1, r3
 800aa50:	441a      	add	r2, r3
 800aa52:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800aa56:	4621      	mov	r1, r4
 800aa58:	fba3 1301 	umull	r1, r3, r3, r1
 800aa5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa60:	460b      	mov	r3, r1
 800aa62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa6a:	18d3      	adds	r3, r2, r3
 800aa6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa70:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800aa74:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 800aa78:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq += 2048;
 800aa7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800aa80:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800aa84:	6339      	str	r1, [r7, #48]	@ 0x30
 800aa86:	f143 0300 	adc.w	r3, r3, #0
 800aa8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa8c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800aa90:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4096;
 800aa94:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800aa98:	4610      	mov	r0, r2
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	2900      	cmp	r1, #0
 800aa9e:	da08      	bge.n	800aab2 <VL53LX_hist_events_consistency_check+0x48e>
 800aaa0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800aaa4:	18c3      	adds	r3, r0, r3
 800aaa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aaa8:	f141 0300 	adc.w	r3, r1, #0
 800aaac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800aab2:	f04f 0200 	mov.w	r2, #0
 800aab6:	f04f 0300 	mov.w	r3, #0
 800aaba:	0b02      	lsrs	r2, r0, #12
 800aabc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800aac0:	130b      	asrs	r3, r1, #12
 800aac2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110


	c_amb_noise_sq += 2;
 800aac6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800aaca:	1c91      	adds	r1, r2, #2
 800aacc:	6239      	str	r1, [r7, #32]
 800aace:	f143 0300 	adc.w	r3, r3, #0
 800aad2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aad4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800aad8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4;
 800aadc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da06      	bge.n	800aaf2 <VL53LX_hist_events_consistency_check+0x4ce>
 800aae4:	1cd1      	adds	r1, r2, #3
 800aae6:	61b9      	str	r1, [r7, #24]
 800aae8:	f143 0300 	adc.w	r3, r3, #0
 800aaec:	61fb      	str	r3, [r7, #28]
 800aaee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	f04f 0100 	mov.w	r1, #0
 800aafa:	0890      	lsrs	r0, r2, #2
 800aafc:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ab00:	1099      	asrs	r1, r3, #2
 800ab02:	e9c7 0144 	strd	r0, r1, [r7, #272]	@ 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 800ab06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab0a:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	617a      	str	r2, [r7, #20]
 800ab12:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ab16:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108


	p_amb_noise_sq += 2;
 800ab1a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800ab1e:	1c91      	adds	r1, r2, #2
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	f143 0300 	adc.w	r3, r3, #0
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ab2c:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	p_amb_noise_sq /= 4;
 800ab30:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	da06      	bge.n	800ab46 <VL53LX_hist_events_consistency_check+0x522>
 800ab38:	1cd1      	adds	r1, r2, #3
 800ab3a:	6039      	str	r1, [r7, #0]
 800ab3c:	f143 0300 	adc.w	r3, r3, #0
 800ab40:	607b      	str	r3, [r7, #4]
 800ab42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab46:	f04f 0000 	mov.w	r0, #0
 800ab4a:	f04f 0100 	mov.w	r1, #0
 800ab4e:	0890      	lsrs	r0, r2, #2
 800ab50:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ab54:	1099      	asrs	r1, r3, #2
 800ab56:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800ab5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab5e:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800ab60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 800ab64:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800ab66:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		(uint32_t)c_sig_noise_sq +
 800ab6a:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800ab6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
	noise_sq_sum =
 800ab70:	4413      	add	r3, r2
 800ab72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800ab76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ab7a:	011b      	lsls	r3, r3, #4
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f002 f8ab 	bl	800ccd8 <VL53LX_isqrt>
 800ab82:	4603      	mov	r3, r0
 800ab84:	461a      	mov	r2, r3
	*pevents_tolerance =
 800ab86:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800ab8a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800ab8c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 800ab96:	fb03 f202 	mul.w	r2, r3, r2
 800ab9a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800ab9e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800aba0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f103 0220 	add.w	r2, r3, #32
 800abaa:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800abae:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800abb0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	da00      	bge.n	800abbc <VL53LX_hist_events_consistency_check+0x598>
 800abba:	333f      	adds	r3, #63	@ 0x3f
 800abbc:	119b      	asrs	r3, r3, #6
 800abbe:	461a      	mov	r2, r3
 800abc0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800abc4:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800abc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 800abd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abdc:	1a9b      	subs	r3, r3, r2
 800abde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800abe2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800abe6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800abea:	429a      	cmp	r2, r3
 800abec:	da08      	bge.n	800ac00 <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800abee:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800abf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abf6:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800abf8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	e007      	b.n	800ac10 <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800ac00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ac04:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800ac08:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800ac0a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800ac0e:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800ac10:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	dd0b      	ble.n	800ac38 <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800ac20:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800ac24:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800ac26:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d204      	bcs.n	800ac38 <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800ac2e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800ac32:	2214      	movs	r2, #20
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e003      	b.n	800ac40 <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800ac38:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800ac3c:	2209      	movs	r2, #9
 800ac3e:	701a      	strb	r2, [r3, #0]





	return status;
 800ac40:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ac50 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b087      	sub	sp, #28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
 800ac5c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ac72:	429a      	cmp	r2, r3
 800ac74:	dd0b      	ble.n	800ac8e <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	b29b      	uxth	r3, r3
		delta_mm =
 800ac8a:	82fb      	strh	r3, [r7, #22]
 800ac8c:	e00a      	b.n	800aca4 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	b29b      	uxth	r3, r3
		delta_mm =
 800aca2:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800aca4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	dd09      	ble.n	800acc0 <VL53LX_hist_merged_pulse_check+0x70>
 800acac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800acb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	dd03      	ble.n	800acc0 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2216      	movs	r2, #22
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	e002      	b.n	800acc6 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2209      	movs	r2, #9
 800acc4:	701a      	strb	r2, [r3, #0]

	return status;
 800acc6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800acca:	4618      	mov	r0, r3
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b08e      	sub	sp, #56	@ 0x38
 800acda:	af04      	add	r7, sp, #16
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ace4:	2300      	movs	r3, #0
 800ace6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev =
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3318      	adds	r3, #24
 800acee:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800acf0:	2300      	movs	r3, #0
 800acf2:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800acf8:	6a3b      	ldr	r3, [r7, #32]
 800acfa:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 800acfe:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800ad00:	6a3b      	ldr	r3, [r7, #32]
 800ad02:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 800ad06:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800ad0e:	2b09      	cmp	r3, #9
 800ad10:	d009      	beq.n	800ad26 <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800ad18:	2b13      	cmp	r3, #19
 800ad1a:	d004      	beq.n	800ad26 <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800ad22:	2b14      	cmp	r3, #20
 800ad24:	d129      	bne.n	800ad7a <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad2c:	2b09      	cmp	r3, #9
 800ad2e:	d009      	beq.n	800ad44 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800ad36:	2b13      	cmp	r3, #19
 800ad38:	d004      	beq.n	800ad44 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800ad40:	2b14      	cmp	r3, #20
 800ad42:	d11a      	bne.n	800ad7a <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2209      	movs	r2, #9
 800ad48:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	334a      	adds	r3, #74	@ 0x4a
				VL53LX_hist_events_consistency_check(
 800ad56:	8bb9      	ldrh	r1, [r7, #28]
 800ad58:	7ff8      	ldrb	r0, [r7, #31]
 800ad5a:	9303      	str	r3, [sp, #12]
 800ad5c:	f107 0318 	add.w	r3, r7, #24
 800ad60:	9302      	str	r3, [sp, #8]
 800ad62:	f107 0314 	add.w	r3, r7, #20
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	f7ff fc58 	bl	800a624 <VL53LX_hist_events_consistency_check>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		}
	}

	return status;
 800ad7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3728      	adds	r7, #40	@ 0x28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b088      	sub	sp, #32
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d019      	beq.n	800ade6 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800adb8:	4618      	mov	r0, r3
 800adba:	f002 f8f4 	bl	800cfa6 <VL53LX_calc_pll_period_mm>
 800adbe:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		wrap_dmax_phase =
 800adc6:	021b      	lsls	r3, r3, #8
 800adc8:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	fb02 f303 	mul.w	r3, r2, r3
 800add2:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800adda:	0bdb      	lsrs	r3, r3, #15
 800addc:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	b21a      	sxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800ade6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3720      	adds	r7, #32
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800adf2:	b590      	push	{r4, r7, lr}
 800adf4:	b08d      	sub	sp, #52	@ 0x34
 800adf6:	af04      	add	r7, sp, #16
 800adf8:	4604      	mov	r4, r0
 800adfa:	4608      	mov	r0, r1
 800adfc:	4611      	mov	r1, r2
 800adfe:	461a      	mov	r2, r3
 800ae00:	4623      	mov	r3, r4
 800ae02:	80fb      	strh	r3, [r7, #6]
 800ae04:	4603      	mov	r3, r0
 800ae06:	80bb      	strh	r3, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800ae30:	78b9      	ldrb	r1, [r7, #2]
 800ae32:	78f8      	ldrb	r0, [r7, #3]
 800ae34:	f107 030c 	add.w	r3, r7, #12
 800ae38:	9303      	str	r3, [sp, #12]
 800ae3a:	f107 030e 	add.w	r3, r7, #14
 800ae3e:	9302      	str	r3, [sp, #8]
 800ae40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ae44:	9301      	str	r3, [sp, #4]
 800ae46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	23ff      	movs	r3, #255	@ 0xff
 800ae4c:	22c7      	movs	r2, #199	@ 0xc7
 800ae4e:	f000 fa01 	bl	800b254 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800ae52:	89fb      	ldrh	r3, [r7, #14]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d050      	beq.n	800aefa <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800ae58:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d04d      	beq.n	800aefa <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800ae5e:	f897 4034 	ldrb.w	r4, [r7, #52]	@ 0x34
 800ae62:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800ae66:	78b9      	ldrb	r1, [r7, #2]
 800ae68:	78f8      	ldrb	r0, [r7, #3]
 800ae6a:	f107 0308 	add.w	r3, r7, #8
 800ae6e:	9303      	str	r3, [sp, #12]
 800ae70:	f107 030a 	add.w	r3, r7, #10
 800ae74:	9302      	str	r3, [sp, #8]
 800ae76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ae7a:	9301      	str	r3, [sp, #4]
 800ae7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	4623      	mov	r3, r4
 800ae82:	f000 f9e7 	bl	800b254 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800ae86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae88:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800ae8a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800ae8c:	897b      	ldrh	r3, [r7, #10]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	fb02 f303 	mul.w	r3, r2, r3
 800ae96:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800ae98:	89fb      	ldrh	r3, [r7, #14]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800aea2:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800aea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea6:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800aea8:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800aeaa:	893b      	ldrh	r3, [r7, #8]
 800aeac:	461a      	mov	r2, r3
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	fb02 f303 	mul.w	r3, r2, r3
 800aeb4:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800aeb6:	89bb      	ldrh	r3, [r7, #12]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	fbb3 f3f2 	udiv	r3, r3, r2
 800aec0:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800aec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	fb02 f303 	mul.w	r3, r2, r3
 800aecc:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800aece:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	fb02 f303 	mul.w	r3, r2, r3
 800aed8:	69fa      	ldr	r2, [r7, #28]
 800aeda:	4413      	add	r3, r2
 800aedc:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800aede:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800aee0:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800aee2:	4413      	add	r3, r2
 800aee4:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d008      	beq.n	800aefe <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	009a      	lsls	r2, r3, #2
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	fb92 f3f3 	sdiv	r3, r2, r3
 800aef6:	61fb      	str	r3, [r7, #28]
 800aef8:	e002      	b.n	800af00 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800aefa:	bf00      	nop
 800aefc:	e000      	b.n	800af00 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800aefe:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	b21a      	sxth	r2, r3
 800af04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af06:	801a      	strh	r2, [r3, #0]

}
 800af08:	bf00      	nop
 800af0a:	3724      	adds	r7, #36	@ 0x24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd90      	pop	{r4, r7, pc}

0800af10 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	607a      	str	r2, [r7, #4]
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	08db      	lsrs	r3, r3, #3
 800af24:	b2da      	uxtb	r2, r3
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	f003 0307 	and.w	r3, r3, #7
 800af30:	b2da      	uxtb	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	2301      	movs	r3, #1
 800af3e:	4093      	lsls	r3, r2
 800af40:	b2da      	uxtb	r2, r3
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	701a      	strb	r2, [r3, #0]

}
 800af46:	bf00      	nop
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	4603      	mov	r3, r0
 800af5a:	603a      	str	r2, [r7, #0]
 800af5c:	71fb      	strb	r3, [r7, #7]
 800af5e:	460b      	mov	r3, r1
 800af60:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	2b07      	cmp	r3, #7
 800af66:	d90a      	bls.n	800af7e <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800af68:	79bb      	ldrb	r3, [r7, #6]
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	b2da      	uxtb	r2, r3
 800af6e:	79fb      	ldrb	r3, [r7, #7]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	b2db      	uxtb	r3, r3
 800af74:	3b71      	subs	r3, #113	@ 0x71
 800af76:	b2da      	uxtb	r2, r3
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800af7c:	e00a      	b.n	800af94 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800af7e:	79bb      	ldrb	r3, [r7, #6]
 800af80:	f1c3 030f 	rsb	r3, r3, #15
 800af84:	b2db      	uxtb	r3, r3
 800af86:	00db      	lsls	r3, r3, #3
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	4413      	add	r3, r2
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	701a      	strb	r2, [r3, #0]
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800afae:	7bfb      	ldrb	r3, [r7, #15]
 800afb0:	091b      	lsrs	r3, r3, #4
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	f003 030f 	and.w	r3, r3, #15
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	701a      	strb	r2, [r3, #0]

}
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	4603      	mov	r3, r0
 800afd8:	603a      	str	r2, [r7, #0]
 800afda:	71fb      	strb	r3, [r7, #7]
 800afdc:	460b      	mov	r3, r1
 800afde:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800afe0:	79bb      	ldrb	r3, [r7, #6]
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	4413      	add	r3, r2
 800afea:	b2da      	uxtb	r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	701a      	strb	r2, [r3, #0]

}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60ba      	str	r2, [r7, #8]
 800b004:	607b      	str	r3, [r7, #4]
 800b006:	4603      	mov	r3, r0
 800b008:	73fb      	strb	r3, [r7, #15]
 800b00a:	460b      	mov	r3, r1
 800b00c:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800b012:	2300      	movs	r3, #0
 800b014:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 800b01e:	f107 0217 	add.w	r2, r7, #23
 800b022:	f107 0116 	add.w	r1, r7, #22
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	4618      	mov	r0, r3
 800b02a:	f002 fa37 	bl	800d49c <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 800b02e:	f107 0214 	add.w	r2, r7, #20
 800b032:	f107 0115 	add.w	r1, r7, #21
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff ffb1 	bl	800afa0 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
 800b040:	4619      	mov	r1, r3
 800b042:	7d7b      	ldrb	r3, [r7, #21]
 800b044:	3301      	adds	r3, #1
 800b046:	0fda      	lsrs	r2, r3, #31
 800b048:	4413      	add	r3, r2
 800b04a:	105b      	asrs	r3, r3, #1
 800b04c:	425b      	negs	r3, r3
 800b04e:	b29b      	uxth	r3, r3
 800b050:	440b      	add	r3, r1
 800b052:	b29b      	uxth	r3, r3
 800b054:	b21a      	sxth	r2, r3
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b060:	2b00      	cmp	r3, #0
 800b062:	da02      	bge.n	800b06a <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2200      	movs	r2, #0
 800b068:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b070:	b29b      	uxth	r3, r3
 800b072:	7d7a      	ldrb	r2, [r7, #21]
 800b074:	4413      	add	r3, r2
 800b076:	b29b      	uxth	r3, r3
 800b078:	b21a      	sxth	r2, r3
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 800b07e:	6a3b      	ldr	r3, [r7, #32]
 800b080:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b084:	2b0f      	cmp	r3, #15
 800b086:	dd02      	ble.n	800b08e <VL53LX_decode_zone_limits+0x92>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	220f      	movs	r2, #15
 800b08c:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800b08e:	7dbb      	ldrb	r3, [r7, #22]
 800b090:	4619      	mov	r1, r3
 800b092:	7d3b      	ldrb	r3, [r7, #20]
 800b094:	3301      	adds	r3, #1
 800b096:	0fda      	lsrs	r2, r3, #31
 800b098:	4413      	add	r3, r2
 800b09a:	105b      	asrs	r3, r3, #1
 800b09c:	425b      	negs	r3, r3
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	440b      	add	r3, r1
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	b21a      	sxth	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	da02      	bge.n	800b0ba <VL53LX_decode_zone_limits+0xbe>
		*py_ll = 0;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	7d3a      	ldrb	r2, [r7, #20]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	b21a      	sxth	r2, r3
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0d4:	2b0f      	cmp	r3, #15
 800b0d6:	dd02      	ble.n	800b0de <VL53LX_decode_zone_limits+0xe2>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0da:	220f      	movs	r2, #15
 800b0dc:	801a      	strh	r2, [r3, #0]
}
 800b0de:	bf00      	nop
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	460a      	mov	r2, r1
 800b0f0:	71fb      	strb	r3, [r7, #7]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	f003 0303 	and.w	r3, r3, #3
 800b100:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800b102:	79bb      	ldrb	r3, [r7, #6]
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <VL53LX_is_aperture_location+0x34>
 800b110:	7b7b      	ldrb	r3, [r7, #13]
 800b112:	2b02      	cmp	r3, #2
 800b114:	d101      	bne.n	800b11a <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 800b116:	2301      	movs	r3, #1
 800b118:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d104      	bne.n	800b12a <VL53LX_is_aperture_location+0x44>
 800b120:	7b7b      	ldrb	r3, [r7, #13]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 800b126:	2301      	movs	r3, #1
 800b128:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800b138:	b590      	push	{r4, r7, lr}
 800b13a:	b08b      	sub	sp, #44	@ 0x2c
 800b13c:	af02      	add	r7, sp, #8
 800b13e:	603a      	str	r2, [r7, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	4603      	mov	r3, r0
 800b144:	71fb      	strb	r3, [r7, #7]
 800b146:	460b      	mov	r3, r1
 800b148:	71bb      	strb	r3, [r7, #6]
 800b14a:	4613      	mov	r3, r2
 800b14c:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800b15e:	2300      	movs	r3, #0
 800b160:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 800b17a:	f107 0416 	add.w	r4, r7, #22
 800b17e:	f107 0218 	add.w	r2, r7, #24
 800b182:	79b9      	ldrb	r1, [r7, #6]
 800b184:	79f8      	ldrb	r0, [r7, #7]
 800b186:	f107 0312 	add.w	r3, r7, #18
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	f107 0314 	add.w	r3, r7, #20
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	4623      	mov	r3, r4
 800b194:	f7ff ff32 	bl	800affc <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800b198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19a:	2200      	movs	r2, #0
 800b19c:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800b19e:	8afb      	ldrh	r3, [r7, #22]
 800b1a0:	83bb      	strh	r3, [r7, #28]
 800b1a2:	e04c      	b.n	800b23e <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800b1a4:	8b3b      	ldrh	r3, [r7, #24]
 800b1a6:	83fb      	strh	r3, [r7, #30]
 800b1a8:	e03d      	b.n	800b226 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 800b1aa:	8bbb      	ldrh	r3, [r7, #28]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	8bfa      	ldrh	r2, [r7, #30]
 800b1b0:	b2d1      	uxtb	r1, r2
 800b1b2:	f107 0211 	add.w	r2, r7, #17
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff fecb 	bl	800af52 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800b1bc:	7c78      	ldrb	r0, [r7, #17]
 800b1be:	f107 030e 	add.w	r3, r7, #14
 800b1c2:	f107 020f 	add.w	r2, r7, #15
 800b1c6:	f107 0110 	add.w	r1, r7, #16
 800b1ca:	f7ff fea1 	bl	800af10 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800b1ce:	7c3b      	ldrb	r3, [r7, #16]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	781a      	ldrb	r2, [r3, #0]
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01b      	beq.n	800b21a <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800b1e2:	8bbb      	ldrh	r3, [r7, #28]
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	8bfa      	ldrh	r2, [r7, #30]
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff ff7a 	bl	800b0e6 <VL53LX_is_aperture_location>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800b1f6:	7efb      	ldrb	r3, [r7, #27]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d007      	beq.n	800b20c <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	881a      	ldrh	r2, [r3, #0]
 800b200:	88bb      	ldrh	r3, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	b29a      	uxth	r2, r3
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	801a      	strh	r2, [r3, #0]
 800b20a:	e006      	b.n	800b21a <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800b20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20e:	881b      	ldrh	r3, [r3, #0]
 800b210:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800b214:	b29a      	uxth	r2, r3
 800b216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b218:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800b21a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	3301      	adds	r3, #1
 800b222:	b29b      	uxth	r3, r3
 800b224:	83fb      	strh	r3, [r7, #30]
 800b226:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b22a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b22e:	429a      	cmp	r2, r3
 800b230:	ddbb      	ble.n	800b1aa <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800b232:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b236:	b29b      	uxth	r3, r3
 800b238:	3301      	adds	r3, #1
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	83bb      	strh	r3, [r7, #28]
 800b23e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b242:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b246:	429a      	cmp	r2, r3
 800b248:	ddac      	ble.n	800b1a4 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800b24a:	bf00      	nop
 800b24c:	bf00      	nop
 800b24e:	3724      	adds	r7, #36	@ 0x24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd90      	pop	{r4, r7, pc}

0800b254 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800b254:	b590      	push	{r4, r7, lr}
 800b256:	b08d      	sub	sp, #52	@ 0x34
 800b258:	af02      	add	r7, sp, #8
 800b25a:	4604      	mov	r4, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	4611      	mov	r1, r2
 800b260:	461a      	mov	r2, r3
 800b262:	4623      	mov	r3, r4
 800b264:	71fb      	strb	r3, [r7, #7]
 800b266:	4603      	mov	r3, r0
 800b268:	71bb      	strb	r3, [r7, #6]
 800b26a:	460b      	mov	r3, r1
 800b26c:	717b      	strb	r3, [r7, #5]
 800b26e:	4613      	mov	r3, r2
 800b270:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t   y         = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int16_t   mm_x_ll   = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint16_t  spad_attenuation = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	847b      	strh	r3, [r7, #34]	@ 0x22



	VL53LX_decode_zone_limits(
 800b2b4:	f107 041c 	add.w	r4, r7, #28
 800b2b8:	f107 021e 	add.w	r2, r7, #30
 800b2bc:	79b9      	ldrb	r1, [r7, #6]
 800b2be:	79f8      	ldrb	r0, [r7, #7]
 800b2c0:	f107 0318 	add.w	r3, r7, #24
 800b2c4:	9301      	str	r3, [sp, #4]
 800b2c6:	f107 031a 	add.w	r3, r7, #26
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	f7ff fe95 	bl	800affc <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800b2d2:	f107 0414 	add.w	r4, r7, #20
 800b2d6:	f107 0216 	add.w	r2, r7, #22
 800b2da:	7939      	ldrb	r1, [r7, #4]
 800b2dc:	7978      	ldrb	r0, [r7, #5]
 800b2de:	f107 0310 	add.w	r3, r7, #16
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	f107 0312 	add.w	r3, r7, #18
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	4623      	mov	r3, r4
 800b2ec:	f7ff fe86 	bl	800affc <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800b2f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800b2f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800b2fc:	8abb      	ldrh	r3, [r7, #20]
 800b2fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b300:	e06c      	b.n	800b3dc <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800b302:	8afb      	ldrh	r3, [r7, #22]
 800b304:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b306:	e05d      	b.n	800b3c4 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800b308:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b30e:	b2d1      	uxtb	r1, r2
 800b310:	f107 020f 	add.w	r2, r7, #15
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff fe1c 	bl	800af52 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800b31a:	7bf8      	ldrb	r0, [r7, #15]
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	f107 020d 	add.w	r2, r7, #13
 800b324:	f107 010e 	add.w	r1, r7, #14
 800b328:	f7ff fdf2 	bl	800af10 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	461a      	mov	r2, r3
 800b330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b332:	4413      	add	r3, r2
 800b334:	781a      	ldrb	r2, [r3, #0]
 800b336:	7b3b      	ldrb	r3, [r7, #12]
 800b338:	4013      	ands	r3, r2
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d03b      	beq.n	800b3b8 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800b340:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b342:	b2db      	uxtb	r3, r3
 800b344:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b346:	b2d2      	uxtb	r2, r2
 800b348:	4611      	mov	r1, r2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff fecb 	bl	800b0e6 <VL53LX_is_aperture_location>
 800b350:	4603      	mov	r3, r0
 800b352:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800b356:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800b35e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b360:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b362:	e002      	b.n	800b36a <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800b364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b368:	847b      	strh	r3, [r7, #34]	@ 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800b36a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b36e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800b372:	429a      	cmp	r2, r3
 800b374:	db19      	blt.n	800b3aa <VL53LX_calc_mm_effective_spads+0x156>
 800b376:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b37a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800b37e:	429a      	cmp	r2, r3
 800b380:	dc13      	bgt.n	800b3aa <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800b382:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800b386:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800b38a:	429a      	cmp	r2, r3
 800b38c:	db0d      	blt.n	800b3aa <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800b38e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b392:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800b396:	429a      	cmp	r2, r3
 800b398:	dc07      	bgt.n	800b3aa <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800b39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b39c:	881a      	ldrh	r2, [r3, #0]
 800b39e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b3a0:	4413      	add	r3, r2
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3a6:	801a      	strh	r2, [r3, #0]
 800b3a8:	e006      	b.n	800b3b8 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800b3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ac:	881a      	ldrh	r2, [r3, #0]
 800b3ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b3b0:	4413      	add	r3, r2
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3b6:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800b3b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	3301      	adds	r3, #1
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b3c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3c8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	dd9b      	ble.n	800b308 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800b3d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b3dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b3e0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	dd8c      	ble.n	800b302 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800b3e8:	bf00      	nop
 800b3ea:	bf00      	nop
 800b3ec:	372c      	adds	r7, #44	@ 0x2c
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd90      	pop	{r4, r7, pc}

0800b3f2 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b086      	sub	sp, #24
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	60f8      	str	r0, [r7, #12]
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	607a      	str	r2, [r7, #4]
 800b3fe:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7fd ff71 	bl	80092ec <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	7c9a      	ldrb	r2, [r3, #18]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f893 207a 	ldrb.w	r2, [r3, #122]	@ 0x7a
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	3314      	adds	r3, #20
 800b434:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800b436:	2300      	movs	r3, #0
 800b438:	75fb      	strb	r3, [r7, #23]
 800b43a:	e06b      	b.n	800b514 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800b442:	2b01      	cmp	r3, #1
 800b444:	d034      	beq.n	800b4b0 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800b446:	e05f      	b.n	800b508 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800b480:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	8a9a      	ldrh	r2, [r3, #20]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	601a      	str	r2, [r3, #0]

			break;
 800b4ae:	e02b      	b.n	800b508 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800b4e0:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	845a      	strh	r2, [r3, #34]	@ 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	611a      	str	r2, [r3, #16]
			break;
 800b506:	bf00      	nop
		}

		pdata++;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	334c      	adds	r3, #76	@ 0x4c
 800b50c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	3301      	adds	r3, #1
 800b512:	75fb      	strb	r3, [r7, #23]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	7c9b      	ldrb	r3, [r3, #18]
 800b518:	7dfa      	ldrb	r2, [r7, #23]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d38e      	bcc.n	800b43c <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800b51e:	bf00      	nop
 800b520:	bf00      	nop
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800b528:	b480      	push	{r7}
 800b52a:	b089      	sub	sp, #36	@ 0x24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b530:	2300      	movs	r3, #0
 800b532:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3318      	adds	r3, #24
 800b538:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800b540:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800b548:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b550:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	005b      	lsls	r3, r3, #1
 800b55a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	4413      	add	r3, r2
 800b562:	3302      	adds	r3, #2
 800b564:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
	pzone_dyn_cfg->expected_gph_id =
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800b58a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3724      	adds	r7, #36	@ 0x24
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b08b      	sub	sp, #44	@ 0x2c
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3318      	adds	r3, #24
 800b5ac:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800b5b4:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b5bc:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b5c4:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800b5cc:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800b5ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5d2:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800b5d4:	7bfa      	ldrb	r2, [r7, #15]
 800b5d6:	6939      	ldr	r1, [r7, #16]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	440b      	add	r3, r1
 800b5e2:	3306      	adds	r3, #6
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b5ee:	84bb      	strh	r3, [r7, #36]	@ 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5f6:	e01a      	b.n	800b62e <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800b5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	214c      	movs	r1, #76	@ 0x4c
 800b600:	fb01 f303 	mul.w	r3, r1, r3
 800b604:	4413      	add	r3, r2
 800b606:	334a      	adds	r3, #74	@ 0x4a
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d209      	bcs.n	800b624 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800b610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			max_total_rate_per_spads =
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	214c      	movs	r1, #76	@ 0x4c
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	4413      	add	r3, r2
 800b61e:	334a      	adds	r3, #74	@ 0x4a
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (i = 1; i < presults->active_results; i++) {
 800b624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b628:	3301      	adds	r3, #1
 800b62a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	7c9b      	ldrb	r3, [r3, #18]
 800b632:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b636:	429a      	cmp	r2, r3
 800b638:	d3de      	bcc.n	800b5f8 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800b63a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d103      	bne.n	800b648 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800b640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b644:	623b      	str	r3, [r7, #32]
 800b646:	e00e      	b.n	800b666 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800b648:	89bb      	ldrh	r3, [r7, #12]
 800b64a:	039b      	lsls	r3, r3, #14
 800b64c:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800b64e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b650:	6a3a      	ldr	r2, [r7, #32]
 800b652:	fbb2 f3f3 	udiv	r3, r2, r3
 800b656:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b65e:	d302      	bcc.n	800b666 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800b660:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b664:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800b666:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800b66c:	6939      	ldr	r1, [r7, #16]
 800b66e:	4613      	mov	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	440b      	add	r3, r1
 800b678:	3306      	adds	r3, #6
 800b67a:	4602      	mov	r2, r0
 800b67c:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800b67e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b682:	4618      	mov	r0, r3
 800b684:	372c      	adds	r7, #44	@ 0x2c
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b08a      	sub	sp, #40	@ 0x28
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b696:	2300      	movs	r3, #0
 800b698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3318      	adds	r3, #24
 800b6a0:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	332c      	adds	r3, #44	@ 0x2c
 800b6a6:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	33c2      	adds	r3, #194	@ 0xc2
 800b6ac:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800b6b4:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	3302      	adds	r3, #2
 800b6ba:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	785b      	ldrb	r3, [r3, #1]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d11e      	bne.n	800b718 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10b      	bne.n	800b6f8 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d05d      	beq.n	800b7ba <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	719a      	strb	r2, [r3, #6]
 800b716:	e050      	b.n	800b7ba <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b71e:	461a      	mov	r2, r3
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	4413      	add	r3, r2
 800b724:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d11e      	bne.n	800b76a <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10b      	bne.n	800b74a <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d034      	beq.n	800b7ba <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	719a      	strb	r2, [r3, #6]
 800b768:	e027      	b.n	800b7ba <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b770:	461a      	mov	r2, r3
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	4413      	add	r3, r2
 800b776:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d11d      	bne.n	800b7ba <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800b77e:	7bfb      	ldrb	r3, [r7, #15]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10b      	bne.n	800b79c <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800b7ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d109      	bne.n	800b7d6 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800b7c2:	6a3b      	ldr	r3, [r7, #32]
 800b7c4:	f203 21fe 	addw	r1, r3, #766	@ 0x2fe
 800b7c8:	6a3b      	ldr	r3, [r7, #32]
 800b7ca:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	6978      	ldr	r0, [r7, #20]
 800b7d2:	f7fd f961 	bl	8008a98 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800b7d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3728      	adds	r7, #40	@ 0x28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b089      	sub	sp, #36	@ 0x24
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3318      	adds	r3, #24
 800b7fa:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b802:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d103      	bne.n	800b812 <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	7afa      	ldrb	r2, [r7, #11]
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	e01e      	b.n	800b850 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	461a      	mov	r2, r3
 800b818:	7dfb      	ldrb	r3, [r7, #23]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d111      	bne.n	800b844 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2bff      	cmp	r3, #255	@ 0xff
 800b826:	d103      	bne.n	800b830 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2280      	movs	r2, #128	@ 0x80
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	e005      	b.n	800b83c <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	3301      	adds	r3, #1
 800b836:	b2da      	uxtb	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	2200      	movs	r2, #0
 800b840:	701a      	strb	r2, [r3, #0]
 800b842:	e005      	b.n	800b850 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	3301      	adds	r3, #1
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800b850:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3724      	adds	r7, #36	@ 0x24
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08a      	sub	sp, #40	@ 0x28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	607a      	str	r2, [r7, #4]
 800b86a:	461a      	mov	r2, r3
 800b86c:	460b      	mov	r3, r1
 800b86e:	72fb      	strb	r3, [r7, #11]
 800b870:	4613      	mov	r3, r2
 800b872:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b874:	2300      	movs	r3, #0
 800b876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3318      	adds	r3, #24
 800b87e:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800b888:	7afa      	ldrb	r2, [r7, #11]
 800b88a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe f938 	bl	8009b04 <VL53LX_calc_macro_period_us>
 800b894:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d101      	bne.n	800b8a0 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800b89c:	2301      	movs	r3, #1
 800b89e:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	031b      	lsls	r3, r3, #12
 800b8a4:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	085b      	lsrs	r3, r3, #1
 800b8aa:	69ba      	ldr	r2, [r7, #24]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800b8b0:	69ba      	ldr	r2, [r7, #24]
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b8:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	2bff      	cmp	r3, #255	@ 0xff
 800b8be:	d904      	bls.n	800b8ca <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	22ff      	movs	r2, #255	@ 0xff
 800b8c4:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
 800b8c8:	e004      	b.n	800b8d4 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	7afa      	ldrb	r2, [r7, #11]
 800b8d8:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a



	if (status == VL53LX_ERROR_NONE)
 800b8dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	214b      	movs	r1, #75	@ 0x4b
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f007 f95e 	bl	8012bb0 <VL53LX_WrByte>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800b8fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10a      	bne.n	800b918 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800b908:	461a      	mov	r2, r3
 800b90a:	2160      	movs	r1, #96	@ 0x60
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f007 f94f 	bl	8012bb0 <VL53LX_WrByte>
 800b912:	4603      	mov	r3, r0
 800b914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800b91e:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800b926:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800b928:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d109      	bne.n	800b944 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800b930:	f107 0214 	add.w	r2, r7, #20
 800b934:	2302      	movs	r3, #2
 800b936:	2178      	movs	r1, #120	@ 0x78
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f007 f8cd 	bl	8012ad8 <VL53LX_WriteMulti>
 800b93e:	4603      	mov	r3, r0
 800b940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	893a      	ldrh	r2, [r7, #8]
 800b948:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800b94c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b950:	2b00      	cmp	r3, #0
 800b952:	d108      	bne.n	800b966 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800b954:	893b      	ldrh	r3, [r7, #8]
 800b956:	461a      	mov	r2, r3
 800b958:	211c      	movs	r1, #28
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f007 f952 	bl	8012c04 <VL53LX_WrWord>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800b966:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d108      	bne.n	800b980 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800b96e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b970:	461a      	mov	r2, r3
 800b972:	2164      	movs	r1, #100	@ 0x64
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f007 f945 	bl	8012c04 <VL53LX_WrWord>
 800b97a:	4603      	mov	r3, r0
 800b97c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800b980:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b984:	2b00      	cmp	r3, #0
 800b986:	d108      	bne.n	800b99a <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800b988:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b98a:	461a      	mov	r2, r3
 800b98c:	2166      	movs	r1, #102	@ 0x66
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f007 f938 	bl	8012c04 <VL53LX_WrWord>
 800b994:	4603      	mov	r3, r0
 800b996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800b99a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3728      	adds	r7, #40	@ 0x28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800b9a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9aa:	b0a2      	sub	sp, #136	@ 0x88
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	64f8      	str	r0, [r7, #76]	@ 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b9b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b8:	3318      	adds	r3, #24
 800b9ba:	673b      	str	r3, [r7, #112]	@ 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b9bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9be:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800b9c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800b9c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b9c6:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800b9ca:	3314      	adds	r3, #20
 800b9cc:	66bb      	str	r3, [r7, #104]	@ 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800b9ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b9d0:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800b9d4:	3318      	adds	r3, #24
 800b9d6:	667b      	str	r3, [r7, #100]	@ 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800b9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9da:	663b      	str	r3, [r7, #96]	@ 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800b9dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9de:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b9e2:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800b9e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800b9ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		pxmonitor->VL53LX_p_016;
 800b9f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800b9f4:	4413      	add	r3, r2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	461c      	mov	r4, r3
 800b9fa:	4615      	mov	r5, r2
 800b9fc:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
	if (peak_duration_us == 0)
 800ba00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d103      	bne.n	800ba10 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800ba08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ba0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800ba10:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800ba14:	4622      	mov	r2, r4
 800ba16:	462b      	mov	r3, r5
 800ba18:	f04f 0000 	mov.w	r0, #0
 800ba1c:	f04f 0100 	mov.w	r1, #0
 800ba20:	0159      	lsls	r1, r3, #5
 800ba22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ba26:	0150      	lsls	r0, r2, #5
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	ebb2 0804 	subs.w	r8, r2, r4
 800ba30:	eb63 0905 	sbc.w	r9, r3, r5
 800ba34:	f04f 0200 	mov.w	r2, #0
 800ba38:	f04f 0300 	mov.w	r3, #0
 800ba3c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800ba40:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800ba44:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800ba48:	4690      	mov	r8, r2
 800ba4a:	4699      	mov	r9, r3
 800ba4c:	eb18 0304 	adds.w	r3, r8, r4
 800ba50:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba52:	eb49 0305 	adc.w	r3, r9, r5
 800ba56:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba58:	f04f 0200 	mov.w	r2, #0
 800ba5c:	f04f 0300 	mov.w	r3, #0
 800ba60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ba64:	4629      	mov	r1, r5
 800ba66:	00cb      	lsls	r3, r1, #3
 800ba68:	4621      	mov	r1, r4
 800ba6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba6e:	4621      	mov	r1, r4
 800ba70:	00ca      	lsls	r2, r1, #3
 800ba72:	4610      	mov	r0, r2
 800ba74:	4619      	mov	r1, r3
 800ba76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba7e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ba80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ba84:	f7f4 fc24 	bl	80002d0 <__aeabi_uldivmod>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800ba90:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800ba94:	4622      	mov	r2, r4
 800ba96:	462b      	mov	r3, r5
 800ba98:	f04f 0000 	mov.w	r0, #0
 800ba9c:	f04f 0100 	mov.w	r1, #0
 800baa0:	0159      	lsls	r1, r3, #5
 800baa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800baa6:	0150      	lsls	r0, r2, #5
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	ebb2 0a04 	subs.w	sl, r2, r4
 800bab0:	eb63 0b05 	sbc.w	fp, r3, r5
 800bab4:	f04f 0200 	mov.w	r2, #0
 800bab8:	f04f 0300 	mov.w	r3, #0
 800babc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bac0:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800bac4:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800bac8:	4692      	mov	sl, r2
 800baca:	469b      	mov	fp, r3
 800bacc:	eb1a 0304 	adds.w	r3, sl, r4
 800bad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bad2:	eb4b 0305 	adc.w	r3, fp, r5
 800bad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bad8:	f04f 0200 	mov.w	r2, #0
 800badc:	f04f 0300 	mov.w	r3, #0
 800bae0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800bae4:	4629      	mov	r1, r5
 800bae6:	00cb      	lsls	r3, r1, #3
 800bae8:	4621      	mov	r1, r4
 800baea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800baee:	4621      	mov	r1, r4
 800baf0:	00ca      	lsls	r2, r1, #3
 800baf2:	4610      	mov	r0, r2
 800baf4:	4619      	mov	r1, r3
 800baf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bafa:	2200      	movs	r2, #0
 800bafc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bafe:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800bb00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb04:	f7f4 fbe4 	bl	80002d0 <__aeabi_uldivmod>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800bb10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bb16:	8ad2      	ldrh	r2, [r2, #22]
 800bb18:	fb02 f303 	mul.w	r3, r2, r3
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	623b      	str	r3, [r7, #32]
 800bb20:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb22:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800bb26:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	if (temp64z == 0)
 800bb2a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	d105      	bne.n	800bb3e <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800bb32:	f04f 0201 	mov.w	r2, #1
 800bb36:	f04f 0300 	mov.w	r3, #0
 800bb3a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp64a = temp64a * 1000 * 256;
 800bb3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	f04f 0400 	mov.w	r4, #0
 800bb4a:	f04f 0500 	mov.w	r5, #0
 800bb4e:	015d      	lsls	r5, r3, #5
 800bb50:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800bb54:	0154      	lsls	r4, r2, #5
 800bb56:	4622      	mov	r2, r4
 800bb58:	462b      	mov	r3, r5
 800bb5a:	1a14      	subs	r4, r2, r0
 800bb5c:	61bc      	str	r4, [r7, #24]
 800bb5e:	eb63 0301 	sbc.w	r3, r3, r1
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	f04f 0200 	mov.w	r2, #0
 800bb68:	f04f 0300 	mov.w	r3, #0
 800bb6c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800bb70:	464c      	mov	r4, r9
 800bb72:	00a3      	lsls	r3, r4, #2
 800bb74:	4644      	mov	r4, r8
 800bb76:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800bb7a:	4644      	mov	r4, r8
 800bb7c:	00a2      	lsls	r2, r4, #2
 800bb7e:	4614      	mov	r4, r2
 800bb80:	461d      	mov	r5, r3
 800bb82:	4623      	mov	r3, r4
 800bb84:	181b      	adds	r3, r3, r0
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	462b      	mov	r3, r5
 800bb8a:	eb41 0303 	adc.w	r3, r1, r3
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	f04f 0200 	mov.w	r2, #0
 800bb94:	f04f 0300 	mov.w	r3, #0
 800bb98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	02cb      	lsls	r3, r1, #11
 800bba0:	4621      	mov	r1, r4
 800bba2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800bba6:	4621      	mov	r1, r4
 800bba8:	02ca      	lsls	r2, r1, #11
 800bbaa:	461c      	mov	r4, r3
 800bbac:	4613      	mov	r3, r2
 800bbae:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800bbb2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800bbb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800bbba:	f7f4 fb89 	bl	80002d0 <__aeabi_uldivmod>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = temp64a * 1000 * 256;
 800bbc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	f04f 0400 	mov.w	r4, #0
 800bbd2:	f04f 0500 	mov.w	r5, #0
 800bbd6:	015d      	lsls	r5, r3, #5
 800bbd8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800bbdc:	0154      	lsls	r4, r2, #5
 800bbde:	4622      	mov	r2, r4
 800bbe0:	462b      	mov	r3, r5
 800bbe2:	1a14      	subs	r4, r2, r0
 800bbe4:	60bc      	str	r4, [r7, #8]
 800bbe6:	eb63 0301 	sbc.w	r3, r3, r1
 800bbea:	60fb      	str	r3, [r7, #12]
 800bbec:	f04f 0200 	mov.w	r2, #0
 800bbf0:	f04f 0300 	mov.w	r3, #0
 800bbf4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800bbf8:	464c      	mov	r4, r9
 800bbfa:	00a3      	lsls	r3, r4, #2
 800bbfc:	4644      	mov	r4, r8
 800bbfe:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800bc02:	4644      	mov	r4, r8
 800bc04:	00a2      	lsls	r2, r4, #2
 800bc06:	4614      	mov	r4, r2
 800bc08:	461d      	mov	r5, r3
 800bc0a:	4623      	mov	r3, r4
 800bc0c:	181b      	adds	r3, r3, r0
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	462b      	mov	r3, r5
 800bc12:	eb41 0303 	adc.w	r3, r1, r3
 800bc16:	607b      	str	r3, [r7, #4]
 800bc18:	f04f 0200 	mov.w	r2, #0
 800bc1c:	f04f 0300 	mov.w	r3, #0
 800bc20:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bc24:	4629      	mov	r1, r5
 800bc26:	02cb      	lsls	r3, r1, #11
 800bc28:	4621      	mov	r1, r4
 800bc2a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800bc2e:	4621      	mov	r1, r4
 800bc30:	02ca      	lsls	r2, r1, #11
 800bc32:	461c      	mov	r4, r3
 800bc34:	4613      	mov	r3, r2
 800bc36:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800bc3a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800bc3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800bc42:	f7f4 fb45 	bl	80002d0 <__aeabi_uldivmod>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	pint->required_samples = (uint32_t)temp64a;
 800bc4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc52:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800bc54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d802      	bhi.n	800bc62 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800bc5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc5e:	2202      	movs	r2, #2
 800bc60:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800bc62:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3788      	adds	r7, #136	@ 0x88
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bc70 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b096      	sub	sp, #88	@ 0x58
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3318      	adds	r3, #24
 800bc88:	637b      	str	r3, [r7, #52]	@ 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	long int SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc8c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800bc90:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800bc92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc94:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800bc98:	331c      	adds	r3, #28
 800bc9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800bc9c:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d107      	bne.n	800bcb4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	889b      	ldrh	r3, [r3, #4]
 800bca8:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	609a      	str	r2, [r3, #8]
 800bcb2:	e002      	b.n	800bcba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800bcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	653b      	str	r3, [r7, #80]	@ 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc2:	899b      	ldrh	r3, [r3, #12]
 800bcc4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcca:	89db      	ldrh	r3, [r3, #14]
 800bccc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d004      	beq.n	800bce4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d126      	bne.n	800bd32 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800bce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce6:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d022      	beq.n	800bd32 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800bcec:	f107 0317 	add.w	r3, r7, #23
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f000 fea7 	bl	800ca46 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800bd02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd04:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d003      	beq.n	800bd14 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800bd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd12:	e006      	b.n	800bd22 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800bd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1a:	3202      	adds	r2, #2
 800bd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd20:	653b      	str	r3, [r7, #80]	@ 0x50

		orig_x_gradient =
 800bd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd24:	889b      	ldrh	r3, [r3, #4]
 800bd26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800bd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2c:	88db      	ldrh	r3, [r3, #6]
 800bd2e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10a      	bne.n	800bd52 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800bd3c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d106      	bne.n	800bd52 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	795b      	ldrb	r3, [r3, #5]
 800bd48:	f043 0301 	orr.w	r3, r3, #1
 800bd4c:	b2da      	uxtb	r2, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800bd5c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d106      	bne.n	800bd72 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	795b      	ldrb	r3, [r3, #5]
 800bd68:	f043 0302 	orr.w	r3, r3, #2
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800bd72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	653b      	str	r3, [r7, #80]	@ 0x50



	if (pconfig->user_scaler_set == 1) {
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d108      	bne.n	800bd98 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd8a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bd92:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800bd96:	e017      	b.n	800bdc8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x158>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800bd98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bd9c:	019a      	lsls	r2, r3, #6
 800bd9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bda0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800bdae:	855a      	strh	r2, [r3, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800bdb0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800bdb4:	019a      	lsls	r2, r3, #6
 800bdb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdbc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800bdc6:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d12a      	bne.n	800be28 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b8>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800bdda:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800bdde:	647b      	str	r3, [r7, #68]	@ 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800bde0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bde2:	119b      	asrs	r3, r3, #6
 800bde4:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800bde6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bde8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdec:	db02      	blt.n	800bdf4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x184>
			itemp32 = 0xFFFF;
 800bdee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bdf2:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800bdf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdf6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800be04:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800be08:	647b      	str	r3, [r7, #68]	@ 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800be0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be0c:	119b      	asrs	r3, r3, #6
 800be0e:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800be10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be16:	db02      	blt.n	800be1e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
			itemp32 = 0xFFFF;
 800be18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be1c:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800be1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be20:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	81da      	strh	r2, [r3, #14]
 800be26:	e042      	b.n	800beae <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>
	} else if (pconfig->scaler_calc_method == 1) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d13d      	bne.n	800beae <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800be36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800be3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be3e:	2b00      	cmp	r3, #0
 800be40:	da00      	bge.n	800be44 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d4>
 800be42:	330f      	adds	r3, #15
 800be44:	111b      	asrs	r3, r3, #4
 800be46:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800be48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800be4e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800be52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be54:	4413      	add	r3, r2
 800be56:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800be58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be5e:	db02      	blt.n	800be66 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
			itemp32 = 0xFFFF;
 800be60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be64:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800be66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be68:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800be72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800be78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be7a:	4a55      	ldr	r2, [pc, #340]	@ (800bfd0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x360>)
 800be7c:	fb82 1203 	smull	r1, r2, r2, r3
 800be80:	1152      	asrs	r2, r2, #5
 800be82:	17db      	asrs	r3, r3, #31
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800be88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800be8e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800be92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be94:	4413      	add	r3, r2
 800be96:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800be98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be9e:	db02      	blt.n	800bea6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x236>
			itemp32 = 0xFFFF;
 800bea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bea4:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800bea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bea8:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	785b      	ldrb	r3, [r3, #1]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d17f      	bne.n	800bfb6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
 800beb6:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d07b      	beq.n	800bfb6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2201      	movs	r2, #1
 800bec2:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	62bb      	str	r3, [r7, #40]	@ 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800beca:	f107 0317 	add.w	r3, r7, #23
 800bece:	4619      	mov	r1, r3
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 fdb8 	bl	800ca46 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800bed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bed8:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800bedc:	627b      	str	r3, [r7, #36]	@ 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800bede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee0:	3308      	adds	r3, #8
 800bee2:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((histo_merge_nb > 0) &&
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d049      	beq.n	800bf7e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800beea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beec:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
		if ((histo_merge_nb > 0) &&
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d144      	bne.n	800bf7e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800bef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d041      	beq.n	800bf7e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(nXtalk != 0)) {
			cXtalk =
 800befa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = ((long int)(nXtalk) - (long int)(cXtalk))/512;
 800bf00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da01      	bge.n	800bf0e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x29e>
 800bf0a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800bf0e:	125b      	asrs	r3, r3, #9
 800bf10:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d005      	beq.n	800bf24 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b4>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf1c:	461a      	mov	r2, r3
			if ((max ==  0)||
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	4293      	cmp	r3, r2
 800bf22:	db03      	blt.n	800bf2c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2bc>
				pout->new_xtalk_applied_flag = 0;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2200      	movs	r2, #0
 800bf28:	719a      	strb	r2, [r3, #6]
 800bf2a:	e028      	b.n	800bf7e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			else {
				incXtalk = nXtalk / max;
 800bf2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf30:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf34:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (i = 0; i < max-1; i++) {
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800bf40:	e014      	b.n	800bf6c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fc>
					cval += incXtalk;
 800bf42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	4413      	add	r3, r2
 800bf48:	63fb      	str	r3, [r7, #60]	@ 0x3c
					*pcpo = cval + cval/100;
 800bf4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf4c:	4a21      	ldr	r2, [pc, #132]	@ (800bfd4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x364>)
 800bf4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf52:	095a      	lsrs	r2, r3, #5
 800bf54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf56:	441a      	add	r2, r3
 800bf58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf5a:	601a      	str	r2, [r3, #0]
					pcpo++;
 800bf5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf5e:	3304      	adds	r3, #4
 800bf60:	643b      	str	r3, [r7, #64]	@ 0x40
				for (i = 0; i < max-1; i++) {
 800bf62:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bf66:	3301      	adds	r3, #1
 800bf68:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800bf6c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800bf70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf72:	3b01      	subs	r3, #1
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d3e4      	bcc.n	800bf42 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				}
				*pcpo = nXtalk;
 800bf78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf7c:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	799b      	ldrb	r3, [r3, #6]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d017      	beq.n	800bfb6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf8c:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800bf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf96:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa0:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	789b      	ldrb	r3, [r3, #2]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d105      	bne.n	800bfb6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

			pconfig->smudge_corr_apply_enabled = 0;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800bfb6:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d002      	beq.n	800bfc4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x354>
		pout->smudge_corr_valid = 1;
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800bfc4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3758      	adds	r7, #88	@ 0x58
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	66666667 	.word	0x66666667
 800bfd4:	51eb851f 	.word	0x51eb851f

0800bfd8 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800bfd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfdc:	b0a2      	sub	sp, #136	@ 0x88
 800bfde:	af02      	add	r7, sp, #8
 800bfe0:	6278      	str	r0, [r7, #36]	@ 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfea:	3318      	adds	r3, #24
 800bfec:	66bb      	str	r3, [r7, #104]	@ 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800bfee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800bff4:	667b      	str	r3, [r7, #100]	@ 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800bff6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bff8:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800bffc:	3314      	adds	r3, #20
 800bffe:	663b      	str	r3, [r7, #96]	@ 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800c000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c002:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800c006:	3318      	adds	r3, #24
 800c008:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800c00a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c00c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c010:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800c012:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c014:	657b      	str	r3, [r7, #84]	@ 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800c016:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c018:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800c01c:	653b      	str	r3, [r7, #80]	@ 0x50

	uint8_t	run_smudge_detection = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t merging_complete = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t	run_nodetect = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t ambient_check = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int32_t itemp32 = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint64_t utemp64 = 0;
 800c03a:	f04f 0200 	mov.w	r2, #0
 800c03e:	f04f 0300 	mov.w	r3, #0
 800c042:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800c046:	2300      	movs	r3, #0
 800c048:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint32_t xtalk_offset_out = 0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t xtalk_offset_in = 0;
 800c050:	2300      	movs	r3, #0
 800c052:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t current_xtalk = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t smudge_margin_adjusted = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t i = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t nodetect_index = 0;
 800c062:	2300      	movs	r3, #0
 800c064:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800c068:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800c06c:	4619      	mov	r1, r3
 800c06e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c070:	f000 fce9 	bl	800ca46 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800c074:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d004      	beq.n	800c086 <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800c07c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c07e:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
	if ((histo_merge_nb == 0) ||
 800c082:	2b01      	cmp	r3, #1
 800c084:	d002      	beq.n	800c08c <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800c086:	2301      	movs	r3, #1
 800c088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800c08c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800c08e:	f000 fb10 	bl	800c6b2 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800c092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00a      	beq.n	800c0b0 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800c09a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c09c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c09e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c0a2:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800c0a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0a8:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d901      	bls.n	800c0b4 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e000      	b.n	800c0b6 <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800c0ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0bc:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d106      	bne.n	800c0d2 <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800c0c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0c6:	f893 2184 	ldrb.w	r2, [r3, #388]	@ 0x184
 800c0ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d101      	bne.n	800c0d6 <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e000      	b.n	800c0d8 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800c0d6:	2300      	movs	r3, #0
	merging_complete =
 800c0d8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800c0dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0de:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d10e      	bne.n	800c102 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800c0e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00a      	beq.n	800c102 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800c0ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0ee:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
		ambient_check &&
 800c0f2:	2b09      	cmp	r3, #9
 800c0f4:	d105      	bne.n	800c102 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800c0f6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e000      	b.n	800c104 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800c102:	2300      	movs	r3, #0
	run_smudge_detection =
 800c104:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800c108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c10a:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
 800c10e:	2b09      	cmp	r3, #9
 800c110:	f000 80a6 	beq.w	800c260 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800c114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c116:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800c118:	2b01      	cmp	r3, #1
 800c11a:	f040 80a1 	bne.w	800c260 <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800c11e:	2302      	movs	r3, #2
 800c120:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800c124:	2300      	movs	r3, #0
 800c126:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800c12a:	e02d      	b.n	800c188 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800c12c:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800c130:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c132:	234c      	movs	r3, #76	@ 0x4c
 800c134:	fb01 f303 	mul.w	r3, r1, r3
 800c138:	4413      	add	r3, r2
 800c13a:	335e      	adds	r3, #94	@ 0x5e
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b09      	cmp	r3, #9
 800c140:	d11d      	bne.n	800c17e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800c142:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800c146:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c148:	234c      	movs	r3, #76	@ 0x4c
 800c14a:	fb01 f303 	mul.w	r3, r1, r3
 800c14e:	4413      	add	r3, r2
 800c150:	335a      	adds	r3, #90	@ 0x5a
 800c152:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c156:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800c158:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c15a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800c15c:	429a      	cmp	r2, r3
 800c15e:	dc03      	bgt.n	800c168 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c166:	e00a      	b.n	800c17e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800c168:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d106      	bne.n	800c17e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800c170:	2301      	movs	r3, #1
 800c172:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						nodetect_index = i;
 800c176:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c17a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800c17e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c182:	3301      	adds	r3, #1
 800c184:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800c188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c18a:	7c9a      	ldrb	r2, [r3, #18]
 800c18c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c190:	4293      	cmp	r3, r2
 800c192:	d3cb      	bcc.n	800c12c <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800c194:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d102      	bne.n	800c1a2 <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800c19c:	2300      	movs	r3, #0
 800c19e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800c1a2:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
		amr =
 800c1a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1a8:	234c      	movs	r3, #76	@ 0x4c
 800c1aa:	fb01 f303 	mul.w	r3, r1, r3
 800c1ae:	4413      	add	r3, r2
 800c1b0:	3348      	adds	r3, #72	@ 0x48
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	867b      	strh	r3, [r7, #50]	@ 0x32

		if (run_nodetect == 1) {
 800c1b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d150      	bne.n	800c260 <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800c1be:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	469a      	mov	sl, r3
 800c1c4:	4693      	mov	fp, r2
 800c1c6:	4652      	mov	r2, sl
 800c1c8:	465b      	mov	r3, fp
 800c1ca:	f04f 0000 	mov.w	r0, #0
 800c1ce:	f04f 0100 	mov.w	r1, #0
 800c1d2:	0159      	lsls	r1, r3, #5
 800c1d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c1d8:	0150      	lsls	r0, r2, #5
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	ebb2 040a 	subs.w	r4, r2, sl
 800c1e2:	eb63 050b 	sbc.w	r5, r3, fp
 800c1e6:	f04f 0200 	mov.w	r2, #0
 800c1ea:	f04f 0300 	mov.w	r3, #0
 800c1ee:	00ab      	lsls	r3, r5, #2
 800c1f0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c1f4:	00a2      	lsls	r2, r4, #2
 800c1f6:	4614      	mov	r4, r2
 800c1f8:	461d      	mov	r5, r3
 800c1fa:	eb14 080a 	adds.w	r8, r4, sl
 800c1fe:	eb45 090b 	adc.w	r9, r5, fp
 800c202:	f04f 0200 	mov.w	r2, #0
 800c206:	f04f 0300 	mov.w	r3, #0
 800c20a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c20e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c216:	4690      	mov	r8, r2
 800c218:	4699      	mov	r9, r3
 800c21a:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40


			utemp64 = utemp64 << 9;
 800c21e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c222:	f04f 0200 	mov.w	r2, #0
 800c226:	f04f 0300 	mov.w	r3, #0
 800c22a:	024b      	lsls	r3, r1, #9
 800c22c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800c230:	0242      	lsls	r2, r0, #9
 800c232:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800c236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c23a:	2200      	movs	r2, #0
 800c23c:	61bb      	str	r3, [r7, #24]
 800c23e:	61fa      	str	r2, [r7, #28]
 800c240:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c244:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800c248:	4621      	mov	r1, r4
 800c24a:	428a      	cmp	r2, r1
 800c24c:	4629      	mov	r1, r5
 800c24e:	418b      	sbcs	r3, r1
 800c250:	d203      	bcs.n	800c25a <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800c252:	2301      	movs	r3, #1
 800c254:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c258:	e002      	b.n	800c260 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		}
	}


	if (run_smudge_detection) {
 800c260:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c264:	2b00      	cmp	r3, #0
 800c266:	f000 810b 	beq.w	800c480 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800c26a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c26c:	2200      	movs	r2, #0
 800c26e:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800c270:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c272:	f7ff fb98 	bl	800b9a6 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800c276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c278:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800c27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800c27e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	62fb      	str	r3, [r7, #44]	@ 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800c284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	63bb      	str	r3, [r7, #56]	@ 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800c28a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c28c:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	637b      	str	r3, [r7, #52]	@ 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800c292:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c296:	1ad2      	subs	r2, r2, r3
 800c298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c29a:	4413      	add	r3, r2
 800c29c:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800c29e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da02      	bge.n	800c2aa <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800c2a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2a6:	425b      	negs	r3, r3
 800c2a8:	67bb      	str	r3, [r7, #120]	@ 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800c2aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	dd0c      	ble.n	800c2d0 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800c2b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted)) {
 800c2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800c2ba:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800c2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	da03      	bge.n	800c2ca <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800c2c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	709a      	strb	r2, [r3, #2]
 800c2c8:	e002      	b.n	800c2d0 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800c2ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2cc:	2202      	movs	r2, #2
 800c2ce:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800c2d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2d8:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800c2da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d906      	bls.n	800c2f4 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800c2e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c2f2:	e014      	b.n	800c31e <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800c2f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c2fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	6139      	str	r1, [r7, #16]
 800c300:	6178      	str	r0, [r7, #20]
 800c302:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c306:	4621      	mov	r1, r4
 800c308:	1851      	adds	r1, r2, r1
 800c30a:	60b9      	str	r1, [r7, #8]
 800c30c:	4629      	mov	r1, r5
 800c30e:	eb43 0101 	adc.w	r1, r3, r1
 800c312:	60f9      	str	r1, [r7, #12]
 800c314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c316:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c31a:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800c31e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	d202      	bcs.n	800c330 <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800c32a:	2301      	movs	r3, #1
 800c32c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800c330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c332:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	603b      	str	r3, [r7, #0]
 800c33e:	607a      	str	r2, [r7, #4]
 800c340:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c344:	f7f3 ffc4 	bl	80002d0 <__aeabi_uldivmod>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
		xtalk_offset_out =
 800c34c:	4613      	mov	r3, r2
 800c34e:	673b      	str	r3, [r7, #112]	@ 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800c350:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c354:	1ad2      	subs	r2, r2, r3
 800c356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c358:	4413      	add	r3, r2
 800c35a:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800c35c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c35e:	2b00      	cmp	r3, #0
 800c360:	da02      	bge.n	800c368 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800c362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c364:	425b      	negs	r3, r3
 800c366:	67bb      	str	r3, [r7, #120]	@ 0x78

		if (continue_processing == CONT_CONTINUE &&
 800c368:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d112      	bne.n	800c396 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800c370:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c372:	69db      	ldr	r3, [r3, #28]
 800c374:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800c376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c378:	4293      	cmp	r3, r2
 800c37a:	db0c      	blt.n	800c396 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800c37c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted))
 800c37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800c380:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800c382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c384:	429a      	cmp	r2, r3
 800c386:	da03      	bge.n	800c390 <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800c388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c38a:	2201      	movs	r2, #1
 800c38c:	70da      	strb	r2, [r3, #3]
 800c38e:	e002      	b.n	800c396 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800c390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c392:	2202      	movs	r2, #2
 800c394:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800c396:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d108      	bne.n	800c3b0 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800c39e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3a0:	69db      	ldr	r3, [r3, #28]
 800c3a2:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800c3a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	da02      	bge.n	800c3b0 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77



		pout->smudge_corr_clipped = 0;
 800c3b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800c3b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d112      	bne.n	800c3e4 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800c3be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00e      	beq.n	800c3e4 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800c3c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800c3ce:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800c3d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d905      	bls.n	800c3e4 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800c3d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3da:	2201      	movs	r2, #1
 800c3dc:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800c3de:	2302      	movs	r3, #2
 800c3e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800c3e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3e6:	7c1b      	ldrb	r3, [r3, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d007      	beq.n	800c3fc <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800c3ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3ee:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800c3f0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d902      	bls.n	800c3fc <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800c3f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800c3fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3fe:	7c1b      	ldrb	r3, [r3, #16]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d107      	bne.n	800c414 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800c404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c406:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800c408:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d202      	bcs.n	800c414 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800c40e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800c414:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c416:	089b      	lsrs	r3, r3, #2
 800c418:	673b      	str	r3, [r7, #112]	@ 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800c41a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c41c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c420:	d301      	bcc.n	800c426 <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800c422:	4b3f      	ldr	r3, [pc, #252]	@ (800c520 <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 800c424:	673b      	str	r3, [r7, #112]	@ 0x70


		if (continue_processing == CONT_CONTINUE) {
 800c426:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10d      	bne.n	800c44a <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800c42e:	2300      	movs	r3, #0
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	2301      	movs	r3, #1
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c438:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c43a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c43c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c43e:	f7ff fc17 	bl	800bc70 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800c442:	2302      	movs	r3, #2
 800c444:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c448:	e009      	b.n	800c45e <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800c44a:	2301      	movs	r3, #1
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	2301      	movs	r3, #1
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c454:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c456:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c458:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c45a:	f7ff fc09 	bl	800bc70 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800c45e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c462:	2b02      	cmp	r3, #2
 800c464:	d10c      	bne.n	800c480 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800c466:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800c468:	f04f 0200 	mov.w	r2, #0
 800c46c:	f04f 0300 	mov.w	r3, #0
 800c470:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800c474:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c476:	2200      	movs	r2, #0
 800c478:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800c47a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c47c:	2200      	movs	r2, #0
 800c47e:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800c480:	2300      	movs	r3, #0
 800c482:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (run_nodetect == 1) {
 800c486:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d140      	bne.n	800c510 <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 800c48e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	1c5a      	adds	r2, r3, #1
 800c494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c496:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800c498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c49a:	691a      	ldr	r2, [r3, #16]
 800c49c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d202      	bcs.n	800c4aa <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800c4aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4ae:	673b      	str	r3, [r7, #112]	@ 0x70

		if (continue_processing == CONT_CONTINUE) {
 800c4b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d110      	bne.n	800c4da <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	9301      	str	r3, [sp, #4]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4c4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c4c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4c8:	f7ff fbd2 	bl	800bc70 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800c4cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c4d8:	e009      	b.n	800c4ee <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800c4da:	2301      	movs	r3, #1
 800c4dc:	9301      	str	r3, [sp, #4]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4e6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c4e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4ea:	f7ff fbc1 	bl	800bc70 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800c4ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d10c      	bne.n	800c510 <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 800c4f6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800c4f8:	f04f 0200 	mov.w	r2, #0
 800c4fc:	f04f 0300 	mov.w	r3, #0
 800c500:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800c504:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c506:	2200      	movs	r2, #0
 800c508:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800c50a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c50c:	2200      	movs	r2, #0
 800c50e:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c510:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
}
 800c514:	4618      	mov	r0, r3
 800c516:	3780      	adds	r7, #128	@ 0x80
 800c518:	46bd      	mov	sp, r7
 800c51a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c51e:	bf00      	nop
 800c520:	0003ffff 	.word	0x0003ffff

0800c524 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c52c:	2300      	movs	r3, #0
 800c52e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3318      	adds	r3, #24
 800c534:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800c53c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c544:	2201      	movs	r2, #1
 800c546:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c550:	2201      	movs	r2, #1
 800c552:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c568:	2200      	movs	r2, #0
 800c56a:	f8a3 2398 	strh.w	r2, [r3, #920]	@ 0x398
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c574:	461a      	mov	r2, r3
 800c576:	2364      	movs	r3, #100	@ 0x64
 800c578:	f8c2 339c 	str.w	r3, [r2, #924]	@ 0x39c
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c582:	461a      	mov	r2, r3
 800c584:	2300      	movs	r3, #0
 800c586:	f8c2 33a0 	str.w	r3, [r2, #928]	@ 0x3a0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c590:	2200      	movs	r2, #0
 800c592:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c59c:	461a      	mov	r2, r3
 800c59e:	23c8      	movs	r3, #200	@ 0xc8
 800c5a0:	f8c2 33a8 	str.w	r3, [r2, #936]	@ 0x3a8
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c5b0:	f8c2 33ac 	str.w	r3, [r2, #940]	@ 0x3ac
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800c5c0:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c5d0:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5da:	461a      	mov	r2, r3
 800c5dc:	2380      	movs	r3, #128	@ 0x80
 800c5de:	f8c2 33b8 	str.w	r3, [r2, #952]	@ 0x3b8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5f8:	f8a3 23be 	strh.w	r2, [r3, #958]	@ 0x3be
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c602:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c606:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c610:	2200      	movs	r2, #0
 800c612:	f883 23c2 	strb.w	r2, [r3, #962]	@ 0x3c2
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c61c:	461a      	mov	r2, r3
 800c61e:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
 800c622:	f8c2 33c4 	str.w	r3, [r2, #964]	@ 0x3c4
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c62c:	461a      	mov	r2, r3
 800c62e:	2328      	movs	r3, #40	@ 0x28
 800c630:	f8c2 33c8 	str.w	r3, [r2, #968]	@ 0x3c8
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c63a:	461a      	mov	r2, r3
 800c63c:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 800c640:	f8c2 33cc 	str.w	r3, [r2, #972]	@ 0x3cc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c64a:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800c64e:	f8a3 23d0 	strh.w	r2, [r3, #976]	@ 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c658:	461a      	mov	r2, r3
 800c65a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800c65e:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c668:	461a      	mov	r2, r3
 800c66a:	2300      	movs	r3, #0
 800c66c:	f8c2 33d8 	str.w	r3, [r2, #984]	@ 0x3d8
	pdev->smudge_corrector_internals.required_samples = 0;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c676:	461a      	mov	r2, r3
 800c678:	2300      	movs	r3, #0
 800c67a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
	pdev->smudge_corrector_internals.accumulator = 0;
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 800c684:	4619      	mov	r1, r3
 800c686:	f04f 0200 	mov.w	r2, #0
 800c68a:	f04f 0300 	mov.w	r3, #0
 800c68e:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c698:	461a      	mov	r2, r3
 800c69a:	2300      	movs	r3, #0
 800c69c:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 f806 	bl	800c6b2 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800c6a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b085      	sub	sp, #20
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c6c4:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	2200      	movs	r2, #0
 800c700:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800c702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	3318      	adds	r3, #24
 800c722:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c72a:	461a      	mov	r2, r3
 800c72c:	2300      	movs	r3, #0
 800c72e:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c738:	2200      	movs	r2, #0
 800c73a:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c744:	2200      	movs	r2, #0
 800c746:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 800c750:	3304      	adds	r3, #4
 800c752:	2218      	movs	r2, #24
 800c754:	2100      	movs	r1, #0
 800c756:	4618      	mov	r0, r3
 800c758:	f010 fba0 	bl	801ce9c <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800c75c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	3318      	adds	r3, #24
 800c778:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c780:	2203      	movs	r2, #3
 800c782:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c78c:	2200      	movs	r2, #0
 800c78e:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc

	LOG_FUNCTION_END(status);

	return status;
 800c7e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3714      	adds	r7, #20
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b085      	sub	sp, #20
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c800:	2300      	movs	r3, #0
 800c802:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3318      	adds	r3, #24
 800c808:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c810:	22ff      	movs	r2, #255	@ 0xff
 800c812:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c828:	461a      	mov	r2, r3
 800c82a:	2300      	movs	r3, #0
 800c82c:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c836:	2200      	movs	r2, #0
 800c838:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c842:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800c846:	2b00      	cmp	r3, #0
 800c848:	d007      	beq.n	800c85a <VL53LX_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c850:	f893 23f4 	ldrb.w	r2, [r3, #1012]	@ 0x3f4
		pdev->stat_nvm.vhv_config__init =
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c860:	f893 33f5 	ldrb.w	r3, [r3, #1013]	@ 0x3f5
 800c864:	2b00      	cmp	r3, #0
 800c866:	d007      	beq.n	800c878 <VL53LX_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c86e:	f893 23f5 	ldrb.w	r2, [r3, #1013]	@ 0x3f5
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327

	LOG_FUNCTION_END(status);

	return status;
 800c880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	3318      	adds	r3, #24
 800c89c:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f893 22e3 	ldrb.w	r2, [r3, #739]	@ 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8ae:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f893 22e0 	ldrb.w	r2, [r3, #736]	@ 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8be:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 800c8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800c8da:	f003 0303 	and.w	r3, r3, #3
 800c8de:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8e6:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c8ee:	4413      	add	r3, r2
 800c8f0:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c906:	f893 235e 	ldrb.w	r2, [r3, #862]	@ 0x35e
	pdev->low_power_auto_data.first_run_phasecal_result =
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c910:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c91a:	f893 23f6 	ldrb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

	LOG_FUNCTION_END(status);

	return status;
 800c924:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800c934:	b480      	push	{r7}
 800c936:	b087      	sub	sp, #28
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3318      	adds	r3, #24
 800c940:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800c948:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	8a1b      	ldrh	r3, [r3, #16]
 800c952:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	891b      	ldrh	r3, [r3, #8]
 800c958:	4413      	add	r3, r2
	utemp32a =
 800c95a:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c962:	d302      	bcc.n	800c96a <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800c964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c968:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	041b      	lsls	r3, r3, #16
 800c96e:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800c976:	2b00      	cmp	r3, #0
 800c978:	d102      	bne.n	800c980 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800c97a:	23f1      	movs	r3, #241	@ 0xf1
 800c97c:	75fb      	strb	r3, [r7, #23]
 800c97e:	e040      	b.n	800ca02 <VL53LX_low_power_auto_update_DSS+0xce>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800c986:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c98e:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c996:	461a      	mov	r2, r3
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800c9a4:	041b      	lsls	r3, r3, #16
 800c9a6:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9ae:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d102      	bne.n	800c9bc <VL53LX_low_power_auto_update_DSS+0x88>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800c9b6:	23f1      	movs	r3, #241	@ 0xf1
 800c9b8:	75fb      	strb	r3, [r7, #23]
 800c9ba:	e022      	b.n	800ca02 <VL53LX_low_power_auto_update_DSS+0xce>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9c2:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
			utemp32a = utemp32a /
 800c9c6:	693a      	ldr	r2, [r7, #16]
 800c9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9cc:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9d4:	d302      	bcc.n	800c9dc <VL53LX_low_power_auto_update_DSS+0xa8>
				utemp32a = 0xFFFF;
 800c9d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c9da:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9e6:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9f0:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800ca02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca06:	f113 0f0f 	cmn.w	r3, #15
 800ca0a:	d114      	bne.n	800ca36 <VL53LX_low_power_auto_update_DSS+0x102>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ca16:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca20:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800ca36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b087      	sub	sp, #28
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	3318      	adds	r3, #24
 800ca54:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ca56:	2300      	movs	r3, #0
 800ca58:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	f893 33d0 	ldrb.w	r3, [r3, #976]	@ 0x3d0
 800ca64:	2b07      	cmp	r3, #7
 800ca66:	bf0c      	ite	eq
 800ca68:	2301      	moveq	r3, #1
 800ca6a:	2300      	movne	r3, #0
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800ca70:	2300      	movs	r3, #0
 800ca72:	75fb      	strb	r3, [r7, #23]
 800ca74:	e019      	b.n	800caaa <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800ca76:	7df9      	ldrb	r1, [r7, #23]
 800ca78:	7bbb      	ldrb	r3, [r7, #14]
 800ca7a:	6938      	ldr	r0, [r7, #16]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	0052      	lsls	r2, r2, #1
 800ca80:	441a      	add	r2, r3
 800ca82:	0153      	lsls	r3, r2, #5
 800ca84:	461a      	mov	r2, r3
 800ca86:	460b      	mov	r3, r1
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	440b      	add	r3, r1
 800ca8c:	019b      	lsls	r3, r3, #6
 800ca8e:	4413      	add	r3, r2
 800ca90:	4403      	add	r3, r0
 800ca92:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800ca96:	330c      	adds	r3, #12
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	dd02      	ble.n	800caa4 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800ca9e:	7dbb      	ldrb	r3, [r7, #22]
 800caa0:	3301      	adds	r3, #1
 800caa2:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800caa4:	7dfb      	ldrb	r3, [r7, #23]
 800caa6:	3301      	adds	r3, #1
 800caa8:	75fb      	strb	r3, [r7, #23]
 800caaa:	7dfb      	ldrb	r3, [r7, #23]
 800caac:	2b05      	cmp	r3, #5
 800caae:	d9e2      	bls.n	800ca76 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	7dba      	ldrb	r2, [r7, #22]
 800cab4:	701a      	strb	r2, [r3, #0]

	return status;
 800cab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	371c      	adds	r7, #28
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b085      	sub	sp, #20
 800caca:	af00      	add	r7, sp, #0
 800cacc:	4603      	mov	r3, r0
 800cace:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800cad4:	88fb      	ldrh	r3, [r7, #6]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d005      	beq.n	800cae6 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800cada:	88fb      	ldrh	r3, [r7, #6]
 800cadc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800cae0:	fb92 f3f3 	sdiv	r3, r2, r3
 800cae4:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800cae6:	68fb      	ldr	r3, [r7, #12]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800caf4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800caf8:	b089      	sub	sp, #36	@ 0x24
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	60b9      	str	r1, [r7, #8]
 800cb00:	607a      	str	r2, [r7, #4]
 800cb02:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800cb04:	f04f 0200 	mov.w	r2, #0
 800cb08:	f04f 0300 	mov.w	r3, #0
 800cb0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	fb02 f303 	mul.w	r3, r2, r3
 800cb1c:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	0b1b      	lsrs	r3, r3, #12
 800cb22:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2200      	movs	r2, #0
 800cb28:	469a      	mov	sl, r3
 800cb2a:	4693      	mov	fp, r2
 800cb2c:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	fb02 f303 	mul.w	r3, r2, r3
 800cb38:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	091b      	lsrs	r3, r3, #4
 800cb3e:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2200      	movs	r2, #0
 800cb44:	4698      	mov	r8, r3
 800cb46:	4691      	mov	r9, r2
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	fb08 f203 	mul.w	r2, r8, r3
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	fb09 f303 	mul.w	r3, r9, r3
 800cb54:	4413      	add	r3, r2
 800cb56:	69ba      	ldr	r2, [r7, #24]
 800cb58:	fba2 4508 	umull	r4, r5, r2, r8
 800cb5c:	442b      	add	r3, r5
 800cb5e:	461d      	mov	r5, r3
 800cb60:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800cb64:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800cb68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cb6c:	f04f 0200 	mov.w	r2, #0
 800cb70:	f04f 0300 	mov.w	r3, #0
 800cb74:	0b02      	lsrs	r2, r0, #12
 800cb76:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800cb7a:	0b0b      	lsrs	r3, r1, #12
 800cb7c:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800cb80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d305      	bcc.n	800cb94 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800cb88:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8c:	f04f 0300 	mov.w	r3, #0
 800cb90:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	617b      	str	r3, [r7, #20]

	return duration_us;
 800cb98:	697b      	ldr	r3, [r7, #20]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3724      	adds	r7, #36	@ 0x24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800cba4:	4770      	bx	lr

0800cba6 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800cba6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbaa:	b096      	sub	sp, #88	@ 0x58
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	627a      	str	r2, [r7, #36]	@ 0x24
 800cbb4:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint64_t total_hist_counts  = 0;
 800cbb6:	f04f 0200 	mov.w	r2, #0
 800cbba:	f04f 0300 	mov.w	r3, #0
 800cbbe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_per_spad     = 0;
 800cbc2:	f04f 0200 	mov.w	r2, #0
 800cbc6:	f04f 0300 	mov.w	r3, #0
 800cbca:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint32_t rate_per_spad_kcps = 0;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	647b      	str	r3, [r7, #68]	@ 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800cbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd4:	17da      	asrs	r2, r3, #31
 800cbd6:	469a      	mov	sl, r3
 800cbd8:	4693      	mov	fp, r2
 800cbda:	4652      	mov	r2, sl
 800cbdc:	465b      	mov	r3, fp
 800cbde:	f04f 0000 	mov.w	r0, #0
 800cbe2:	f04f 0100 	mov.w	r1, #0
 800cbe6:	0159      	lsls	r1, r3, #5
 800cbe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cbec:	0150      	lsls	r0, r2, #5
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	ebb2 040a 	subs.w	r4, r2, sl
 800cbf6:	eb63 050b 	sbc.w	r5, r3, fp
 800cbfa:	f04f 0200 	mov.w	r2, #0
 800cbfe:	f04f 0300 	mov.w	r3, #0
 800cc02:	00ab      	lsls	r3, r5, #2
 800cc04:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800cc08:	00a2      	lsls	r2, r4, #2
 800cc0a:	4614      	mov	r4, r2
 800cc0c:	461d      	mov	r5, r3
 800cc0e:	eb14 080a 	adds.w	r8, r4, sl
 800cc12:	eb45 090b 	adc.w	r9, r5, fp
 800cc16:	f04f 0200 	mov.w	r2, #0
 800cc1a:	f04f 0300 	mov.w	r3, #0
 800cc1e:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800cc22:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800cc26:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800cc2a:	4690      	mov	r8, r2
 800cc2c:	4699      	mov	r9, r3
 800cc2e:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800cc32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00d      	beq.n	800cc54 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800cc38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	61bb      	str	r3, [r7, #24]
 800cc3e:	61fa      	str	r2, [r7, #28]
 800cc40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800cc48:	f7f3 fb42 	bl	80002d0 <__aeabi_uldivmod>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d02a      	beq.n	800ccb0 <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800cc5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800cc5e:	f04f 0200 	mov.w	r2, #0
 800cc62:	f04f 0300 	mov.w	r3, #0
 800cc66:	02cb      	lsls	r3, r1, #11
 800cc68:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800cc6c:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800cc6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc70:	0849      	lsrs	r1, r1, #1
 800cc72:	2000      	movs	r0, #0
 800cc74:	6139      	str	r1, [r7, #16]
 800cc76:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800cc78:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	1851      	adds	r1, r2, r1
 800cc80:	6039      	str	r1, [r7, #0]
 800cc82:	4629      	mov	r1, r5
 800cc84:	eb43 0101 	adc.w	r1, r3, r1
 800cc88:	6079      	str	r1, [r7, #4]
 800cc8a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cc8e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	2200      	movs	r2, #0
 800cc96:	60bb      	str	r3, [r7, #8]
 800cc98:	60fa      	str	r2, [r7, #12]
 800cc9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc9e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800cca2:	f7f3 fb15 	bl	80002d0 <__aeabi_uldivmod>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800ccae:	e00b      	b.n	800ccc8 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800ccb0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800ccb4:	f04f 0200 	mov.w	r2, #0
 800ccb8:	f04f 0300 	mov.w	r3, #0
 800ccbc:	02cb      	lsls	r3, r1, #11
 800ccbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ccc2:	02c2      	lsls	r2, r0, #11
 800ccc4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800ccc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccca:	647b      	str	r3, [r7, #68]	@ 0x44

	return rate_per_spad_kcps;
 800cccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3758      	adds	r7, #88	@ 0x58
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ccd8 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800cce4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cce8:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800ccea:	e002      	b.n	800ccf2 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	089b      	lsrs	r3, r3, #2
 800ccf0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d8f8      	bhi.n	800ccec <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800ccfa:	e017      	b.n	800cd2c <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	4413      	add	r3, r2
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d30b      	bcc.n	800cd20 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	085b      	lsrs	r3, r3, #1
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	e002      	b.n	800cd26 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	085b      	lsrs	r3, r3, #1
 800cd24:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	089b      	lsrs	r3, r3, #2
 800cd2a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1e4      	bne.n	800ccfc <VL53LX_isqrt+0x24>
	}

	return res;
 800cd32:	68fb      	ldr	r3, [r7, #12]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 faa6 	bl	800d2a8 <VL53LX_decode_vcsel_period>
 800cd5c:	4603      	mov	r3, r0
	period = 2048 *
 800cd5e:	02db      	lsls	r3, r3, #11
 800cd60:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	4413      	add	r3, r2
 800cd72:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cd7a:	02db      	lsls	r3, r3, #11
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	4413      	add	r3, r2
 800cd80:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cd88:	02db      	lsls	r3, r3, #11
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d009      	beq.n	800cdaa <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	fb01 f202 	mul.w	r2, r1, r2
 800cda4:	1a9b      	subs	r3, r3, r2
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	e001      	b.n	800cdae <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	LOG_FUNCTION_END(0);
}
 800cdb8:	bf00      	nop
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800cdd2:	6838      	ldr	r0, [r7, #0]
 800cdd4:	f000 fb91 	bl	800d4fa <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff ff7a 	bl	800ccd8 <VL53LX_isqrt>
 800cde4:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800cde6:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	fb02 f303 	mul.w	r3, r2, r3
 800cdf0:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	3307      	adds	r3, #7
 800cdf6:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	111b      	asrs	r3, r3, #4
 800cdfc:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	4413      	add	r3, r2
 800ce08:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	73fb      	strb	r3, [r7, #15]
 800ce1e:	e01e      	b.n	800ce5e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800ce20:	7bfa      	ldrb	r2, [r7, #15]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	3206      	adds	r2, #6
 800ce26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	dd13      	ble.n	800ce58 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ce36:	7bf9      	ldrb	r1, [r7, #15]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	3106      	adds	r1, #6
 800ce3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce40:	441a      	add	r2, r3
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800ce4e:	3301      	adds	r3, #1
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	73fb      	strb	r3, [r7, #15]
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	7a9b      	ldrb	r3, [r3, #10]
 800ce62:	7bfa      	ldrb	r2, [r7, #15]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d3db      	bcc.n	800ce20 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d01c      	beq.n	800ceac <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
		pdata->VL53LX_p_028 =
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
 800ce8a:	0852      	lsrs	r2, r2, #1
 800ce8c:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800ce8e:	441a      	add	r2, r3
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
		pdata->VL53LX_p_028 /=
 800cea2:	fb93 f2f2 	sdiv	r2, r3, r2
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800ceac:	bf00      	nop
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7b1b      	ldrb	r3, [r3, #12]
 800cecc:	f003 0307 	and.w	r3, r3, #7
 800ced0:	2b07      	cmp	r3, #7
 800ced2:	d13a      	bne.n	800cf4a <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ced8:	2300      	movs	r3, #0
 800ceda:	73bb      	strb	r3, [r7, #14]
 800cedc:	e01f      	b.n	800cf1e <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800cede:	7bbb      	ldrb	r3, [r7, #14]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	4413      	add	r3, r2
 800cee4:	7b1b      	ldrb	r3, [r3, #12]
 800cee6:	f003 0307 	and.w	r3, r3, #7
 800ceea:	2b07      	cmp	r3, #7
 800ceec:	d014      	beq.n	800cf18 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800ceee:	7bba      	ldrb	r2, [r7, #14]
 800cef0:	7b7b      	ldrb	r3, [r7, #13]
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	440a      	add	r2, r1
 800cef6:	7b11      	ldrb	r1, [r2, #12]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	4413      	add	r3, r2
 800cefc:	460a      	mov	r2, r1
 800cefe:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800cf00:	7bba      	ldrb	r2, [r7, #14]
 800cf02:	7b7b      	ldrb	r3, [r7, #13]
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	440a      	add	r2, r1
 800cf08:	7c91      	ldrb	r1, [r2, #18]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	460a      	mov	r2, r1
 800cf10:	749a      	strb	r2, [r3, #18]
				i++;
 800cf12:	7b7b      	ldrb	r3, [r7, #13]
 800cf14:	3301      	adds	r3, #1
 800cf16:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	73bb      	strb	r3, [r7, #14]
 800cf1e:	7bbb      	ldrb	r3, [r7, #14]
 800cf20:	2b05      	cmp	r3, #5
 800cf22:	d9dc      	bls.n	800cede <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800cf24:	7b7b      	ldrb	r3, [r7, #13]
 800cf26:	73bb      	strb	r3, [r7, #14]
 800cf28:	e00c      	b.n	800cf44 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800cf2a:	7bbb      	ldrb	r3, [r7, #14]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	4413      	add	r3, r2
 800cf30:	2210      	movs	r2, #16
 800cf32:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800cf34:	7bbb      	ldrb	r3, [r7, #14]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	4413      	add	r3, r2
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800cf3e:	7bbb      	ldrb	r3, [r7, #14]
 800cf40:	3301      	adds	r3, #1
 800cf42:	73bb      	strb	r3, [r7, #14]
 800cf44:	7bbb      	ldrb	r3, [r7, #14]
 800cf46:	2b05      	cmp	r3, #5
 800cf48:	d9ef      	bls.n	800cf2a <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7adb      	ldrb	r3, [r3, #11]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d023      	beq.n	800cf9a <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	7adb      	ldrb	r3, [r3, #11]
 800cf56:	73fb      	strb	r3, [r7, #15]
 800cf58:	e00f      	b.n	800cf7a <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800cf5a:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	7ad2      	ldrb	r2, [r2, #11]
 800cf62:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	3106      	adds	r1, #6
 800cf68:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3206      	adds	r2, #6
 800cf70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	3301      	adds	r3, #1
 800cf78:	73fb      	strb	r3, [r7, #15]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	7a5b      	ldrb	r3, [r3, #9]
 800cf7e:	7bfa      	ldrb	r2, [r7, #15]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d3ea      	bcc.n	800cf5a <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	72da      	strb	r2, [r3, #11]
	}
}
 800cf9a:	bf00      	nop
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b084      	sub	sp, #16
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	4603      	mov	r3, r0
 800cfae:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800cfb8:	88fb      	ldrh	r3, [r7, #6]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff fd83 	bl	800cac6 <VL53LX_calc_pll_period_us>
 800cfc0:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800cfc6:	f249 2257 	movw	r2, #37463	@ 0x9257
 800cfca:	fb02 f303 	mul.w	r3, r2, r3
 800cfce:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800cfd6:	0c1b      	lsrs	r3, r3, #16
 800cfd8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800cfda:	68bb      	ldr	r3, [r7, #8]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b087      	sub	sp, #28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800cff2:	2307      	movs	r3, #7
 800cff4:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d000:	db03      	blt.n	800d00a <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800d002:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800d006:	617b      	str	r3, [r7, #20]
 800d008:	e004      	b.n	800d014 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	dd01      	ble.n	800d014 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d01a:	dd02      	ble.n	800d022 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800d01c:	2303      	movs	r3, #3
 800d01e:	613b      	str	r3, [r7, #16]
 800d020:	e001      	b.n	800d026 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800d022:	2307      	movs	r3, #7
 800d024:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d009      	beq.n	800d040 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800d02c:	697a      	ldr	r2, [r7, #20]
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	409a      	lsls	r2, r3
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	085b      	lsrs	r3, r3, #1
 800d036:	441a      	add	r2, r3
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d03e:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d046:	dd02      	ble.n	800d04e <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	011b      	lsls	r3, r3, #4
 800d04c:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d054:	d302      	bcc.n	800d05c <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800d056:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d05a:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800d060:	89fb      	ldrh	r3, [r7, #14]
}
 800d062:	4618      	mov	r0, r3
 800d064:	371c      	adds	r7, #28
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800d06e:	b480      	push	{r7}
 800d070:	b087      	sub	sp, #28
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	60b9      	str	r1, [r7, #8]
 800d078:	603b      	str	r3, [r7, #0]
 800d07a:	4613      	mov	r3, r2
 800d07c:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800d086:	88fb      	ldrh	r3, [r7, #6]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d010      	beq.n	800d0ae <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	021a      	lsls	r2, r3, #8
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	fa02 f303 	lsl.w	r3, r2, r3
 800d096:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800d098:	88fb      	ldrh	r3, [r7, #6]
 800d09a:	085b      	lsrs	r3, r3, #1
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800d0a4:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800d0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0aa:	617b      	str	r3, [r7, #20]
 800d0ac:	e004      	b.n	800d0b8 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b6:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800d0b8:	697a      	ldr	r2, [r7, #20]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d901      	bls.n	800d0c4 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800d0c8:	8a7b      	ldrh	r3, [r7, #18]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	371c      	adds	r7, #28
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
	...

0800d0d8 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	b093      	sub	sp, #76	@ 0x4c
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	461e      	mov	r6, r3
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d0ee:	4633      	mov	r3, r6
 800d0f0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


	uint32_t    pll_period_us = 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	643b      	str	r3, [r7, #64]	@ 0x40
	int64_t     tmp_long_int  = 0;
 800d0f8:	f04f 0200 	mov.w	r2, #0
 800d0fc:	f04f 0300 	mov.w	r3, #0
 800d100:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int32_t     range_mm      = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t     range_mm_10   = 0;
 800d108:	2300      	movs	r3, #0
 800d10a:	637b      	str	r3, [r7, #52]	@ 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800d10c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d10e:	4618      	mov	r0, r3
 800d110:	f7ff fcd9 	bl	800cac6 <VL53LX_calc_pll_period_us>
 800d114:	6438      	str	r0, [r7, #64]	@ 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800d116:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d118:	2200      	movs	r2, #0
 800d11a:	623b      	str	r3, [r7, #32]
 800d11c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d11e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d120:	2200      	movs	r2, #0
 800d122:	61bb      	str	r3, [r7, #24]
 800d124:	61fa      	str	r2, [r7, #28]
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d12c:	4602      	mov	r2, r0
 800d12e:	1a9b      	subs	r3, r3, r2
 800d130:	613b      	str	r3, [r7, #16]
 800d132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d134:	460a      	mov	r2, r1
 800d136:	eb63 0302 	sbc.w	r3, r3, r2
 800d13a:	617b      	str	r3, [r7, #20]
 800d13c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d140:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800d144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d146:	2200      	movs	r2, #0
 800d148:	469a      	mov	sl, r3
 800d14a:	4693      	mov	fp, r2
 800d14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d14e:	fb0a f203 	mul.w	r2, sl, r3
 800d152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d154:	fb0b f303 	mul.w	r3, fp, r3
 800d158:	4413      	add	r3, r2
 800d15a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d15c:	fba2 890a 	umull	r8, r9, r2, sl
 800d160:	444b      	add	r3, r9
 800d162:	4699      	mov	r9, r3
 800d164:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 800d168:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800d16c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d170:	2b00      	cmp	r3, #0
 800d172:	da08      	bge.n	800d186 <VL53LX_range_maths+0xae>
 800d174:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800d178:	1851      	adds	r1, r2, r1
 800d17a:	60b9      	str	r1, [r7, #8]
 800d17c:	f143 0300 	adc.w	r3, r3, #0
 800d180:	60fb      	str	r3, [r7, #12]
 800d182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d186:	f04f 0000 	mov.w	r0, #0
 800d18a:	f04f 0100 	mov.w	r1, #0
 800d18e:	0a50      	lsrs	r0, r2, #9
 800d190:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d194:	1259      	asrs	r1, r3, #9
 800d196:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800d19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d19c:	f249 2257 	movw	r2, #37463	@ 0x9257
 800d1a0:	fb03 f202 	mul.w	r2, r3, r2
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	fb01 f303 	mul.w	r3, r1, r3
 800d1ac:	4413      	add	r3, r2
 800d1ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1b0:	f249 2157 	movw	r1, #37463	@ 0x9257
 800d1b4:	fba2 4501 	umull	r4, r5, r2, r1
 800d1b8:	442b      	add	r3, r5
 800d1ba:	461d      	mov	r5, r3
 800d1bc:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800d1c0:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800d1c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	da07      	bge.n	800d1dc <VL53LX_range_maths+0x104>
 800d1cc:	4934      	ldr	r1, [pc, #208]	@ (800d2a0 <VL53LX_range_maths+0x1c8>)
 800d1ce:	1851      	adds	r1, r2, r1
 800d1d0:	6039      	str	r1, [r7, #0]
 800d1d2:	f143 0300 	adc.w	r3, r3, #0
 800d1d6:	607b      	str	r3, [r7, #4]
 800d1d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1dc:	f04f 0000 	mov.w	r0, #0
 800d1e0:	f04f 0100 	mov.w	r1, #0
 800d1e4:	0d90      	lsrs	r0, r2, #22
 800d1e6:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800d1ea:	1599      	asrs	r1, r3, #22
 800d1ec:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d1f4:	4413      	add	r3, r2
 800d1f6:	647b      	str	r3, [r7, #68]	@ 0x44


	range_mm *= gain_factor;
 800d1f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d1fc:	fb02 f303 	mul.w	r3, r2, r3
 800d200:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm += 0x0400;
 800d202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d204:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d208:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm /= 0x0800;
 800d20a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	da01      	bge.n	800d214 <VL53LX_range_maths+0x13c>
 800d210:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800d214:	12db      	asrs	r3, r3, #11
 800d216:	647b      	str	r3, [r7, #68]	@ 0x44


	if (fractional_bits == 0) {
 800d218:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d130      	bne.n	800d282 <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800d220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d222:	4613      	mov	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	637b      	str	r3, [r7, #52]	@ 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800d22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d22e:	2b00      	cmp	r3, #0
 800d230:	da00      	bge.n	800d234 <VL53LX_range_maths+0x15c>
 800d232:	3303      	adds	r3, #3
 800d234:	109b      	asrs	r3, r3, #2
 800d236:	637b      	str	r3, [r7, #52]	@ 0x34
		if ((range_mm_10 % 10) < 5)
 800d238:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d23a:	4b1a      	ldr	r3, [pc, #104]	@ (800d2a4 <VL53LX_range_maths+0x1cc>)
 800d23c:	fb83 2301 	smull	r2, r3, r3, r1
 800d240:	109a      	asrs	r2, r3, #2
 800d242:	17cb      	asrs	r3, r1, #31
 800d244:	1ad2      	subs	r2, r2, r3
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	1aca      	subs	r2, r1, r3
 800d250:	2a04      	cmp	r2, #4
 800d252:	dc09      	bgt.n	800d268 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800d254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d256:	4a13      	ldr	r2, [pc, #76]	@ (800d2a4 <VL53LX_range_maths+0x1cc>)
 800d258:	fb82 1203 	smull	r1, r2, r2, r3
 800d25c:	1092      	asrs	r2, r2, #2
 800d25e:	17db      	asrs	r3, r3, #31
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	b21b      	sxth	r3, r3
 800d264:	647b      	str	r3, [r7, #68]	@ 0x44
 800d266:	e015      	b.n	800d294 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800d268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d26a:	4a0e      	ldr	r2, [pc, #56]	@ (800d2a4 <VL53LX_range_maths+0x1cc>)
 800d26c:	fb82 1203 	smull	r1, r2, r2, r3
 800d270:	1092      	asrs	r2, r2, #2
 800d272:	17db      	asrs	r3, r3, #31
 800d274:	1ad3      	subs	r3, r2, r3
 800d276:	b29b      	uxth	r3, r3
 800d278:	3301      	adds	r3, #1
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	b21b      	sxth	r3, r3
 800d27e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d280:	e008      	b.n	800d294 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800d282:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d286:	2b01      	cmp	r3, #1
 800d288:	d104      	bne.n	800d294 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800d28a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d28c:	0fda      	lsrs	r2, r3, #31
 800d28e:	4413      	add	r3, r2
 800d290:	105b      	asrs	r3, r3, #1
 800d292:	647b      	str	r3, [r7, #68]	@ 0x44

	return range_mm;
 800d294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d296:	4618      	mov	r0, r3
 800d298:	374c      	adds	r7, #76	@ 0x4c
 800d29a:	46bd      	mov	sp, r7
 800d29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a0:	003fffff 	.word	0x003fffff
 800d2a4:	66666667 	.word	0x66666667

0800d2a8 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	005b      	lsls	r3, r3, #1
 800d2be:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800d2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
	phist->VL53LX_p_015 =
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
	phist->vcsel_width =
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
	phist->zero_distance_phase =
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	781a      	ldrb	r2, [r3, #0]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7a5a      	ldrb	r2, [r3, #9]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685a      	ldr	r2, [r3, #4]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	605a      	str	r2, [r3, #4]
}
 800d33e:	bf00      	nop
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800d34a:	b480      	push	{r7}
 800d34c:	b087      	sub	sp, #28
 800d34e:	af00      	add	r7, sp, #0
 800d350:	60f8      	str	r0, [r7, #12]
 800d352:	460b      	mov	r3, r1
 800d354:	607a      	str	r2, [r7, #4]
 800d356:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2203      	movs	r2, #3
 800d360:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2203      	movs	r2, #3
 800d366:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2218      	movs	r2, #24
 800d37e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800d380:	897b      	ldrh	r3, [r7, #10]
 800d382:	b2da      	uxtb	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2200      	movs	r2, #0
 800d392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->VL53LX_p_005                       = 0;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	pdata->VL53LX_p_015                = 0;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pdata->VL53LX_p_028             = 0;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800d41e:	2300      	movs	r3, #0
 800d420:	82fb      	strh	r3, [r7, #22]
 800d422:	e009      	b.n	800d438 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800d424:	8afb      	ldrh	r3, [r7, #22]
 800d426:	8afa      	ldrh	r2, [r7, #22]
 800d428:	b2d1      	uxtb	r1, r2
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	4413      	add	r3, r2
 800d42e:	460a      	mov	r2, r1
 800d430:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800d432:	8afb      	ldrh	r3, [r7, #22]
 800d434:	3301      	adds	r3, #1
 800d436:	82fb      	strh	r3, [r7, #22]
 800d438:	8afb      	ldrh	r3, [r7, #22]
 800d43a:	2b05      	cmp	r3, #5
 800d43c:	d9f2      	bls.n	800d424 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800d43e:	2300      	movs	r3, #0
 800d440:	82fb      	strh	r3, [r7, #22]
 800d442:	e007      	b.n	800d454 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800d444:	8afb      	ldrh	r3, [r7, #22]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	4413      	add	r3, r2
 800d44a:	2201      	movs	r2, #1
 800d44c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800d44e:	8afb      	ldrh	r3, [r7, #22]
 800d450:	3301      	adds	r3, #1
 800d452:	82fb      	strh	r3, [r7, #22]
 800d454:	8afb      	ldrh	r3, [r7, #22]
 800d456:	2b05      	cmp	r3, #5
 800d458:	d9f4      	bls.n	800d444 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800d45a:	2300      	movs	r3, #0
 800d45c:	82fb      	strh	r3, [r7, #22]
 800d45e:	e013      	b.n	800d488 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800d460:	8afa      	ldrh	r2, [r7, #22]
 800d462:	897b      	ldrh	r3, [r7, #10]
 800d464:	429a      	cmp	r2, r3
 800d466:	d206      	bcs.n	800d476 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800d468:	8afa      	ldrh	r2, [r7, #22]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3206      	adds	r2, #6
 800d46e:	68f9      	ldr	r1, [r7, #12]
 800d470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d474:	e005      	b.n	800d482 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800d476:	8afa      	ldrh	r2, [r7, #22]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3206      	adds	r2, #6
 800d47c:	2100      	movs	r1, #0
 800d47e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800d482:	8afb      	ldrh	r3, [r7, #22]
 800d484:	3301      	adds	r3, #1
 800d486:	82fb      	strh	r3, [r7, #22]
 800d488:	8afb      	ldrh	r3, [r7, #22]
 800d48a:	2b17      	cmp	r3, #23
 800d48c:	d9e8      	bls.n	800d460 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800d48e:	bf00      	nop
 800d490:	bf00      	nop
 800d492:	371c      	adds	r7, #28
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
 800d4a8:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800d4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	da10      	bge.n	800d4d4 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	43db      	mvns	r3, r3
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	f003 0307 	and.w	r3, r3, #7
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	3308      	adds	r3, #8
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
 800d4c8:	3b80      	subs	r3, #128	@ 0x80
 800d4ca:	10db      	asrs	r3, r3, #3
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800d4d2:	e00c      	b.n	800d4ee <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
 800d4d6:	f003 0307 	and.w	r3, r3, #7
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800d4e0:	7bfb      	ldrb	r3, [r7, #15]
 800d4e2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800d4e6:	10db      	asrs	r3, r3, #3
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	701a      	strb	r2, [r3, #0]
}
 800d4ee:	bf00      	nop
 800d4f0:	3714      	adds	r7, #20
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr

0800d4fa <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800d4fa:	b480      	push	{r7}
 800d4fc:	b085      	sub	sp, #20
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800d506:	2300      	movs	r3, #0
 800d508:	73fb      	strb	r3, [r7, #15]
 800d50a:	e02c      	b.n	800d566 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800d518:	7bf9      	ldrb	r1, [r7, #15]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	3106      	adds	r1, #6
 800d51e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d522:	429a      	cmp	r2, r3
 800d524:	db07      	blt.n	800d536 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800d526:	7bfa      	ldrb	r2, [r7, #15]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	3206      	adds	r2, #6
 800d52c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800d536:	7bfb      	ldrb	r3, [r7, #15]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d009      	beq.n	800d550 <VL53LX_hist_find_min_max_bin_values+0x56>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800d542:	7bf9      	ldrb	r1, [r7, #15]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	3106      	adds	r1, #6
 800d548:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	dc07      	bgt.n	800d560 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800d550:	7bfa      	ldrb	r2, [r7, #15]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	3206      	adds	r2, #6
 800d556:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800d560:	7bfb      	ldrb	r3, [r7, #15]
 800d562:	3301      	adds	r3, #1
 800d564:	73fb      	strb	r3, [r7, #15]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7a9b      	ldrb	r3, [r3, #10]
 800d56a:	7bfa      	ldrb	r2, [r7, #15]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d3cd      	bcc.n	800d50c <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800d570:	bf00      	nop
 800d572:	bf00      	nop
 800d574:	3714      	adds	r7, #20
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800d57e:	b480      	push	{r7}
 800d580:	b085      	sub	sp, #20
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800d586:	2300      	movs	r3, #0
 800d588:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	7adb      	ldrb	r3, [r3, #11]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d03a      	beq.n	800d608 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e



		pdata->ambient_events_sum = 0;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	73fb      	strb	r3, [r7, #15]
 800d5a8:	e00e      	b.n	800d5c8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d5b0:	7bf9      	ldrb	r1, [r7, #15]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	3106      	adds	r1, #6
 800d5b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5ba:	441a      	add	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800d5c2:	7bfb      	ldrb	r3, [r7, #15]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	73fb      	strb	r3, [r7, #15]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	7adb      	ldrb	r3, [r3, #11]
 800d5cc:	7bfa      	ldrb	r2, [r7, #15]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d3eb      	bcc.n	800d5aa <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	7ad2      	ldrb	r2, [r2, #11]
 800d5e8:	0852      	lsrs	r2, r2, #1
 800d5ea:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800d5ec:	441a      	add	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800d5fe:	fb93 f2f2 	sdiv	r2, r3, r2
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800d608:	bf00      	nop
 800d60a:	3714      	adds	r7, #20
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800d614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d618:	b0ca      	sub	sp, #296	@ 0x128
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800d620:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800d624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d628:	4603      	mov	r3, r0
 800d62a:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800d62e:	2300      	movs	r3, #0
 800d630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t    pll_period_us       = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t    periods_elapsed     = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint32_t    tmp32               = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint64_t    tmp64               = 0;
 800d646:	f04f 0200 	mov.w	r2, #0
 800d64a:	f04f 0300 	mov.w	r3, #0
 800d64e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	uint32_t    amb_thres_delta     = 0;
 800d652:	2300      	movs	r3, #0
 800d654:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800d658:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d65c:	2300      	movs	r3, #0
 800d65e:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800d660:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d664:	2300      	movs	r3, #0
 800d666:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800d668:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d66c:	2300      	movs	r3, #0
 800d66e:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800d670:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d674:	2300      	movs	r3, #0
 800d676:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800d678:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d67c:	2300      	movs	r3, #0
 800d67e:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800d680:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d684:	2300      	movs	r3, #0
 800d686:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800d688:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d68c:	2300      	movs	r3, #0
 800d68e:	8493      	strh	r3, [r2, #36]	@ 0x24
	pdata->VL53LX_p_022            = 0;
 800d690:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d694:	2300      	movs	r3, #0
 800d696:	84d3      	strh	r3, [r2, #38]	@ 0x26

	*pambient_dmax_mm  = 0;
 800d698:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800d69c:	2300      	movs	r3, #0
 800d69e:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800d6a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f000 80e1 	beq.w	800d870 <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800d6ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 80da 	beq.w	800d870 <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800d6bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7ff f9fe 	bl	800cac6 <VL53LX_calc_pll_period_us>
 800d6ca:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800d6ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800d6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d6e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d6e4:	2110      	movs	r1, #16
 800d6e6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800d6ea:	f7ff fa03 	bl	800caf4 <VL53LX_duration_maths>
 800d6ee:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800d6f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d6f4:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800d6f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6fa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800d6fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4619      	mov	r1, r3
 800d706:	4610      	mov	r0, r2
 800d708:	f7ff fc6c 	bl	800cfe4 <VL53LX_rate_maths>
 800d70c:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800d70e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d712:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800d714:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d718:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800d71c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d720:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 800d724:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	461a      	mov	r2, r3
 800d72c:	f7ff fa3b 	bl	800cba6 <VL53LX_events_per_spad_maths>
 800d730:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800d732:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d736:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800d738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d73c:	8adb      	ldrh	r3, [r3, #22]
 800d73e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d742:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800d744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d748:	8adb      	ldrh	r3, [r3, #22]
 800d74a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d74e:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800d750:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d754:	695b      	ldr	r3, [r3, #20]
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 808a 	beq.w	800d870 <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800d75c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d760:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800d762:	b29b      	uxth	r3, r3
 800d764:	2200      	movs	r2, #0
 800d766:	461c      	mov	r4, r3
 800d768:	4615      	mov	r5, r2
 800d76a:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
			tmp64  *= 1000;
 800d76e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800d772:	4622      	mov	r2, r4
 800d774:	462b      	mov	r3, r5
 800d776:	f04f 0000 	mov.w	r0, #0
 800d77a:	f04f 0100 	mov.w	r1, #0
 800d77e:	0159      	lsls	r1, r3, #5
 800d780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d784:	0150      	lsls	r0, r2, #5
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	ebb2 0804 	subs.w	r8, r2, r4
 800d78e:	eb63 0905 	sbc.w	r9, r3, r5
 800d792:	f04f 0200 	mov.w	r2, #0
 800d796:	f04f 0300 	mov.w	r3, #0
 800d79a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d79e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d7a2:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d7a6:	4690      	mov	r8, r2
 800d7a8:	4699      	mov	r9, r3
 800d7aa:	eb18 0a04 	adds.w	sl, r8, r4
 800d7ae:	eb49 0b05 	adc.w	fp, r9, r5
 800d7b2:	f04f 0200 	mov.w	r2, #0
 800d7b6:	f04f 0300 	mov.w	r3, #0
 800d7ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d7be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d7c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d7c6:	4692      	mov	sl, r2
 800d7c8:	469b      	mov	fp, r3
 800d7ca:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
			tmp64 <<= (11+1);
 800d7ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800d7d2:	f04f 0000 	mov.w	r0, #0
 800d7d6:	f04f 0100 	mov.w	r1, #0
 800d7da:	0319      	lsls	r1, r3, #12
 800d7dc:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800d7e0:	0310      	lsls	r0, r2, #12
 800d7e2:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800d7e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d7ea:	695b      	ldr	r3, [r3, #20]
 800d7ec:	085b      	lsrs	r3, r3, #1
 800d7ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			tmp64 += (uint64_t)tmp32;
 800d7f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d7fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d800:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800d804:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800d808:	4621      	mov	r1, r4
 800d80a:	1851      	adds	r1, r2, r1
 800d80c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d80e:	4629      	mov	r1, r5
 800d810:	eb43 0101 	adc.w	r1, r3, r1
 800d814:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800d816:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800d81a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
			tmp64 = do_division_u(tmp64,
 800d81e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	2200      	movs	r2, #0
 800d826:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d82a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d82e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800d832:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800d836:	f7f2 fd4b 	bl	80002d0 <__aeabi_uldivmod>
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800d842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d846:	8adb      	ldrh	r3, [r3, #22]
 800d848:	b29b      	uxth	r3, r3
 800d84a:	2200      	movs	r2, #0
 800d84c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d850:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800d854:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800d858:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800d85c:	4621      	mov	r1, r4
 800d85e:	428a      	cmp	r2, r1
 800d860:	4629      	mov	r1, r5
 800d862:	418b      	sbcs	r3, r1
 800d864:	d204      	bcs.n	800d870 <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800d866:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800d86a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d86e:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800d870:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 82e9 	beq.w	800de4e <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800d87c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d880:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 82e2 	beq.w	800de4e <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800d88a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d88e:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800d890:	2b00      	cmp	r3, #0
 800d892:	f000 82dc 	beq.w	800de4e <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800d896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 82d5 	beq.w	800de4e <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800d8a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d8a8:	885b      	ldrh	r3, [r3, #2]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8b0:	657a      	str	r2, [r7, #84]	@ 0x54
 800d8b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800d8b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 *= (1000 * 256);
 800d8ba:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800d8be:	4622      	mov	r2, r4
 800d8c0:	462b      	mov	r3, r5
 800d8c2:	f04f 0000 	mov.w	r0, #0
 800d8c6:	f04f 0100 	mov.w	r1, #0
 800d8ca:	0159      	lsls	r1, r3, #5
 800d8cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d8d0:	0150      	lsls	r0, r2, #5
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	1b11      	subs	r1, r2, r4
 800d8d8:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d8da:	eb63 0305 	sbc.w	r3, r3, r5
 800d8de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8e0:	f04f 0200 	mov.w	r2, #0
 800d8e4:	f04f 0300 	mov.w	r3, #0
 800d8e8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	008b      	lsls	r3, r1, #2
 800d8f0:	4641      	mov	r1, r8
 800d8f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d8f6:	4641      	mov	r1, r8
 800d8f8:	008a      	lsls	r2, r1, #2
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	460b      	mov	r3, r1
 800d900:	191b      	adds	r3, r3, r4
 800d902:	643b      	str	r3, [r7, #64]	@ 0x40
 800d904:	4613      	mov	r3, r2
 800d906:	eb45 0303 	adc.w	r3, r5, r3
 800d90a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d90c:	f04f 0200 	mov.w	r2, #0
 800d910:	f04f 0300 	mov.w	r3, #0
 800d914:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800d918:	4629      	mov	r1, r5
 800d91a:	02cb      	lsls	r3, r1, #11
 800d91c:	4621      	mov	r1, r4
 800d91e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d922:	4621      	mov	r1, r4
 800d924:	02ca      	lsls	r2, r1, #11
 800d926:	461c      	mov	r4, r3
 800d928:	4613      	mov	r3, r2
 800d92a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800d92e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d932:	881b      	ldrh	r3, [r3, #0]
 800d934:	085b      	lsrs	r3, r3, #1
 800d936:	b29b      	uxth	r3, r3
 800d938:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp64 += (uint64_t)tmp32;
 800d93c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800d940:	2200      	movs	r2, #0
 800d942:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d946:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d94a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800d94e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800d952:	4621      	mov	r1, r4
 800d954:	1851      	adds	r1, r2, r1
 800d956:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d958:	4629      	mov	r1, r5
 800d95a:	eb43 0101 	adc.w	r1, r3, r1
 800d95e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d960:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800d964:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800d968:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	b29b      	uxth	r3, r3
 800d970:	2200      	movs	r2, #0
 800d972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d97a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800d97e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800d982:	f7f2 fca5 	bl	80002d0 <__aeabi_uldivmod>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800d98e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800d992:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d996:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800d998:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	011a      	lsls	r2, r3, #4
 800d9a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d9a4:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800d9a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9b0:	637a      	str	r2, [r7, #52]	@ 0x34
 800d9b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800d9b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800d9ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d9be:	695b      	ldr	r3, [r3, #20]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d9c6:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800d9ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d9ce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800d9d2:	4622      	mov	r2, r4
 800d9d4:	fb02 f203 	mul.w	r2, r2, r3
 800d9d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800d9dc:	4629      	mov	r1, r5
 800d9de:	fb01 f303 	mul.w	r3, r1, r3
 800d9e2:	441a      	add	r2, r3
 800d9e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	fba3 1301 	umull	r1, r3, r3, r1
 800d9ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d9f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d9fc:	18d3      	adds	r3, r2, r3
 800d9fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800da02:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800da06:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800da0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800da0e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800da12:	8b5b      	ldrh	r3, [r3, #26]
 800da14:	b29b      	uxth	r3, r3
 800da16:	2200      	movs	r2, #0
 800da18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da1c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800da20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800da24:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800da28:	4622      	mov	r2, r4
 800da2a:	fb02 f203 	mul.w	r2, r2, r3
 800da2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800da32:	4629      	mov	r1, r5
 800da34:	fb01 f303 	mul.w	r3, r1, r3
 800da38:	441a      	add	r2, r3
 800da3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800da3e:	4621      	mov	r1, r4
 800da40:	fba3 1301 	umull	r1, r3, r3, r1
 800da44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da48:	460b      	mov	r3, r1
 800da4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da52:	18d3      	adds	r3, r2, r3
 800da54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da58:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800da5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800da60:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800da64:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800da68:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800da6c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800da6e:	f143 0300 	adc.w	r3, r3, #0
 800da72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da74:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800da78:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800da7c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800da80:	f04f 0000 	mov.w	r0, #0
 800da84:	f04f 0100 	mov.w	r1, #0
 800da88:	0cd0      	lsrs	r0, r2, #19
 800da8a:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800da8e:	0cd9      	lsrs	r1, r3, #19
 800da90:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
		tmp64  +=  500;
 800da94:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800da98:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800da9c:	6239      	str	r1, [r7, #32]
 800da9e:	f143 0300 	adc.w	r3, r3, #0
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800daa4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800daa8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800daac:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800dab0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dab4:	f04f 0300 	mov.w	r3, #0
 800dab8:	f7f2 fc0a 	bl	80002d0 <__aeabi_uldivmod>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800dac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800dac8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800dacc:	f173 0300 	sbcs.w	r3, r3, #0
 800dad0:	d305      	bcc.n	800dade <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800dad2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800dad6:	f04f 0300 	mov.w	r3, #0
 800dada:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800dade:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800dae2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800dae6:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800dae8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2200      	movs	r2, #0
 800daf0:	61bb      	str	r3, [r7, #24]
 800daf2:	61fa      	str	r2, [r7, #28]
 800daf4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800daf8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800dafc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	2200      	movs	r2, #0
 800db04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800db08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800db0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db10:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800db14:	4622      	mov	r2, r4
 800db16:	fb02 f203 	mul.w	r2, r2, r3
 800db1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800db1e:	4629      	mov	r1, r5
 800db20:	fb01 f303 	mul.w	r3, r1, r3
 800db24:	441a      	add	r2, r3
 800db26:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800db2a:	4621      	mov	r1, r4
 800db2c:	fba3 1301 	umull	r1, r3, r3, r1
 800db30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800db34:	460b      	mov	r3, r1
 800db36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800db3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db3e:	18d3      	adds	r3, r2, r3
 800db40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800db44:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800db48:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800db4c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800db50:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800db54:	8b5b      	ldrh	r3, [r3, #26]
 800db56:	b29b      	uxth	r3, r3
 800db58:	2200      	movs	r2, #0
 800db5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800db5e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800db62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db66:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800db6a:	4622      	mov	r2, r4
 800db6c:	fb02 f203 	mul.w	r2, r2, r3
 800db70:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800db74:	4629      	mov	r1, r5
 800db76:	fb01 f303 	mul.w	r3, r1, r3
 800db7a:	441a      	add	r2, r3
 800db7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800db80:	4621      	mov	r1, r4
 800db82:	fba3 1301 	umull	r1, r3, r3, r1
 800db86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800db8a:	460b      	mov	r3, r1
 800db8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800db90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800db94:	18d3      	adds	r3, r2, r3
 800db96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800db9a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800db9e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800dba2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800dba6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800dbaa:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800dbae:	6139      	str	r1, [r7, #16]
 800dbb0:	f143 0300 	adc.w	r3, r3, #0
 800dbb4:	617b      	str	r3, [r7, #20]
 800dbb6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dbba:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800dbbe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800dbc2:	f04f 0000 	mov.w	r0, #0
 800dbc6:	f04f 0100 	mov.w	r1, #0
 800dbca:	0cd0      	lsrs	r0, r2, #19
 800dbcc:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800dbd0:	0cd9      	lsrs	r1, r3, #19
 800dbd2:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800dbd6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800dbda:	2200      	movs	r2, #0
 800dbdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbde:	67fa      	str	r2, [r7, #124]	@ 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800dbe0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dbe4:	891b      	ldrh	r3, [r3, #8]
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	2200      	movs	r2, #0
 800dbea:	673b      	str	r3, [r7, #112]	@ 0x70
 800dbec:	677a      	str	r2, [r7, #116]	@ 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800dbee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800dbf8:	4642      	mov	r2, r8
 800dbfa:	fb02 f203 	mul.w	r2, r2, r3
 800dbfe:	464b      	mov	r3, r9
 800dc00:	4621      	mov	r1, r4
 800dc02:	fb01 f303 	mul.w	r3, r1, r3
 800dc06:	4413      	add	r3, r2
 800dc08:	4622      	mov	r2, r4
 800dc0a:	4641      	mov	r1, r8
 800dc0c:	fba2 1201 	umull	r1, r2, r2, r1
 800dc10:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800dc14:	460a      	mov	r2, r1
 800dc16:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800dc1a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800dc1e:	4413      	add	r3, r2
 800dc20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dc24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dc28:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	fb02 f203 	mul.w	r2, r2, r3
 800dc32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800dc36:	4629      	mov	r1, r5
 800dc38:	fb01 f303 	mul.w	r3, r1, r3
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800dc42:	4621      	mov	r1, r4
 800dc44:	fba2 1201 	umull	r1, r2, r2, r1
 800dc48:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800dc4c:	460a      	mov	r2, r1
 800dc4e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800dc52:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800dc56:	4413      	add	r3, r2
 800dc58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dc5c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800dc60:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800dc64:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800dc68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dc6c:	88db      	ldrh	r3, [r3, #6]
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	2200      	movs	r2, #0
 800dc72:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc74:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dc76:	f04f 0200 	mov.w	r2, #0
 800dc7a:	f04f 0300 	mov.w	r3, #0
 800dc7e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800dc82:	4629      	mov	r1, r5
 800dc84:	01cb      	lsls	r3, r1, #7
 800dc86:	4621      	mov	r1, r4
 800dc88:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800dc8c:	4621      	mov	r1, r4
 800dc8e:	01ca      	lsls	r2, r1, #7
 800dc90:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800dc94:	1884      	adds	r4, r0, r2
 800dc96:	60bc      	str	r4, [r7, #8]
 800dc98:	eb41 0303 	adc.w	r3, r1, r3
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dca2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800dca6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dcaa:	88db      	ldrh	r3, [r3, #6]
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	2200      	movs	r2, #0
 800dcb0:	663b      	str	r3, [r7, #96]	@ 0x60
 800dcb2:	667a      	str	r2, [r7, #100]	@ 0x64
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	f04f 0300 	mov.w	r3, #0
 800dcbc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	020b      	lsls	r3, r1, #8
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800dcca:	4621      	mov	r1, r4
 800dccc:	020a      	lsls	r2, r1, #8
 800dcce:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800dcd2:	f7f2 fafd 	bl	80002d0 <__aeabi_uldivmod>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800dcde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800dce2:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800dce6:	6039      	str	r1, [r7, #0]
 800dce8:	f143 0300 	adc.w	r3, r3, #0
 800dcec:	607b      	str	r3, [r7, #4]
 800dcee:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dcf2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800dcf6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800dcfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dcfe:	f04f 0300 	mov.w	r3, #0
 800dd02:	f7f2 fae5 	bl	80002d0 <__aeabi_uldivmod>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800dd0e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800dd12:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800dd16:	f173 0300 	sbcs.w	r3, r3, #0
 800dd1a:	d305      	bcc.n	800dd28 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800dd1c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800dd20:	f04f 0300 	mov.w	r3, #0
 800dd24:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800dd28:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800dd2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800dd30:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800dd32:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800dd36:	69db      	ldr	r3, [r3, #28]
 800dd38:	021b      	lsls	r3, r3, #8
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fe ffcc 	bl	800ccd8 <VL53LX_isqrt>
 800dd40:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800dd44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dd48:	785b      	ldrb	r3, [r3, #1]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800dd50:	fb02 f303 	mul.w	r3, r2, r3
 800dd54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124



		if (pdata->VL53LX_p_028 <
 800dd58:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800dd5c:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800dd5e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800dd62:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d218      	bcs.n	800dd9a <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800dd68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800dd70:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800dd74:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108


			amb_thres_delta <<= 8;
 800dd7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800dd80:	021b      	lsls	r3, r3, #8
 800dd82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			if (tmp32 < amb_thres_delta)
 800dd86:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800dd8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d203      	bcs.n	800dd9a <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800dd92:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800dd96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800dd9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800dd9e:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800dda0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dda4:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800dda6:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800dda8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ddac:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800ddae:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800ddb2:	f000 f854 	bl	800de5e <VL53LX_f_002>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800ddba:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ddbe:	84da      	strh	r2, [r3, #38]	@ 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800ddc0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ddc4:	6a1b      	ldr	r3, [r3, #32]
 800ddc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800ddca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ddce:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ddd8:	fb02 f303 	mul.w	r3, r2, r3
 800dddc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 += (1 << 3);
 800dde0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800dde4:	3308      	adds	r3, #8
 800dde6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 /= (1 << 4);
 800ddea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ddee:	091b      	lsrs	r3, r3, #4
 800ddf0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800ddf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ddf8:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800ddfa:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800ddfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800de00:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800de02:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800de04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de08:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800de0a:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800de0e:	f000 f826 	bl	800de5e <VL53LX_f_002>
 800de12:	4603      	mov	r3, r0
 800de14:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800de16:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800de1a:	849a      	strh	r2, [r3, #36]	@ 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800de1c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800de20:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800de24:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800de28:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800de2c:	429a      	cmp	r2, r3
 800de2e:	da07      	bge.n	800de40 <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800de30:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800de34:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800de38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de3c:	801a      	strh	r2, [r3, #0]
 800de3e:	e006      	b.n	800de4e <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800de40:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800de44:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800de48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de4c:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800de4e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117

}
 800de52:	4618      	mov	r0, r3
 800de54:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800de58:	46bd      	mov	sp, r7
 800de5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800de5e <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b086      	sub	sp, #24
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	607a      	str	r2, [r7, #4]
 800de6a:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800de6c:	2300      	movs	r3, #0
 800de6e:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800de70:	2300      	movs	r3, #0
 800de72:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	fb03 f303 	mul.w	r3, r3, r3
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	4413      	add	r3, r2
 800de84:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800de86:	6938      	ldr	r0, [r7, #16]
 800de88:	f7fe ff26 	bl	800ccd8 <VL53LX_isqrt>
 800de8c:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800de8e:	693a      	ldr	r2, [r7, #16]
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	4413      	add	r3, r2
 800de94:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	011b      	lsls	r3, r3, #4
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fe ff1c 	bl	800ccd8 <VL53LX_isqrt>
 800dea0:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	fb02 f303 	mul.w	r3, r2, r3
 800deaa:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d009      	beq.n	800dec6 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800deb2:	697a      	ldr	r2, [r7, #20]
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	4413      	add	r3, r2
 800deb8:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	005b      	lsls	r3, r3, #1
 800debe:	697a      	ldr	r2, [r7, #20]
 800dec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dec4:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800dec6:	697b      	ldr	r3, [r7, #20]

}
 800dec8:	4618      	mov	r0, r3
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800ded8:	2300      	movs	r3, #0
 800deda:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2218      	movs	r2, #24
 800dee0:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	73fb      	strb	r3, [r7, #15]
 800df06:	e01f      	b.n	800df48 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800df08:	7bfb      	ldrb	r3, [r7, #15]
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	4413      	add	r3, r2
 800df0e:	2200      	movs	r2, #0
 800df10:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800df12:	7bfb      	ldrb	r3, [r7, #15]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	4413      	add	r3, r2
 800df18:	2200      	movs	r2, #0
 800df1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	4413      	add	r3, r2
 800df24:	2200      	movs	r2, #0
 800df26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800df2a:	7bfa      	ldrb	r2, [r7, #15]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	322e      	adds	r2, #46	@ 0x2e
 800df30:	2100      	movs	r1, #0
 800df32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800df36:	7bfa      	ldrb	r2, [r7, #15]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	3246      	adds	r2, #70	@ 0x46
 800df3c:	2100      	movs	r1, #0
 800df3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800df42:	7bfb      	ldrb	r3, [r7, #15]
 800df44:	3301      	adds	r3, #1
 800df46:	73fb      	strb	r3, [r7, #15]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	7bfa      	ldrb	r2, [r7, #15]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d3da      	bcc.n	800df08 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2208      	movs	r2, #8
 800df5e:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
	palgo->VL53LX_p_046             = 0;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800df70:	461a      	mov	r2, r3
 800df72:	2118      	movs	r1, #24
 800df74:	2000      	movs	r0, #0
 800df76:	f7ff f9e8 	bl	800d34a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800df80:	461a      	mov	r2, r3
 800df82:	2118      	movs	r1, #24
 800df84:	2000      	movs	r0, #0
 800df86:	f7ff f9e0 	bl	800d34a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800df90:	461a      	mov	r2, r3
 800df92:	2118      	movs	r1, #24
 800df94:	2000      	movs	r0, #0
 800df96:	f7ff f9d8 	bl	800d34a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	2118      	movs	r1, #24
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	f7ff f9d0 	bl	800d34a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	2118      	movs	r1, #24
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	f7ff f9c8 	bl	800d34a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800dfba:	bf00      	nop
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800dfc2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dfc6:	b090      	sub	sp, #64	@ 0x40
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	61b9      	str	r1, [r7, #24]
 800dfcc:	617a      	str	r2, [r7, #20]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	83fb      	strh	r3, [r7, #30]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t  lb            = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int64_t  tmp          = 0;
 800dfea:	f04f 0200 	mov.w	r2, #0
 800dfee:	f04f 0300 	mov.w	r3, #0
 800dff2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t  amb_events   = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  VL53LX_p_018       = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t  samples      = 0;
 800dffe:	2300      	movs	r3, #0
 800e000:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800e002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e004:	7a5a      	ldrb	r2, [r3, #9]
 800e006:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e008:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800e00a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e00c:	7a1a      	ldrb	r2, [r3, #8]
 800e00e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e010:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800e012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e014:	7a9a      	ldrb	r2, [r3, #10]
 800e016:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e018:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800e01a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e01c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800e020:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e022:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800e024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e026:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7ff f93c 	bl	800d2a8 <VL53LX_decode_vcsel_period>
 800e030:	4603      	mov	r3, r0
 800e032:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800e034:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e036:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800e038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e03a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e03e:	17da      	asrs	r2, r3, #31
 800e040:	60bb      	str	r3, [r7, #8]
 800e042:	60fa      	str	r2, [r7, #12]
 800e044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e048:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800e04c:	8bfb      	ldrh	r3, [r7, #30]
 800e04e:	2200      	movs	r2, #0
 800e050:	4698      	mov	r8, r3
 800e052:	4691      	mov	r9, r2
 800e054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e056:	fb08 f203 	mul.w	r2, r8, r3
 800e05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05c:	fb09 f303 	mul.w	r3, r9, r3
 800e060:	4413      	add	r3, r2
 800e062:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e064:	fba2 4508 	umull	r4, r5, r2, r8
 800e068:	442b      	add	r3, r5
 800e06a:	461d      	mov	r5, r3
 800e06c:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800e070:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	tmp += 2048;
 800e074:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e078:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800e07c:	f143 0b00 	adc.w	fp, r3, #0
 800e080:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
	tmp = do_division_s(tmp, 4096);
 800e084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da08      	bge.n	800e09e <VL53LX_f_006+0xdc>
 800e08c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800e090:	1851      	adds	r1, r2, r1
 800e092:	6039      	str	r1, [r7, #0]
 800e094:	f143 0300 	adc.w	r3, r3, #0
 800e098:	607b      	str	r3, [r7, #4]
 800e09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e09e:	f04f 0000 	mov.w	r0, #0
 800e0a2:	f04f 0100 	mov.w	r1, #0
 800e0a6:	0b10      	lsrs	r0, r2, #12
 800e0a8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800e0ac:	1319      	asrs	r1, r3, #12
 800e0ae:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	amb_events = (int32_t)tmp;
 800e0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b4:	627b      	str	r3, [r7, #36]	@ 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e0bc:	e062      	b.n	800e184 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800e0be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0c2:	089b      	lsrs	r3, r3, #2
 800e0c4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800e0c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e0cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e0ce:	4413      	add	r3, r2
 800e0d0:	7c9b      	ldrb	r3, [r3, #18]
 800e0d2:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	dd4f      	ble.n	800e17a <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800e0da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0dc:	7a9b      	ldrb	r3, [r3, #10]
 800e0de:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d20f      	bcs.n	800e106 <VL53LX_f_006+0x144>
 800e0e6:	7f7b      	ldrb	r3, [r7, #29]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00c      	beq.n	800e106 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800e0ec:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e0f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0f2:	3206      	adds	r2, #6
 800e0f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0fa:	441a      	add	r2, r3
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	fb02 f303 	mul.w	r3, r2, r3
 800e102:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e104:	e004      	b.n	800e110 <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800e106:	6a3b      	ldr	r3, [r7, #32]
 800e108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e10a:	fb02 f303 	mul.w	r3, r2, r3
 800e10e:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800e110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e112:	4618      	mov	r0, r3
 800e114:	f7fe fde0 	bl	800ccd8 <VL53LX_isqrt>
 800e118:	4603      	mov	r3, r0
 800e11a:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018 += (samples/2);
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	0fda      	lsrs	r2, r3, #31
 800e120:	4413      	add	r3, r2
 800e122:	105b      	asrs	r3, r3, #1
 800e124:	461a      	mov	r2, r3
 800e126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e128:	4413      	add	r3, r2
 800e12a:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= samples;
 800e12c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	fb92 f3f3 	sdiv	r3, r2, r3
 800e134:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800e136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e138:	69ba      	ldr	r2, [r7, #24]
 800e13a:	fb02 f303 	mul.w	r3, r2, r3
 800e13e:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += 8;
 800e140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e142:	3308      	adds	r3, #8
 800e144:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= 16;
 800e146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e148:	2b00      	cmp	r3, #0
 800e14a:	da00      	bge.n	800e14e <VL53LX_f_006+0x18c>
 800e14c:	330f      	adds	r3, #15
 800e14e:	111b      	asrs	r3, r3, #4
 800e150:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += amb_events;
 800e152:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e156:	4413      	add	r3, r2
 800e158:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800e15a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	429a      	cmp	r2, r3
 800e160:	da01      	bge.n	800e166 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	63bb      	str	r3, [r7, #56]	@ 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800e166:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e16a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e16c:	3216      	adds	r2, #22
 800e16e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800e174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e178:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800e17a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e17e:	3301      	adds	r3, #1
 800e180:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e186:	7a9b      	ldrb	r3, [r3, #10]
 800e188:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d396      	bcc.n	800e0be <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800e190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e192:	2200      	movs	r2, #0
 800e194:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800e196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e198:	7a1b      	ldrb	r3, [r3, #8]
 800e19a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e19e:	e033      	b.n	800e208 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800e1a0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e1a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1a6:	3206      	adds	r2, #6
 800e1a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e1ac:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800e1b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1b2:	3116      	adds	r1, #22
 800e1b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	dd13      	ble.n	800e1e4 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800e1bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e1c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e1c2:	4413      	add	r3, r2
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800e1c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e1cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e1ce:	4413      	add	r3, r2
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			palgo->VL53LX_p_039++;
 800e1d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1d8:	791b      	ldrb	r3, [r3, #4]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1e0:	711a      	strb	r2, [r3, #4]
 800e1e2:	e00c      	b.n	800e1fe <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800e1e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e1e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e1ea:	4413      	add	r3, r2
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800e1f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e1f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e1f6:	4413      	add	r3, r2
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800e1fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e202:	3301      	adds	r3, #1
 800e204:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e20a:	7a9b      	ldrb	r3, [r3, #10]
 800e20c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e210:	429a      	cmp	r2, r3
 800e212:	d3c5      	bcc.n	800e1a0 <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e214:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37

}
 800e218:	4618      	mov	r0, r3
 800e21a:	3740      	adds	r7, #64	@ 0x40
 800e21c:	46bd      	mov	sp, r7
 800e21e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e222 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e222:	b480      	push	{r7}
 800e224:	b085      	sub	sp, #20
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e22a:	2300      	movs	r3, #0
 800e22c:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800e22e:	2300      	movs	r3, #0
 800e230:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800e236:	2300      	movs	r3, #0
 800e238:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800e242:	2300      	movs	r3, #0
 800e244:	73fb      	strb	r3, [r7, #15]
 800e246:	e02d      	b.n	800e2a4 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	3301      	adds	r3, #1
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	78d2      	ldrb	r2, [r2, #3]
 800e250:	fb93 f1f2 	sdiv	r1, r3, r2
 800e254:	fb01 f202 	mul.w	r2, r1, r2
 800e258:	1a9b      	subs	r3, r3, r2
 800e25a:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	789b      	ldrb	r3, [r3, #2]
 800e260:	7bfa      	ldrb	r2, [r7, #15]
 800e262:	429a      	cmp	r2, r3
 800e264:	d21b      	bcs.n	800e29e <VL53LX_f_007+0x7c>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	789b      	ldrb	r3, [r3, #2]
 800e26a:	7b3a      	ldrb	r2, [r7, #12]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d216      	bcs.n	800e29e <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800e270:	7bfb      	ldrb	r3, [r7, #15]
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	4413      	add	r3, r2
 800e276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10f      	bne.n	800e29e <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800e27e:	7b3b      	ldrb	r3, [r7, #12]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	4413      	add	r3, r2
 800e284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d108      	bne.n	800e29e <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d105      	bne.n	800e29e <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7bfa      	ldrb	r2, [r7, #15]
 800e296:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
				found = 1;
 800e29a:	2301      	movs	r3, #1
 800e29c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	73fb      	strb	r3, [r7, #15]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	78db      	ldrb	r3, [r3, #3]
 800e2a8:	7bfa      	ldrb	r2, [r7, #15]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d3cc      	bcc.n	800e248 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e2ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3714      	adds	r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e2be:	b480      	push	{r7}
 800e2c0:	b085      	sub	sp, #20
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800e2dc:	73fb      	strb	r3, [r7, #15]
 800e2de:	e05a      	b.n	800e396 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	78da      	ldrb	r2, [r3, #3]
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2ea:	fb01 f202 	mul.w	r2, r1, r2
 800e2ee:	1a9b      	subs	r3, r3, r2
 800e2f0:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800e2f2:	7bfb      	ldrb	r3, [r7, #15]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	78d2      	ldrb	r2, [r2, #3]
 800e2fa:	fb93 f1f2 	sdiv	r1, r3, r2
 800e2fe:	fb01 f202 	mul.w	r2, r1, r2
 800e302:	1a9b      	subs	r3, r3, r2
 800e304:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	789b      	ldrb	r3, [r3, #2]
 800e30a:	7b7a      	ldrb	r2, [r7, #13]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d23f      	bcs.n	800e390 <VL53LX_f_008+0xd2>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	789b      	ldrb	r3, [r3, #2]
 800e314:	7b3a      	ldrb	r2, [r7, #12]
 800e316:	429a      	cmp	r2, r3
 800e318:	d23a      	bcs.n	800e390 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800e31a:	7b7b      	ldrb	r3, [r7, #13]
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	4413      	add	r3, r2
 800e320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10e      	bne.n	800e346 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800e328:	7b3b      	ldrb	r3, [r7, #12]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	4413      	add	r3, r2
 800e32e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800e332:	2b01      	cmp	r3, #1
 800e334:	d107      	bne.n	800e346 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800e33c:	3301      	adds	r3, #1
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800e352:	429a      	cmp	r2, r3
 800e354:	d905      	bls.n	800e362 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800e362:	7b7b      	ldrb	r3, [r7, #13]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	4413      	add	r3, r2
 800e368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d009      	beq.n	800e384 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800e370:	7b7b      	ldrb	r3, [r7, #13]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	f892 117a 	ldrb.w	r1, [r2, #378]	@ 0x17a
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	4413      	add	r3, r2
 800e37c:	460a      	mov	r2, r1
 800e37e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e382:	e005      	b.n	800e390 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800e384:	7b7b      	ldrb	r3, [r7, #13]
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	4413      	add	r3, r2
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lb++) {
 800e390:	7bfb      	ldrb	r3, [r7, #15]
 800e392:	3301      	adds	r3, #1
 800e394:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800e396:	7bfa      	ldrb	r2, [r7, #15]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800e39e:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800e3a4:	440b      	add	r3, r1
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	db9a      	blt.n	800e2e0 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800e3aa:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3714      	adds	r7, #20
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e3ba:	b480      	push	{r7}
 800e3bc:	b087      	sub	sp, #28
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	78db      	ldrb	r3, [r3, #3]
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800e3e2:	7cbb      	ldrb	r3, [r7, #18]
 800e3e4:	085b      	lsrs	r3, r3, #1
 800e3e6:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800e3ee:	75fb      	strb	r3, [r7, #23]
 800e3f0:	e0a2      	b.n	800e538 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	78da      	ldrb	r2, [r3, #3]
 800e3f6:	7dfb      	ldrb	r3, [r7, #23]
 800e3f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3fc:	fb01 f202 	mul.w	r2, r1, r2
 800e400:	1a9b      	subs	r3, r3, r2
 800e402:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	3301      	adds	r3, #1
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	78d2      	ldrb	r2, [r2, #3]
 800e40c:	fb93 f1f2 	sdiv	r1, r3, r2
 800e410:	fb01 f202 	mul.w	r2, r1, r2
 800e414:	1a9b      	subs	r3, r3, r2
 800e416:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	789b      	ldrb	r3, [r3, #2]
 800e41c:	7d7a      	ldrb	r2, [r7, #21]
 800e41e:	429a      	cmp	r2, r3
 800e420:	f080 8087 	bcs.w	800e532 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800e428:	7d3a      	ldrb	r2, [r7, #20]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	f080 8081 	bcs.w	800e532 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800e430:	7d7b      	ldrb	r3, [r7, #21]
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	4413      	add	r3, r2
 800e436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d12f      	bne.n	800e49e <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800e43e:	7d3b      	ldrb	r3, [r7, #20]
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	4413      	add	r3, r2
 800e444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d028      	beq.n	800e49e <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800e44c:	7d3b      	ldrb	r3, [r7, #20]
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	4413      	add	r3, r2
 800e452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e456:	3b01      	subs	r3, #1
 800e458:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800e460:	7cfa      	ldrb	r2, [r7, #19]
 800e462:	429a      	cmp	r2, r3
 800e464:	d21b      	bcs.n	800e49e <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800e466:	7cfa      	ldrb	r2, [r7, #19]
 800e468:	4613      	mov	r3, r2
 800e46a:	00db      	lsls	r3, r3, #3
 800e46c:	4413      	add	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	4413      	add	r3, r2
 800e478:	3304      	adds	r3, #4
 800e47a:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	7dfa      	ldrb	r2, [r7, #23]
 800e480:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800e482:	7dfb      	ldrb	r3, [r7, #23]
 800e484:	3301      	adds	r3, #1
 800e486:	b2da      	uxtb	r2, r3
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	22ff      	movs	r2, #255	@ 0xff
 800e490:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2200      	movs	r2, #0
 800e49c:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800e49e:	7d7b      	ldrb	r3, [r7, #21]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d042      	beq.n	800e532 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800e4ac:	7d3b      	ldrb	r3, [r7, #20]
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d13b      	bne.n	800e532 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800e4ba:	7d7b      	ldrb	r3, [r7, #21]
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800e4ce:	7cfa      	ldrb	r2, [r7, #19]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d22e      	bcs.n	800e532 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800e4d4:	7cfa      	ldrb	r2, [r7, #19]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	00db      	lsls	r3, r3, #3
 800e4da:	4413      	add	r3, r2
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	7dfa      	ldrb	r2, [r7, #23]
 800e4ee:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800e4f0:	7dfb      	ldrb	r3, [r7, #23]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	b2db      	uxtb	r3, r3
 800e506:	3301      	adds	r3, #1
 800e508:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	3301      	adds	r3, #1
 800e51c:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	799b      	ldrb	r3, [r3, #6]
 800e526:	7cba      	ldrb	r2, [r7, #18]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d202      	bcs.n	800e532 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	7cba      	ldrb	r2, [r7, #18]
 800e530:	719a      	strb	r2, [r3, #6]
		blb++) {
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	3301      	adds	r3, #1
 800e536:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800e538:	7dfa      	ldrb	r2, [r7, #23]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800e540:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800e546:	440b      	add	r3, r1
 800e548:	429a      	cmp	r2, r3
 800e54a:	f6ff af52 	blt.w	800e3f2 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e54e:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800e552:	4618      	mov	r0, r3
 800e554:	371c      	adds	r7, #28
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr

0800e55e <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b090      	sub	sp, #64	@ 0x40
 800e562:	af00      	add	r7, sp, #0
 800e564:	4603      	mov	r3, r0
 800e566:	6039      	str	r1, [r7, #0]
 800e568:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e56a:	2300      	movs	r3, #0
 800e56c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800e570:	f107 030c 	add.w	r3, r7, #12
 800e574:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800e576:	2300      	movs	r3, #0
 800e578:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t swapped = 1;
 800e57c:	2301      	movs	r3, #1
 800e57e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d965      	bls.n	800e658 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800e58c:	e05f      	b.n	800e64e <VL53LX_f_016+0xf0>

		swapped = 0;
 800e58e:	2300      	movs	r3, #0
 800e590:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800e594:	2301      	movs	r3, #1
 800e596:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e59a:	e051      	b.n	800e640 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800e59c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e5a0:	1e5a      	subs	r2, r3, #1
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	00db      	lsls	r3, r3, #3
 800e5a6:	4413      	add	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	637b      	str	r3, [r7, #52]	@ 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800e5b6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	00db      	lsls	r3, r3, #3
 800e5be:	4413      	add	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e5c6:	683a      	ldr	r2, [r7, #0]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	633b      	str	r3, [r7, #48]	@ 0x30



			if (target_order
 800e5ce:	79fb      	ldrb	r3, [r7, #7]
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d118      	bne.n	800e606 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800e5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5d6:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800e5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5da:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	da2a      	bge.n	800e636 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800e5e0:	2224      	movs	r2, #36	@ 0x24
 800e5e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e5e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5e6:	f00e fd3e 	bl	801d066 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800e5ea:	2224      	movs	r2, #36	@ 0x24
 800e5ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e5ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5f0:	f00e fd39 	bl	801d066 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800e5f4:	2224      	movs	r2, #36	@ 0x24
 800e5f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e5f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e5fa:	f00e fd34 	bl	801d066 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800e5fe:	2301      	movs	r3, #1
 800e600:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800e604:	e017      	b.n	800e636 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800e606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e608:	699a      	ldr	r2, [r3, #24]
 800e60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60c:	699b      	ldr	r3, [r3, #24]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d911      	bls.n	800e636 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800e612:	2224      	movs	r2, #36	@ 0x24
 800e614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e616:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e618:	f00e fd25 	bl	801d066 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800e61c:	2224      	movs	r2, #36	@ 0x24
 800e61e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e622:	f00e fd20 	bl	801d066 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800e626:	2224      	movs	r2, #36	@ 0x24
 800e628:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e62a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e62c:	f00e fd1b 	bl	801d066 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800e630:	2301      	movs	r3, #1
 800e632:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800e636:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e63a:	3301      	adds	r3, #1
 800e63c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800e646:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d3a6      	bcc.n	800e59c <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800e64e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e652:	2b00      	cmp	r3, #0
 800e654:	d19b      	bne.n	800e58e <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800e656:	e000      	b.n	800e65a <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800e658:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800e65a:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d

}
 800e65e:	4618      	mov	r0, r3
 800e660:	3740      	adds	r7, #64	@ 0x40
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e666:	b480      	push	{r7}
 800e668:	b087      	sub	sp, #28
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	4603      	mov	r3, r0
 800e66e:	60b9      	str	r1, [r7, #8]
 800e670:	607a      	str	r2, [r7, #4]
 800e672:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e674:	2300      	movs	r3, #0
 800e676:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800e680:	7bfa      	ldrb	r2, [r7, #15]
 800e682:	4613      	mov	r3, r2
 800e684:	00db      	lsls	r3, r3, #3
 800e686:	4413      	add	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	4413      	add	r3, r2
 800e692:	3304      	adds	r3, #4
 800e694:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	2200      	movs	r2, #0
 800e69a:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	75fb      	strb	r3, [r7, #23]
 800e6a8:	e01c      	b.n	800e6e4 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	78da      	ldrb	r2, [r3, #3]
 800e6ae:	7dfb      	ldrb	r3, [r7, #23]
 800e6b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6b4:	fb01 f202 	mul.w	r2, r1, r2
 800e6b8:	1a9b      	subs	r3, r3, r2
 800e6ba:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	68da      	ldr	r2, [r3, #12]
 800e6c0:	7d79      	ldrb	r1, [r7, #21]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	3106      	adds	r1, #6
 800e6c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6ca:	441a      	add	r2, r3
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	689a      	ldr	r2, [r3, #8]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	441a      	add	r2, r3
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800e6de:	7dfb      	ldrb	r3, [r7, #23]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	75fb      	strb	r3, [r7, #23]
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	791b      	ldrb	r3, [r3, #4]
 800e6e8:	7dfa      	ldrb	r2, [r7, #23]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d9dd      	bls.n	800e6aa <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	68da      	ldr	r2, [r3, #12]
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800e6fc:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800e700:	4618      	mov	r0, r3
 800e702:	371c      	adds	r7, #28
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e70c:	b590      	push	{r4, r7, lr}
 800e70e:	b08d      	sub	sp, #52	@ 0x34
 800e710:	af02      	add	r7, sp, #8
 800e712:	60ba      	str	r2, [r7, #8]
 800e714:	607b      	str	r3, [r7, #4]
 800e716:	4603      	mov	r3, r0
 800e718:	73fb      	strb	r3, [r7, #15]
 800e71a:	460b      	mov	r3, r1
 800e71c:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e71e:	2300      	movs	r3, #0
 800e720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint8_t   i            = 0;
 800e724:	2300      	movs	r3, #0
 800e726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int16_t   VL53LX_p_012 = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800e732:	2300      	movs	r3, #0
 800e734:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t  tmp_phase    = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800e73a:	7bfa      	ldrb	r2, [r7, #15]
 800e73c:	4613      	mov	r3, r2
 800e73e:	00db      	lsls	r3, r3, #3
 800e740:	4413      	add	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	4413      	add	r3, r2
 800e74c:	3304      	adds	r3, #4
 800e74e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	789b      	ldrb	r3, [r3, #2]
 800e754:	2bff      	cmp	r3, #255	@ 0xff
 800e756:	d102      	bne.n	800e75e <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2201      	movs	r2, #1
 800e75c:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	789b      	ldrb	r3, [r3, #2]
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	78d2      	ldrb	r2, [r2, #3]
 800e766:	fbb3 f1f2 	udiv	r1, r3, r2
 800e76a:	fb01 f202 	mul.w	r2, r1, r2
 800e76e:	1a9b      	subs	r3, r3, r2
 800e770:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	VL53LX_p_012  = (int16_t)i;
 800e774:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e778:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	461a      	mov	r2, r3
 800e780:	8c3b      	ldrh	r3, [r7, #32]
 800e782:	4413      	add	r3, r2
 800e784:	b29b      	uxth	r3, r3
 800e786:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800e788:	8c3b      	ldrh	r3, [r7, #32]
 800e78a:	697a      	ldr	r2, [r7, #20]
 800e78c:	7892      	ldrb	r2, [r2, #2]
 800e78e:	1a9b      	subs	r3, r3, r2
 800e790:	b29b      	uxth	r3, r3
 800e792:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800e794:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e798:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	791b      	ldrb	r3, [r3, #4]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	8bfb      	ldrh	r3, [r7, #30]
 800e7a2:	4413      	add	r3, r2
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800e7a8:	8bfb      	ldrh	r3, [r7, #30]
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	7892      	ldrb	r2, [r2, #2]
 800e7ae:	1a9b      	subs	r3, r3, r2
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800e7b4:	8bfa      	ldrh	r2, [r7, #30]
 800e7b6:	8c3b      	ldrh	r3, [r7, #32]
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (window_width > 3)
 800e7be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e7c2:	2b03      	cmp	r3, #3
 800e7c4:	dd01      	ble.n	800e7ca <VL53LX_f_015+0xbe>
		window_width = 3;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	84bb      	strh	r3, [r7, #36]	@ 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800e7ca:	8c3a      	ldrh	r2, [r7, #32]
 800e7cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7ce:	4413      	add	r3, r2
 800e7d0:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800e7d2:	b219      	sxth	r1, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	78da      	ldrb	r2, [r3, #3]
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	3314      	adds	r3, #20
 800e7dc:	7bbc      	ldrb	r4, [r7, #14]
 800e7de:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800e7e2:	9301      	str	r3, [sp, #4]
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	f000 f846 	bl	800e87a <VL53LX_f_020>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800e7f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d114      	bne.n	800e826 <VL53LX_f_015+0x11a>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800e7fc:	8bfa      	ldrh	r2, [r7, #30]
 800e7fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800e804:	b218      	sxth	r0, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	78da      	ldrb	r2, [r3, #3]
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	331c      	adds	r3, #28
 800e80e:	7bbc      	ldrb	r4, [r7, #14]
 800e810:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	4623      	mov	r3, r4
 800e81c:	f000 f82d 	bl	800e87a <VL53LX_f_020>
 800e820:	4603      	mov	r3, r0
 800e822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	695a      	ldr	r2, [r3, #20]
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	69db      	ldr	r3, [r3, #28]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d909      	bls.n	800e846 <VL53LX_f_015+0x13a>
		tmp_phase        = pdata->VL53LX_p_026;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	695b      	ldr	r3, [r3, #20]
 800e836:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	69da      	ldr	r2, [r3, #28]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	69ba      	ldr	r2, [r7, #24]
 800e844:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	699a      	ldr	r2, [r3, #24]
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	695b      	ldr	r3, [r3, #20]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d203      	bcs.n	800e85a <VL53LX_f_015+0x14e>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	699a      	ldr	r2, [r3, #24]
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	699a      	ldr	r2, [r3, #24]
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	69db      	ldr	r3, [r3, #28]
 800e862:	429a      	cmp	r2, r3
 800e864:	d903      	bls.n	800e86e <VL53LX_f_015+0x162>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	699a      	ldr	r2, [r3, #24]
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800e86e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e872:	4618      	mov	r0, r3
 800e874:	372c      	adds	r7, #44	@ 0x2c
 800e876:	46bd      	mov	sp, r7
 800e878:	bd90      	pop	{r4, r7, pc}

0800e87a <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800e87a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87e:	b09d      	sub	sp, #116	@ 0x74
 800e880:	af00      	add	r7, sp, #0
 800e882:	461c      	mov	r4, r3
 800e884:	4603      	mov	r3, r0
 800e886:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800e88a:	460b      	mov	r3, r1
 800e88c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800e890:	4613      	mov	r3, r2
 800e892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e896:	4623      	mov	r3, r4
 800e898:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e89c:	2300      	movs	r3, #0
 800e89e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	int16_t  i            = 0;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	int16_t  lb            = 0;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	int64_t VL53LX_p_018        = 0;
 800e8ae:	f04f 0200 	mov.w	r2, #0
 800e8b2:	f04f 0300 	mov.w	r3, #0
 800e8b6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t event_sum     = 0;
 800e8ba:	f04f 0200 	mov.w	r2, #0
 800e8be:	f04f 0300 	mov.w	r3, #0
 800e8c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t weighted_sum  = 0;
 800e8c6:	f04f 0200 	mov.w	r2, #0
 800e8ca:	f04f 0300 	mov.w	r3, #0
 800e8ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800e8d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e8d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e8da:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800e8dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 809c 	beq.w	800ea1e <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800e8e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e8ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800e8ee:	e08f      	b.n	800ea10 <VL53LX_f_020+0x196>

		if (lb < 0)
 800e8f0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	da09      	bge.n	800e90c <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800e8f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e902:	4413      	add	r3, r2
 800e904:	b29b      	uxth	r3, r3
 800e906:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800e90a:	e00a      	b.n	800e922 <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800e90c:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 800e910:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800e914:	fb91 f3f2 	sdiv	r3, r1, r2
 800e918:	fb02 f303 	mul.w	r3, r2, r3
 800e91c:	1acb      	subs	r3, r1, r3
 800e91e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800e922:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800e926:	2b00      	cmp	r3, #0
 800e928:	db6b      	blt.n	800ea02 <VL53LX_f_020+0x188>
 800e92a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800e92e:	2b17      	cmp	r3, #23
 800e930:	dc67      	bgt.n	800ea02 <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800e932:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800e936:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e93a:	3306      	adds	r3, #6
 800e93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e940:	17da      	asrs	r2, r3, #31
 800e942:	633b      	str	r3, [r7, #48]	@ 0x30
 800e944:	637a      	str	r2, [r7, #52]	@ 0x34
				(int64_t)pbins->VL53LX_p_028;
 800e946:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e94a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e94e:	17da      	asrs	r2, r3, #31
 800e950:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e952:	62fa      	str	r2, [r7, #44]	@ 0x2c
			VL53LX_p_018 =
 800e954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800e95a:	4602      	mov	r2, r0
 800e95c:	1a9b      	subs	r3, r3, r2
 800e95e:	623b      	str	r3, [r7, #32]
 800e960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e962:	460a      	mov	r2, r1
 800e964:	eb63 0302 	sbc.w	r3, r3, r2
 800e968:	627b      	str	r3, [r7, #36]	@ 0x24
 800e96a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e96e:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800e972:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e976:	2b00      	cmp	r3, #0
 800e978:	d009      	beq.n	800e98e <VL53LX_f_020+0x114>
 800e97a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800e97e:	2b00      	cmp	r3, #0
 800e980:	da05      	bge.n	800e98e <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800e982:	f04f 0200 	mov.w	r2, #0
 800e986:	f04f 0300 	mov.w	r3, #0
 800e98a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			event_sum += VL53LX_p_018;
 800e98e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800e992:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800e996:	1884      	adds	r4, r0, r2
 800e998:	61bc      	str	r4, [r7, #24]
 800e99a:	eb41 0303 	adc.w	r3, r1, r3
 800e99e:	61fb      	str	r3, [r7, #28]
 800e9a0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e9a4:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800e9a8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800e9ac:	17da      	asrs	r2, r3, #31
 800e9ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e9b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e9b2:	f04f 0200 	mov.w	r2, #0
 800e9b6:	f04f 0300 	mov.w	r3, #0
 800e9ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e9bc:	02cb      	lsls	r3, r1, #11
 800e9be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e9c0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e9c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e9c6:	02ca      	lsls	r2, r1, #11
 800e9c8:	f512 6580 	adds.w	r5, r2, #1024	@ 0x400
 800e9cc:	f143 0600 	adc.w	r6, r3, #0
 800e9d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9d2:	fb06 f203 	mul.w	r2, r6, r3
 800e9d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9d8:	fb05 f303 	mul.w	r3, r5, r3
 800e9dc:	441a      	add	r2, r3
 800e9de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9e0:	fba3 ab05 	umull	sl, fp, r3, r5
 800e9e4:	eb02 030b 	add.w	r3, r2, fp
 800e9e8:	469b      	mov	fp, r3
			weighted_sum +=
 800e9ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e9ee:	eb12 010a 	adds.w	r1, r2, sl
 800e9f2:	6139      	str	r1, [r7, #16]
 800e9f4:	eb43 030b 	adc.w	r3, r3, fp
 800e9f8:	617b      	str	r3, [r7, #20]
 800e9fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e9fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800ea02:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	3301      	adds	r3, #1
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800ea10:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800ea14:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	f77f af69 	ble.w	800e8f0 <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800ea1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ea22:	2a01      	cmp	r2, #1
 800ea24:	f173 0300 	sbcs.w	r3, r3, #0
 800ea28:	db3b      	blt.n	800eaa2 <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800ea2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ea2e:	0fd9      	lsrs	r1, r3, #31
 800ea30:	2000      	movs	r0, #0
 800ea32:	60b9      	str	r1, [r7, #8]
 800ea34:	60f8      	str	r0, [r7, #12]
 800ea36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	eb11 0802 	adds.w	r8, r1, r2
 800ea40:	4629      	mov	r1, r5
 800ea42:	eb41 0903 	adc.w	r9, r1, r3
 800ea46:	f04f 0200 	mov.w	r2, #0
 800ea4a:	f04f 0300 	mov.w	r3, #0
 800ea4e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800ea52:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800ea56:	ea4f 0369 	mov.w	r3, r9, asr #1
 800ea5a:	4610      	mov	r0, r2
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ea62:	1814      	adds	r4, r2, r0
 800ea64:	603c      	str	r4, [r7, #0]
 800ea66:	414b      	adcs	r3, r1
 800ea68:	607b      	str	r3, [r7, #4]
 800ea6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ea6e:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800ea72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ea76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800ea7a:	f7f1 fbd9 	bl	8000230 <__aeabi_ldivmod>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		if (weighted_sum < 0)
 800ea86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	da05      	bge.n	800ea9a <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800ea8e:	f04f 0200 	mov.w	r2, #0
 800ea92:	f04f 0300 	mov.w	r3, #0
 800ea96:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		*pphase = (uint32_t)weighted_sum;
 800ea9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ea9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800eaa0:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800eaa2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3774      	adds	r7, #116	@ 0x74
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eab0 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60b9      	str	r1, [r7, #8]
 800eab8:	607a      	str	r2, [r7, #4]
 800eaba:	603b      	str	r3, [r7, #0]
 800eabc:	4603      	mov	r3, r0
 800eabe:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800eac0:	2300      	movs	r3, #0
 800eac2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800eacc:	7bfa      	ldrb	r2, [r7, #15]
 800eace:	4613      	mov	r3, r2
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	4413      	add	r3, r2
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	4413      	add	r3, r2
 800eade:	3304      	adds	r3, #4
 800eae0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800eae2:	22ac      	movs	r2, #172	@ 0xac
 800eae4:	68b9      	ldr	r1, [r7, #8]
 800eae6:	6a38      	ldr	r0, [r7, #32]
 800eae8:	f00e fabd 	bl	801d066 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800eaf2:	75fb      	strb	r3, [r7, #23]
 800eaf4:	e020      	b.n	800eb38 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	7dfa      	ldrb	r2, [r7, #23]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d304      	bcc.n	800eb0a <VL53LX_f_011+0x5a>
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	791b      	ldrb	r3, [r3, #4]
 800eb04:	7dfa      	ldrb	r2, [r7, #23]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d913      	bls.n	800eb32 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	78da      	ldrb	r2, [r3, #3]
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb14:	fb01 f202 	mul.w	r2, r1, r2
 800eb18:	1a9b      	subs	r3, r3, r2
 800eb1a:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800eb1c:	6a3b      	ldr	r3, [r7, #32]
 800eb1e:	7a9b      	ldrb	r3, [r3, #10]
 800eb20:	7d7a      	ldrb	r2, [r7, #21]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d205      	bcs.n	800eb32 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800eb26:	7d7a      	ldrb	r2, [r7, #21]
 800eb28:	6a3b      	ldr	r3, [r7, #32]
 800eb2a:	3206      	adds	r2, #6
 800eb2c:	6839      	ldr	r1, [r7, #0]
 800eb2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800eb32:	7dfb      	ldrb	r3, [r7, #23]
 800eb34:	3301      	adds	r3, #1
 800eb36:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800eb38:	7dfa      	ldrb	r2, [r7, #23]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800eb40:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800eb46:	440b      	add	r3, r1
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	dbd4      	blt.n	800eaf6 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800eb4c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3718      	adds	r7, #24
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800eb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5c:	b096      	sub	sp, #88	@ 0x58
 800eb5e:	af08      	add	r7, sp, #32
 800eb60:	4604      	mov	r4, r0
 800eb62:	4608      	mov	r0, r1
 800eb64:	4611      	mov	r1, r2
 800eb66:	461a      	mov	r2, r3
 800eb68:	4623      	mov	r3, r4
 800eb6a:	73fb      	strb	r3, [r7, #15]
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73bb      	strb	r3, [r7, #14]
 800eb70:	460b      	mov	r3, r1
 800eb72:	737b      	strb	r3, [r7, #13]
 800eb74:	4613      	mov	r3, r2
 800eb76:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t  i    = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	int32_t  VL53LX_p_007    = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t  VL53LX_p_032    = 0;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t  VL53LX_p_001    = 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t  a_zp = 0;
 800eb96:	2300      	movs	r3, #0
 800eb98:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  c_zp = 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800ebaa:	7b7b      	ldrb	r3, [r7, #13]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d106      	bne.n	800ebbe <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800ebb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ebb6:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800ebb8:	f06f 030e 	mvn.w	r3, #14
 800ebbc:	e06f      	b.n	800ec9e <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800ebbe:	7bfb      	ldrb	r3, [r7, #15]
 800ebc0:	7b7a      	ldrb	r2, [r7, #13]
 800ebc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebc6:	fb01 f202 	mul.w	r2, r1, r2
 800ebca:	1a9b      	subs	r3, r3, r2
 800ebcc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35



	VL53LX_f_022(
 800ebd0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ebd4:	7b39      	ldrb	r1, [r7, #12]
 800ebd6:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800ebda:	f107 0320 	add.w	r3, r7, #32
 800ebde:	9301      	str	r3, [sp, #4]
 800ebe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ebea:	f000 fddb 	bl	800f7a4 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800ebee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ebf2:	7b39      	ldrb	r1, [r7, #12]
 800ebf4:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800ebf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ebfc:	9301      	str	r3, [sp, #4]
 800ebfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	4613      	mov	r3, r2
 800ec06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec08:	f000 fdcc 	bl	800f7a4 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800ec0c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00e      	beq.n	800ec32 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800ec14:	f107 021c 	add.w	r2, r7, #28
 800ec18:	7b39      	ldrb	r1, [r7, #12]
 800ec1a:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800ec1e:	f107 0314 	add.w	r3, r7, #20
 800ec22:	9301      	str	r3, [sp, #4]
 800ec24:	f107 0318 	add.w	r3, r7, #24
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ec2e:	f000 fdb9 	bl	800f7a4 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800ec32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec34:	469c      	mov	ip, r3
 800ec36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec38:	469e      	mov	lr, r3
 800ec3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec3c:	4698      	mov	r8, r3
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec40:	4619      	mov	r1, r3
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	461c      	mov	r4, r3
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	461d      	mov	r5, r3
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	461e      	mov	r6, r3
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800ec52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		VL53LX_f_023(
 800ec58:	607b      	str	r3, [r7, #4]
 800ec5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec5c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800ec60:	7bb8      	ldrb	r0, [r7, #14]
 800ec62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ec64:	9207      	str	r2, [sp, #28]
 800ec66:	9306      	str	r3, [sp, #24]
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	9205      	str	r2, [sp, #20]
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	9304      	str	r3, [sp, #16]
 800ec70:	9603      	str	r6, [sp, #12]
 800ec72:	9502      	str	r5, [sp, #8]
 800ec74:	9401      	str	r4, [sp, #4]
 800ec76:	9100      	str	r1, [sp, #0]
 800ec78:	4643      	mov	r3, r8
 800ec7a:	4672      	mov	r2, lr
 800ec7c:	4661      	mov	r1, ip
 800ec7e:	f002 ff7a 	bl	8011b76 <VL53LX_f_023>
 800ec82:	4603      	mov	r3, r0
 800ec84:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800ec88:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800ec8c:	f113 0f0f 	cmn.w	r3, #15
 800ec90:	d103      	bne.n	800ec9a <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800ec92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec98:	801a      	strh	r2, [r3, #0]


	return status;
 800ec9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3738      	adds	r7, #56	@ 0x38
 800eca2:	46bd      	mov	sp, r7
 800eca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eca8 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800eca8:	b490      	push	{r4, r7}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	4604      	mov	r4, r0
 800ecb0:	4608      	mov	r0, r1
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	4623      	mov	r3, r4
 800ecb8:	71fb      	strb	r3, [r7, #7]
 800ecba:	4603      	mov	r3, r0
 800ecbc:	71bb      	strb	r3, [r7, #6]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	717b      	strb	r3, [r7, #5]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800ecce:	6a3b      	ldr	r3, [r7, #32]
 800ecd0:	79fa      	ldrb	r2, [r7, #7]
 800ecd2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	781a      	ldrb	r2, [r3, #0]
 800ecde:	6a3b      	ldr	r3, [r7, #32]
 800ece0:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800ece2:	69fb      	ldr	r3, [r7, #28]
 800ece4:	785a      	ldrb	r2, [r3, #1]
 800ece6:	6a3b      	ldr	r3, [r7, #32]
 800ece8:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800ecea:	69fb      	ldr	r3, [r7, #28]
 800ecec:	789a      	ldrb	r2, [r3, #2]
 800ecee:	6a3b      	ldr	r3, [r7, #32]
 800ecf0:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	78da      	ldrb	r2, [r3, #3]
 800ecf6:	6a3b      	ldr	r3, [r7, #32]
 800ecf8:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	791a      	ldrb	r2, [r3, #4]
 800ecfe:	6a3b      	ldr	r3, [r7, #32]
 800ed00:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	795a      	ldrb	r2, [r3, #5]
 800ed06:	6a3b      	ldr	r3, [r7, #32]
 800ed08:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	791a      	ldrb	r2, [r3, #4]
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	1ad3      	subs	r3, r2, r3
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	3301      	adds	r3, #1
 800ed18:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800ed24:	6a3b      	ldr	r3, [r7, #32]
 800ed26:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	8c1a      	ldrh	r2, [r3, #32]
 800ed2c:	6a3b      	ldr	r3, [r7, #32]
 800ed2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	695b      	ldr	r3, [r3, #20]
 800ed34:	b29a      	uxth	r2, r3
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	6a3b      	ldr	r3, [r7, #32]
 800ed42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	69db      	ldr	r3, [r3, #28]
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
 800ed4e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	461a      	mov	r2, r3
 800ed58:	6a3b      	ldr	r3, [r7, #32]
 800ed5a:	629a      	str	r2, [r3, #40]	@ 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	691a      	ldr	r2, [r3, #16]
 800ed60:	6a3b      	ldr	r3, [r7, #32]
 800ed62:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
 800ed6c:	625a      	str	r2, [r3, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800ed78:	6a3b      	ldr	r3, [r7, #32]
 800ed7a:	2213      	movs	r2, #19
 800ed7c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800ed80:	887b      	ldrh	r3, [r7, #2]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00a      	beq.n	800ed9c <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	8c1b      	ldrh	r3, [r3, #32]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	887b      	ldrh	r3, [r7, #2]
 800ed8e:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d903      	bls.n	800ed9c <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800ed94:	6a3b      	ldr	r3, [r7, #32]
 800ed96:	2206      	movs	r2, #6
 800ed98:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800ed9c:	79bb      	ldrb	r3, [r7, #6]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	021b      	lsls	r3, r3, #8
 800eda2:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	8a9b      	ldrh	r3, [r3, #20]
 800eda8:	89fa      	ldrh	r2, [r7, #14]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d205      	bcs.n	800edba <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800edae:	6a3b      	ldr	r3, [r7, #32]
 800edb0:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800edb2:	89fb      	ldrh	r3, [r7, #14]
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	81fb      	strh	r3, [r7, #14]
 800edb8:	e001      	b.n	800edbe <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800edba:	2300      	movs	r3, #0
 800edbc:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800edbe:	797b      	ldrb	r3, [r7, #5]
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	021b      	lsls	r3, r3, #8
 800edc4:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800edcc:	89bb      	ldrh	r3, [r7, #12]
 800edce:	4413      	add	r3, r2
 800edd0:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800edd8:	89fa      	ldrh	r2, [r7, #14]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d805      	bhi.n	800edea <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800edde:	6a3b      	ldr	r3, [r7, #32]
 800ede0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800ede4:	89ba      	ldrh	r2, [r7, #12]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d203      	bcs.n	800edf2 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800edea:	6a3b      	ldr	r3, [r7, #32]
 800edec:	2205      	movs	r2, #5
 800edee:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

}
 800edf2:	bf00      	nop
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bc90      	pop	{r4, r7}
 800edfa:	4770      	bx	lr

0800edfc <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800edfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edfe:	b08f      	sub	sp, #60	@ 0x3c
 800ee00:	af06      	add	r7, sp, #24
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	607a      	str	r2, [r7, #4]
 800ee08:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800ee12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee14:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800ee18:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800ee1a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ee1c:	f7ff f858 	bl	800ded0 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800ee20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee22:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
	memcpy(
 800ee26:	22ac      	movs	r2, #172	@ 0xac
 800ee28:	6839      	ldr	r1, [r7, #0]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f00e f91b 	bl	801d066 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	781a      	ldrb	r2, [r3, #0]
 800ee34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee36:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	785a      	ldrb	r2, [r3, #1]
 800ee3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee3e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	789a      	ldrb	r2, [r3, #2]
 800ee44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee46:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800ee4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee50:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800ee52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee54:	2200      	movs	r2, #0
 800ee56:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800ee58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee5a:	2204      	movs	r2, #4
 800ee5c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800ee5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee60:	2200      	movs	r2, #0
 800ee62:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800ee64:	2300      	movs	r3, #0
 800ee66:	77bb      	strb	r3, [r7, #30]
 800ee68:	e008      	b.n	800ee7c <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800ee6a:	7fbb      	ldrb	r3, [r7, #30]
 800ee6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	4413      	add	r3, r2
 800ee72:	2200      	movs	r2, #0
 800ee74:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800ee76:	7fbb      	ldrb	r3, [r7, #30]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	77bb      	strb	r3, [r7, #30]
 800ee7c:	7fbb      	ldrb	r3, [r7, #30]
 800ee7e:	2b04      	cmp	r3, #4
 800ee80:	d9f3      	bls.n	800ee6a <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800ee82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee84:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fd ff59 	bl	800cd40 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800ee92:	461a      	mov	r2, r3
 800ee94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee96:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	f7fd ff8f 	bl	800cdc0 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800eea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eea4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fe fb68 	bl	800d57e <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800eeae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eeb0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fd fffd 	bl	800ceb4 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d009      	beq.n	800eed8 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800eec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eec6:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800eeca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eecc:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800eed0:	461a      	mov	r2, r3
 800eed2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eed4:	f000 fdae 	bl	800fa34 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800eee0:	2300      	movs	r3, #0
 800eee2:	77bb      	strb	r3, [r7, #30]
 800eee4:	e01e      	b.n	800ef24 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800eee6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d117      	bne.n	800ef1e <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800eeee:	7fbb      	ldrb	r3, [r7, #30]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	3304      	adds	r3, #4
 800eef4:	005b      	lsls	r3, r3, #1
 800eef6:	4413      	add	r3, r2
 800eef8:	8898      	ldrh	r0, [r3, #4]
 800eefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eefc:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800ef00:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef06:	4413      	add	r3, r2
 800ef08:	3304      	adds	r3, #4
 800ef0a:	9301      	str	r3, [sp, #4]
 800ef0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	460b      	mov	r3, r1
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	68f9      	ldr	r1, [r7, #12]
 800ef16:	f7fe fb7d 	bl	800d614 <VL53LX_f_001>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800ef1e:	7fbb      	ldrb	r3, [r7, #30]
 800ef20:	3301      	adds	r3, #1
 800ef22:	77bb      	strb	r3, [r7, #30]
 800ef24:	7fbb      	ldrb	r3, [r7, #30]
 800ef26:	2b04      	cmp	r3, #4
 800ef28:	d9dd      	bls.n	800eee6 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800ef2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d11a      	bne.n	800ef68 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800ef3a:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 800ef46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef48:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800ef4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ef4e:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800ef52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ef54:	9102      	str	r1, [sp, #8]
 800ef56:	9201      	str	r2, [sp, #4]
 800ef58:	9300      	str	r3, [sp, #0]
 800ef5a:	462b      	mov	r3, r5
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	4631      	mov	r1, r6
 800ef60:	f7ff f82f 	bl	800dfc2 <VL53LX_f_006>
 800ef64:	4603      	mov	r3, r0
 800ef66:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800ef68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d104      	bne.n	800ef7a <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800ef70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ef72:	f7ff f956 	bl	800e222 <VL53LX_f_007>
 800ef76:	4603      	mov	r3, r0
 800ef78:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800ef7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d104      	bne.n	800ef8c <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800ef82:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ef84:	f7ff f99b 	bl	800e2be <VL53LX_f_008>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800ef8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d104      	bne.n	800ef9e <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800ef94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ef96:	f7ff fa10 	bl	800e3ba <VL53LX_f_009>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800ef9e:	2300      	movs	r3, #0
 800efa0:	77bb      	strb	r3, [r7, #30]
 800efa2:	e0a6      	b.n	800f0f2 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800efa4:	7fba      	ldrb	r2, [r7, #30]
 800efa6:	4613      	mov	r3, r2
 800efa8:	00db      	lsls	r3, r3, #3
 800efaa:	4413      	add	r3, r2
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800efb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800efb4:	4413      	add	r3, r2
 800efb6:	3304      	adds	r3, #4
 800efb8:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800efba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d109      	bne.n	800efd6 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800efc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efc4:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800efc8:	7fbb      	ldrb	r3, [r7, #30]
 800efca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800efcc:	4618      	mov	r0, r3
 800efce:	f7ff fb4a 	bl	800e666 <VL53LX_f_010>
 800efd2:	4603      	mov	r3, r0
 800efd4:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800efd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d110      	bne.n	800f000 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800efde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe0:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800efea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efec:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800eff0:	7fb8      	ldrb	r0, [r7, #30]
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	4613      	mov	r3, r2
 800eff6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eff8:	f7ff fd5a 	bl	800eab0 <VL53LX_f_011>
 800effc:	4603      	mov	r3, r0
 800effe:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800f000:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10d      	bne.n	800f024 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800f008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f00a:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800f00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f010:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800f014:	7fb8      	ldrb	r0, [r7, #30]
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	2300      	movs	r3, #0
 800f01a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f01c:	f7ff fd48 	bl	800eab0 <VL53LX_f_011>
 800f020:	4603      	mov	r3, r0
 800f022:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800f024:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10d      	bne.n	800f048 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800f02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f02e:	f503 7152 	add.w	r1, r3, #840	@ 0x348
 800f032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f034:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800f038:	7fb8      	ldrb	r0, [r7, #30]
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	2300      	movs	r3, #0
 800f03e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f040:	f7ff fd36 	bl	800eab0 <VL53LX_f_011>
 800f044:	4603      	mov	r3, r0
 800f046:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800f048:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d109      	bne.n	800f064 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800f050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f052:	f503 717d 	add.w	r1, r3, #1012	@ 0x3f4
 800f056:	7fb8      	ldrb	r0, [r7, #30]
 800f058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f05a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f05c:	f000 f8dd 	bl	800f21a <VL53LX_f_026>
 800f060:	4603      	mov	r3, r0
 800f062:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800f064:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d108      	bne.n	800f07e <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	8a19      	ldrh	r1, [r3, #16]
 800f070:	7fb8      	ldrb	r0, [r7, #30]
 800f072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f074:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f076:	f000 f95c 	bl	800f332 <VL53LX_f_027>
 800f07a:	4603      	mov	r3, r0
 800f07c:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800f07e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d124      	bne.n	800f0d0 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	789d      	ldrb	r5, [r3, #2]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	7e1e      	ldrb	r6, [r3, #24]
 800f08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f090:	f893 c003 	ldrb.w	ip, [r3, #3]
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f893 e006 	ldrb.w	lr, [r3, #6]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f0a2:	f502 727d 	add.w	r2, r2, #1012	@ 0x3f4
 800f0a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f0a8:	f501 6194 	add.w	r1, r1, #1184	@ 0x4a0
 800f0ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f0ae:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
 800f0b2:	697c      	ldr	r4, [r7, #20]
 800f0b4:	3420      	adds	r4, #32
 800f0b6:	9404      	str	r4, [sp, #16]
 800f0b8:	9003      	str	r0, [sp, #12]
 800f0ba:	9102      	str	r1, [sp, #8]
 800f0bc:	9201      	str	r2, [sp, #4]
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	4673      	mov	r3, lr
 800f0c2:	4662      	mov	r2, ip
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f7ff fd46 	bl	800eb58 <VL53LX_f_014>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800f0d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d109      	bne.n	800f0ec <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800f0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0da:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 800f0de:	7fb8      	ldrb	r0, [r7, #30]
 800f0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0e2:	2101      	movs	r1, #1
 800f0e4:	f7ff fb12 	bl	800e70c <VL53LX_f_015>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800f0ec:	7fbb      	ldrb	r3, [r7, #30]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	77bb      	strb	r3, [r7, #30]
 800f0f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0f4:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800f0f8:	7fba      	ldrb	r2, [r7, #30]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	f4ff af52 	bcc.w	800efa4 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800f100:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d107      	bne.n	800f118 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	785b      	ldrb	r3, [r3, #1]
 800f10c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f10e:	4618      	mov	r0, r3
 800f110:	f7ff fa25 	bl	800e55e <VL53LX_f_016>
 800f114:	4603      	mov	r3, r0
 800f116:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800f118:	2300      	movs	r3, #0
 800f11a:	77bb      	strb	r3, [r7, #30]
 800f11c:	e071      	b.n	800f202 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800f11e:	7fba      	ldrb	r2, [r7, #30]
 800f120:	4613      	mov	r3, r2
 800f122:	00db      	lsls	r3, r3, #3
 800f124:	4413      	add	r3, r2
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f12c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f12e:	4413      	add	r3, r2
 800f130:	3304      	adds	r3, #4
 800f132:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800f134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f136:	7c9a      	ldrb	r2, [r3, #18]
 800f138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f13a:	7c5b      	ldrb	r3, [r3, #17]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d25c      	bcs.n	800f1fa <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800f148:	429a      	cmp	r2, r3
 800f14a:	dd57      	ble.n	800f1fc <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800f150:	2bff      	cmp	r3, #255	@ 0xff
 800f152:	d053      	beq.n	800f1fc <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800f154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f156:	7c9b      	ldrb	r3, [r3, #18]
 800f158:	461a      	mov	r2, r3
			prange_data =
 800f15a:	234c      	movs	r3, #76	@ 0x4c
 800f15c:	fb02 f303 	mul.w	r3, r2, r3
 800f160:	3310      	adds	r3, #16
 800f162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f164:	4413      	add	r3, r2
 800f166:	3304      	adds	r3, #4
 800f168:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800f16a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d115      	bne.n	800f19e <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800f172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f174:	7c98      	ldrb	r0, [r3, #18]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f893 1020 	ldrb.w	r1, [r3, #32]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	8b5d      	ldrh	r5, [r3, #26]
 800f186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f188:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f18c:	693a      	ldr	r2, [r7, #16]
 800f18e:	9202      	str	r2, [sp, #8]
 800f190:	697a      	ldr	r2, [r7, #20]
 800f192:	9201      	str	r2, [sp, #4]
 800f194:	9300      	str	r3, [sp, #0]
 800f196:	462b      	mov	r3, r5
 800f198:	4622      	mov	r2, r4
 800f19a:	f7ff fd85 	bl	800eca8 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800f19e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d115      	bne.n	800f1d2 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	f8b3 1086 	ldrh.w	r1, [r3, #134]	@ 0x86
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
 800f1be:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800f1c2:	9301      	str	r3, [sp, #4]
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	4623      	mov	r3, r4
 800f1ca:	f000 fb44 	bl	800f856 <VL53LX_f_018>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800f1d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d108      	bne.n	800f1ec <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	8bd8      	ldrh	r0, [r3, #30]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	f000 fbda 	bl	800f9a0 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800f1ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1ee:	7c9b      	ldrb	r3, [r3, #18]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1f6:	749a      	strb	r2, [r3, #18]
 800f1f8:	e000      	b.n	800f1fc <VL53LX_f_025+0x400>
			continue;
 800f1fa:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800f1fc:	7fbb      	ldrb	r3, [r7, #30]
 800f1fe:	3301      	adds	r3, #1
 800f200:	77bb      	strb	r3, [r7, #30]
 800f202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f204:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800f208:	7fba      	ldrb	r2, [r7, #30]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d387      	bcc.n	800f11e <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800f20e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f212:	4618      	mov	r0, r3
 800f214:	3724      	adds	r7, #36	@ 0x24
 800f216:	46bd      	mov	sp, r7
 800f218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f21a <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b08c      	sub	sp, #48	@ 0x30
 800f21e:	af02      	add	r7, sp, #8
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	603b      	str	r3, [r7, #0]
 800f226:	4603      	mov	r3, r0
 800f228:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800f22a:	2300      	movs	r3, #0
 800f22c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800f230:	7bfa      	ldrb	r2, [r7, #15]
 800f232:	4613      	mov	r3, r2
 800f234:	00db      	lsls	r3, r3, #3
 800f236:	4413      	add	r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	4413      	add	r3, r2
 800f242:	3304      	adds	r3, #4
 800f244:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800f246:	2300      	movs	r3, #0
 800f248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t  i     = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800f250:	2300      	movs	r3, #0
 800f252:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800f254:	2300      	movs	r3, #0
 800f256:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	785a      	ldrb	r2, [r3, #1]
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	781a      	ldrb	r2, [r3, #0]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	789a      	ldrb	r2, [r3, #2]
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800f274:	6a3b      	ldr	r3, [r7, #32]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f27c:	e04d      	b.n	800f31a <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	78da      	ldrb	r2, [r3, #3]
 800f282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f286:	fbb3 f1f2 	udiv	r1, r3, r2
 800f28a:	fb01 f202 	mul.w	r2, r1, r2
 800f28e:	1a9b      	subs	r3, r3, r2
 800f290:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800f292:	6a3b      	ldr	r3, [r7, #32]
 800f294:	7999      	ldrb	r1, [r3, #6]
 800f296:	f107 0218 	add.w	r2, r7, #24
 800f29a:	7ff8      	ldrb	r0, [r7, #31]
 800f29c:	f107 0310 	add.w	r3, r7, #16
 800f2a0:	9301      	str	r3, [sp, #4]
 800f2a2:	f107 0314 	add.w	r3, r7, #20
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	f000 fa7a 	bl	800f7a4 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800f2b0:	7ffb      	ldrb	r3, [r7, #31]
 800f2b2:	69ba      	ldr	r2, [r7, #24]
 800f2b4:	6839      	ldr	r1, [r7, #0]
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	440b      	add	r3, r1
 800f2ba:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800f2bc:	7ffb      	ldrb	r3, [r7, #31]
 800f2be:	697a      	ldr	r2, [r7, #20]
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	3318      	adds	r3, #24
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	440b      	add	r3, r1
 800f2c8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800f2ca:	7ffb      	ldrb	r3, [r7, #31]
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	3330      	adds	r3, #48	@ 0x30
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	440b      	add	r3, r1
 800f2d6:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800f2d8:	69ba      	ldr	r2, [r7, #24]
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	689a      	ldr	r2, [r3, #8]
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800f2e6:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800f2e8:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	3348      	adds	r3, #72	@ 0x48
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	440b      	add	r3, r1
 800f2f2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800f2f4:	697a      	ldr	r2, [r7, #20]
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	689a      	ldr	r2, [r3, #8]
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800f302:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800f304:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800f306:	6839      	ldr	r1, [r7, #0]
 800f308:	3360      	adds	r3, #96	@ 0x60
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	440b      	add	r3, r1
 800f30e:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800f310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f314:	3301      	adds	r3, #1
 800f316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	791b      	ldrb	r3, [r3, #4]
 800f31e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f322:	429a      	cmp	r2, r3
 800f324:	d9ab      	bls.n	800f27e <VL53LX_f_026+0x64>
	}

	return status;
 800f326:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3728      	adds	r7, #40	@ 0x28
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800f332:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f334:	b08f      	sub	sp, #60	@ 0x3c
 800f336:	af06      	add	r7, sp, #24
 800f338:	60ba      	str	r2, [r7, #8]
 800f33a:	607b      	str	r3, [r7, #4]
 800f33c:	4603      	mov	r3, r0
 800f33e:	73fb      	strb	r3, [r7, #15]
 800f340:	460b      	mov	r3, r1
 800f342:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800f344:	2300      	movs	r3, #0
 800f346:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800f348:	2300      	movs	r3, #0
 800f34a:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800f34c:	7bfa      	ldrb	r2, [r7, #15]
 800f34e:	4613      	mov	r3, r2
 800f350:	00db      	lsls	r3, r3, #3
 800f352:	4413      	add	r3, r2
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	4413      	add	r3, r2
 800f35e:	3304      	adds	r3, #4
 800f360:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	77fb      	strb	r3, [r7, #31]
 800f374:	e0b9      	b.n	800f4ea <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	78da      	ldrb	r2, [r3, #3]
 800f37a:	7ffb      	ldrb	r3, [r7, #31]
 800f37c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f380:	fb01 f202 	mul.w	r2, r1, r2
 800f384:	1a9b      	subs	r3, r3, r2
 800f386:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800f388:	7ffb      	ldrb	r3, [r7, #31]
 800f38a:	3301      	adds	r3, #1
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	78d2      	ldrb	r2, [r2, #3]
 800f390:	fb93 f1f2 	sdiv	r1, r3, r2
 800f394:	fb01 f202 	mul.w	r2, r1, r2
 800f398:	1a9b      	subs	r3, r3, r2
 800f39a:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	789b      	ldrb	r3, [r3, #2]
 800f3a0:	7dfa      	ldrb	r2, [r7, #23]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	f080 809e 	bcs.w	800f4e4 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800f3ac:	7dba      	ldrb	r2, [r7, #22]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	f080 8098 	bcs.w	800f4e4 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800f3b4:	7dfb      	ldrb	r3, [r7, #23]
 800f3b6:	68ba      	ldr	r2, [r7, #8]
 800f3b8:	3348      	adds	r3, #72	@ 0x48
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	4413      	add	r3, r2
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10e      	bne.n	800f3e2 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800f3c4:	7dfb      	ldrb	r3, [r7, #23]
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	3360      	adds	r3, #96	@ 0x60
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	4413      	add	r3, r2
 800f3ce:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d106      	bne.n	800f3e2 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800f3d4:	7dfb      	ldrb	r3, [r7, #23]
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	4413      	add	r3, r2
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800f3e0:	e043      	b.n	800f46a <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	3348      	adds	r3, #72	@ 0x48
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	4413      	add	r3, r2
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	db0e      	blt.n	800f410 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800f3f2:	7dfb      	ldrb	r3, [r7, #23]
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	3360      	adds	r3, #96	@ 0x60
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	4413      	add	r3, r2
 800f3fc:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	db06      	blt.n	800f410 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800f402:	7dfb      	ldrb	r3, [r7, #23]
 800f404:	68ba      	ldr	r2, [r7, #8]
 800f406:	4413      	add	r3, r2
 800f408:	2201      	movs	r2, #1
 800f40a:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800f40e:	e02c      	b.n	800f46a <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800f410:	7dfb      	ldrb	r3, [r7, #23]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	3348      	adds	r3, #72	@ 0x48
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4413      	add	r3, r2
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	da1e      	bge.n	800f45e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800f420:	7dfb      	ldrb	r3, [r7, #23]
 800f422:	68ba      	ldr	r2, [r7, #8]
 800f424:	3360      	adds	r3, #96	@ 0x60
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	4413      	add	r3, r2
 800f42a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	db16      	blt.n	800f45e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800f430:	7dbb      	ldrb	r3, [r7, #22]
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	3348      	adds	r3, #72	@ 0x48
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	4413      	add	r3, r2
 800f43a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	db0e      	blt.n	800f45e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800f440:	7dbb      	ldrb	r3, [r7, #22]
 800f442:	68ba      	ldr	r2, [r7, #8]
 800f444:	3360      	adds	r3, #96	@ 0x60
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	4413      	add	r3, r2
 800f44a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	da06      	bge.n	800f45e <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800f450:	7dfb      	ldrb	r3, [r7, #23]
 800f452:	68ba      	ldr	r2, [r7, #8]
 800f454:	4413      	add	r3, r2
 800f456:	2201      	movs	r2, #1
 800f458:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800f45c:	e005      	b.n	800f46a <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800f45e:	7dfb      	ldrb	r3, [r7, #23]
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	4413      	add	r3, r2
 800f464:	2200      	movs	r2, #0
 800f466:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	4413      	add	r3, r2
 800f470:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800f474:	2b00      	cmp	r3, #0
 800f476:	d035      	beq.n	800f4e4 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	7ffa      	ldrb	r2, [r7, #31]
 800f47c:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800f47e:	7dfb      	ldrb	r3, [r7, #23]
 800f480:	68ba      	ldr	r2, [r7, #8]
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	4413      	add	r3, r2
 800f486:	685c      	ldr	r4, [r3, #4]
 800f488:	7dfb      	ldrb	r3, [r7, #23]
 800f48a:	68ba      	ldr	r2, [r7, #8]
 800f48c:	3318      	adds	r3, #24
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	685d      	ldr	r5, [r3, #4]
 800f494:	7dfb      	ldrb	r3, [r7, #23]
 800f496:	68ba      	ldr	r2, [r7, #8]
 800f498:	3330      	adds	r3, #48	@ 0x30
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	4413      	add	r3, r2
 800f49e:	685e      	ldr	r6, [r3, #4]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	689b      	ldr	r3, [r3, #8]
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	78d2      	ldrb	r2, [r2, #3]
 800f4a8:	69b9      	ldr	r1, [r7, #24]
 800f4aa:	3118      	adds	r1, #24
 800f4ac:	7ff8      	ldrb	r0, [r7, #31]
 800f4ae:	9105      	str	r1, [sp, #20]
 800f4b0:	9204      	str	r2, [sp, #16]
 800f4b2:	9303      	str	r3, [sp, #12]
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	9302      	str	r3, [sp, #8]
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	9301      	str	r3, [sp, #4]
 800f4bc:	2300      	movs	r3, #0
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	4633      	mov	r3, r6
 800f4c2:	462a      	mov	r2, r5
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	f000 f81c 	bl	800f502 <VL53LX_f_028>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800f4ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f4d2:	f113 0f0f 	cmn.w	r3, #15
 800f4d6:	d105      	bne.n	800f4e4 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800f4d8:	7dfb      	ldrb	r3, [r7, #23]
 800f4da:	68ba      	ldr	r2, [r7, #8]
 800f4dc:	4413      	add	r3, r2
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800f4e4:	7ffb      	ldrb	r3, [r7, #31]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	77fb      	strb	r3, [r7, #31]
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	791b      	ldrb	r3, [r3, #4]
 800f4ee:	7ffa      	ldrb	r2, [r7, #31]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	f4ff af40 	bcc.w	800f376 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800f4f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3724      	adds	r7, #36	@ 0x24
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f502 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800f502:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f506:	b0b2      	sub	sp, #200	@ 0xc8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800f50e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f516:	4603      	mov	r3, r0
 800f518:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f51c:	23f1      	movs	r3, #241	@ 0xf1
 800f51e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800f522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f526:	f04f 0300 	mov.w	r3, #0
 800f52a:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800f52e:	f04f 0200 	mov.w	r2, #0
 800f532:	f04f 0300 	mov.w	r3, #0
 800f536:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	int64_t  half_b_minus_amb = 0;
 800f53a:	f04f 0200 	mov.w	r2, #0
 800f53e:	f04f 0300 	mov.w	r3, #0
 800f542:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800f546:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f54a:	17da      	asrs	r2, r3, #31
 800f54c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800f554:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f558:	17da      	asrs	r2, r3, #31
 800f55a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f55e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800f562:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f566:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f56a:	4602      	mov	r2, r0
 800f56c:	ebb3 0802 	subs.w	r8, r3, r2
 800f570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f574:	460a      	mov	r2, r1
 800f576:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800f57a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f57e:	17da      	asrs	r2, r3, #31
 800f580:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f582:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f584:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f588:	460b      	mov	r3, r1
 800f58a:	ebb8 0a03 	subs.w	sl, r8, r3
 800f58e:	4613      	mov	r3, r2
 800f590:	eb69 0b03 	sbc.w	fp, r9, r3
 800f594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f598:	17da      	asrs	r2, r3, #31
 800f59a:	673b      	str	r3, [r7, #112]	@ 0x70
 800f59c:	677a      	str	r2, [r7, #116]	@ 0x74
 800f59e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	ebba 0403 	subs.w	r4, sl, r3
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800f5ae:	f04f 0200 	mov.w	r2, #0
 800f5b2:	f04f 0300 	mov.w	r3, #0
 800f5b6:	032b      	lsls	r3, r5, #12
 800f5b8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800f5bc:	0322      	lsls	r2, r4, #12
 800f5be:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800f5c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f5c6:	17da      	asrs	r2, r3, #31
 800f5c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800f5cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f5d0:	17da      	asrs	r2, r3, #31
 800f5d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800f5d4:	667a      	str	r2, [r7, #100]	@ 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800f5d6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800f5da:	4623      	mov	r3, r4
 800f5dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	1a9b      	subs	r3, r3, r2
 800f5e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f5e6:	462b      	mov	r3, r5
 800f5e8:	460a      	mov	r2, r1
 800f5ea:	eb63 0302 	sbc.w	r3, r3, r2
 800f5ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800f5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f5f4:	17da      	asrs	r2, r3, #31
 800f5f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f5f8:	657a      	str	r2, [r7, #84]	@ 0x54
 800f5fa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800f5fe:	4623      	mov	r3, r4
 800f600:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800f604:	4602      	mov	r2, r0
 800f606:	1a9b      	subs	r3, r3, r2
 800f608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f60a:	462b      	mov	r3, r5
 800f60c:	460a      	mov	r2, r1
 800f60e:	eb63 0302 	sbc.w	r3, r3, r2
 800f612:	64fb      	str	r3, [r7, #76]	@ 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800f614:	f04f 0200 	mov.w	r2, #0
 800f618:	f04f 0300 	mov.w	r3, #0
 800f61c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800f620:	4629      	mov	r1, r5
 800f622:	030b      	lsls	r3, r1, #12
 800f624:	4621      	mov	r1, r4
 800f626:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800f62a:	4621      	mov	r1, r4
 800f62c:	030a      	lsls	r2, r1, #12
 800f62e:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (half_b_minus_amb != 0) {
 800f632:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800f636:	4313      	orrs	r3, r2
 800f638:	f000 80a8 	beq.w	800f78c <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800f63c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800f640:	f04f 0000 	mov.w	r0, #0
 800f644:	f04f 0100 	mov.w	r1, #0
 800f648:	0319      	lsls	r1, r3, #12
 800f64a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800f64e:	0310      	lsls	r0, r2, #12
 800f650:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800f654:	1814      	adds	r4, r2, r0
 800f656:	633c      	str	r4, [r7, #48]	@ 0x30
 800f658:	414b      	adcs	r3, r1
 800f65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f65c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800f660:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800f664:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800f668:	1891      	adds	r1, r2, r2
 800f66a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f66c:	415b      	adcs	r3, r3
 800f66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f674:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800f678:	f7f0 fdda 	bl	8000230 <__aeabi_ldivmod>
 800f67c:	4602      	mov	r2, r0
 800f67e:	460b      	mov	r3, r1
 800f680:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

		mean_phase  +=  2048;
 800f684:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800f688:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800f68c:	6239      	str	r1, [r7, #32]
 800f68e:	f143 0300 	adc.w	r3, r3, #0
 800f692:	627b      	str	r3, [r7, #36]	@ 0x24
 800f694:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f698:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800f69c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6a4:	647a      	str	r2, [r7, #68]	@ 0x44
 800f6a6:	f04f 0200 	mov.w	r2, #0
 800f6aa:	f04f 0300 	mov.w	r3, #0
 800f6ae:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	030b      	lsls	r3, r1, #12
 800f6b6:	4621      	mov	r1, r4
 800f6b8:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800f6bc:	4621      	mov	r1, r4
 800f6be:	030a      	lsls	r2, r1, #12
 800f6c0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800f6c4:	1884      	adds	r4, r0, r2
 800f6c6:	61bc      	str	r4, [r7, #24]
 800f6c8:	eb41 0303 	adc.w	r3, r1, r3
 800f6cc:	61fb      	str	r3, [r7, #28]
 800f6ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f6d2:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800f6d6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800f6da:	1c51      	adds	r1, r2, #1
 800f6dc:	63b9      	str	r1, [r7, #56]	@ 0x38
 800f6de:	f143 0300 	adc.w	r3, r3, #0
 800f6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	0fdb      	lsrs	r3, r3, #31
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	613b      	str	r3, [r7, #16]
 800f6f0:	617a      	str	r2, [r7, #20]
 800f6f2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800f6f6:	4623      	mov	r3, r4
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	189b      	adds	r3, r3, r2
 800f6fc:	60bb      	str	r3, [r7, #8]
 800f6fe:	460b      	mov	r3, r1
 800f700:	462a      	mov	r2, r5
 800f702:	eb42 0303 	adc.w	r3, r2, r3
 800f706:	60fb      	str	r3, [r7, #12]
 800f708:	f04f 0200 	mov.w	r2, #0
 800f70c:	f04f 0300 	mov.w	r3, #0
 800f710:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f714:	4621      	mov	r1, r4
 800f716:	084a      	lsrs	r2, r1, #1
 800f718:	4629      	mov	r1, r5
 800f71a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800f71e:	4629      	mov	r1, r5
 800f720:	104b      	asrs	r3, r1, #1
 800f722:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		if (mean_phase  < 0)
 800f726:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	da05      	bge.n	800f73a <VL53LX_f_028+0x238>
			mean_phase = 0;
 800f72e:	f04f 0200 	mov.w	r2, #0
 800f732:	f04f 0300 	mov.w	r3, #0
 800f736:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800f73a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800f73e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f742:	f173 0300 	sbcs.w	r3, r3, #0
 800f746:	db05      	blt.n	800f754 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800f748:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f74c:	f04f 0300 	mov.w	r3, #0
 800f750:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800f754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f758:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800f75c:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800f760:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800f762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f766:	fb93 f1f2 	sdiv	r1, r3, r2
 800f76a:	fb01 f202 	mul.w	r2, r1, r2
 800f76e:	1a9b      	subs	r3, r3, r2
 800f770:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase = mean_phase32;
 800f774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f778:	17da      	asrs	r2, r3, #31
 800f77a:	603b      	str	r3, [r7, #0]
 800f77c:	607a      	str	r2, [r7, #4]
 800f77e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f782:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8

		status = VL53LX_ERROR_NONE;
 800f786:	2300      	movs	r3, #0
 800f788:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800f78c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f794:	601a      	str	r2, [r3, #0]

	return status;
 800f796:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	37c8      	adds	r7, #200	@ 0xc8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f7a4 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b087      	sub	sp, #28
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60ba      	str	r2, [r7, #8]
 800f7ac:	607b      	str	r3, [r7, #4]
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	73fb      	strb	r3, [r7, #15]
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800f7c4:	7bfa      	ldrb	r2, [r7, #15]
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	3206      	adds	r2, #6
 800f7ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f7ce:	6a3b      	ldr	r3, [r7, #32]
 800f7d0:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800f7d8:	2300      	movs	r3, #0
 800f7da:	75fb      	strb	r3, [r7, #23]
 800f7dc:	e02f      	b.n	800f83e <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800f7de:	7bfa      	ldrb	r2, [r7, #15]
 800f7e0:	7dfb      	ldrb	r3, [r7, #23]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	68ba      	ldr	r2, [r7, #8]
 800f7e6:	7a92      	ldrb	r2, [r2, #10]
 800f7e8:	441a      	add	r2, r3
 800f7ea:	7bbb      	ldrb	r3, [r7, #14]
 800f7ec:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	7a92      	ldrb	r2, [r2, #10]
 800f7f2:	fb93 f1f2 	sdiv	r1, r3, r2
 800f7f6:	fb01 f202 	mul.w	r2, r1, r2
 800f7fa:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800f7fc:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800f7fe:	7dfa      	ldrb	r2, [r7, #23]
 800f800:	7bbb      	ldrb	r3, [r7, #14]
 800f802:	429a      	cmp	r2, r3
 800f804:	d20a      	bcs.n	800f81c <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	7db9      	ldrb	r1, [r7, #22]
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	3106      	adds	r1, #6
 800f810:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f814:	441a      	add	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	601a      	str	r2, [r3, #0]
 800f81a:	e00d      	b.n	800f838 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800f81c:	7dfa      	ldrb	r2, [r7, #23]
 800f81e:	7bbb      	ldrb	r3, [r7, #14]
 800f820:	429a      	cmp	r2, r3
 800f822:	d909      	bls.n	800f838 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800f824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	7db9      	ldrb	r1, [r7, #22]
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	3106      	adds	r1, #6
 800f82e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f832:	441a      	add	r2, r3
 800f834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f836:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800f838:	7dfb      	ldrb	r3, [r7, #23]
 800f83a:	3301      	adds	r3, #1
 800f83c:	75fb      	strb	r3, [r7, #23]
 800f83e:	7bbb      	ldrb	r3, [r7, #14]
 800f840:	005a      	lsls	r2, r3, #1
 800f842:	7dfb      	ldrb	r3, [r7, #23]
 800f844:	429a      	cmp	r2, r3
 800f846:	daca      	bge.n	800f7de <VL53LX_f_022+0x3a>
	}
}
 800f848:	bf00      	nop
 800f84a:	bf00      	nop
 800f84c:	371c      	adds	r7, #28
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr

0800f856 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b088      	sub	sp, #32
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	60ba      	str	r2, [r7, #8]
 800f85e:	461a      	mov	r2, r3
 800f860:	4603      	mov	r3, r0
 800f862:	81fb      	strh	r3, [r7, #14]
 800f864:	460b      	mov	r3, r1
 800f866:	81bb      	strh	r3, [r7, #12]
 800f868:	4613      	mov	r3, r2
 800f86a:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800f86c:	2300      	movs	r3, #0
 800f86e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800f870:	2300      	movs	r3, #0
 800f872:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800f87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87e:	89fa      	ldrh	r2, [r7, #14]
 800f880:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800f882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f884:	89ba      	ldrh	r2, [r7, #12]
 800f886:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800f888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88a:	68ba      	ldr	r2, [r7, #8]
 800f88c:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800f88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f890:	88fa      	ldrh	r2, [r7, #6]
 800f892:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800f894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f896:	8a5b      	ldrh	r3, [r3, #18]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d101      	bne.n	800f8a0 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f89c:	23f1      	movs	r3, #241	@ 0xf1
 800f89e:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800f8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d101      	bne.n	800f8ac <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f8a8:	23f1      	movs	r3, #241	@ 0xf1
 800f8aa:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800f8ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d16f      	bne.n	800f994 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800f8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b6:	8a5b      	ldrh	r3, [r3, #18]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fd f904 	bl	800cac6 <VL53LX_calc_pll_period_us>
 800f8be:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800f8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c2:	699b      	ldr	r3, [r3, #24]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800f8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ca:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f8d4:	6978      	ldr	r0, [r7, #20]
 800f8d6:	f7fd f90d 	bl	800caf4 <VL53LX_duration_maths>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8de:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800f8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e2:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800f8e4:	0119      	lsls	r1, r3, #4
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f8ec:	6978      	ldr	r0, [r7, #20]
 800f8ee:	f7fd f901 	bl	800caf4 <VL53LX_duration_maths>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f6:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800f8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800f8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8fe:	69db      	ldr	r3, [r3, #28]
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7fd fb6e 	bl	800cfe4 <VL53LX_rate_maths>
 800f908:	4603      	mov	r3, r0
 800f90a:	461a      	mov	r2, r3
 800f90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90e:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800f910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800f914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f916:	6a1b      	ldr	r3, [r3, #32]
 800f918:	4619      	mov	r1, r3
 800f91a:	4610      	mov	r0, r2
 800f91c:	f7fd fb62 	bl	800cfe4 <VL53LX_rate_maths>
 800f920:	4603      	mov	r3, r0
 800f922:	461a      	mov	r2, r3
 800f924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f926:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800f928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800f92c:	461a      	mov	r2, r3
 800f92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	4619      	mov	r1, r3
 800f934:	4610      	mov	r0, r2
 800f936:	f7fd fb55 	bl	800cfe4 <VL53LX_rate_maths>
 800f93a:	4603      	mov	r3, r0
 800f93c:	461a      	mov	r2, r3
 800f93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f940:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800f942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f944:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800f946:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800f948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		count_rate_total =
 800f94c:	4413      	add	r3, r2
 800f94e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800f950:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f954:	2b01      	cmp	r3, #1
 800f956:	d905      	bls.n	800f964 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800f958:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f95c:	69ba      	ldr	r2, [r7, #24]
 800f95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f962:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800f964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f966:	8ada      	ldrh	r2, [r3, #22]
 800f968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f96c:	69b9      	ldr	r1, [r7, #24]
 800f96e:	2006      	movs	r0, #6
 800f970:	f7fd fb7d 	bl	800d06e <VL53LX_rate_per_spad_maths>
 800f974:	4603      	mov	r3, r0
 800f976:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800f978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97a:	86da      	strh	r2, [r3, #54]	@ 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800f97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800f980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f982:	8ad9      	ldrh	r1, [r3, #22]
 800f984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f986:	69db      	ldr	r3, [r3, #28]
 800f988:	461a      	mov	r2, r3
 800f98a:	f7fd f90c 	bl	800cba6 <VL53LX_events_per_spad_maths>
 800f98e:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800f990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f992:	639a      	str	r2, [r3, #56]	@ 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800f994:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3720      	adds	r7, #32
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800f9a0:	b590      	push	{r4, r7, lr}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af02      	add	r7, sp, #8
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	603a      	str	r2, [r7, #0]
 800f9aa:	80fb      	strh	r3, [r7, #6]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	8a58      	ldrh	r0, [r3, #18]
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	8a9c      	ldrh	r4, [r3, #20]
 800f9bc:	88fb      	ldrh	r3, [r7, #6]
 800f9be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f9c2:	9201      	str	r2, [sp, #4]
 800f9c4:	9300      	str	r3, [sp, #0]
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	f7fd fb85 	bl	800d0d8 <VL53LX_range_maths>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	8a58      	ldrh	r0, [r3, #18]
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	8a9c      	ldrh	r4, [r3, #20]
 800f9e6:	88fb      	ldrh	r3, [r7, #6]
 800f9e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f9ec:	9201      	str	r2, [sp, #4]
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	4622      	mov	r2, r4
 800f9f4:	f7fd fb70 	bl	800d0d8 <VL53LX_range_maths>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	8a58      	ldrh	r0, [r3, #18]
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	8a9c      	ldrh	r4, [r3, #20]
 800fa10:	88fb      	ldrh	r3, [r7, #6]
 800fa12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fa16:	9201      	str	r2, [sp, #4]
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	4622      	mov	r2, r4
 800fa1e:	f7fd fb5b 	bl	800d0d8 <VL53LX_range_maths>
 800fa22:	4603      	mov	r3, r0
 800fa24:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 800fa2c:	bf00      	nop
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd90      	pop	{r4, r7, pc}

0800fa34 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b086      	sub	sp, #24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800fa40:	2300      	movs	r3, #0
 800fa42:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	757b      	strb	r3, [r7, #21]





	memcpy(
 800fa50:	22ac      	movs	r2, #172	@ 0xac
 800fa52:	68b9      	ldr	r1, [r7, #8]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f00d fb06 	bl	801d066 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	75fb      	strb	r3, [r7, #23]
 800fa5e:	e008      	b.n	800fa72 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800fa60:	7dfa      	ldrb	r2, [r7, #23]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3206      	adds	r2, #6
 800fa66:	2100      	movs	r1, #0
 800fa68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800fa6c:	7dfb      	ldrb	r3, [r7, #23]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	75fb      	strb	r3, [r7, #23]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	7a5b      	ldrb	r3, [r3, #9]
 800fa76:	7dfa      	ldrb	r2, [r7, #23]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d3f1      	bcc.n	800fa60 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800fa7c:	68f9      	ldr	r1, [r7, #12]
 800fa7e:	68b8      	ldr	r0, [r7, #8]
 800fa80:	f000 f878 	bl	800fb74 <VL53LX_f_030>
 800fa84:	4603      	mov	r3, r0
 800fa86:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	7a9a      	ldrb	r2, [r3, #10]
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	7a9b      	ldrb	r3, [r3, #10]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d203      	bcs.n	800fa9c <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	7a9b      	ldrb	r3, [r3, #10]
 800fa98:	75bb      	strb	r3, [r7, #22]
 800fa9a:	e002      	b.n	800faa2 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	7a9b      	ldrb	r3, [r3, #10]
 800faa0:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800faa2:	2300      	movs	r3, #0
 800faa4:	75fb      	strb	r3, [r7, #23]
 800faa6:	e05c      	b.n	800fb62 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800faa8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800faac:	2b00      	cmp	r3, #0
 800faae:	db0f      	blt.n	800fad0 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800fab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fab4:	461a      	mov	r2, r3
 800fab6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800faba:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800fabc:	68ba      	ldr	r2, [r7, #8]
 800fabe:	7a92      	ldrb	r2, [r2, #10]
 800fac0:	b252      	sxtb	r2, r2
 800fac2:	fb93 f1f2 	sdiv	r1, r3, r2
 800fac6:	fb01 f202 	mul.w	r2, r1, r2
 800faca:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800facc:	757b      	strb	r3, [r7, #21]
 800face:	e013      	b.n	800faf8 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	7a9b      	ldrb	r3, [r3, #10]
 800fad4:	b25b      	sxtb	r3, r3
 800fad6:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800fad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fadc:	4619      	mov	r1, r3
 800fade:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800fae2:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800fae4:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	7a92      	ldrb	r2, [r2, #10]
 800faea:	b252      	sxtb	r2, r2
 800faec:	fb93 f1f2 	sdiv	r1, r3, r2
 800faf0:	fb01 f202 	mul.w	r2, r1, r2
 800faf4:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800faf6:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800faf8:	7d7b      	ldrb	r3, [r7, #21]
 800fafa:	461a      	mov	r2, r3
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	3206      	adds	r2, #6
 800fb00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800fb04:	7df9      	ldrb	r1, [r7, #23]
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	3106      	adds	r1, #6
 800fb0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	dd12      	ble.n	800fb38 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800fb12:	7d7b      	ldrb	r3, [r7, #21]
 800fb14:	461a      	mov	r2, r3
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	3206      	adds	r2, #6
 800fb1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800fb1e:	7df9      	ldrb	r1, [r7, #23]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3106      	adds	r1, #6
 800fb24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800fb28:	7d79      	ldrb	r1, [r7, #21]
 800fb2a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800fb2c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	1d82      	adds	r2, r0, #6
 800fb32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fb36:	e006      	b.n	800fb46 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800fb38:	7d7b      	ldrb	r3, [r7, #21]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	3206      	adds	r2, #6
 800fb40:	2100      	movs	r1, #0
 800fb42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800fb46:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800fb48:	7d7b      	ldrb	r3, [r7, #21]
 800fb4a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	3206      	adds	r2, #6
 800fb50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	1d82      	adds	r2, r0, #6
 800fb58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800fb5c:	7dfb      	ldrb	r3, [r7, #23]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	75fb      	strb	r3, [r7, #23]
 800fb62:	7dfa      	ldrb	r2, [r7, #23]
 800fb64:	7dbb      	ldrb	r3, [r7, #22]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d39e      	bcc.n	800faa8 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800fb6a:	bf00      	nop
 800fb6c:	bf00      	nop
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800fb86:	2300      	movs	r3, #0
 800fb88:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fd fb87 	bl	800d2a8 <VL53LX_decode_vcsel_period>
 800fb9a:	4603      	mov	r3, r0
	period = 2048 *
 800fb9c:	02db      	lsls	r3, r3, #11
 800fb9e:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00a      	beq.n	800fbbc <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		remapped_phase =
 800fbac:	68ba      	ldr	r2, [r7, #8]
 800fbae:	fbb3 f2f2 	udiv	r2, r3, r2
 800fbb2:	68b9      	ldr	r1, [r7, #8]
 800fbb4:	fb01 f202 	mul.w	r2, r1, r2
 800fbb8:	1a9b      	subs	r3, r3, r2
 800fbba:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800fbc2:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800fbc4:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dd09      	ble.n	800fbe4 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	da01      	bge.n	800fbde <VL53LX_f_030+0x6a>
 800fbda:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800fbde:	12db      	asrs	r3, r3, #11
 800fbe0:	75fb      	strb	r3, [r7, #23]
 800fbe2:	e008      	b.n	800fbf6 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	da01      	bge.n	800fbf2 <VL53LX_f_030+0x7e>
 800fbee:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800fbf2:	12db      	asrs	r3, r3, #11
 800fbf4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800fbf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3718      	adds	r7, #24
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b08e      	sub	sp, #56	@ 0x38
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800fc12:	2300      	movs	r3, #0
 800fc14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t  bin_seq_length = 0;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t  repeat_count   = 0;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800fc22:	2300      	movs	r3, #0
 800fc24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t  lc       = 0;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t  i       = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800fc34:	22ac      	movs	r2, #172	@ 0xac
 800fc36:	6879      	ldr	r1, [r7, #4]
 800fc38:	6838      	ldr	r0, [r7, #0]
 800fc3a:	f00d fa14 	bl	801d066 <memcpy>


	podata->VL53LX_p_021 = 0;
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	2200      	movs	r2, #0
 800fc42:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800fc44:	2300      	movs	r3, #0
 800fc46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fc4a:	e00a      	b.n	800fc62 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800fc4c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	4413      	add	r3, r2
 800fc54:	2210      	movs	r2, #16
 800fc56:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800fc58:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fc62:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fc66:	2b05      	cmp	r3, #5
 800fc68:	d9f0      	bls.n	800fc4c <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fc70:	e00b      	b.n	800fc8a <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800fc72:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	3206      	adds	r2, #6
 800fc7a:	2100      	movs	r1, #0
 800fc7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800fc80:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fc84:	3301      	adds	r3, #1
 800fc86:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	7a5b      	ldrb	r3, [r3, #9]
 800fc8e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d3ed      	bcc.n	800fc72 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800fc96:	2300      	movs	r3, #0
 800fc98:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fc9c:	e012      	b.n	800fcc4 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800fc9e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fca2:	3338      	adds	r3, #56	@ 0x38
 800fca4:	443b      	add	r3, r7
 800fca6:	2200      	movs	r2, #0
 800fca8:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800fcac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fcb0:	3338      	adds	r3, #56	@ 0x38
 800fcb2:	443b      	add	r3, r7
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800fcba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fcc4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fcc8:	2b0f      	cmp	r3, #15
 800fcca:	d9e8      	bls.n	800fc9e <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800fccc:	2300      	movs	r3, #0
 800fcce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fcd8:	e068      	b.n	800fdac <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800fcda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	4413      	add	r3, r2
 800fce2:	7b1b      	ldrb	r3, [r3, #12]
 800fce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800fce8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fcec:	3338      	adds	r3, #56	@ 0x38
 800fcee:	443b      	add	r3, r7
 800fcf0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d115      	bne.n	800fd24 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800fcf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fcfc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800fd00:	0092      	lsls	r2, r2, #2
 800fd02:	b2d2      	uxtb	r2, r2
 800fd04:	3338      	adds	r3, #56	@ 0x38
 800fd06:	443b      	add	r3, r7
 800fd08:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800fd0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd10:	683a      	ldr	r2, [r7, #0]
 800fd12:	4413      	add	r3, r2
 800fd14:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800fd18:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800fd1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd1e:	3301      	adds	r3, #1
 800fd20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800fd24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fd28:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800fd2c:	443a      	add	r2, r7
 800fd2e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800fd32:	3201      	adds	r2, #1
 800fd34:	b2d2      	uxtb	r2, r2
 800fd36:	3338      	adds	r3, #56	@ 0x38
 800fd38:	443b      	add	r3, r7
 800fd3a:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800fd3e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fd42:	3338      	adds	r3, #56	@ 0x38
 800fd44:	443b      	add	r3, r7
 800fd46:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800fd4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		for (i = 0 ; i < 4 ; i++)
 800fd4e:	2300      	movs	r3, #0
 800fd50:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800fd54:	e021      	b.n	800fd9a <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800fd56:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800fd5a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fd5e:	441a      	add	r2, r3
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	3206      	adds	r2, #6
 800fd64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800fd68:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fd6c:	009a      	lsls	r2, r3, #2
 800fd6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fd72:	441a      	add	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	3206      	adds	r2, #6
 800fd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800fd7c:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800fd80:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800fd84:	4402      	add	r2, r0
 800fd86:	4419      	add	r1, r3
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	3206      	adds	r2, #6
 800fd8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800fd90:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fd94:	3301      	adds	r3, #1
 800fd96:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800fd9a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fd9e:	2b03      	cmp	r3, #3
 800fda0:	d9d9      	bls.n	800fd56 <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800fda2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fda6:	3301      	adds	r3, #1
 800fda8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fdac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fdb0:	2b05      	cmp	r3, #5
 800fdb2:	d992      	bls.n	800fcda <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fdba:	e022      	b.n	800fe02 <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800fdbc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fdc0:	683a      	ldr	r2, [r7, #0]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	7b1b      	ldrb	r3, [r3, #12]
 800fdc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800fdca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fdce:	2b0f      	cmp	r3, #15
 800fdd0:	d80c      	bhi.n	800fdec <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800fdd2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
			podata->bin_rep[lc] =
 800fdd6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
				bin_repeat_count[bin_cfg];
 800fdda:	3238      	adds	r2, #56	@ 0x38
 800fddc:	443a      	add	r2, r7
 800fdde:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800fde2:	683a      	ldr	r2, [r7, #0]
 800fde4:	4413      	add	r3, r2
 800fde6:	460a      	mov	r2, r1
 800fde8:	749a      	strb	r2, [r3, #18]
 800fdea:	e005      	b.n	800fdf8 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800fdec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fdf0:	683a      	ldr	r2, [r7, #0]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800fdf8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fe02:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fe06:	2b05      	cmp	r3, #5
 800fe08:	d9d8      	bls.n	800fdbc <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800fe0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	b2da      	uxtb	r2, r3
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800fe16:	2300      	movs	r3, #0
 800fe18:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fe1c:	e050      	b.n	800fec0 <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800fe1e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fe22:	3338      	adds	r3, #56	@ 0x38
 800fe24:	443b      	add	r3, r7
 800fe26:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800fe2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (repeat_count > 0) {
 800fe2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	dd41      	ble.n	800feb6 <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800fe32:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fe36:	3338      	adds	r3, #56	@ 0x38
 800fe38:	443b      	add	r3, r7
 800fe3a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800fe3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800fe42:	2300      	movs	r3, #0
 800fe44:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800fe48:	e031      	b.n	800feae <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800fe4a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800fe4e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fe52:	441a      	add	r2, r3
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	3206      	adds	r2, #6
 800fe58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800fe5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe5e:	0fda      	lsrs	r2, r3, #31
 800fe60:	4413      	add	r3, r2
 800fe62:	105b      	asrs	r3, r3, #1
 800fe64:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800fe66:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800fe6a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fe6e:	441a      	add	r2, r3
 800fe70:	4401      	add	r1, r0
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	3206      	adds	r2, #6
 800fe76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800fe7a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800fe7e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fe82:	441a      	add	r2, r3
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	3206      	adds	r2, #6
 800fe88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe8c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800fe90:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fe94:	441a      	add	r2, r3
 800fe96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe98:	fb91 f1f3 	sdiv	r1, r1, r3
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	3206      	adds	r2, #6
 800fea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800fea4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800fea8:	3301      	adds	r3, #1
 800feaa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800feae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800feb2:	2b03      	cmp	r3, #3
 800feb4:	d9c9      	bls.n	800fe4a <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800feb6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800feba:	3301      	adds	r3, #1
 800febc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800fec0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fec4:	2b0f      	cmp	r3, #15
 800fec6:	d9aa      	bls.n	800fe1e <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	2200      	movs	r2, #0
 800fecc:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800fece:	7bfb      	ldrb	r3, [r7, #15]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d102      	bne.n	800feda <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800fed4:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d002      	beq.n	800fee0 <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2204      	movs	r2, #4
 800fede:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800fee0:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3738      	adds	r7, #56	@ 0x38
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800feec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feee:	b0cb      	sub	sp, #300	@ 0x12c
 800fef0:	af06      	add	r7, sp, #24
 800fef2:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800fef6:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800fefa:	6020      	str	r0, [r4, #0]
 800fefc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800ff00:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800ff04:	6001      	str	r1, [r0, #0]
 800ff06:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800ff0a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800ff0e:	600a      	str	r2, [r1, #0]
 800ff10:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ff14:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800ff18:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800ff20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ff24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800ff28:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ff2c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800ff30:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800ff34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800ff38:	f107 0318 	add.w	r3, r7, #24
 800ff3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800ff40:	2300      	movs	r3, #0
 800ff42:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800ff44:	2300      	movs	r3, #0
 800ff46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	uint8_t  xtalk_enable                  = 0;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t  r                             = 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t  t                             = 0;
 800ff56:	2300      	movs	r3, #0
 800ff58:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


	int16_t  delta_mm                      = 0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800ff68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ff70:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800ff74:	6818      	ldr	r0, [r3, #0]
 800ff76:	f7ff fe44 	bl	800fc02 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800ff7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff7e:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800ff80:	4619      	mov	r1, r3
 800ff82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff86:	3348      	adds	r3, #72	@ 0x48
 800ff88:	461a      	mov	r2, r3
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	f7fd f9dd 	bl	800d34a <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800ff90:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ff94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff98:	3348      	adds	r3, #72	@ 0x48
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	f7fd f996 	bl	800d2ce <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800ffa2:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d142      	bne.n	8010030 <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800ffaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d039      	beq.n	8010030 <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800ffbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffc0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800ffc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	@ 0x30
 800ffd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	@ 0x32
 800ffe4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffe8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800fff2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800fff6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800fffa:	6812      	ldr	r2, [r2, #0]
 800fffc:	f892 20a8 	ldrb.w	r2, [r2, #168]	@ 0xa8
 8010000:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8010004:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8010008:	6809      	ldr	r1, [r1, #0]
 801000a:	f891 10a9 	ldrb.w	r1, [r1, #169]	@ 0xa9
 801000e:	f107 0014 	add.w	r0, r7, #20
 8010012:	9004      	str	r0, [sp, #16]
 8010014:	9103      	str	r1, [sp, #12]
 8010016:	9202      	str	r2, [sp, #8]
 8010018:	9301      	str	r3, [sp, #4]
 801001a:	2300      	movs	r3, #0
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	2300      	movs	r3, #0
 8010020:	4632      	mov	r2, r6
 8010022:	4629      	mov	r1, r5
 8010024:	4620      	mov	r0, r4
 8010026:	f002 f9d6 	bl	80123d6 <VL53LX_f_032>
 801002a:	4603      	mov	r3, r0
 801002c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 8010030:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 8010034:	2b00      	cmp	r3, #0
 8010036:	d115      	bne.n	8010064 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8010038:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801003c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00c      	beq.n	8010064 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 801004a:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801004e:	697a      	ldr	r2, [r7, #20]
 8010050:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010054:	3348      	adds	r3, #72	@ 0x48
 8010056:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 801005a:	f002 fc2b 	bl	80128b4 <VL53LX_f_033>
 801005e:	4603      	mov	r3, r0
 8010060:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8010064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010068:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
	presults->xmonitor.total_periods_elapsed =
 801006c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010070:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 8010074:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010078:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
	presults->xmonitor.VL53LX_p_004 =
 801007c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010080:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8010084:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010088:	2200      	movs	r2, #0
 801008a:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 801008e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010092:	2200      	movs	r2, #0
 8010094:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 8010098:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801009c:	2200      	movs	r2, #0
 801009e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 80100a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80100a6:	2200      	movs	r2, #0
 80100a8:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e



	xtalk_enable = 0;
 80100ac:	2300      	movs	r3, #0
 80100ae:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80100b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80100b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d002      	beq.n	80100ca <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 80100c4:	2301      	movs	r3, #1
 80100c6:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 80100ca:	2300      	movs	r3, #0
 80100cc:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80100d0:	e108      	b.n	80102e4 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 80100d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80100d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80100e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28



		status =
		VL53LX_f_025(
 80100e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80100e8:	3348      	adds	r3, #72	@ 0x48
 80100ea:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80100ee:	7814      	ldrb	r4, [r2, #0]
 80100f0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80100f4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80100f8:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80100fc:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8010100:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8010104:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8010108:	9405      	str	r4, [sp, #20]
 801010a:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 801010e:	9404      	str	r4, [sp, #16]
 8010110:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 8010114:	9403      	str	r4, [sp, #12]
 8010116:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 801011a:	9402      	str	r4, [sp, #8]
 801011c:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 8010120:	9401      	str	r4, [sp, #4]
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010128:	6812      	ldr	r2, [r2, #0]
 801012a:	6809      	ldr	r1, [r1, #0]
 801012c:	6800      	ldr	r0, [r0, #0]
 801012e:	f7fe fe65 	bl	800edfc <VL53LX_f_025>
 8010132:	4603      	mov	r3, r0
 8010134:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 8010138:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 801013c:	2b00      	cmp	r3, #0
 801013e:	f040 80cb 	bne.w	80102d8 <VL53LX_hist_process_data+0x3ec>
 8010142:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8010146:	2b00      	cmp	r3, #0
 8010148:	f040 80c6 	bne.w	80102d8 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 801014c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010150:	7c9b      	ldrb	r3, [r3, #18]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d110      	bne.n	8010178 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 8010156:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801015a:	3314      	adds	r3, #20
 801015c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 8010160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010164:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8010166:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801016a:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 801016c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010170:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 8010172:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010176:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8010178:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801017c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8010184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8010188:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	461a      	mov	r2, r3
 8010190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010194:	fb02 f303 	mul.w	r3, r2, r3
 8010198:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 801019c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101a0:	011b      	lsls	r3, r3, #4
 80101a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 80101a6:	2300      	movs	r3, #0
 80101a8:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80101ac:	e08b      	b.n	80102c6 <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 80101ae:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80101b2:	224c      	movs	r2, #76	@ 0x4c
 80101b4:	fb02 f303 	mul.w	r3, r2, r3
 80101b8:	3310      	adds	r3, #16
 80101ba:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80101be:	4413      	add	r3, r2
 80101c0:	3304      	adds	r3, #4
 80101c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 80101c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80101ca:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 80101ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80101d2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80101d6:	429a      	cmp	r2, r3
 80101d8:	dd0e      	ble.n	80101f8 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 80101da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80101de:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80101e2:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 80101e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80101e8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80101ec:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	b29b      	uxth	r3, r3
				delta_mm =
 80101f2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 80101f6:	e00d      	b.n	8010214 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 80101f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80101fc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8010200:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8010202:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010206:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 801020a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 801020c:	1ad3      	subs	r3, r2, r3
 801020e:	b29b      	uxth	r3, r3
				delta_mm =
 8010210:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8010214:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010218:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
			XtalkDetectMaxSigma =
 8010220:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8010224:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	461a      	mov	r2, r3
 801022c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010230:	fb02 f303 	mul.w	r3, r2, r3
 8010234:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma <<= 5;
 8010238:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801023c:	015b      	lsls	r3, r3, #5
 801023e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			if (pdata->median_range_mm  >
 8010242:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010246:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 801024a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801024e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
			if (pdata->median_range_mm  >
 8010258:	429a      	cmp	r2, r3
 801025a:	dd2f      	ble.n	80102bc <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 801025c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010260:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8010264:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010268:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8010272:	429a      	cmp	r2, r3
 8010274:	da22      	bge.n	80102bc <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 8010276:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801027a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 801027c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010280:	429a      	cmp	r2, r3
 8010282:	d91b      	bls.n	80102bc <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 8010284:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010288:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801028a:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 801028c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010290:	4293      	cmp	r3, r2
 8010292:	d913      	bls.n	80102bc <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 8010294:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8010298:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801029c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80102a0:	6812      	ldr	r2, [r2, #0]
 80102a2:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 80102a4:	4293      	cmp	r3, r2
 80102a6:	da09      	bge.n	80102bc <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 80102a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80102ac:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
				memcpy(
 80102b0:	224c      	movs	r2, #76	@ 0x4c
 80102b2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80102b6:	4618      	mov	r0, r3
 80102b8:	f00c fed5 	bl	801d066 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 80102bc:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80102c0:	3301      	adds	r3, #1
 80102c2:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80102c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80102ca:	7c9b      	ldrb	r3, [r3, #18]
 80102cc:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 80102d0:	429a      	cmp	r2, r3
 80102d2:	f4ff af6c 	bcc.w	80101ae <VL53LX_hist_process_data+0x2c2>
 80102d6:	e000      	b.n	80102da <VL53LX_hist_process_data+0x3ee>
			continue;
 80102d8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 80102da:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80102de:	3301      	adds	r3, #1
 80102e0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80102e4:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80102e8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80102ec:	429a      	cmp	r2, r3
 80102ee:	f67f aef0 	bls.w	80100d2 <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 80102f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80102f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8010300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
 8010304:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
}
 8010308:	4618      	mov	r0, r3
 801030a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 801030e:	46bd      	mov	sp, r7
 8010310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010312 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b086      	sub	sp, #24
 8010316:	af00      	add	r7, sp, #0
 8010318:	60f8      	str	r0, [r7, #12]
 801031a:	460b      	mov	r3, r1
 801031c:	607a      	str	r2, [r7, #4]
 801031e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010320:	2300      	movs	r3, #0
 8010322:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 8010324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d104      	bne.n	8010336 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f7f9 fb77 	bl	8009a20 <VL53LX_disable_firmware>
 8010332:	4603      	mov	r3, r0
 8010334:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 8010336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d104      	bne.n	8010348 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f7f9 fb9f 	bl	8009a82 <VL53LX_enable_powerforce>
 8010344:	4603      	mov	r3, r0
 8010346:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 8010348:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d105      	bne.n	801035c <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 8010350:	21fa      	movs	r1, #250	@ 0xfa
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f002 fd1e 	bl	8012d94 <VL53LX_WaitUs>
 8010358:	4603      	mov	r3, r0
 801035a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 801035c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d107      	bne.n	8010374 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 8010364:	2201      	movs	r2, #1
 8010366:	f240 7181 	movw	r1, #1921	@ 0x781
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f002 fc20 	bl	8012bb0 <VL53LX_WrByte>
 8010370:	4603      	mov	r3, r0
 8010372:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 8010374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d107      	bne.n	801038c <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 801037c:	2205      	movs	r2, #5
 801037e:	f240 6183 	movw	r1, #1667	@ 0x683
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f002 fc14 	bl	8012bb0 <VL53LX_WrByte>
 8010388:	4603      	mov	r3, r0
 801038a:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 801038c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d105      	bne.n	80103a0 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 8010394:	6879      	ldr	r1, [r7, #4]
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f002 fcfc 	bl	8012d94 <VL53LX_WaitUs>
 801039c:	4603      	mov	r3, r0
 801039e:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 80103a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d107      	bne.n	80103b8 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 80103a8:	2201      	movs	r2, #1
 80103aa:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80103ae:	68f8      	ldr	r0, [r7, #12]
 80103b0:	f002 fbfe 	bl	8012bb0 <VL53LX_WrByte>
 80103b4:	4603      	mov	r3, r0
 80103b6:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 80103b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d108      	bne.n	80103d2 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 80103c0:	897b      	ldrh	r3, [r7, #10]
 80103c2:	461a      	mov	r2, r3
 80103c4:	f240 7184 	movw	r1, #1924	@ 0x784
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f002 fc1b 	bl	8012c04 <VL53LX_WrWord>
 80103ce:	4603      	mov	r3, r0
 80103d0:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 80103d2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3718      	adds	r7, #24
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b086      	sub	sp, #24
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	60f8      	str	r0, [r7, #12]
 80103e6:	607b      	str	r3, [r7, #4]
 80103e8:	460b      	mov	r3, r1
 80103ea:	72fb      	strb	r3, [r7, #11]
 80103ec:	4613      	mov	r3, r2
 80103ee:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 80103f0:	2300      	movs	r3, #0
 80103f2:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 80103f4:	2300      	movs	r3, #0
 80103f6:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 80103f8:	7afb      	ldrb	r3, [r7, #11]
 80103fa:	75bb      	strb	r3, [r7, #22]
 80103fc:	e041      	b.n	8010482 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 80103fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d108      	bne.n	8010418 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 8010406:	7dbb      	ldrb	r3, [r7, #22]
 8010408:	461a      	mov	r2, r3
 801040a:	f240 7194 	movw	r1, #1940	@ 0x794
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f002 fbce 	bl	8012bb0 <VL53LX_WrByte>
 8010414:	4603      	mov	r3, r0
 8010416:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 8010418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d107      	bne.n	8010430 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 8010420:	2200      	movs	r2, #0
 8010422:	f240 7183 	movw	r1, #1923	@ 0x783
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f002 fbc2 	bl	8012bb0 <VL53LX_WrByte>
 801042c:	4603      	mov	r3, r0
 801042e:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 8010430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d105      	bne.n	8010444 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 8010438:	2105      	movs	r1, #5
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f002 fcaa 	bl	8012d94 <VL53LX_WaitUs>
 8010440:	4603      	mov	r3, r0
 8010442:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 8010444:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d107      	bne.n	801045c <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 801044c:	2201      	movs	r2, #1
 801044e:	f240 7183 	movw	r1, #1923	@ 0x783
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f002 fbac 	bl	8012bb0 <VL53LX_WrByte>
 8010458:	4603      	mov	r3, r0
 801045a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 801045c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d108      	bne.n	8010476 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 8010464:	2304      	movs	r3, #4
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 801046c:	68f8      	ldr	r0, [r7, #12]
 801046e:	f002 fb69 	bl	8012b44 <VL53LX_ReadMulti>
 8010472:	4603      	mov	r3, r0
 8010474:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	3304      	adds	r3, #4
 801047a:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 801047c:	7dbb      	ldrb	r3, [r7, #22]
 801047e:	3301      	adds	r3, #1
 8010480:	75bb      	strb	r3, [r7, #22]
 8010482:	7dba      	ldrb	r2, [r7, #22]
 8010484:	7af9      	ldrb	r1, [r7, #11]
 8010486:	7abb      	ldrb	r3, [r7, #10]
 8010488:	440b      	add	r3, r1
 801048a:	429a      	cmp	r2, r3
 801048c:	dbb7      	blt.n	80103fe <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 801048e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010492:	4618      	mov	r0, r3
 8010494:	3718      	adds	r7, #24
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b084      	sub	sp, #16
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104a2:	2300      	movs	r3, #0
 80104a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80104a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d107      	bne.n	80104be <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 80104ae:	2201      	movs	r2, #1
 80104b0:	f240 7183 	movw	r1, #1923	@ 0x783
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f002 fb7b 	bl	8012bb0 <VL53LX_WrByte>
 80104ba:	4603      	mov	r3, r0
 80104bc:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 80104be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d107      	bne.n	80104d6 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 80104c6:	2200      	movs	r2, #0
 80104c8:	f240 7181 	movw	r1, #1921	@ 0x781
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f002 fb6f 	bl	8012bb0 <VL53LX_WrByte>
 80104d2:	4603      	mov	r3, r0
 80104d4:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 80104d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d104      	bne.n	80104e8 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7f9 fae1 	bl	8009aa6 <VL53LX_disable_powerforce>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 80104e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d104      	bne.n	80104fa <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7f9 fa83 	bl	80099fc <VL53LX_enable_firmware>
 80104f6:	4603      	mov	r3, r0
 80104f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80104fa:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 8010506:	b480      	push	{r7}
 8010508:	b087      	sub	sp, #28
 801050a:	af00      	add	r7, sp, #0
 801050c:	4603      	mov	r3, r0
 801050e:	60b9      	str	r1, [r7, #8]
 8010510:	607a      	str	r2, [r7, #4]
 8010512:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8010514:	2300      	movs	r3, #0
 8010516:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 801051c:	89fb      	ldrh	r3, [r7, #14]
 801051e:	2b03      	cmp	r3, #3
 8010520:	d802      	bhi.n	8010528 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8010522:	f06f 0308 	mvn.w	r3, #8
 8010526:	e017      	b.n	8010558 <VL53LX_nvm_decode_optical_centre+0x52>


	tmp  = 0x00F0;
 8010528:	23f0      	movs	r3, #240	@ 0xf0
 801052a:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	3302      	adds	r3, #2
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	461a      	mov	r2, r3
 8010534:	8afb      	ldrh	r3, [r7, #22]
 8010536:	1a9b      	subs	r3, r3, r2
 8010538:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 801053a:	8afb      	ldrh	r3, [r7, #22]
 801053c:	2bff      	cmp	r3, #255	@ 0xff
 801053e:	d901      	bls.n	8010544 <VL53LX_nvm_decode_optical_centre+0x3e>
		tmp = 0;
 8010540:	2300      	movs	r3, #0
 8010542:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8010544:	8afb      	ldrh	r3, [r7, #22]
 8010546:	b2da      	uxtb	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	78da      	ldrb	r2, [r3, #3]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	705a      	strb	r2, [r3, #1]

	return status;
 8010554:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8010558:	4618      	mov	r0, r3
 801055a:	371c      	adds	r7, #28
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr

08010564 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 8010564:	b590      	push	{r4, r7, lr}
 8010566:	b087      	sub	sp, #28
 8010568:	af00      	add	r7, sp, #0
 801056a:	4603      	mov	r3, r0
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	607a      	str	r2, [r7, #4]
 8010570:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8010572:	2300      	movs	r3, #0
 8010574:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8010576:	2300      	movs	r3, #0
 8010578:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 801057a:	2300      	movs	r3, #0
 801057c:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 801057e:	89fb      	ldrh	r3, [r7, #14]
 8010580:	2b37      	cmp	r3, #55	@ 0x37
 8010582:	d802      	bhi.n	801058a <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8010584:	f06f 0308 	mvn.w	r3, #8
 8010588:	e03e      	b.n	8010608 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 801058a:	68b9      	ldr	r1, [r7, #8]
 801058c:	2002      	movs	r0, #2
 801058e:	f7f9 f91b 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8010592:	4603      	mov	r3, r0
 8010594:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	3302      	adds	r3, #2
 801059e:	4619      	mov	r1, r3
 80105a0:	2002      	movs	r0, #2
 80105a2:	f7f9 f911 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80105a6:	4603      	mov	r3, r0
 80105a8:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 80105b2:	099b      	lsrs	r3, r3, #6
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2219      	movs	r2, #25
 80105be:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2205      	movs	r2, #5
 80105c4:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2205      	movs	r2, #5
 80105ca:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	3304      	adds	r3, #4
 80105d0:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80105d2:	2300      	movs	r3, #0
 80105d4:	74fb      	strb	r3, [r7, #19]
 80105d6:	e012      	b.n	80105fe <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 80105d8:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 80105da:	6979      	ldr	r1, [r7, #20]
 80105dc:	2002      	movs	r0, #2
 80105de:	f7f9 f8f3 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80105e2:	4603      	mov	r3, r0
 80105e4:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	1d23      	adds	r3, r4, #4
 80105ea:	005b      	lsls	r3, r3, #1
 80105ec:	4413      	add	r3, r2
 80105ee:	460a      	mov	r2, r1
 80105f0:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	3302      	adds	r3, #2
 80105f6:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80105f8:	7cfb      	ldrb	r3, [r7, #19]
 80105fa:	3301      	adds	r3, #1
 80105fc:	74fb      	strb	r3, [r7, #19]
 80105fe:	7cfb      	ldrb	r3, [r7, #19]
 8010600:	2b18      	cmp	r3, #24
 8010602:	d9e9      	bls.n	80105d8 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8010604:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8010608:	4618      	mov	r0, r3
 801060a:	371c      	adds	r7, #28
 801060c:	46bd      	mov	sp, r7
 801060e:	bd90      	pop	{r4, r7, pc}

08010610 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	4603      	mov	r3, r0
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
 801061c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 801061e:	2300      	movs	r3, #0
 8010620:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8010622:	89fb      	ldrh	r3, [r7, #14]
 8010624:	2b07      	cmp	r3, #7
 8010626:	d802      	bhi.n	801062e <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8010628:	f06f 0308 	mvn.w	r3, #8
 801062c:	e027      	b.n	801067e <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 801062e:	68b9      	ldr	r1, [r7, #8]
 8010630:	2002      	movs	r0, #2
 8010632:	f7f9 f8c9 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8010636:	4603      	mov	r3, r0
 8010638:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	3302      	adds	r3, #2
 8010642:	4619      	mov	r1, r3
 8010644:	2002      	movs	r0, #2
 8010646:	f7f9 f8bf 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801064a:	4603      	mov	r3, r0
 801064c:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	3304      	adds	r3, #4
 8010656:	4619      	mov	r1, r3
 8010658:	2002      	movs	r0, #2
 801065a:	f7f9 f8b5 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801065e:	4603      	mov	r3, r0
 8010660:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	3306      	adds	r3, #6
 801066a:	4619      	mov	r1, r3
 801066c:	2002      	movs	r0, #2
 801066e:	f7f9 f8ab 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8010672:	4603      	mov	r3, r0
 8010674:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	80da      	strh	r2, [r3, #6]

	return status;
 801067a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3718      	adds	r7, #24
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b086      	sub	sp, #24
 801068a:	af00      	add	r7, sp, #0
 801068c:	4603      	mov	r3, r0
 801068e:	60b9      	str	r1, [r7, #8]
 8010690:	607a      	str	r2, [r7, #4]
 8010692:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8010694:	2300      	movs	r3, #0
 8010696:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8010698:	89fb      	ldrh	r3, [r7, #14]
 801069a:	2b0f      	cmp	r3, #15
 801069c:	d802      	bhi.n	80106a4 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 801069e:	f06f 0308 	mvn.w	r3, #8
 80106a2:	e04d      	b.n	8010740 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80106a4:	68b9      	ldr	r1, [r7, #8]
 80106a6:	2002      	movs	r0, #2
 80106a8:	f7f9 f88e 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80106ac:	4603      	mov	r3, r0
 80106ae:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	789a      	ldrb	r2, [r3, #2]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	78da      	ldrb	r2, [r3, #3]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	3304      	adds	r3, #4
 80106c8:	4619      	mov	r1, r3
 80106ca:	2002      	movs	r0, #2
 80106cc:	f7f9 f87c 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80106d0:	4603      	mov	r3, r0
 80106d2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	3306      	adds	r3, #6
 80106dc:	4619      	mov	r1, r3
 80106de:	2002      	movs	r0, #2
 80106e0:	f7f9 f872 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80106e4:	4603      	mov	r3, r0
 80106e6:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	3308      	adds	r3, #8
 80106f0:	4619      	mov	r1, r3
 80106f2:	2002      	movs	r0, #2
 80106f4:	f7f9 f868 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80106f8:	4603      	mov	r3, r0
 80106fa:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	330a      	adds	r3, #10
 8010704:	4619      	mov	r1, r3
 8010706:	2002      	movs	r0, #2
 8010708:	f7f9 f85e 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801070c:	4603      	mov	r3, r0
 801070e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	330c      	adds	r3, #12
 8010718:	4619      	mov	r1, r3
 801071a:	2002      	movs	r0, #2
 801071c:	f7f9 f854 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8010720:	4603      	mov	r3, r0
 8010722:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	330e      	adds	r3, #14
 801072c:	4619      	mov	r1, r3
 801072e:	2002      	movs	r0, #2
 8010730:	f7f9 f84a 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8010734:	4603      	mov	r3, r0
 8010736:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	81da      	strh	r2, [r3, #14]

	return status;
 801073c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3718      	adds	r7, #24
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	607b      	str	r3, [r7, #4]
 8010752:	460b      	mov	r3, r1
 8010754:	72fb      	strb	r3, [r7, #11]
 8010756:	4613      	mov	r3, r2
 8010758:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 801075a:	2300      	movs	r3, #0
 801075c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 801075e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 8010766:	2232      	movs	r2, #50	@ 0x32
 8010768:	2104      	movs	r1, #4
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	f7ff fdd1 	bl	8010312 <VL53LX_nvm_enable>
 8010770:	4603      	mov	r3, r0
 8010772:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 8010774:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d107      	bne.n	801078c <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 801077c:	7aba      	ldrb	r2, [r7, #10]
 801077e:	7af9      	ldrb	r1, [r7, #11]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	68f8      	ldr	r0, [r7, #12]
 8010784:	f7ff fe2b 	bl	80103de <VL53LX_nvm_read>
 8010788:	4603      	mov	r3, r0
 801078a:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 801078c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d104      	bne.n	801079e <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	f7ff fe80 	bl	801049a <VL53LX_nvm_disable>
 801079a:	4603      	mov	r3, r0
 801079c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 801079e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3718      	adds	r7, #24
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b084      	sub	sp, #16
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
 80107b2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80107b4:	2300      	movs	r3, #0
 80107b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 80107b8:	f107 0308 	add.w	r3, r7, #8
 80107bc:	2201      	movs	r2, #1
 80107be:	212e      	movs	r1, #46	@ 0x2e
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7ff ffc1 	bl	8010748 <VL53LX_read_nvm_raw_data>
 80107c6:	4603      	mov	r3, r0
 80107c8:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80107ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d108      	bne.n	80107e4 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 80107d2:	f107 0308 	add.w	r3, r7, #8
 80107d6:	683a      	ldr	r2, [r7, #0]
 80107d8:	4619      	mov	r1, r3
 80107da:	2004      	movs	r0, #4
 80107dc:	f7ff fe93 	bl	8010506 <VL53LX_nvm_decode_optical_centre>
 80107e0:	4603      	mov	r3, r0
 80107e2:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 80107e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3710      	adds	r7, #16
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b092      	sub	sp, #72	@ 0x48
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80107fa:	2300      	movs	r3, #0
 80107fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 8010800:	f107 030c 	add.w	r3, r7, #12
 8010804:	220e      	movs	r2, #14
 8010806:	2157      	movs	r1, #87	@ 0x57
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7ff ff9d 	bl	8010748 <VL53LX_read_nvm_raw_data>
 801080e:	4603      	mov	r3, r0
 8010810:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8010814:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8010818:	2b00      	cmp	r3, #0
 801081a:	d109      	bne.n	8010830 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 801081c:	f107 030c 	add.w	r3, r7, #12
 8010820:	683a      	ldr	r2, [r7, #0]
 8010822:	4619      	mov	r1, r3
 8010824:	2038      	movs	r0, #56	@ 0x38
 8010826:	f7ff fe9d 	bl	8010564 <VL53LX_nvm_decode_cal_peak_rate_map>
 801082a:	4603      	mov	r3, r0
 801082c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8010830:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8010834:	4618      	mov	r0, r3
 8010836:	3748      	adds	r7, #72	@ 0x48
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b086      	sub	sp, #24
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010846:	2300      	movs	r3, #0
 8010848:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 801084a:	f107 030c 	add.w	r3, r7, #12
 801084e:	2202      	movs	r2, #2
 8010850:	2165      	movs	r1, #101	@ 0x65
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7ff ff78 	bl	8010748 <VL53LX_read_nvm_raw_data>
 8010858:	4603      	mov	r3, r0
 801085a:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 801085c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d108      	bne.n	8010876 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 8010864:	f107 030c 	add.w	r3, r7, #12
 8010868:	683a      	ldr	r2, [r7, #0]
 801086a:	4619      	mov	r1, r3
 801086c:	2008      	movs	r0, #8
 801086e:	f7ff fecf 	bl	8010610 <VL53LX_nvm_decode_additional_offset_cal_data>
 8010872:	4603      	mov	r3, r0
 8010874:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8010876:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801087a:	4618      	mov	r0, r3
 801087c:	3718      	adds	r7, #24
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}

08010882 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 8010882:	b580      	push	{r7, lr}
 8010884:	b08a      	sub	sp, #40	@ 0x28
 8010886:	af00      	add	r7, sp, #0
 8010888:	60f8      	str	r0, [r7, #12]
 801088a:	460b      	mov	r3, r1
 801088c:	607a      	str	r2, [r7, #4]
 801088e:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010890:	2300      	movs	r3, #0
 8010892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 8010896:	897b      	ldrh	r3, [r7, #10]
 8010898:	089b      	lsrs	r3, r3, #2
 801089a:	b29b      	uxth	r3, r3
 801089c:	b2d9      	uxtb	r1, r3
 801089e:	f107 0314 	add.w	r3, r7, #20
 80108a2:	2204      	movs	r2, #4
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f7ff ff4f 	bl	8010748 <VL53LX_read_nvm_raw_data>
 80108aa:	4603      	mov	r3, r0
 80108ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80108b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d109      	bne.n	80108cc <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 80108b8:	f107 0314 	add.w	r3, r7, #20
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	4619      	mov	r1, r3
 80108c0:	2010      	movs	r0, #16
 80108c2:	f7ff fee0 	bl	8010686 <VL53LX_nvm_decode_fmt_range_results_data>
 80108c6:	4603      	mov	r3, r0
 80108c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80108cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3728      	adds	r7, #40	@ 0x28
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b086      	sub	sp, #24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	460b      	mov	r3, r1
 80108e2:	607a      	str	r2, [r7, #4]
 80108e4:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80108e6:	2300      	movs	r3, #0
 80108e8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80108ea:	897b      	ldrh	r3, [r7, #10]
 80108ec:	2b0a      	cmp	r3, #10
 80108ee:	d802      	bhi.n	80108f6 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80108f0:	f06f 0309 	mvn.w	r3, #9
 80108f4:	e047      	b.n	8010986 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108fe:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801090c:	f002 020f 	and.w	r2, r2, #15
 8010910:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010912:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801091c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010920:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010922:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801092c:	f002 0203 	and.w	r2, r2, #3
 8010930:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010932:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 801093c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010940:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8010942:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	88d8      	ldrh	r0, [r3, #6]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	3305      	adds	r3, #5
 801094c:	461a      	mov	r2, r3
 801094e:	2102      	movs	r1, #2
 8010950:	f7f8 ff0f 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801095c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8010962:	68fa      	ldr	r2, [r7, #12]
 8010964:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010966:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8010970:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010974:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010976:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8010980:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010986:	4618      	mov	r0, r3
 8010988:	3718      	adds	r7, #24
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b086      	sub	sp, #24
 8010992:	af00      	add	r7, sp, #0
 8010994:	4603      	mov	r3, r0
 8010996:	60b9      	str	r1, [r7, #8]
 8010998:	607a      	str	r2, [r7, #4]
 801099a:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801099c:	2300      	movs	r3, #0
 801099e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80109a0:	89fb      	ldrh	r3, [r7, #14]
 80109a2:	2b0a      	cmp	r3, #10
 80109a4:	d802      	bhi.n	80109ac <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80109a6:	f06f 0309 	mvn.w	r3, #9
 80109aa:	e046      	b.n	8010a3a <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80109b4:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	3301      	adds	r3, #1
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	f003 030f 	and.w	r3, r3, #15
 80109c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	3302      	adds	r3, #2
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80109d4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	3303      	adds	r3, #3
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	f003 0303 	and.w	r3, r3, #3
 80109e4:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	3304      	adds	r3, #4
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80109f4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	3305      	adds	r3, #5
 80109fe:	4619      	mov	r1, r3
 8010a00:	2002      	movs	r0, #2
 8010a02:	f7f8 fee1 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8010a06:	4603      	mov	r3, r0
 8010a08:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	79da      	ldrb	r2, [r3, #7]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	7a1a      	ldrb	r2, [r3, #8]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	3309      	adds	r3, #9
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a28:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	7a9a      	ldrb	r2, [r3, #10]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8010a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3718      	adds	r7, #24
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b086      	sub	sp, #24
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
 8010a4a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d108      	bne.n	8010a6a <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 8010a58:	f107 020c 	add.w	r2, r7, #12
 8010a5c:	230b      	movs	r3, #11
 8010a5e:	2101      	movs	r1, #1
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f002 f86f 	bl	8012b44 <VL53LX_ReadMulti>
 8010a66:	4603      	mov	r3, r0
 8010a68:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8010a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d108      	bne.n	8010a84 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 8010a72:	f107 030c 	add.w	r3, r7, #12
 8010a76:	683a      	ldr	r2, [r7, #0]
 8010a78:	4619      	mov	r1, r3
 8010a7a:	200b      	movs	r0, #11
 8010a7c:	f7ff ff87 	bl	801098e <VL53LX_i2c_decode_static_nvm_managed>
 8010a80:	4603      	mov	r3, r0
 8010a82:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3718      	adds	r7, #24
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b086      	sub	sp, #24
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	460b      	mov	r3, r1
 8010a9a:	607a      	str	r2, [r7, #4]
 8010a9c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8010aa2:	897b      	ldrh	r3, [r7, #10]
 8010aa4:	2b16      	cmp	r3, #22
 8010aa6:	d802      	bhi.n	8010aae <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010aa8:	f06f 0309 	mvn.w	r3, #9
 8010aac:	e076      	b.n	8010b9c <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010abe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8010ac4:	68fa      	ldr	r2, [r7, #12]
 8010ac6:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8010ac8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8010ad2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8010ad8:	68fa      	ldr	r2, [r7, #12]
 8010ada:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8010adc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8010ae6:	f002 020f 	and.w	r2, r2, #15
 8010aea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8010aec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8010af2:	68fa      	ldr	r2, [r7, #12]
 8010af4:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8010af6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8010b00:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010b04:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8010b06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8010b10:	f002 0203 	and.w	r2, r2, #3
 8010b14:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8010b16:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	8958      	ldrh	r0, [r3, #10]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	3309      	adds	r3, #9
 8010b20:	461a      	mov	r2, r3
 8010b22:	2102      	movs	r1, #2
 8010b24:	f7f8 fe25 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	330b      	adds	r3, #11
 8010b32:	461a      	mov	r2, r3
 8010b34:	2102      	movs	r1, #2
 8010b36:	f7f8 fe67 	bl	8009808 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	330d      	adds	r3, #13
 8010b44:	461a      	mov	r2, r3
 8010b46:	2102      	movs	r1, #2
 8010b48:	f7f8 fe5e 	bl	8009808 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	8a18      	ldrh	r0, [r3, #16]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	330f      	adds	r3, #15
 8010b54:	461a      	mov	r2, r3
 8010b56:	2102      	movs	r1, #2
 8010b58:	f7f8 fe0b 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 8010b62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b66:	b218      	sxth	r0, r3
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	3311      	adds	r3, #17
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	2102      	movs	r1, #2
 8010b70:	f7f8 fe4a 	bl	8009808 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	3313      	adds	r3, #19
 8010b7e:	461a      	mov	r2, r3
 8010b80:	2102      	movs	r1, #2
 8010b82:	f7f8 fe41 	bl	8009808 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3315      	adds	r3, #21
 8010b90:	461a      	mov	r2, r3
 8010b92:	2102      	movs	r1, #2
 8010b94:	f7f8 fe38 	bl	8009808 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8010b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3718      	adds	r7, #24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b086      	sub	sp, #24
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	4603      	mov	r3, r0
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
 8010bb0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8010bb6:	89fb      	ldrh	r3, [r7, #14]
 8010bb8:	2b16      	cmp	r3, #22
 8010bba:	d802      	bhi.n	8010bc2 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010bbc:	f06f 0309 	mvn.w	r3, #9
 8010bc0:	e079      	b.n	8010cb6 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	785a      	ldrb	r2, [r3, #1]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	789a      	ldrb	r2, [r3, #2]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	78da      	ldrb	r2, [r3, #3]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	791a      	ldrb	r2, [r3, #4]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	3305      	adds	r3, #5
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	f003 030f 	and.w	r3, r3, #15
 8010bf4:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	799a      	ldrb	r2, [r3, #6]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	3307      	adds	r3, #7
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010c0c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	3308      	adds	r3, #8
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	f003 0303 	and.w	r3, r3, #3
 8010c1c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	3309      	adds	r3, #9
 8010c26:	4619      	mov	r1, r3
 8010c28:	2002      	movs	r0, #2
 8010c2a:	f7f8 fdcd 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	330b      	adds	r3, #11
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	2002      	movs	r0, #2
 8010c3e:	f7f8 fe0f 	bl	8009860 <VL53LX_i2c_decode_int16_t>
 8010c42:	4603      	mov	r3, r0
 8010c44:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	330d      	adds	r3, #13
 8010c4e:	4619      	mov	r1, r3
 8010c50:	2002      	movs	r0, #2
 8010c52:	f7f8 fe05 	bl	8009860 <VL53LX_i2c_decode_int16_t>
 8010c56:	4603      	mov	r3, r0
 8010c58:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	330f      	adds	r3, #15
 8010c62:	4619      	mov	r1, r3
 8010c64:	2002      	movs	r0, #2
 8010c66:	f7f8 fdaf 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	3311      	adds	r3, #17
 8010c76:	4619      	mov	r1, r3
 8010c78:	2002      	movs	r0, #2
 8010c7a:	f7f8 fdf1 	bl	8009860 <VL53LX_i2c_decode_int16_t>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c84:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	3313      	adds	r3, #19
 8010c8e:	4619      	mov	r1, r3
 8010c90:	2002      	movs	r0, #2
 8010c92:	f7f8 fde5 	bl	8009860 <VL53LX_i2c_decode_int16_t>
 8010c96:	4603      	mov	r3, r0
 8010c98:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	3315      	adds	r3, #21
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	2002      	movs	r0, #2
 8010ca6:	f7f8 fddb 	bl	8009860 <VL53LX_i2c_decode_int16_t>
 8010caa:	4603      	mov	r3, r0
 8010cac:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8010cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3718      	adds	r7, #24
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <VL53LX_set_customer_nvm_managed>:


VL53LX_Error VL53LX_set_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b088      	sub	sp, #32
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010ccc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d108      	bne.n	8010ce6 <VL53LX_set_customer_nvm_managed+0x28>
		status = VL53LX_i2c_encode_customer_nvm_managed(
 8010cd4:	f107 0308 	add.w	r3, r7, #8
 8010cd8:	461a      	mov	r2, r3
 8010cda:	2117      	movs	r1, #23
 8010cdc:	6838      	ldr	r0, [r7, #0]
 8010cde:	f7ff fed7 	bl	8010a90 <VL53LX_i2c_encode_customer_nvm_managed>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	77fb      	strb	r3, [r7, #31]
			pdata,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 8010ce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d108      	bne.n	8010d00 <VL53LX_set_customer_nvm_managed+0x42>
		status = VL53LX_WriteMulti(
 8010cee:	f107 0208 	add.w	r2, r7, #8
 8010cf2:	2317      	movs	r3, #23
 8010cf4:	210d      	movs	r1, #13
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f001 feee 	bl	8012ad8 <VL53LX_WriteMulti>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8010d00:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3720      	adds	r7, #32
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b08a      	sub	sp, #40	@ 0x28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010d16:	2300      	movs	r3, #0
 8010d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010d1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d109      	bne.n	8010d38 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 8010d24:	f107 020c 	add.w	r2, r7, #12
 8010d28:	2317      	movs	r3, #23
 8010d2a:	210d      	movs	r1, #13
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f001 ff09 	bl	8012b44 <VL53LX_ReadMulti>
 8010d32:	4603      	mov	r3, r0
 8010d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8010d38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d109      	bne.n	8010d54 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 8010d40:	f107 030c 	add.w	r3, r7, #12
 8010d44:	683a      	ldr	r2, [r7, #0]
 8010d46:	4619      	mov	r1, r3
 8010d48:	2017      	movs	r0, #23
 8010d4a:	f7ff ff2b 	bl	8010ba4 <VL53LX_i2c_decode_customer_nvm_managed>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 8010d54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d11c      	bne.n	8010d96 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	8a5b      	ldrh	r3, [r3, #18]
 8010d60:	84bb      	strh	r3, [r7, #36]	@ 0x24
		offset = offset / 4;
 8010d62:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	da00      	bge.n	8010d6c <VL53LX_get_customer_nvm_managed+0x60>
 8010d6a:	3303      	adds	r3, #3
 8010d6c:	109b      	asrs	r3, r3, #2
 8010d6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (offset >= 1024)
 8010d70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010d78:	db04      	blt.n	8010d84 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 8010d7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d7c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	84bb      	strh	r3, [r7, #36]	@ 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	2200      	movs	r2, #0
 8010d88:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d8e:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d94:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8010d96:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3728      	adds	r7, #40	@ 0x28
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b086      	sub	sp, #24
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	60f8      	str	r0, [r7, #12]
 8010daa:	460b      	mov	r3, r1
 8010dac:	607a      	str	r2, [r7, #4]
 8010dae:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010db0:	2300      	movs	r3, #0
 8010db2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 8010db4:	897b      	ldrh	r3, [r7, #10]
 8010db6:	2b1f      	cmp	r3, #31
 8010db8:	d802      	bhi.n	8010dc0 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010dba:	f06f 0309 	mvn.w	r3, #9
 8010dbe:	e0cf      	b.n	8010f60 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	881b      	ldrh	r3, [r3, #0]
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	2102      	movs	r1, #2
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7f8 fcd2 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8010dd6:	f002 0201 	and.w	r2, r2, #1
 8010dda:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010ddc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8010de6:	f002 020f 	and.w	r2, r2, #15
 8010dea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010dec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8010df6:	f002 020f 	and.w	r2, r2, #15
 8010dfa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8010dfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8010e06:	f002 021f 	and.w	r2, r2, #31
 8010e0a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8010e0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8010e16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010e1a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010e1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8010e26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010e2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8010e2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8010e36:	f002 0201 	and.w	r2, r2, #1
 8010e3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8010e3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8010e42:	68fa      	ldr	r2, [r7, #12]
 8010e44:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8010e46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8010e50:	f002 0201 	and.w	r2, r2, #1
 8010e54:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8010e56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8010e60:	f002 0203 	and.w	r2, r2, #3
 8010e64:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010e66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8010e70:	f002 021f 	and.w	r2, r2, #31
 8010e74:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8010e76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8010e80:	f002 0203 	and.w	r2, r2, #3
 8010e84:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8010e86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8010e90:	f002 0203 	and.w	r2, r2, #3
 8010e94:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8010e96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8010ea0:	f002 0207 	and.w	r2, r2, #7
 8010ea4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8010ea6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8010eb0:	f002 021f 	and.w	r2, r2, #31
 8010eb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8010eb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8010ec0:	f002 0201 	and.w	r2, r2, #1
 8010ec4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010ec6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8010ed0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8010ed6:	68fa      	ldr	r2, [r7, #12]
 8010ed8:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8010eda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8010ee4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8010eee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8010ef8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8010efe:	68fa      	ldr	r2, [r7, #12]
 8010f00:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8010f02:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	8b18      	ldrh	r0, [r3, #24]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	3318      	adds	r3, #24
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	2102      	movs	r1, #2
 8010f10:	f7f8 fc2f 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8010f18:	68fa      	ldr	r2, [r7, #12]
 8010f1a:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8010f1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8010f26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8010f30:	f002 020f 	and.w	r2, r2, #15
 8010f34:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8010f36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8010f40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8010f4a:	f002 020f 	and.w	r2, r2, #15
 8010f4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8010f50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8010f5a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3718      	adds	r7, #24
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b086      	sub	sp, #24
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	460b      	mov	r3, r1
 8010f72:	607a      	str	r2, [r7, #4]
 8010f74:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010f76:	2300      	movs	r3, #0
 8010f78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8010f7a:	897b      	ldrh	r3, [r7, #10]
 8010f7c:	2b15      	cmp	r3, #21
 8010f7e:	d802      	bhi.n	8010f86 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010f80:	f06f 0309 	mvn.w	r3, #9
 8010f84:	e070      	b.n	8011068 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010f96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8010fa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8010faa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010fae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010fb0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 8010fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010fba:	b298      	uxth	r0, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	3304      	adds	r3, #4
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	2102      	movs	r1, #2
 8010fc4:	f7f8 fbd5 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8010fd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010fd4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010fd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8010fe0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010fea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8010ff4:	f002 0201 	and.w	r2, r2, #1
 8010ff8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010ffa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8011004:	f002 0207 	and.w	r2, r2, #7
 8011008:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801100a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	8998      	ldrh	r0, [r3, #12]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	330c      	adds	r3, #12
 8011014:	461a      	mov	r2, r3
 8011016:	2102      	movs	r1, #2
 8011018:	f7f8 fbab 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	89d8      	ldrh	r0, [r3, #14]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	330e      	adds	r3, #14
 8011024:	461a      	mov	r2, r3
 8011026:	2102      	movs	r1, #2
 8011028:	f7f8 fba3 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	8a18      	ldrh	r0, [r3, #16]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	3310      	adds	r3, #16
 8011034:	461a      	mov	r2, r3
 8011036:	2102      	movs	r1, #2
 8011038:	f7f8 fb9b 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8011044:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 801104a:	68fa      	ldr	r2, [r7, #12]
 801104c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 801104e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8011054:	68fa      	ldr	r2, [r7, #12]
 8011056:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8011058:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8011062:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3718      	adds	r7, #24
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	460b      	mov	r3, r1
 801107a:	607a      	str	r2, [r7, #4]
 801107c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801107e:	2300      	movs	r3, #0
 8011080:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 8011082:	897b      	ldrh	r3, [r7, #10]
 8011084:	2b16      	cmp	r3, #22
 8011086:	d802      	bhi.n	801108e <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011088:	f06f 0309 	mvn.w	r3, #9
 801108c:	e06e      	b.n	801116c <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	f003 030f 	and.w	r3, r3, #15
 8011096:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80110a0:	68fa      	ldr	r2, [r7, #12]
 80110a2:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80110a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80110ae:	f002 020f 	and.w	r2, r2, #15
 80110b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80110b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 80110ba:	68fa      	ldr	r2, [r7, #12]
 80110bc:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80110be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80110c8:	f002 020f 	and.w	r2, r2, #15
 80110cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80110ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80110d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80110e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80110e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80110e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80110f2:	f002 020f 	and.w	r2, r2, #15
 80110f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80110f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8011102:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 801110c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011110:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8011112:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	8958      	ldrh	r0, [r3, #10]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	330a      	adds	r3, #10
 801111c:	461a      	mov	r2, r3
 801111e:	2102      	movs	r1, #2
 8011120:	f7f8 fb27 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	8998      	ldrh	r0, [r3, #12]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	330c      	adds	r3, #12
 801112c:	461a      	mov	r2, r3
 801112e:	2102      	movs	r1, #2
 8011130:	f7f8 fb1f 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 801113c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8011146:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	6918      	ldr	r0, [r3, #16]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	3312      	adds	r3, #18
 8011150:	461a      	mov	r2, r3
 8011152:	2104      	movs	r1, #4
 8011154:	f7f8 fbad 	bl	80098b2 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8011160:	f002 0201 	and.w	r2, r2, #1
 8011164:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8011166:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011168:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3718      	adds	r7, #24
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b086      	sub	sp, #24
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	460b      	mov	r3, r1
 801117e:	607a      	str	r2, [r7, #4]
 8011180:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011182:	2300      	movs	r3, #0
 8011184:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8011186:	897b      	ldrh	r3, [r7, #10]
 8011188:	2b11      	cmp	r3, #17
 801118a:	d802      	bhi.n	8011192 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801118c:	f06f 0309 	mvn.w	r3, #9
 8011190:	e071      	b.n	8011276 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	f003 0303 	and.w	r3, r3, #3
 801119a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	8858      	ldrh	r0, [r3, #2]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	3301      	adds	r3, #1
 80111a8:	461a      	mov	r2, r3
 80111aa:	2102      	movs	r1, #2
 80111ac:	f7f8 fae1 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	8898      	ldrh	r0, [r3, #4]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	3303      	adds	r3, #3
 80111b8:	461a      	mov	r2, r3
 80111ba:	2102      	movs	r1, #2
 80111bc:	f7f8 fad9 	bl	8009772 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80111c8:	f002 0201 	and.w	r2, r2, #1
 80111cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80111ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80111d8:	f002 0207 	and.w	r2, r2, #7
 80111dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80111de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80111e4:	68fa      	ldr	r2, [r7, #12]
 80111e6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80111e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80111ee:	68fa      	ldr	r2, [r7, #12]
 80111f0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80111f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80111fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011200:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8011202:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801120c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011210:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8011212:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801121c:	f002 0203 	and.w	r2, r2, #3
 8011220:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8011222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 801122c:	f002 0203 	and.w	r2, r2, #3
 8011230:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8011232:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 801123c:	f002 020f 	and.w	r2, r2, #15
 8011240:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8011242:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 801124c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8011252:	68fa      	ldr	r2, [r7, #12]
 8011254:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8011256:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 801125c:	68fa      	ldr	r2, [r7, #12]
 801125e:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8011260:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 801126a:	f002 0203 	and.w	r2, r2, #3
 801126e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8011270:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3718      	adds	r7, #24
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801127e:	b480      	push	{r7}
 8011280:	b087      	sub	sp, #28
 8011282:	af00      	add	r7, sp, #0
 8011284:	60f8      	str	r0, [r7, #12]
 8011286:	460b      	mov	r3, r1
 8011288:	607a      	str	r2, [r7, #4]
 801128a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801128c:	2300      	movs	r3, #0
 801128e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8011290:	897b      	ldrh	r3, [r7, #10]
 8011292:	2b04      	cmp	r3, #4
 8011294:	d802      	bhi.n	801129c <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011296:	f06f 0309 	mvn.w	r3, #9
 801129a:	e025      	b.n	80112e8 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	f003 0301 	and.w	r3, r3, #1
 80112a4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 80112b2:	f002 0201 	and.w	r2, r2, #1
 80112b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80112b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 80112c2:	f002 0201 	and.w	r2, r2, #1
 80112c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80112c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80112d2:	f002 0203 	and.w	r2, r2, #3
 80112d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80112d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80112de:	68fa      	ldr	r2, [r7, #12]
 80112e0:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80112e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80112e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	371c      	adds	r7, #28
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80112fe:	2300      	movs	r3, #0
 8011300:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8011302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d108      	bne.n	801131c <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 801130a:	f107 0308 	add.w	r3, r7, #8
 801130e:	461a      	mov	r2, r3
 8011310:	2105      	movs	r1, #5
 8011312:	6838      	ldr	r0, [r7, #0]
 8011314:	f7ff ffb3 	bl	801127e <VL53LX_i2c_encode_system_control>
 8011318:	4603      	mov	r3, r0
 801131a:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 801131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d108      	bne.n	8011336 <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 8011324:	f107 0208 	add.w	r2, r7, #8
 8011328:	2305      	movs	r3, #5
 801132a:	2183      	movs	r1, #131	@ 0x83
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f001 fbd3 	bl	8012ad8 <VL53LX_WriteMulti>
 8011332:	4603      	mov	r3, r0
 8011334:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8011336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3710      	adds	r7, #16
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 8011342:	b580      	push	{r7, lr}
 8011344:	b086      	sub	sp, #24
 8011346:	af00      	add	r7, sp, #0
 8011348:	4603      	mov	r3, r0
 801134a:	60b9      	str	r1, [r7, #8]
 801134c:	607a      	str	r2, [r7, #4]
 801134e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011350:	2300      	movs	r3, #0
 8011352:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8011354:	89fb      	ldrh	r3, [r7, #14]
 8011356:	2b2b      	cmp	r3, #43	@ 0x2b
 8011358:	d802      	bhi.n	8011360 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801135a:	f06f 0309 	mvn.w	r3, #9
 801135e:	e0e2      	b.n	8011526 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011368:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	785a      	ldrb	r2, [r3, #1]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	3302      	adds	r3, #2
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	f003 030f 	and.w	r3, r3, #15
 8011380:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	78da      	ldrb	r2, [r3, #3]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	3304      	adds	r3, #4
 8011392:	4619      	mov	r1, r3
 8011394:	2002      	movs	r0, #2
 8011396:	f7f8 fa17 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801139a:	4603      	mov	r3, r0
 801139c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	3306      	adds	r3, #6
 80113a6:	4619      	mov	r1, r3
 80113a8:	2002      	movs	r0, #2
 80113aa:	f7f8 fa0d 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80113ae:	4603      	mov	r3, r0
 80113b0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	3308      	adds	r3, #8
 80113ba:	4619      	mov	r1, r3
 80113bc:	2002      	movs	r0, #2
 80113be:	f7f8 fa03 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80113c2:	4603      	mov	r3, r0
 80113c4:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	330a      	adds	r3, #10
 80113ce:	4619      	mov	r1, r3
 80113d0:	2002      	movs	r0, #2
 80113d2:	f7f8 f9f9 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80113d6:	4603      	mov	r3, r0
 80113d8:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	330c      	adds	r3, #12
 80113e2:	4619      	mov	r1, r3
 80113e4:	2002      	movs	r0, #2
 80113e6:	f7f8 f9ef 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80113ea:	4603      	mov	r3, r0
 80113ec:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	330e      	adds	r3, #14
 80113f6:	4619      	mov	r1, r3
 80113f8:	2002      	movs	r0, #2
 80113fa:	f7f8 f9e5 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80113fe:	4603      	mov	r3, r0
 8011400:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	3310      	adds	r3, #16
 801140a:	4619      	mov	r1, r3
 801140c:	2002      	movs	r0, #2
 801140e:	f7f8 f9db 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8011412:	4603      	mov	r3, r0
 8011414:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	3312      	adds	r3, #18
 801141e:	4619      	mov	r1, r3
 8011420:	2002      	movs	r0, #2
 8011422:	f7f8 f9d1 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8011426:	4603      	mov	r3, r0
 8011428:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	3314      	adds	r3, #20
 8011432:	4619      	mov	r1, r3
 8011434:	2002      	movs	r0, #2
 8011436:	f7f8 f9c7 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801143a:	4603      	mov	r3, r0
 801143c:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	3316      	adds	r3, #22
 8011446:	4619      	mov	r1, r3
 8011448:	2002      	movs	r0, #2
 801144a:	f7f8 f9bd 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801144e:	4603      	mov	r3, r0
 8011450:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	3318      	adds	r3, #24
 801145a:	4619      	mov	r1, r3
 801145c:	2002      	movs	r0, #2
 801145e:	f7f8 f9b3 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8011462:	4603      	mov	r3, r0
 8011464:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	331a      	adds	r3, #26
 801146e:	4619      	mov	r1, r3
 8011470:	2002      	movs	r0, #2
 8011472:	f7f8 f9a9 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8011476:	4603      	mov	r3, r0
 8011478:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	331c      	adds	r3, #28
 8011482:	4619      	mov	r1, r3
 8011484:	2002      	movs	r0, #2
 8011486:	f7f8 f99f 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801148a:	4603      	mov	r3, r0
 801148c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	331e      	adds	r3, #30
 8011496:	4619      	mov	r1, r3
 8011498:	2002      	movs	r0, #2
 801149a:	f7f8 f995 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801149e:	4603      	mov	r3, r0
 80114a0:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	3320      	adds	r3, #32
 80114aa:	4619      	mov	r1, r3
 80114ac:	2002      	movs	r0, #2
 80114ae:	f7f8 f98b 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80114b2:	4603      	mov	r3, r0
 80114b4:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	3322      	adds	r3, #34	@ 0x22
 80114be:	4619      	mov	r1, r3
 80114c0:	2002      	movs	r0, #2
 80114c2:	f7f8 f981 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80114c6:	4603      	mov	r3, r0
 80114c8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	3324      	adds	r3, #36	@ 0x24
 80114d2:	4619      	mov	r1, r3
 80114d4:	2002      	movs	r0, #2
 80114d6:	f7f8 f977 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80114da:	4603      	mov	r3, r0
 80114dc:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	3326      	adds	r3, #38	@ 0x26
 80114e6:	4619      	mov	r1, r3
 80114e8:	2002      	movs	r0, #2
 80114ea:	f7f8 f96d 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 80114ee:	4603      	mov	r3, r0
 80114f0:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	3328      	adds	r3, #40	@ 0x28
 80114fa:	4619      	mov	r1, r3
 80114fc:	2002      	movs	r0, #2
 80114fe:	f7f8 f963 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8011502:	4603      	mov	r3, r0
 8011504:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8011522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3718      	adds	r7, #24
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 801152e:	b580      	push	{r7, lr}
 8011530:	b086      	sub	sp, #24
 8011532:	af00      	add	r7, sp, #0
 8011534:	4603      	mov	r3, r0
 8011536:	60b9      	str	r1, [r7, #8]
 8011538:	607a      	str	r2, [r7, #4]
 801153a:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801153c:	2300      	movs	r3, #0
 801153e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8011540:	89fb      	ldrh	r3, [r7, #14]
 8011542:	2b20      	cmp	r3, #32
 8011544:	d802      	bhi.n	801154c <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011546:	f06f 0309 	mvn.w	r3, #9
 801154a:	e04d      	b.n	80115e8 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 801154c:	68b9      	ldr	r1, [r7, #8]
 801154e:	2004      	movs	r0, #4
 8011550:	f7f8 f9d9 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 8011554:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	3304      	adds	r3, #4
 801155e:	4619      	mov	r1, r3
 8011560:	2004      	movs	r0, #4
 8011562:	f7f8 f9d0 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 8011566:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	3308      	adds	r3, #8
 8011570:	4619      	mov	r1, r3
 8011572:	2004      	movs	r0, #4
 8011574:	f7f8 f9e4 	bl	8009940 <VL53LX_i2c_decode_int32_t>
 8011578:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	330c      	adds	r3, #12
 8011582:	4619      	mov	r1, r3
 8011584:	2004      	movs	r0, #4
 8011586:	f7f8 f9be 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 801158a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	3310      	adds	r3, #16
 8011594:	4619      	mov	r1, r3
 8011596:	2004      	movs	r0, #4
 8011598:	f7f8 f9b5 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 801159c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	3314      	adds	r3, #20
 80115a6:	4619      	mov	r1, r3
 80115a8:	2004      	movs	r0, #4
 80115aa:	f7f8 f9ac 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 80115ae:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	3318      	adds	r3, #24
 80115b8:	4619      	mov	r1, r3
 80115ba:	2004      	movs	r0, #4
 80115bc:	f7f8 f9c0 	bl	8009940 <VL53LX_i2c_decode_int32_t>
 80115c0:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	331c      	adds	r3, #28
 80115ca:	4619      	mov	r1, r3
 80115cc:	2004      	movs	r0, #4
 80115ce:	f7f8 f99a 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 80115d2:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	f893 2020 	ldrb.w	r2, [r3, #32]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80115e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3718      	adds	r7, #24
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b086      	sub	sp, #24
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	4603      	mov	r3, r0
 80115f8:	60b9      	str	r1, [r7, #8]
 80115fa:	607a      	str	r2, [r7, #4]
 80115fc:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80115fe:	2300      	movs	r3, #0
 8011600:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8011602:	89fb      	ldrh	r3, [r7, #14]
 8011604:	2b37      	cmp	r3, #55	@ 0x37
 8011606:	d802      	bhi.n	801160e <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011608:	f06f 0309 	mvn.w	r3, #9
 801160c:	e15e      	b.n	80118cc <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 801160e:	68b9      	ldr	r1, [r7, #8]
 8011610:	2002      	movs	r0, #2
 8011612:	f7f8 f8d9 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8011616:	4603      	mov	r3, r0
 8011618:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	3302      	adds	r3, #2
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011628:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	3303      	adds	r3, #3
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011638:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	3304      	adds	r3, #4
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	f003 0303 	and.w	r3, r3, #3
 8011648:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	3305      	adds	r3, #5
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	f003 0301 	and.w	r3, r3, #1
 8011658:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	3306      	adds	r3, #6
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011668:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	3307      	adds	r3, #7
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011678:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	3308      	adds	r3, #8
 8011682:	4619      	mov	r1, r3
 8011684:	2002      	movs	r0, #2
 8011686:	f7f8 f89f 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801168a:	4603      	mov	r3, r0
 801168c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011690:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	330a      	adds	r3, #10
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	f003 0303 	and.w	r3, r3, #3
 80116a0:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	330b      	adds	r3, #11
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	f003 0303 	and.w	r3, r3, #3
 80116b0:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	330c      	adds	r3, #12
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	f003 030f 	and.w	r3, r3, #15
 80116c0:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	330d      	adds	r3, #13
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	f003 0307 	and.w	r3, r3, #7
 80116d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	330e      	adds	r3, #14
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	f003 0301 	and.w	r3, r3, #1
 80116e0:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	330f      	adds	r3, #15
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	f003 0303 	and.w	r3, r3, #3
 80116f0:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	7c1a      	ldrb	r2, [r3, #16]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	7c5a      	ldrb	r2, [r3, #17]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	3312      	adds	r3, #18
 801170a:	4619      	mov	r1, r3
 801170c:	2002      	movs	r0, #2
 801170e:	f7f8 f85b 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8011712:	4603      	mov	r3, r0
 8011714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011718:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	3316      	adds	r3, #22
 8011722:	4619      	mov	r1, r3
 8011724:	2002      	movs	r0, #2
 8011726:	f7f8 f84f 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801172a:	4603      	mov	r3, r0
 801172c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	3318      	adds	r3, #24
 8011736:	4619      	mov	r1, r3
 8011738:	2002      	movs	r0, #2
 801173a:	f7f8 f845 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 801173e:	4603      	mov	r3, r0
 8011740:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	331a      	adds	r3, #26
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	f003 0301 	and.w	r3, r3, #1
 8011750:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	331b      	adds	r3, #27
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	f003 0307 	and.w	r3, r3, #7
 8011760:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	7f1a      	ldrb	r2, [r3, #28]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	7f5a      	ldrb	r2, [r3, #29]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	331e      	adds	r3, #30
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011780:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	331f      	adds	r3, #31
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011790:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	3320      	adds	r3, #32
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	f003 0303 	and.w	r3, r3, #3
 80117a0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	3321      	adds	r3, #33	@ 0x21
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	f003 030f 	and.w	r3, r3, #15
 80117b0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	3325      	adds	r3, #37	@ 0x25
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	3326      	adds	r3, #38	@ 0x26
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	f003 0303 	and.w	r3, r3, #3
 80117f6:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	3327      	adds	r3, #39	@ 0x27
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	f003 031f 	and.w	r3, r3, #31
 8011808:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	3328      	adds	r3, #40	@ 0x28
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	f003 031f 	and.w	r3, r3, #31
 801181a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	3329      	adds	r3, #41	@ 0x29
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	f003 031f 	and.w	r3, r3, #31
 801182c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	332a      	adds	r3, #42	@ 0x2a
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	f003 0301 	and.w	r3, r3, #1
 801183e:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	332b      	adds	r3, #43	@ 0x2b
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	f003 0301 	and.w	r3, r3, #1
 8011850:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	332c      	adds	r3, #44	@ 0x2c
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	f003 0303 	and.w	r3, r3, #3
 8011862:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	332d      	adds	r3, #45	@ 0x2d
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011874:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	332e      	adds	r3, #46	@ 0x2e
 8011880:	4619      	mov	r1, r3
 8011882:	2004      	movs	r0, #4
 8011884:	f7f8 f83f 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 8011888:	4603      	mov	r3, r0
 801188a:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	3332      	adds	r3, #50	@ 0x32
 8011896:	4619      	mov	r1, r3
 8011898:	2004      	movs	r0, #4
 801189a:	f7f8 f834 	bl	8009906 <VL53LX_i2c_decode_uint32_t>
 801189e:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	3336      	adds	r3, #54	@ 0x36
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	f003 0301 	and.w	r3, r3, #1
 80118ae:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	3337      	adds	r3, #55	@ 0x37
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	f003 0301 	and.w	r3, r3, #1
 80118c0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 80118c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3718      	adds	r7, #24
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	4603      	mov	r3, r0
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]
 80118e0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80118e2:	2300      	movs	r3, #0
 80118e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80118e6:	89fb      	ldrh	r3, [r7, #14]
 80118e8:	2b30      	cmp	r3, #48	@ 0x30
 80118ea:	d802      	bhi.n	80118f2 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80118ec:	f06f 0309 	mvn.w	r3, #9
 80118f0:	e112      	b.n	8011b18 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	785a      	ldrb	r2, [r3, #1]
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	789a      	ldrb	r2, [r3, #2]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	3303      	adds	r3, #3
 801190e:	4619      	mov	r1, r3
 8011910:	2002      	movs	r0, #2
 8011912:	f7f7 ff59 	bl	80097c8 <VL53LX_i2c_decode_uint16_t>
 8011916:	4603      	mov	r3, r0
 8011918:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	3305      	adds	r3, #5
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011928:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	3306      	adds	r3, #6
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f003 0307 	and.w	r3, r3, #7
 8011938:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	3307      	adds	r3, #7
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	f003 0307 	and.w	r3, r3, #7
 8011948:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	3308      	adds	r3, #8
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011958:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	3309      	adds	r3, #9
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011968:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	330a      	adds	r3, #10
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	f003 0301 	and.w	r3, r3, #1
 8011978:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	330b      	adds	r3, #11
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011988:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	330c      	adds	r3, #12
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	f003 0301 	and.w	r3, r3, #1
 8011998:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	330d      	adds	r3, #13
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80119a8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	330e      	adds	r3, #14
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80119b8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	7bda      	ldrb	r2, [r3, #15]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	7c1a      	ldrb	r2, [r3, #16]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	7c5a      	ldrb	r2, [r3, #17]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	7c9a      	ldrb	r2, [r3, #18]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	7cda      	ldrb	r2, [r3, #19]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	7d1a      	ldrb	r2, [r3, #20]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	7d5a      	ldrb	r2, [r3, #21]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	7d9a      	ldrb	r2, [r3, #22]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	7dda      	ldrb	r2, [r3, #23]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	7e1a      	ldrb	r2, [r3, #24]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	7e5a      	ldrb	r2, [r3, #25]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	7e9a      	ldrb	r2, [r3, #26]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	7eda      	ldrb	r2, [r3, #27]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	7f1a      	ldrb	r2, [r3, #28]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	7f5a      	ldrb	r2, [r3, #29]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	7f9a      	ldrb	r2, [r3, #30]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	7fda      	ldrb	r2, [r3, #31]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8011b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3718      	adds	r7, #24
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b090      	sub	sp, #64	@ 0x40
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8011b30:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d10a      	bne.n	8011b4e <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 8011b38:	f107 020c 	add.w	r2, r7, #12
 8011b3c:	2331      	movs	r3, #49	@ 0x31
 8011b3e:	f240 110f 	movw	r1, #271	@ 0x10f
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f000 fffe 	bl	8012b44 <VL53LX_ReadMulti>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8011b4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d109      	bne.n	8011b6a <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8011b56:	f107 030c 	add.w	r3, r7, #12
 8011b5a:	683a      	ldr	r2, [r7, #0]
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	2031      	movs	r0, #49	@ 0x31
 8011b60:	f7ff feb8 	bl	80118d4 <VL53LX_i2c_decode_nvm_copy_data>
 8011b64:	4603      	mov	r3, r0
 8011b66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8011b6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3740      	adds	r7, #64	@ 0x40
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8011b76:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b7a:	b0d6      	sub	sp, #344	@ 0x158
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8011b82:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8011b86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8011b90:	23f1      	movs	r3, #241	@ 0xf1
 8011b92:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 8011b96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011b9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	uint32_t pll_period_mm  = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint64_t tmp0        = 0;
 8011ba4:	f04f 0200 	mov.w	r2, #0
 8011ba8:	f04f 0300 	mov.w	r3, #0
 8011bac:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	uint64_t tmp1        = 0;
 8011bb0:	f04f 0200 	mov.w	r2, #0
 8011bb4:	f04f 0300 	mov.w	r3, #0
 8011bb8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	uint64_t b_minus_amb = 0;
 8011bbc:	f04f 0200 	mov.w	r2, #0
 8011bc0:	f04f 0300 	mov.w	r3, #0
 8011bc4:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	uint64_t VL53LX_p_055   = 0;
 8011bc8:	f04f 0200 	mov.w	r2, #0
 8011bcc:	f04f 0300 	mov.w	r3, #0
 8011bd0:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	*psigma_est  = VL53LX_D_002;
 8011bd4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8011bd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011bdc:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8011bde:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	f000 8322 	beq.w	801222c <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8011be8:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7fb f9da 	bl	800cfa6 <VL53LX_calc_pll_period_mm>
 8011bf2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 8011bf6:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8011bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d91a      	bls.n	8011c38 <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8011c02:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011c06:	2200      	movs	r2, #0
 8011c08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011c0c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
			(uint64_t)VL53LX_p_032;
 8011c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011c14:	2200      	movs	r2, #0
 8011c16:	4698      	mov	r8, r3
 8011c18:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8011c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011c1e:	460b      	mov	r3, r1
 8011c20:	ebb3 0308 	subs.w	r3, r3, r8
 8011c24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c26:	4613      	mov	r3, r2
 8011c28:	eb63 0309 	sbc.w	r3, r3, r9
 8011c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c2e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8011c32:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
 8011c36:	e013      	b.n	8011c60 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8011c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	469a      	mov	sl, r3
 8011c40:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 8011c42:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011c46:	2200      	movs	r2, #0
 8011c48:	461c      	mov	r4, r3
 8011c4a:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8011c4c:	ebba 0304 	subs.w	r3, sl, r4
 8011c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c52:	eb6b 0305 	sbc.w	r3, fp, r5
 8011c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c58:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8011c5c:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 8011c60:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8011c64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d91f      	bls.n	8011cac <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8011c6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8011c70:	2200      	movs	r2, #0
 8011c72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011c76:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
			(uint64_t)VL53LX_p_001;
 8011c7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8011c7e:	2200      	movs	r2, #0
 8011c80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011c84:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8011c88:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8011c8c:	4623      	mov	r3, r4
 8011c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011c92:	4602      	mov	r2, r0
 8011c94:	1a9b      	subs	r3, r3, r2
 8011c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c98:	462b      	mov	r3, r5
 8011c9a:	460a      	mov	r2, r1
 8011c9c:	eb63 0302 	sbc.w	r3, r3, r2
 8011ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ca2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8011ca6:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 8011caa:	e01e      	b.n	8011cea <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8011cac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011cb6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			(uint64_t)VL53LX_p_007;
 8011cba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8011cc8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8011ccc:	4623      	mov	r3, r4
 8011cce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	1a9b      	subs	r3, r3, r2
 8011cd6:	623b      	str	r3, [r7, #32]
 8011cd8:	462b      	mov	r3, r5
 8011cda:	460a      	mov	r2, r1
 8011cdc:	eb63 0302 	sbc.w	r3, r3, r2
 8011ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ce2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011ce6:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130



		if (b_minus_amb != 0) {
 8011cea:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8011cee:	4313      	orrs	r3, r2
 8011cf0:	f000 829c 	beq.w	801222c <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8011cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011cfe:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011d02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011d06:	2200      	movs	r2, #0
 8011d08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011d0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011d10:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8011d14:	4623      	mov	r3, r4
 8011d16:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	189b      	adds	r3, r3, r2
 8011d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011d22:	460b      	mov	r3, r1
 8011d24:	462a      	mov	r2, r5
 8011d26:	eb42 0303 	adc.w	r3, r2, r3
 8011d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					(uint64_t)VL53LX_p_028;
 8011d2e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011d32:	2200      	movs	r2, #0
 8011d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011d38:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8011d3c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8011d40:	4623      	mov	r3, r4
 8011d42:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011d46:	4602      	mov	r2, r0
 8011d48:	189b      	adds	r3, r3, r2
 8011d4a:	61bb      	str	r3, [r7, #24]
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	462a      	mov	r2, r5
 8011d50:	eb42 0303 	adc.w	r3, r2, r3
 8011d54:	61fb      	str	r3, [r7, #28]
 8011d56:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011d5a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > VL53LX_D_003)
 8011d5e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8011d62:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8011d66:	f173 0300 	sbcs.w	r3, r3, #0
 8011d6a:	d305      	bcc.n	8011d78 <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 8011d6c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8011d70:	f04f 0300 	mov.w	r3, #0
 8011d74:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8011d78:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8011d7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011d80:	fb03 f102 	mul.w	r1, r3, r2
 8011d84:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8011d88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011d8c:	fb02 f303 	mul.w	r3, r2, r3
 8011d90:	18ca      	adds	r2, r1, r3
 8011d92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011d96:	fba3 1303 	umull	r1, r3, r3, r3
 8011d9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8011d9e:	460b      	mov	r3, r1
 8011da0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8011da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011da8:	18d3      	adds	r3, r2, r3
 8011daa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8011dae:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8011db2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8011db6:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp1 = tmp1 << 8;
 8011dba:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8011dbe:	f04f 0000 	mov.w	r0, #0
 8011dc2:	f04f 0100 	mov.w	r1, #0
 8011dc6:	0219      	lsls	r1, r3, #8
 8011dc8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8011dcc:	0210      	lsls	r0, r2, #8
 8011dce:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			if (tmp1 > VL53LX_D_004)
 8011dd2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8011dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011dda:	d305      	bcc.n	8011de8 <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 8011ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8011de0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8011de4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8011de8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8011dec:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8011df0:	f7ee fa6e 	bl	80002d0 <__aeabi_uldivmod>
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8011dfc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8011e00:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8011e04:	f7ee fa64 	bl	80002d0 <__aeabi_uldivmod>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	460b      	mov	r3, r1
 8011e0c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8011e10:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8011e14:	2b80      	cmp	r3, #128	@ 0x80
 8011e16:	d305      	bcc.n	8011e24 <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 8011e18:	f04f 32ff 	mov.w	r2, #4294967295
 8011e1c:	f04f 037f 	mov.w	r3, #127	@ 0x7f
 8011e20:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp0 = tmp1 * tmp0;
 8011e24:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8011e28:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011e2c:	fb03 f102 	mul.w	r1, r3, r2
 8011e30:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8011e34:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011e38:	fb02 f303 	mul.w	r3, r2, r3
 8011e3c:	4419      	add	r1, r3
 8011e3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011e42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011e46:	fba2 2303 	umull	r2, r3, r2, r3
 8011e4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8011e4e:	4613      	mov	r3, r2
 8011e50:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8011e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011e58:	18cb      	adds	r3, r1, r3
 8011e5a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8011e5e:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8011e62:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8011e66:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8011e6a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8011e6e:	2200      	movs	r2, #0
 8011e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011e74:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011e78:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011e82:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011e8a:	4623      	mov	r3, r4
 8011e8c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8011e90:	4602      	mov	r2, r0
 8011e92:	189b      	adds	r3, r3, r2
 8011e94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011e98:	460b      	mov	r3, r1
 8011e9a:	462a      	mov	r2, r5
 8011e9c:	eb42 0303 	adc.w	r3, r2, r3
 8011ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8011ea4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011eac:	67fa      	str	r2, [r7, #124]	@ 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8011eae:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8011eb2:	4623      	mov	r3, r4
 8011eb4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8011eb8:	4602      	mov	r2, r0
 8011eba:	189b      	adds	r3, r3, r2
 8011ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	462a      	mov	r2, r5
 8011ec2:	eb42 0303 	adc.w	r3, r2, r3
 8011ec6:	677b      	str	r3, [r7, #116]	@ 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8011ec8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011ecc:	2200      	movs	r2, #0
 8011ece:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011ed0:	66fa      	str	r2, [r7, #108]	@ 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8011ed2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8011ed6:	4623      	mov	r3, r4
 8011ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011edc:	4602      	mov	r2, r0
 8011ede:	189b      	adds	r3, r3, r2
 8011ee0:	613b      	str	r3, [r7, #16]
 8011ee2:	460b      	mov	r3, r1
 8011ee4:	462a      	mov	r2, r5
 8011ee6:	eb42 0303 	adc.w	r3, r2, r3
 8011eea:	617b      	str	r3, [r7, #20]
 8011eec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011ef0:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8011ef4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8011ef8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8011efc:	f173 0300 	sbcs.w	r3, r3, #0
 8011f00:	d305      	bcc.n	8011f0e <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 8011f02:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8011f06:	f04f 0300 	mov.w	r3, #0
 8011f0a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

			tmp1 = tmp1 << 8;
 8011f0e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8011f12:	f04f 0000 	mov.w	r0, #0
 8011f16:	f04f 0100 	mov.w	r1, #0
 8011f1a:	0219      	lsls	r1, r3, #8
 8011f1c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8011f20:	0210      	lsls	r0, r2, #8
 8011f22:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			tmp0 = tmp1 + tmp0;
 8011f26:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8011f2a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8011f2e:	1884      	adds	r4, r0, r2
 8011f30:	60bc      	str	r4, [r7, #8]
 8011f32:	eb41 0303 	adc.w	r3, r1, r3
 8011f36:	60fb      	str	r3, [r7, #12]
 8011f38:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011f3c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8011f40:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	da05      	bge.n	8011f54 <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 8011f48:	f04f 32ff 	mov.w	r2, #4294967295
 8011f4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011f50:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8011f54:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d331      	bcc.n	8011fc0 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8011f5c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8011f60:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8011f64:	f7ee f9b4 	bl	80002d0 <__aeabi_uldivmod>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8011f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011f74:	2200      	movs	r2, #0
 8011f76:	663b      	str	r3, [r7, #96]	@ 0x60
 8011f78:	667a      	str	r2, [r7, #100]	@ 0x64
 8011f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8011f7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8011f82:	4622      	mov	r2, r4
 8011f84:	fb02 f203 	mul.w	r2, r2, r3
 8011f88:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011f8c:	4629      	mov	r1, r5
 8011f8e:	fb01 f303 	mul.w	r3, r1, r3
 8011f92:	441a      	add	r2, r3
 8011f94:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011f98:	4621      	mov	r1, r4
 8011f9a:	fba3 1301 	umull	r1, r3, r3, r1
 8011f9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8011fa2:	460b      	mov	r3, r1
 8011fa4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8011fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fac:	18d3      	adds	r3, r2, r3
 8011fae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8011fb2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8011fb6:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8011fba:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8011fbe:	e030      	b.n	8012022 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8011fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011fc8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011fca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8011fce:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8011fd2:	4622      	mov	r2, r4
 8011fd4:	fb02 f203 	mul.w	r2, r2, r3
 8011fd8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011fdc:	4629      	mov	r1, r5
 8011fde:	fb01 f303 	mul.w	r3, r1, r3
 8011fe2:	441a      	add	r2, r3
 8011fe4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011fe8:	4621      	mov	r1, r4
 8011fea:	fba3 1301 	umull	r1, r3, r3, r1
 8011fee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011ffc:	18d3      	adds	r3, r2, r3
 8011ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012002:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8012006:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 801200a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801200e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8012012:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8012016:	f7ee f95b 	bl	80002d0 <__aeabi_uldivmod>
 801201a:	4602      	mov	r2, r0
 801201c:	460b      	mov	r3, r1
 801201e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8012022:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8012026:	2b00      	cmp	r3, #0
 8012028:	da05      	bge.n	8012036 <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 801202a:	f04f 32ff 	mov.w	r2, #4294967295
 801202e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012032:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8012036:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 801203a:	2b01      	cmp	r3, #1
 801203c:	d33d      	bcc.n	80120ba <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801203e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8012042:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8012046:	f7ee f943 	bl	80002d0 <__aeabi_uldivmod>
 801204a:	4602      	mov	r2, r0
 801204c:	460b      	mov	r3, r1
 801204e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8012052:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8012056:	f04f 0200 	mov.w	r2, #0
 801205a:	f04f 0300 	mov.w	r3, #0
 801205e:	0882      	lsrs	r2, r0, #2
 8012060:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8012064:	088b      	lsrs	r3, r1, #2
 8012066:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 801206a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801206e:	2200      	movs	r2, #0
 8012070:	653b      	str	r3, [r7, #80]	@ 0x50
 8012072:	657a      	str	r2, [r7, #84]	@ 0x54
 8012074:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8012078:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 801207c:	4622      	mov	r2, r4
 801207e:	fb02 f203 	mul.w	r2, r2, r3
 8012082:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012086:	4629      	mov	r1, r5
 8012088:	fb01 f303 	mul.w	r3, r1, r3
 801208c:	4413      	add	r3, r2
 801208e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8012092:	4621      	mov	r1, r4
 8012094:	fba2 1201 	umull	r1, r2, r2, r1
 8012098:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801209c:	460a      	mov	r2, r1
 801209e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80120a2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80120a6:	4413      	add	r3, r2
 80120a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80120ac:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80120b0:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 80120b4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 80120b8:	e03c      	b.n	8012134 <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80120ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80120be:	2200      	movs	r2, #0
 80120c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80120c2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80120c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80120c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80120cc:	4622      	mov	r2, r4
 80120ce:	fb02 f203 	mul.w	r2, r2, r3
 80120d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80120d6:	4629      	mov	r1, r5
 80120d8:	fb01 f303 	mul.w	r3, r1, r3
 80120dc:	4413      	add	r3, r2
 80120de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80120e2:	4621      	mov	r1, r4
 80120e4:	fba2 1201 	umull	r1, r2, r2, r1
 80120e8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80120ec:	460a      	mov	r2, r1
 80120ee:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80120f2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80120f6:	4413      	add	r3, r2
 80120f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80120fc:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8012100:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8012104:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8012108:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 801210c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8012110:	f7ee f8de 	bl	80002d0 <__aeabi_uldivmod>
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 801211c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8012120:	f04f 0200 	mov.w	r2, #0
 8012124:	f04f 0300 	mov.w	r3, #0
 8012128:	0882      	lsrs	r2, r0, #2
 801212a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801212e:	088b      	lsrs	r3, r1, #2
 8012130:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8012134:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8012138:	2b00      	cmp	r3, #0
 801213a:	da05      	bge.n	8012148 <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 801213c:	f04f 32ff 	mov.w	r2, #4294967295
 8012140:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012144:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp0 = tmp0 >> 2;
 8012148:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801214c:	f04f 0200 	mov.w	r2, #0
 8012150:	f04f 0300 	mov.w	r3, #0
 8012154:	0882      	lsrs	r2, r0, #2
 8012156:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801215a:	088b      	lsrs	r3, r1, #2
 801215c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8012160:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8012164:	2b01      	cmp	r3, #1
 8012166:	d305      	bcc.n	8012174 <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 8012168:	f04f 32ff 	mov.w	r2, #4294967295
 801216c:	f04f 0300 	mov.w	r3, #0
 8012170:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8012174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012178:	2200      	movs	r2, #0
 801217a:	643b      	str	r3, [r7, #64]	@ 0x40
 801217c:	647a      	str	r2, [r7, #68]	@ 0x44
 801217e:	f04f 0200 	mov.w	r2, #0
 8012182:	f04f 0300 	mov.w	r3, #0
 8012186:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 801218a:	4629      	mov	r1, r5
 801218c:	01cb      	lsls	r3, r1, #7
 801218e:	4621      	mov	r1, r4
 8012190:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8012194:	4621      	mov	r1, r4
 8012196:	01ca      	lsls	r2, r1, #7
 8012198:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = tmp1 * tmp1;
 801219c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80121a0:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80121a4:	fb03 f202 	mul.w	r2, r3, r2
 80121a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80121ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80121b0:	fb01 f303 	mul.w	r3, r1, r3
 80121b4:	441a      	add	r2, r3
 80121b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80121ba:	fba3 1303 	umull	r1, r3, r3, r3
 80121be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80121c2:	460b      	mov	r3, r1
 80121c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80121c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80121cc:	18d3      	adds	r3, r2, r3
 80121ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80121d2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80121d6:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 80121da:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp0 = tmp0 + tmp1;
 80121de:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80121e2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80121e6:	1884      	adds	r4, r0, r2
 80121e8:	603c      	str	r4, [r7, #0]
 80121ea:	eb41 0303 	adc.w	r3, r1, r3
 80121ee:	607b      	str	r3, [r7, #4]
 80121f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80121f4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80121f8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80121fc:	2b01      	cmp	r3, #1
 80121fe:	d305      	bcc.n	801220c <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8012200:	f04f 32ff 	mov.w	r2, #4294967295
 8012204:	f04f 0300 	mov.w	r3, #0
 8012208:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 801220c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012210:	4618      	mov	r0, r3
 8012212:	f7fa fd61 	bl	800ccd8 <VL53LX_isqrt>
 8012216:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			*psigma_est = (uint16_t)sigma_int;
 801221a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801221e:	b29a      	uxth	r2, r3
 8012220:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8012224:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8012226:	2300      	movs	r3, #0
 8012228:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
		}

	}

	return status;
 801222c:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 8012230:	4618      	mov	r0, r3
 8012232:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8012236:	46bd      	mov	sp, r7
 8012238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801223c <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8012244:	2300      	movs	r3, #0
 8012246:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	3318      	adds	r3, #24
 801224c:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 801224e:	2300      	movs	r3, #0
 8012250:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d107      	bne.n	801226a <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 801225a:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 f88b 	bl	801237a <VL53LX_poll_for_range_completion>
 8012264:	4603      	mov	r3, r0
 8012266:	75fb      	strb	r3, [r7, #23]
 8012268:	e01b      	b.n	80122a2 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 801226a:	2300      	movs	r3, #0
 801226c:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801226e:	e011      	b.n	8012294 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8012270:	f107 030f 	add.w	r3, r7, #15
 8012274:	4619      	mov	r1, r3
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f000 f819 	bl	80122ae <VL53LX_is_new_data_ready>
 801227c:	4603      	mov	r3, r0
 801227e:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8012280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d105      	bne.n	8012294 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8012288:	2101      	movs	r1, #1
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 fd72 	bl	8012d74 <VL53LX_WaitMs>
 8012290:	4603      	mov	r3, r0
 8012292:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8012294:	7bfb      	ldrb	r3, [r7, #15]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d103      	bne.n	80122a2 <VL53LX_wait_for_test_completion+0x66>
 801229a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d0e6      	beq.n	8012270 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80122a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3718      	adds	r7, #24
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b086      	sub	sp, #24
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	6078      	str	r0, [r7, #4]
 80122b6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80122b8:	2300      	movs	r3, #0
 80122ba:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	3318      	adds	r3, #24
 80122c0:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 80122c2:	2300      	movs	r3, #0
 80122c4:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 80122ca:	2300      	movs	r3, #0
 80122cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 80122d4:	f003 0310 	and.w	r3, r3, #16
 80122d8:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80122da:	7bfb      	ldrb	r3, [r7, #15]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d102      	bne.n	80122e6 <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 80122e0:	2301      	movs	r3, #1
 80122e2:	75fb      	strb	r3, [r7, #23]
 80122e4:	e001      	b.n	80122ea <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 80122e6:	2300      	movs	r3, #0
 80122e8:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 80122ea:	f107 030e 	add.w	r3, r7, #14
 80122ee:	461a      	mov	r2, r3
 80122f0:	2131      	movs	r1, #49	@ 0x31
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 fcb8 	bl	8012c68 <VL53LX_RdByte>
 80122f8:	4603      	mov	r3, r0
 80122fa:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 80122fc:	7bbb      	ldrb	r3, [r7, #14]
 80122fe:	f003 0201 	and.w	r2, r3, #1
 8012302:	7dfb      	ldrb	r3, [r7, #23]
 8012304:	429a      	cmp	r2, r3
 8012306:	d103      	bne.n	8012310 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	2201      	movs	r2, #1
 801230c:	701a      	strb	r2, [r3, #0]
 801230e:	e002      	b.n	8012316 <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	2200      	movs	r2, #0
 8012314:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8012316:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801231a:	4618      	mov	r0, r3
 801231c:	3718      	adds	r7, #24
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}

08012322 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8012322:	b580      	push	{r7, lr}
 8012324:	b086      	sub	sp, #24
 8012326:	af02      	add	r7, sp, #8
 8012328:	6078      	str	r0, [r7, #4]
 801232a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 801232c:	2300      	movs	r3, #0
 801232e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8012330:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 fd2d 	bl	8012d94 <VL53LX_WaitUs>
 801233a:	4603      	mov	r3, r0
 801233c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 801233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d10b      	bne.n	801235e <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8012346:	2301      	movs	r3, #1
 8012348:	9301      	str	r3, [sp, #4]
 801234a:	2301      	movs	r3, #1
 801234c:	9300      	str	r3, [sp, #0]
 801234e:	2301      	movs	r3, #1
 8012350:	22e5      	movs	r2, #229	@ 0xe5
 8012352:	6839      	ldr	r1, [r7, #0]
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f000 fd35 	bl	8012dc4 <VL53LX_WaitValueMaskEx>
 801235a:	4603      	mov	r3, r0
 801235c:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 801235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d103      	bne.n	801236e <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8012366:	2103      	movs	r1, #3
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f7f6 fc0f 	bl	8008b8c <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 801236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b088      	sub	sp, #32
 801237e:	af02      	add	r7, sp, #8
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8012384:	2300      	movs	r3, #0
 8012386:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	3318      	adds	r3, #24
 801238c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8012392:	2300      	movs	r3, #0
 8012394:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 801239c:	f003 0310 	and.w	r3, r3, #16
 80123a0:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80123a2:	7bfb      	ldrb	r3, [r7, #15]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d102      	bne.n	80123ae <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 80123a8:	2301      	movs	r3, #1
 80123aa:	75fb      	strb	r3, [r7, #23]
 80123ac:	e001      	b.n	80123b2 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 80123ae:	2300      	movs	r3, #0
 80123b0:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 80123b2:	7dfb      	ldrb	r3, [r7, #23]
 80123b4:	2201      	movs	r2, #1
 80123b6:	9201      	str	r2, [sp, #4]
 80123b8:	2201      	movs	r2, #1
 80123ba:	9200      	str	r2, [sp, #0]
 80123bc:	2231      	movs	r2, #49	@ 0x31
 80123be:	6839      	ldr	r1, [r7, #0]
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 fcff 	bl	8012dc4 <VL53LX_WaitValueMaskEx>
 80123c6:	4603      	mov	r3, r0
 80123c8:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 80123ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3718      	adds	r7, #24
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}

080123d6 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 80123d6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80123da:	b0c0      	sub	sp, #256	@ 0x100
 80123dc:	af00      	add	r7, sp, #0
 80123de:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80123e2:	4618      	mov	r0, r3
 80123e4:	460b      	mov	r3, r1
 80123e6:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 80123ea:	4613      	mov	r3, r2
 80123ec:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 80123f0:	4603      	mov	r3, r0
 80123f2:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80123f6:	2300      	movs	r3, #0
 80123f8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

	uint8_t row = 0;
 80123fc:	2300      	movs	r3, #0
 80123fe:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	uint8_t col = 0;
 8012402:	2300      	movs	r3, #0
 8012404:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd



	int16_t  bound_l_x = 0;
 8012408:	2300      	movs	r3, #0
 801240a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	int16_t  bound_r_x = 0;
 801240e:	2300      	movs	r3, #0
 8012410:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	int16_t  bound_u_y = 0;
 8012414:	2300      	movs	r3, #0
 8012416:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	int16_t  bound_d_y = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int64_t xtalk_rate_ll = 0;
 8012420:	f04f 0200 	mov.w	r2, #0
 8012424:	f04f 0300 	mov.w	r3, #0
 8012428:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t xtalk_rate_ur = 0;
 801242c:	f04f 0200 	mov.w	r2, #0
 8012430:	f04f 0300 	mov.w	r3, #0
 8012434:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	int64_t xtalk_avg = 0;
 8012438:	f04f 0200 	mov.w	r2, #0
 801243c:	f04f 0300 	mov.w	r3, #0
 8012440:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	if (status == VL53LX_ERROR_NONE) {
 8012444:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012448:	2b00      	cmp	r3, #0
 801244a:	d108      	bne.n	801245e <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 801244c:	f107 02dd 	add.w	r2, r7, #221	@ 0xdd
 8012450:	f107 01de 	add.w	r1, r7, #222	@ 0xde
 8012454:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8012458:	4618      	mov	r0, r3
 801245a:	f7fb f81f 	bl	800d49c <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 801245e:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012462:	2b00      	cmp	r3, #0
 8012464:	d162      	bne.n	801252c <VL53LX_f_032+0x156>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8012466:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 801246a:	091b      	lsrs	r3, r3, #4
 801246c:	b2db      	uxtb	r3, r3
 801246e:	f003 0301 	and.w	r3, r3, #1
 8012472:	2b00      	cmp	r3, #0
 8012474:	d00d      	beq.n	8012492 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8012476:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 801247a:	461a      	mov	r2, r3
 801247c:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012480:	095b      	lsrs	r3, r3, #5
 8012482:	b2db      	uxtb	r3, r3
 8012484:	1ad3      	subs	r3, r2, r3
 8012486:	b29b      	uxth	r3, r3
 8012488:	3b01      	subs	r3, #1
 801248a:	b29b      	uxth	r3, r3
 801248c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8012490:	e00a      	b.n	80124a8 <VL53LX_f_032+0xd2>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8012492:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8012496:	461a      	mov	r2, r3
 8012498:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 801249c:	095b      	lsrs	r3, r3, #5
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 80124a8:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 80124ac:	461a      	mov	r2, r3
 80124ae:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80124b2:	095b      	lsrs	r3, r3, #5
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	4413      	add	r3, r2
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 80124be:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80124c2:	f003 0301 	and.w	r3, r3, #1
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d011      	beq.n	80124ee <VL53LX_f_032+0x118>
			bound_d_y = (int16_t) row -
 80124ca:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 80124ce:	4619      	mov	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 80124d0:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80124d4:	f003 020f 	and.w	r2, r3, #15
 80124d8:	0fd3      	lsrs	r3, r2, #31
 80124da:	4413      	add	r3, r2
 80124dc:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 80124de:	b29b      	uxth	r3, r3
 80124e0:	1acb      	subs	r3, r1, r3
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	3b01      	subs	r3, #1
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 80124ec:	e00f      	b.n	801250e <VL53LX_f_032+0x138>
		else
			bound_d_y = (int16_t) row -
 80124ee:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 80124f2:	4619      	mov	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80124f4:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80124f8:	f003 020f 	and.w	r2, r3, #15
 80124fc:	0fd3      	lsrs	r3, r2, #31
 80124fe:	4413      	add	r3, r2
 8012500:	105b      	asrs	r3, r3, #1
 8012502:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8012504:	b29b      	uxth	r3, r3
 8012506:	440b      	add	r3, r1
 8012508:	b29b      	uxth	r3, r3
 801250a:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

		bound_u_y = (int16_t) row +
 801250e:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8012512:	4619      	mov	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8012514:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012518:	f003 020f 	and.w	r2, r3, #15
 801251c:	0fd3      	lsrs	r3, r2, #31
 801251e:	4413      	add	r3, r2
 8012520:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8012522:	b29b      	uxth	r3, r3
 8012524:	440b      	add	r3, r1
 8012526:	b29b      	uxth	r3, r3
 8012528:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 801252c:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012530:	2b00      	cmp	r3, #0
 8012532:	d133      	bne.n	801259c <VL53LX_f_032+0x1c6>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8012534:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8012538:	b29a      	uxth	r2, r3
 801253a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 801253e:	4413      	add	r3, r2
 8012540:	b29b      	uxth	r3, r3
 8012542:	005b      	lsls	r3, r3, #1
 8012544:	b29b      	uxth	r3, r3
 8012546:	3b0f      	subs	r3, #15
 8012548:	b29b      	uxth	r3, r3
 801254a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 801254e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8012552:	b29a      	uxth	r2, r3
 8012554:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8012558:	4413      	add	r3, r2
 801255a:	b29b      	uxth	r3, r3
 801255c:	005b      	lsls	r3, r3, #1
 801255e:	b29b      	uxth	r3, r3
 8012560:	3b0f      	subs	r3, #15
 8012562:	b29b      	uxth	r3, r3
 8012564:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8012568:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 801256c:	b29a      	uxth	r2, r3
 801256e:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8012572:	4413      	add	r3, r2
 8012574:	b29b      	uxth	r3, r3
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	b29b      	uxth	r3, r3
 801257a:	3b0f      	subs	r3, #15
 801257c:	b29b      	uxth	r3, r3
 801257e:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8012582:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8012586:	b29a      	uxth	r2, r3
 8012588:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 801258c:	4413      	add	r3, r2
 801258e:	b29b      	uxth	r3, r3
 8012590:	005b      	lsls	r3, r3, #1
 8012592:	b29b      	uxth	r3, r3
 8012594:	3b0f      	subs	r3, #15
 8012596:	b29b      	uxth	r3, r3
 8012598:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 801259c:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f040 8135 	bne.w	8012810 <VL53LX_f_032+0x43a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80125a6:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 80125aa:	17da      	asrs	r2, r3, #31
 80125ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80125b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80125b4:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 80125b8:	17da      	asrs	r2, r3, #31
 80125ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80125be:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80125c2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80125c6:	460b      	mov	r3, r1
 80125c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80125cc:	fb02 f203 	mul.w	r2, r2, r3
 80125d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80125d4:	e9c7 0130 	strd	r0, r1, [r7, #192]	@ 0xc0
 80125d8:	4601      	mov	r1, r0
 80125da:	fb01 f303 	mul.w	r3, r1, r3
 80125de:	4413      	add	r3, r2
 80125e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80125e4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80125e8:	fba2 4501 	umull	r4, r5, r2, r1
 80125ec:	442b      	add	r3, r5
 80125ee:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80125f0:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 80125f4:	17da      	asrs	r2, r3, #31
 80125f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80125fa:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
					((int64_t)ygradient));
 80125fe:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8012602:	17da      	asrs	r2, r3, #31
 8012604:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012608:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801260c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8012610:	460b      	mov	r3, r1
 8012612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012616:	fb02 f203 	mul.w	r2, r2, r3
 801261a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801261e:	e9c7 012c 	strd	r0, r1, [r7, #176]	@ 0xb0
 8012622:	4601      	mov	r1, r0
 8012624:	fb01 f303 	mul.w	r3, r1, r3
 8012628:	4413      	add	r3, r2
 801262a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801262e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8012632:	fba2 8901 	umull	r8, r9, r2, r1
 8012636:	444b      	add	r3, r9
 8012638:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 801263a:	eb14 0308 	adds.w	r3, r4, r8
 801263e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012640:	eb45 0309 	adc.w	r3, r5, r9
 8012644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012646:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 801264a:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801264e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8012652:	1c51      	adds	r1, r2, #1
 8012654:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8012658:	f143 0300 	adc.w	r3, r3, #0
 801265c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8012664:	460b      	mov	r3, r1
 8012666:	0fdb      	lsrs	r3, r3, #31
 8012668:	2200      	movs	r2, #0
 801266a:	643b      	str	r3, [r7, #64]	@ 0x40
 801266c:	647a      	str	r2, [r7, #68]	@ 0x44
 801266e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8012672:	4623      	mov	r3, r4
 8012674:	4602      	mov	r2, r0
 8012676:	189b      	adds	r3, r3, r2
 8012678:	63bb      	str	r3, [r7, #56]	@ 0x38
 801267a:	460b      	mov	r3, r1
 801267c:	462a      	mov	r2, r5
 801267e:	eb42 0303 	adc.w	r3, r2, r3
 8012682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012684:	f04f 0200 	mov.w	r2, #0
 8012688:	f04f 0300 	mov.w	r3, #0
 801268c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8012690:	4621      	mov	r1, r4
 8012692:	084a      	lsrs	r2, r1, #1
 8012694:	4629      	mov	r1, r5
 8012696:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801269a:	4629      	mov	r1, r5
 801269c:	104b      	asrs	r3, r1, #1
 801269e:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 80126a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80126a6:	2200      	movs	r2, #0
 80126a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80126ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80126b0:	f04f 0000 	mov.w	r0, #0
 80126b4:	f04f 0100 	mov.w	r1, #0
 80126b8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80126bc:	462b      	mov	r3, r5
 80126be:	0099      	lsls	r1, r3, #2
 80126c0:	4623      	mov	r3, r4
 80126c2:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80126c6:	4623      	mov	r3, r4
 80126c8:	0098      	lsls	r0, r3, #2
 80126ca:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 80126ce:	1814      	adds	r4, r2, r0
 80126d0:	633c      	str	r4, [r7, #48]	@ 0x30
 80126d2:	414b      	adcs	r3, r1
 80126d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80126d6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80126da:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80126de:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 80126e2:	17da      	asrs	r2, r3, #31
 80126e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80126e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80126ec:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 80126f0:	17da      	asrs	r2, r3, #31
 80126f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80126f6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80126fa:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80126fe:	462b      	mov	r3, r5
 8012700:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8012704:	4642      	mov	r2, r8
 8012706:	fb02 f203 	mul.w	r2, r2, r3
 801270a:	464b      	mov	r3, r9
 801270c:	4621      	mov	r1, r4
 801270e:	fb01 f303 	mul.w	r3, r1, r3
 8012712:	4413      	add	r3, r2
 8012714:	4622      	mov	r2, r4
 8012716:	4641      	mov	r1, r8
 8012718:	fba2 ab01 	umull	sl, fp, r2, r1
 801271c:	445b      	add	r3, fp
 801271e:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8012720:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 8012724:	17da      	asrs	r2, r3, #31
 8012726:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012728:	67fa      	str	r2, [r7, #124]	@ 0x7c
			((int64_t)ygradient));
 801272a:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 801272e:	17da      	asrs	r2, r3, #31
 8012730:	673b      	str	r3, [r7, #112]	@ 0x70
 8012732:	677a      	str	r2, [r7, #116]	@ 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8012734:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8012738:	462b      	mov	r3, r5
 801273a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801273e:	4642      	mov	r2, r8
 8012740:	fb02 f203 	mul.w	r2, r2, r3
 8012744:	464b      	mov	r3, r9
 8012746:	4621      	mov	r1, r4
 8012748:	fb01 f303 	mul.w	r3, r1, r3
 801274c:	4413      	add	r3, r2
 801274e:	4622      	mov	r2, r4
 8012750:	4641      	mov	r1, r8
 8012752:	fba2 1201 	umull	r1, r2, r2, r1
 8012756:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801275a:	460a      	mov	r2, r1
 801275c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8012760:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012764:	4413      	add	r3, r2
 8012766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801276a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801276e:	460b      	mov	r3, r1
 8012770:	eb1a 0303 	adds.w	r3, sl, r3
 8012774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012776:	4613      	mov	r3, r2
 8012778:	eb4b 0303 	adc.w	r3, fp, r3
 801277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801277e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8012782:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8012786:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 801278a:	1c51      	adds	r1, r2, #1
 801278c:	66b9      	str	r1, [r7, #104]	@ 0x68
 801278e:	f143 0300 	adc.w	r3, r3, #0
 8012792:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012794:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8012798:	460b      	mov	r3, r1
 801279a:	0fdb      	lsrs	r3, r3, #31
 801279c:	2200      	movs	r2, #0
 801279e:	623b      	str	r3, [r7, #32]
 80127a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80127a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80127a6:	4623      	mov	r3, r4
 80127a8:	4602      	mov	r2, r0
 80127aa:	189b      	adds	r3, r3, r2
 80127ac:	61bb      	str	r3, [r7, #24]
 80127ae:	460b      	mov	r3, r1
 80127b0:	462a      	mov	r2, r5
 80127b2:	eb42 0303 	adc.w	r3, r2, r3
 80127b6:	61fb      	str	r3, [r7, #28]
 80127b8:	f04f 0200 	mov.w	r2, #0
 80127bc:	f04f 0300 	mov.w	r3, #0
 80127c0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80127c4:	4621      	mov	r1, r4
 80127c6:	084a      	lsrs	r2, r1, #1
 80127c8:	4629      	mov	r1, r5
 80127ca:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80127ce:	4629      	mov	r1, r5
 80127d0:	104b      	asrs	r3, r1, #1
 80127d2:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80127d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80127da:	2200      	movs	r2, #0
 80127dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80127de:	667a      	str	r2, [r7, #100]	@ 0x64
 80127e0:	f04f 0200 	mov.w	r2, #0
 80127e4:	f04f 0300 	mov.w	r3, #0
 80127e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80127ec:	4629      	mov	r1, r5
 80127ee:	008b      	lsls	r3, r1, #2
 80127f0:	4621      	mov	r1, r4
 80127f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80127f6:	4621      	mov	r1, r4
 80127f8:	008a      	lsls	r2, r1, #2
 80127fa:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80127fe:	1884      	adds	r4, r0, r2
 8012800:	613c      	str	r4, [r7, #16]
 8012802:	eb41 0303 	adc.w	r3, r1, r3
 8012806:	617b      	str	r3, [r7, #20]
 8012808:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801280c:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8012810:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012814:	2b00      	cmp	r3, #0
 8012816:	d132      	bne.n	801287e <VL53LX_f_032+0x4a8>
		xtalk_avg = do_division_s(
 8012818:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 801281c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8012820:	1884      	adds	r4, r0, r2
 8012822:	65bc      	str	r4, [r7, #88]	@ 0x58
 8012824:	eb41 0303 	adc.w	r3, r1, r3
 8012828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801282a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801282e:	460b      	mov	r3, r1
 8012830:	3301      	adds	r3, #1
 8012832:	653b      	str	r3, [r7, #80]	@ 0x50
 8012834:	4613      	mov	r3, r2
 8012836:	f143 0300 	adc.w	r3, r3, #0
 801283a:	657b      	str	r3, [r7, #84]	@ 0x54
 801283c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8012840:	460b      	mov	r3, r1
 8012842:	0fdb      	lsrs	r3, r3, #31
 8012844:	2200      	movs	r2, #0
 8012846:	60bb      	str	r3, [r7, #8]
 8012848:	60fa      	str	r2, [r7, #12]
 801284a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801284e:	4623      	mov	r3, r4
 8012850:	4602      	mov	r2, r0
 8012852:	189b      	adds	r3, r3, r2
 8012854:	603b      	str	r3, [r7, #0]
 8012856:	460b      	mov	r3, r1
 8012858:	462a      	mov	r2, r5
 801285a:	eb42 0303 	adc.w	r3, r2, r3
 801285e:	607b      	str	r3, [r7, #4]
 8012860:	f04f 0200 	mov.w	r2, #0
 8012864:	f04f 0300 	mov.w	r3, #0
 8012868:	e9d7 4500 	ldrd	r4, r5, [r7]
 801286c:	4621      	mov	r1, r4
 801286e:	084a      	lsrs	r2, r1, #1
 8012870:	4629      	mov	r1, r5
 8012872:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8012876:	4629      	mov	r1, r5
 8012878:	104b      	asrs	r3, r1, #1
 801287a:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801287e:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012882:	2b00      	cmp	r3, #0
 8012884:	d109      	bne.n	801289a <VL53LX_f_032+0x4c4>
		if (xtalk_avg < 0)
 8012886:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 801288a:	2b00      	cmp	r3, #0
 801288c:	da05      	bge.n	801289a <VL53LX_f_032+0x4c4>
			xtalk_avg = 0;
 801288e:	f04f 0200 	mov.w	r2, #0
 8012892:	f04f 0300 	mov.w	r3, #0
 8012896:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801289a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801289e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80128a2:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 80128a4:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80128ae:	46bd      	mov	sp, r7
 80128b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080128b4 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 80128b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80128b8:	b09a      	sub	sp, #104	@ 0x68
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6478      	str	r0, [r7, #68]	@ 0x44
 80128be:	6439      	str	r1, [r7, #64]	@ 0x40
 80128c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80128c2:	63bb      	str	r3, [r7, #56]	@ 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 80128c4:	2300      	movs	r3, #0
 80128c6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	uint64_t xtalk_events_per_spad = 0;
 80128ca:	f04f 0200 	mov.w	r2, #0
 80128ce:	f04f 0300 	mov.w	r3, #0
 80128d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_total_events = 0;
 80128d6:	f04f 0200 	mov.w	r2, #0
 80128da:	f04f 0300 	mov.w	r3, #0
 80128de:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	uint64_t xtalk_temp_bin = 0;
 80128e2:	f04f 0200 	mov.w	r2, #0
 80128e6:	f04f 0300 	mov.w	r3, #0
 80128ea:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t  i = 0;
 80128ee:	2300      	movs	r3, #0
 80128f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80128f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128f6:	2200      	movs	r2, #0
 80128f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80128fa:	637a      	str	r2, [r7, #52]	@ 0x34
 80128fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012902:	2200      	movs	r2, #0
 8012904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012906:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012908:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801290c:	460b      	mov	r3, r1
 801290e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012910:	fb02 f203 	mul.w	r2, r2, r3
 8012914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012916:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 801291a:	4601      	mov	r1, r0
 801291c:	fb01 f303 	mul.w	r3, r1, r3
 8012920:	4413      	add	r3, r2
 8012922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012926:	fba2 4501 	umull	r4, r5, r2, r1
 801292a:	442b      	add	r3, r5
 801292c:	461d      	mov	r5, r3
 801292e:	f514 73fa 	adds.w	r3, r4, #500	@ 0x1f4
 8012932:	623b      	str	r3, [r7, #32]
 8012934:	f145 0300 	adc.w	r3, r5, #0
 8012938:	627b      	str	r3, [r7, #36]	@ 0x24
 801293a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801293e:	f04f 0300 	mov.w	r3, #0
 8012942:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012946:	f7ed fcc3 	bl	80002d0 <__aeabi_uldivmod>
 801294a:	4602      	mov	r2, r0
 801294c:	460b      	mov	r3, r1
 801294e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8012952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012954:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8012958:	b29b      	uxth	r3, r3
 801295a:	2200      	movs	r2, #0
 801295c:	61bb      	str	r3, [r7, #24]
 801295e:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8012960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012962:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8012966:	4622      	mov	r2, r4
 8012968:	fb02 f203 	mul.w	r2, r2, r3
 801296c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801296e:	4629      	mov	r1, r5
 8012970:	fb01 f303 	mul.w	r3, r1, r3
 8012974:	4413      	add	r3, r2
 8012976:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012978:	4621      	mov	r1, r4
 801297a:	fba2 ab01 	umull	sl, fp, r2, r1
 801297e:	445b      	add	r3, fp
 8012980:	469b      	mov	fp, r3
 8012982:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8012986:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 801298a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801298e:	f04f 0200 	mov.w	r2, #0
 8012992:	f04f 0300 	mov.w	r3, #0
 8012996:	0a02      	lsrs	r2, r0, #8
 8012998:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801299c:	0a0b      	lsrs	r3, r1, #8
 801299e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80129a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80129a6:	f512 6180 	adds.w	r1, r2, #1024	@ 0x400
 80129aa:	6139      	str	r1, [r7, #16]
 80129ac:	f143 0300 	adc.w	r3, r3, #0
 80129b0:	617b      	str	r3, [r7, #20]
 80129b2:	f04f 0200 	mov.w	r2, #0
 80129b6:	f04f 0300 	mov.w	r3, #0
 80129ba:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80129be:	4621      	mov	r1, r4
 80129c0:	0aca      	lsrs	r2, r1, #11
 80129c2:	4629      	mov	r1, r5
 80129c4:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80129c8:	4629      	mov	r1, r5
 80129ca:	0acb      	lsrs	r3, r1, #11
 80129cc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 80129d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d305      	bcc.n	80129e4 <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 80129d8:	f04f 32ff 	mov.w	r2, #4294967295
 80129dc:	f04f 0300 	mov.w	r3, #0
 80129e0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80129e4:	2300      	movs	r3, #0
 80129e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80129ea:	e041      	b.n	8012a70 <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80129ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80129f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80129f2:	3302      	adds	r3, #2
 80129f4:	009b      	lsls	r3, r3, #2
 80129f6:	4413      	add	r3, r2
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	60bb      	str	r3, [r7, #8]
 80129fe:	60fa      	str	r2, [r7, #12]
 8012a00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012a06:	4622      	mov	r2, r4
 8012a08:	fb02 f203 	mul.w	r2, r2, r3
 8012a0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012a0e:	4629      	mov	r1, r5
 8012a10:	fb01 f303 	mul.w	r3, r1, r3
 8012a14:	4413      	add	r3, r2
 8012a16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012a18:	4621      	mov	r1, r4
 8012a1a:	fba2 8901 	umull	r8, r9, r2, r1
 8012a1e:	444b      	add	r3, r9
 8012a20:	4699      	mov	r9, r3
 8012a22:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 8012a26:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8012a2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8012a2e:	f512 7100 	adds.w	r1, r2, #512	@ 0x200
 8012a32:	6039      	str	r1, [r7, #0]
 8012a34:	f143 0300 	adc.w	r3, r3, #0
 8012a38:	607b      	str	r3, [r7, #4]
 8012a3a:	f04f 0200 	mov.w	r2, #0
 8012a3e:	f04f 0300 	mov.w	r3, #0
 8012a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012a46:	4621      	mov	r1, r4
 8012a48:	0a8a      	lsrs	r2, r1, #10
 8012a4a:	4629      	mov	r1, r5
 8012a4c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8012a50:	4629      	mov	r1, r5
 8012a52:	0a8b      	lsrs	r3, r1, #10
 8012a54:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8012a58:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8012a5c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a60:	3206      	adds	r2, #6
 8012a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8012a66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a72:	7a9b      	ldrb	r3, [r3, #10]
 8012a74:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d3b7      	bcc.n	80129ec <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8012a7c:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3768      	adds	r7, #104	@ 0x68
 8012a84:	46bd      	mov	sp, r7
 8012a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012a8a <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b084      	sub	sp, #16
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	60f8      	str	r0, [r7, #12]
 8012a92:	60b9      	str	r1, [r7, #8]
 8012a94:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	68db      	ldr	r3, [r3, #12]
 8012a9a:	68fa      	ldr	r2, [r7, #12]
 8012a9c:	8910      	ldrh	r0, [r2, #8]
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	b292      	uxth	r2, r2
 8012aa2:	68b9      	ldr	r1, [r7, #8]
 8012aa4:	4798      	blx	r3
 8012aa6:	4603      	mov	r3, r0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b084      	sub	sp, #16
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	60b9      	str	r1, [r7, #8]
 8012aba:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	68fa      	ldr	r2, [r7, #12]
 8012ac2:	8910      	ldrh	r0, [r2, #8]
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	b292      	uxth	r2, r2
 8012ac8:	68b9      	ldr	r1, [r7, #8]
 8012aca:	4798      	blx	r3
 8012acc:	4603      	mov	r3, r0
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3710      	adds	r7, #16
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
	...

08012ad8 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b086      	sub	sp, #24
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	60f8      	str	r0, [r7, #12]
 8012ae0:	607a      	str	r2, [r7, #4]
 8012ae2:	603b      	str	r3, [r7, #0]
 8012ae4:	460b      	mov	r3, r1
 8012ae6:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2bff      	cmp	r3, #255	@ 0xff
 8012af0:	d902      	bls.n	8012af8 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 8012af2:	f06f 0303 	mvn.w	r3, #3
 8012af6:	e01d      	b.n	8012b34 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8012af8:	897b      	ldrh	r3, [r7, #10]
 8012afa:	0a1b      	lsrs	r3, r3, #8
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	b2da      	uxtb	r2, r3
 8012b00:	4b0e      	ldr	r3, [pc, #56]	@ (8012b3c <VL53LX_WriteMulti+0x64>)
 8012b02:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8012b04:	897b      	ldrh	r3, [r7, #10]
 8012b06:	b2da      	uxtb	r2, r3
 8012b08:	4b0c      	ldr	r3, [pc, #48]	@ (8012b3c <VL53LX_WriteMulti+0x64>)
 8012b0a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8012b0c:	683a      	ldr	r2, [r7, #0]
 8012b0e:	6879      	ldr	r1, [r7, #4]
 8012b10:	480b      	ldr	r0, [pc, #44]	@ (8012b40 <VL53LX_WriteMulti+0x68>)
 8012b12:	f00a faa8 	bl	801d066 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	3302      	adds	r3, #2
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	4907      	ldr	r1, [pc, #28]	@ (8012b3c <VL53LX_WriteMulti+0x64>)
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f7ff ffb3 	bl	8012a8a <_I2CWrite>
 8012b24:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d001      	beq.n	8012b30 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012b2c:	23f3      	movs	r3, #243	@ 0xf3
 8012b2e:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8012b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3718      	adds	r7, #24
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	20007be8 	.word	0x20007be8
 8012b40:	20007bea 	.word	0x20007bea

08012b44 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b086      	sub	sp, #24
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	607a      	str	r2, [r7, #4]
 8012b4e:	603b      	str	r3, [r7, #0]
 8012b50:	460b      	mov	r3, r1
 8012b52:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8012b54:	2300      	movs	r3, #0
 8012b56:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8012b58:	897b      	ldrh	r3, [r7, #10]
 8012b5a:	0a1b      	lsrs	r3, r3, #8
 8012b5c:	b29b      	uxth	r3, r3
 8012b5e:	b2da      	uxtb	r2, r3
 8012b60:	4b12      	ldr	r3, [pc, #72]	@ (8012bac <VL53LX_ReadMulti+0x68>)
 8012b62:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8012b64:	897b      	ldrh	r3, [r7, #10]
 8012b66:	b2da      	uxtb	r2, r3
 8012b68:	4b10      	ldr	r3, [pc, #64]	@ (8012bac <VL53LX_ReadMulti+0x68>)
 8012b6a:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8012b6c:	2202      	movs	r2, #2
 8012b6e:	490f      	ldr	r1, [pc, #60]	@ (8012bac <VL53LX_ReadMulti+0x68>)
 8012b70:	68f8      	ldr	r0, [r7, #12]
 8012b72:	f7ff ff8a 	bl	8012a8a <_I2CWrite>
 8012b76:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d002      	beq.n	8012b84 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012b7e:	23f3      	movs	r3, #243	@ 0xf3
 8012b80:	75fb      	strb	r3, [r7, #23]
        goto done;
 8012b82:	e00c      	b.n	8012b9e <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8012b84:	683a      	ldr	r2, [r7, #0]
 8012b86:	6879      	ldr	r1, [r7, #4]
 8012b88:	68f8      	ldr	r0, [r7, #12]
 8012b8a:	f7ff ff91 	bl	8012ab0 <_I2CRead>
 8012b8e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d002      	beq.n	8012b9c <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012b96:	23f3      	movs	r3, #243	@ 0xf3
 8012b98:	75fb      	strb	r3, [r7, #23]
 8012b9a:	e000      	b.n	8012b9e <VL53LX_ReadMulti+0x5a>
    }
done:
 8012b9c:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8012b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3718      	adds	r7, #24
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	20007be8 	.word	0x20007be8

08012bb0 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	807b      	strh	r3, [r7, #2]
 8012bbc:	4613      	mov	r3, r2
 8012bbe:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8012bc4:	887b      	ldrh	r3, [r7, #2]
 8012bc6:	0a1b      	lsrs	r3, r3, #8
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	b2da      	uxtb	r2, r3
 8012bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8012c00 <VL53LX_WrByte+0x50>)
 8012bce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8012bd0:	887b      	ldrh	r3, [r7, #2]
 8012bd2:	b2da      	uxtb	r2, r3
 8012bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8012c00 <VL53LX_WrByte+0x50>)
 8012bd6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8012bd8:	4a09      	ldr	r2, [pc, #36]	@ (8012c00 <VL53LX_WrByte+0x50>)
 8012bda:	787b      	ldrb	r3, [r7, #1]
 8012bdc:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8012bde:	2203      	movs	r2, #3
 8012be0:	4907      	ldr	r1, [pc, #28]	@ (8012c00 <VL53LX_WrByte+0x50>)
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f7ff ff51 	bl	8012a8a <_I2CWrite>
 8012be8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d001      	beq.n	8012bf4 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012bf0:	23f3      	movs	r3, #243	@ 0xf3
 8012bf2:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8012bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3710      	adds	r7, #16
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	20007be8 	.word	0x20007be8

08012c04 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	807b      	strh	r3, [r7, #2]
 8012c10:	4613      	mov	r3, r2
 8012c12:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8012c14:	2300      	movs	r3, #0
 8012c16:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8012c18:	887b      	ldrh	r3, [r7, #2]
 8012c1a:	0a1b      	lsrs	r3, r3, #8
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	4b10      	ldr	r3, [pc, #64]	@ (8012c64 <VL53LX_WrWord+0x60>)
 8012c22:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8012c24:	887b      	ldrh	r3, [r7, #2]
 8012c26:	b2da      	uxtb	r2, r3
 8012c28:	4b0e      	ldr	r3, [pc, #56]	@ (8012c64 <VL53LX_WrWord+0x60>)
 8012c2a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8012c2c:	883b      	ldrh	r3, [r7, #0]
 8012c2e:	0a1b      	lsrs	r3, r3, #8
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	b2da      	uxtb	r2, r3
 8012c34:	4b0b      	ldr	r3, [pc, #44]	@ (8012c64 <VL53LX_WrWord+0x60>)
 8012c36:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8012c38:	883b      	ldrh	r3, [r7, #0]
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	4b09      	ldr	r3, [pc, #36]	@ (8012c64 <VL53LX_WrWord+0x60>)
 8012c3e:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8012c40:	2204      	movs	r2, #4
 8012c42:	4908      	ldr	r1, [pc, #32]	@ (8012c64 <VL53LX_WrWord+0x60>)
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f7ff ff20 	bl	8012a8a <_I2CWrite>
 8012c4a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d001      	beq.n	8012c56 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012c52:	23f3      	movs	r3, #243	@ 0xf3
 8012c54:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8012c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3710      	adds	r7, #16
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	20007be8 	.word	0x20007be8

08012c68 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b086      	sub	sp, #24
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	460b      	mov	r3, r1
 8012c72:	607a      	str	r2, [r7, #4]
 8012c74:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8012c76:	2300      	movs	r3, #0
 8012c78:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8012c7a:	897b      	ldrh	r3, [r7, #10]
 8012c7c:	0a1b      	lsrs	r3, r3, #8
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	b2da      	uxtb	r2, r3
 8012c82:	4b12      	ldr	r3, [pc, #72]	@ (8012ccc <VL53LX_RdByte+0x64>)
 8012c84:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8012c86:	897b      	ldrh	r3, [r7, #10]
 8012c88:	b2da      	uxtb	r2, r3
 8012c8a:	4b10      	ldr	r3, [pc, #64]	@ (8012ccc <VL53LX_RdByte+0x64>)
 8012c8c:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8012c8e:	2202      	movs	r2, #2
 8012c90:	490e      	ldr	r1, [pc, #56]	@ (8012ccc <VL53LX_RdByte+0x64>)
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f7ff fef9 	bl	8012a8a <_I2CWrite>
 8012c98:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d002      	beq.n	8012ca6 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012ca0:	23f3      	movs	r3, #243	@ 0xf3
 8012ca2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8012ca4:	e00c      	b.n	8012cc0 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	6879      	ldr	r1, [r7, #4]
 8012caa:	68f8      	ldr	r0, [r7, #12]
 8012cac:	f7ff ff00 	bl	8012ab0 <_I2CRead>
 8012cb0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d002      	beq.n	8012cbe <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012cb8:	23f3      	movs	r3, #243	@ 0xf3
 8012cba:	75fb      	strb	r3, [r7, #23]
 8012cbc:	e000      	b.n	8012cc0 <VL53LX_RdByte+0x58>
    }
done:
 8012cbe:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8012cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3718      	adds	r7, #24
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	20007be8 	.word	0x20007be8

08012cd0 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b086      	sub	sp, #24
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60f8      	str	r0, [r7, #12]
 8012cd8:	460b      	mov	r3, r1
 8012cda:	607a      	str	r2, [r7, #4]
 8012cdc:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8012ce2:	897b      	ldrh	r3, [r7, #10]
 8012ce4:	0a1b      	lsrs	r3, r3, #8
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	4b17      	ldr	r3, [pc, #92]	@ (8012d48 <VL53LX_RdWord+0x78>)
 8012cec:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8012cee:	897b      	ldrh	r3, [r7, #10]
 8012cf0:	b2da      	uxtb	r2, r3
 8012cf2:	4b15      	ldr	r3, [pc, #84]	@ (8012d48 <VL53LX_RdWord+0x78>)
 8012cf4:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8012cf6:	2202      	movs	r2, #2
 8012cf8:	4913      	ldr	r1, [pc, #76]	@ (8012d48 <VL53LX_RdWord+0x78>)
 8012cfa:	68f8      	ldr	r0, [r7, #12]
 8012cfc:	f7ff fec5 	bl	8012a8a <_I2CWrite>
 8012d00:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d002      	beq.n	8012d0e <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012d08:	23f3      	movs	r3, #243	@ 0xf3
 8012d0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8012d0c:	e015      	b.n	8012d3a <VL53LX_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8012d0e:	2202      	movs	r2, #2
 8012d10:	490d      	ldr	r1, [pc, #52]	@ (8012d48 <VL53LX_RdWord+0x78>)
 8012d12:	68f8      	ldr	r0, [r7, #12]
 8012d14:	f7ff fecc 	bl	8012ab0 <_I2CRead>
 8012d18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d002      	beq.n	8012d26 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012d20:	23f3      	movs	r3, #243	@ 0xf3
 8012d22:	75fb      	strb	r3, [r7, #23]
        goto done;
 8012d24:	e009      	b.n	8012d3a <VL53LX_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8012d26:	4b08      	ldr	r3, [pc, #32]	@ (8012d48 <VL53LX_RdWord+0x78>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	021b      	lsls	r3, r3, #8
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	4a06      	ldr	r2, [pc, #24]	@ (8012d48 <VL53LX_RdWord+0x78>)
 8012d30:	7852      	ldrb	r2, [r2, #1]
 8012d32:	4413      	add	r3, r2
 8012d34:	b29a      	uxth	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8012d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3718      	adds	r7, #24
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	20007be8 	.word	0x20007be8

08012d4c <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b084      	sub	sp, #16
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8012d56:	2300      	movs	r3, #0
 8012d58:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	695b      	ldr	r3, [r3, #20]
 8012d5e:	4798      	blx	r3
 8012d60:	4603      	mov	r3, r0
 8012d62:	461a      	mov	r2, r3
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8012d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3710      	adds	r7, #16
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}

08012d74 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	4619      	mov	r1, r3
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f000 f8d2 	bl	8012f2c <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8012d88:	2300      	movs	r3, #0
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3708      	adds	r7, #8
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
	...

08012d94 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	4a07      	ldr	r2, [pc, #28]	@ (8012dc0 <VL53LX_WaitUs+0x2c>)
 8012da2:	fb82 1203 	smull	r1, r2, r2, r3
 8012da6:	1192      	asrs	r2, r2, #6
 8012da8:	17db      	asrs	r3, r3, #31
 8012daa:	1ad3      	subs	r3, r2, r3
 8012dac:	4619      	mov	r1, r3
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f000 f8bc 	bl	8012f2c <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8012db4:	2300      	movs	r3, #0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3708      	adds	r7, #8
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	10624dd3 	.word	0x10624dd3

08012dc4 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8012dc4:	b590      	push	{r4, r7, lr}
 8012dc6:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 8012dd0:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 8012dd4:	6020      	str	r0, [r4, #0]
 8012dd6:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 8012dda:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8012dde:	6001      	str	r1, [r0, #0]
 8012de0:	4619      	mov	r1, r3
 8012de2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012de6:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8012dea:	801a      	strh	r2, [r3, #0]
 8012dec:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012df0:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 8012df4:	460a      	mov	r2, r1
 8012df6:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 8012e04:	2300      	movs	r3, #0
 8012e06:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 8012e10:	2300      	movs	r3, #0
 8012e12:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 8012e16:	2300      	movs	r3, #0
 8012e18:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8012e1c:	f107 0310 	add.w	r3, r7, #16
 8012e20:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012e24:	4940      	ldr	r1, [pc, #256]	@ (8012f28 <VL53LX_WaitValueMaskEx+0x164>)
 8012e26:	4618      	mov	r0, r3
 8012e28:	f00a f840 	bl	801ceac <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8012e2c:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8012e30:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012e34:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012e38:	4611      	mov	r1, r2
 8012e3a:	6818      	ldr	r0, [r3, #0]
 8012e3c:	f7ff ff86 	bl	8012d4c <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8012e40:	e04e      	b.n	8012ee0 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8012e42:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d110      	bne.n	8012e6c <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 8012e4a:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8012e4e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012e52:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8012e56:	8819      	ldrh	r1, [r3, #0]
 8012e58:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012e5c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012e60:	6818      	ldr	r0, [r3, #0]
 8012e62:	f7ff ff01 	bl	8012c68 <VL53LX_RdByte>
 8012e66:	4603      	mov	r3, r0
 8012e68:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8012e6c:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8012e70:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8012e74:	4013      	ands	r3, r2
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8012e7c:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8012e80:	7812      	ldrb	r2, [r2, #0]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d102      	bne.n	8012e8c <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 8012e86:	2301      	movs	r3, #1
 8012e88:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8012e8c:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d114      	bne.n	8012ebe <VL53LX_WaitValueMaskEx+0xfa>
 8012e94:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d110      	bne.n	8012ebe <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8012e9c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d00c      	beq.n	8012ebe <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8012ea4:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8012ea8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012eac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	6818      	ldr	r0, [r3, #0]
 8012eb4:	f7ff ff5e 	bl	8012d74 <VL53LX_WaitMs>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8012ebe:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8012ec2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012ec6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012eca:	4611      	mov	r1, r2
 8012ecc:	6818      	ldr	r0, [r3, #0]
 8012ece:	f7ff ff3d 	bl	8012d4c <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8012ed2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8012ed6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 8012ee0:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d10c      	bne.n	8012f02 <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 8012ee8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012eec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8012ef0:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d203      	bcs.n	8012f02 <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8012efa:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d09f      	beq.n	8012e42 <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 8012f02:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d106      	bne.n	8012f18 <VL53LX_WaitValueMaskEx+0x154>
 8012f0a:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d102      	bne.n	8012f18 <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 8012f12:	23f9      	movs	r3, #249	@ 0xf9
 8012f14:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 8012f18:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd90      	pop	{r4, r7, pc}
 8012f26:	bf00      	nop
 8012f28:	0801df48 	.word	0x0801df48

08012f2c <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b084      	sub	sp, #16
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	695b      	ldr	r3, [r3, #20]
 8012f3a:	4798      	blx	r3
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8012f40:	bf00      	nop
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	695b      	ldr	r3, [r3, #20]
 8012f46:	4798      	blx	r3
 8012f48:	4603      	mov	r3, r0
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	1ad3      	subs	r3, r2, r3
 8012f50:	683a      	ldr	r2, [r7, #0]
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d8f5      	bhi.n	8012f42 <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 8012f56:	2300      	movs	r3, #0
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b08c      	sub	sp, #48	@ 0x30
 8012f64:	af06      	add	r7, sp, #24
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
 8012f6c:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8012f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f74:	9304      	str	r3, [sp, #16]
 8012f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f78:	9303      	str	r3, [sp, #12]
 8012f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7c:	9302      	str	r3, [sp, #8]
 8012f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f80:	9301      	str	r3, [sp, #4]
 8012f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f84:	9300      	str	r3, [sp, #0]
 8012f86:	6a3b      	ldr	r3, [r7, #32]
 8012f88:	683a      	ldr	r2, [r7, #0]
 8012f8a:	6879      	ldr	r1, [r7, #4]
 8012f8c:	68b8      	ldr	r0, [r7, #8]
 8012f8e:	f7fc ffad 	bl	800feec <VL53LX_hist_process_data>
 8012f92:	4603      	mov	r3, r0
 8012f94:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8012f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3718      	adds	r7, #24
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}

08012fa2 <VL53L4CX_RegisterBusIO>:
  * @param pObj    vl53l4cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_RegisterBusIO(VL53L4CX_Object_t *pObj, VL53L4CX_IO_t *pIO)
{
 8012fa2:	b580      	push	{r7, lr}
 8012fa4:	b084      	sub	sp, #16
 8012fa6:	af00      	add	r7, sp, #0
 8012fa8:	6078      	str	r0, [r7, #4]
 8012faa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d103      	bne.n	8012fba <VL53L4CX_RegisterBusIO+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8012fb2:	f06f 0301 	mvn.w	r3, #1
 8012fb6:	60fb      	str	r3, [r7, #12]
 8012fb8:	e023      	b.n	8013002 <VL53L4CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	685a      	ldr	r2, [r3, #4]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	891a      	ldrh	r2, [r3, #8]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	68da      	ldr	r2, [r3, #12]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	691a      	ldr	r2, [r3, #16]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	695a      	ldr	r2, [r3, #20]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d004      	beq.n	8012ffc <VL53L4CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	4798      	blx	r3
 8012ff8:	60f8      	str	r0, [r7, #12]
 8012ffa:	e002      	b.n	8013002 <VL53L4CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L4CX_ERROR;
 8012ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8013000:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8013002:	68fb      	ldr	r3, [r7, #12]
}
 8013004:	4618      	mov	r0, r3
 8013006:	3710      	adds	r7, #16
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}

0801300c <VL53L4CX_Init>:
  * @brief Initializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Init(VL53L4CX_Object_t *pObj)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801301a:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 801301e:	2b00      	cmp	r3, #0
 8013020:	d003      	beq.n	801302a <VL53L4CX_Init+0x1e>
  {
    ret =  VL53L4CX_ERROR;
 8013022:	f04f 33ff 	mov.w	r3, #4294967295
 8013026:	60fb      	str	r3, [r7, #12]
 8013028:	e043      	b.n	80130b2 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f7ef fd44 	bl	8002ab8 <VL53LX_WaitDeviceBooted>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d003      	beq.n	801303e <VL53L4CX_Init+0x32>
  {
    ret =  VL53L4CX_ERROR;
 8013036:	f04f 33ff 	mov.w	r3, #4294967295
 801303a:	60fb      	str	r3, [r7, #12]
 801303c:	e039      	b.n	80130b2 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f7ef fcdf 	bl	8002a02 <VL53LX_DataInit>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d003      	beq.n	8013052 <VL53L4CX_Init+0x46>
  {
    ret = VL53L4CX_ERROR;
 801304a:	f04f 33ff 	mov.w	r3, #4294967295
 801304e:	60fb      	str	r3, [r7, #12]
 8013050:	e02f      	b.n	80130b2 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f7f0 fbf0 	bl	8003838 <VL53LX_PerformRefSpadManagement>
 8013058:	4603      	mov	r3, r0
 801305a:	2b00      	cmp	r3, #0
 801305c:	d003      	beq.n	8013066 <VL53L4CX_Init+0x5a>
  {
    ret = VL53L4CX_ERROR;
 801305e:	f04f 33ff 	mov.w	r3, #4294967295
 8013062:	60fb      	str	r3, [r7, #12]
 8013064:	e025      	b.n	80130b2 <VL53L4CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801306c:	2200      	movs	r2, #0
 801306e:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    pObj->IsBlocking = 0;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013078:	2200      	movs	r2, #0
 801307a:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    pObj->IsContinuous = 0;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013084:	2200      	movs	r2, #0
 8013086:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    pObj->IsAmbientEnabled = 0;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013090:	2200      	movs	r2, #0
 8013092:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = 0;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801309c:	2200      	movs	r2, #0
 801309e:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed
    pObj->IsInitialized = 1;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80130a8:	2201      	movs	r2, #1
 80130aa:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    ret = VL53L4CX_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80130b2:	68fb      	ldr	r3, [r7, #12]
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3710      	adds	r7, #16
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <VL53L4CX_DeInit>:
  * @brief Deinitializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_DeInit(VL53L4CX_Object_t *pObj)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L4CX_ERROR;
 80130c4:	f04f 33ff 	mov.w	r3, #4294967295
 80130c8:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80130d0:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d111      	bne.n	80130fc <VL53L4CX_DeInit+0x40>
  {
    /* De-initialize the vl53l4cx interface */
    if (pObj->IO.DeInit() != 0)
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	4798      	blx	r3
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d003      	beq.n	80130ec <VL53L4CX_DeInit+0x30>
    {
      ret = VL53L4CX_ERROR;
 80130e4:	f04f 33ff 	mov.w	r3, #4294967295
 80130e8:	60fb      	str	r3, [r7, #12]
 80130ea:	e007      	b.n	80130fc <VL53L4CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L4CX_OK;
 80130ec:	2300      	movs	r3, #0
 80130ee:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80130f6:	2200      	movs	r2, #0
 80130f8:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    }
  }

  return ret;
 80130fc:	68fb      	ldr	r3, [r7, #12]
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3710      	adds	r7, #16
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <VL53L4CX_ReadID>:
  * @param pObj    vl53l4cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ReadID(VL53L4CX_Object_t *pObj, uint32_t *pId)
{
 8013106:	b580      	push	{r7, lr}
 8013108:	b084      	sub	sp, #16
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
 801310e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d002      	beq.n	801311c <VL53L4CX_ReadID+0x16>
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d103      	bne.n	8013124 <VL53L4CX_ReadID+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801311c:	f06f 0301 	mvn.w	r3, #1
 8013120:	60fb      	str	r3, [r7, #12]
 8013122:	e00a      	b.n	801313a <VL53L4CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	2200      	movs	r2, #0
 8013128:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L4CX_ID_REG, (uint16_t *) pId);
 801312a:	683a      	ldr	r2, [r7, #0]
 801312c:	f240 110f 	movw	r1, #271	@ 0x10f
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f7ff fdcd 	bl	8012cd0 <VL53LX_RdWord>
 8013136:	4603      	mov	r3, r0
 8013138:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801313a:	68fb      	ldr	r3, [r7, #12]
}
 801313c:	4618      	mov	r0, r3
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <VL53L4CX_GetCapabilities>:
  * @param pObj    vl53l4cx context object.
  * @param pCap    Pointer to the vl53l4cx capabilities.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetCapabilities(VL53L4CX_Object_t *pObj, VL53L4CX_Capabilities_t *pCap)
{
 8013144:	b480      	push	{r7}
 8013146:	b085      	sub	sp, #20
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d002      	beq.n	801315a <VL53L4CX_GetCapabilities+0x16>
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d103      	bne.n	8013162 <VL53L4CX_GetCapabilities+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801315a:	f06f 0301 	mvn.w	r3, #1
 801315e:	60fb      	str	r3, [r7, #12]
 8013160:	e00d      	b.n	801317e <VL53L4CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	2201      	movs	r2, #1
 8013166:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L4CX_NB_TARGET_PER_ZONE;
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	2204      	movs	r2, #4
 801316c:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	2201      	movs	r2, #1
 8013172:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	2200      	movs	r2, #0
 8013178:	60da      	str	r2, [r3, #12]

    ret = VL53L4CX_OK;
 801317a:	2300      	movs	r3, #0
 801317c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801317e:	68fb      	ldr	r3, [r7, #12]
}
 8013180:	4618      	mov	r0, r3
 8013182:	3714      	adds	r7, #20
 8013184:	46bd      	mov	sp, r7
 8013186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318a:	4770      	bx	lr

0801318c <VL53L4CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L4CX the profile corresponds to the distance modes.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigProfile(VL53L4CX_Object_t *pObj, VL53L4CX_ProfileConfig_t *pConfig)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b084      	sub	sp, #16
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d009      	beq.n	80131b0 <VL53L4CX_ConfigProfile+0x24>
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d006      	beq.n	80131b0 <VL53L4CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L4CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 80131a8:	7afb      	ldrb	r3, [r7, #11]
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	d103      	bne.n	80131b6 <VL53L4CX_ConfigProfile+0x2a>
 80131ae:	e00c      	b.n	80131ca <VL53L4CX_ConfigProfile+0x3e>
    return VL53L4CX_INVALID_PARAM;
 80131b0:	f06f 0301 	mvn.w	r3, #1
 80131b4:	e043      	b.n	801323e <VL53L4CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 80131b6:	7afb      	ldrb	r3, [r7, #11]
 80131b8:	2b02      	cmp	r3, #2
 80131ba:	d006      	beq.n	80131ca <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_MEDIUM) &&
 80131bc:	7afb      	ldrb	r3, [r7, #11]
 80131be:	2b03      	cmp	r3, #3
 80131c0:	d003      	beq.n	80131ca <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_LONG))
  {
    ret = VL53L4CX_INVALID_PARAM;
 80131c2:	f06f 0301 	mvn.w	r3, #1
 80131c6:	60fb      	str	r3, [r7, #12]
 80131c8:	e038      	b.n	801323c <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 80131ca:	7afb      	ldrb	r3, [r7, #11]
 80131cc:	4619      	mov	r1, r3
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f7ef fd53 	bl	8002c7a <VL53LX_SetDistanceMode>
 80131d4:	4603      	mov	r3, r0
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d003      	beq.n	80131e2 <VL53L4CX_ConfigProfile+0x56>
  {
    ret = VL53L4CX_ERROR;
 80131da:	f04f 33ff 	mov.w	r3, #4294967295
 80131de:	60fb      	str	r3, [r7, #12]
 80131e0:	e02c      	b.n	801323c <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 80131e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80131ea:	fb02 f303 	mul.w	r3, r2, r3
 80131ee:	4619      	mov	r1, r3
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7ef fdab 	bl	8002d4c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d003      	beq.n	8013204 <VL53L4CX_ConfigProfile+0x78>
  {
    ret = VL53L4CX_ERROR;
 80131fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013200:	60fb      	str	r3, [r7, #12]
 8013202:	e01b      	b.n	801323c <VL53L4CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	2b00      	cmp	r3, #0
 801320a:	bf14      	ite	ne
 801320c:	2301      	movne	r3, #1
 801320e:	2300      	moveq	r3, #0
 8013210:	b2db      	uxtb	r3, r3
 8013212:	461a      	mov	r2, r3
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801321a:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	691b      	ldr	r3, [r3, #16]
 8013222:	2b00      	cmp	r3, #0
 8013224:	bf14      	ite	ne
 8013226:	2301      	movne	r3, #1
 8013228:	2300      	moveq	r3, #0
 801322a:	b2db      	uxtb	r3, r3
 801322c:	461a      	mov	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013234:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed

    ret = VL53L4CX_OK;
 8013238:	2300      	movs	r3, #0
 801323a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801323c:	68fb      	ldr	r3, [r7, #12]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3710      	adds	r7, #16
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}

08013246 <VL53L4CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigROI(VL53L4CX_Object_t *pObj, VL53L4CX_ROIConfig_t *pROIConfig)
{
 8013246:	b580      	push	{r7, lr}
 8013248:	b084      	sub	sp, #16
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
 801324e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d002      	beq.n	801325c <VL53L4CX_ConfigROI+0x16>
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d103      	bne.n	8013264 <VL53L4CX_ConfigROI+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801325c:	f06f 0301 	mvn.w	r3, #1
 8013260:	60fb      	str	r3, [r7, #12]
 8013262:	e01a      	b.n	801329a <VL53L4CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	789b      	ldrb	r3, [r3, #2]
 8013268:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	78db      	ldrb	r3, [r3, #3]
 801326e:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	785b      	ldrb	r3, [r3, #1]
 801327a:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 801327c:	f107 0308 	add.w	r3, r7, #8
 8013280:	4619      	mov	r1, r3
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ef fdda 	bl	8002e3c <VL53LX_SetUserROI>
 8013288:	4603      	mov	r3, r0
 801328a:	2b00      	cmp	r3, #0
 801328c:	d003      	beq.n	8013296 <VL53L4CX_ConfigROI+0x50>
    {
      ret = VL53L4CX_ERROR;
 801328e:	f04f 33ff 	mov.w	r3, #4294967295
 8013292:	60fb      	str	r3, [r7, #12]
 8013294:	e001      	b.n	801329a <VL53L4CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L4CX_OK;
 8013296:	2300      	movs	r3, #0
 8013298:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801329a:	68fb      	ldr	r3, [r7, #12]
}
 801329c:	4618      	mov	r0, r3
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <VL53L4CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigIT(VL53L4CX_Object_t *pObj, VL53L4CX_ITConfig_t *pITConfig)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b083      	sub	sp, #12
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L4CX_NOT_IMPLEMENTED;
 80132ae:	f06f 0303 	mvn.w	r3, #3
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <VL53L4CX_GetDistance>:
  * @param pObj    vl53l4cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetDistance(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 80132be:	b580      	push	{r7, lr}
 80132c0:	b084      	sub	sp, #16
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
 80132c6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L4CX_OK;
 80132c8:	2300      	movs	r3, #0
 80132ca:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d002      	beq.n	80132d8 <VL53L4CX_GetDistance+0x1a>
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d103      	bne.n	80132e0 <VL53L4CX_GetDistance+0x22>
  {
    ret = VL53L4CX_INVALID_PARAM;
 80132d8:	f06f 0301 	mvn.w	r3, #1
 80132dc:	60fb      	str	r3, [r7, #12]
 80132de:	e009      	b.n	80132f4 <VL53L4CX_GetDistance+0x36>
  }
  else if (pObj->IsRanging == 0U)
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80132e6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d102      	bne.n	80132f4 <VL53L4CX_GetDistance+0x36>
  {
    ret = VL53L4CX_ERROR;
 80132ee:	f04f 33ff 	mov.w	r3, #4294967295
 80132f2:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L4CX_OK)
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d112      	bne.n	8013320 <VL53L4CX_GetDistance+0x62>
  {
    if (pObj->IsBlocking == 1U)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013300:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8013304:	2b01      	cmp	r3, #1
 8013306:	d106      	bne.n	8013316 <VL53L4CX_GetDistance+0x58>
    {
      ret = vl53l4cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8013308:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f000 f957 	bl	80135c0 <vl53l4cx_poll_for_measurement>
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	e004      	b.n	8013320 <VL53L4CX_GetDistance+0x62>
    }
    else
    {
      ret = vl53l4cx_poll_for_measurement(pObj, 0U);
 8013316:	2100      	movs	r1, #0
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 f951 	bl	80135c0 <vl53l4cx_poll_for_measurement>
 801331e:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L4CX_OK)
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d119      	bne.n	801335a <VL53L4CX_GetDistance+0x9c>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l4cx_get_result(pObj, pResult) != VL53L4CX_OK)
 8013326:	6839      	ldr	r1, [r7, #0]
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 f977 	bl	801361c <vl53l4cx_get_result>
 801332e:	4603      	mov	r3, r0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d003      	beq.n	801333c <VL53L4CX_GetDistance+0x7e>
    {
      ret = VL53L4CX_ERROR;
 8013334:	f04f 33ff 	mov.w	r3, #4294967295
 8013338:	60fb      	str	r3, [r7, #12]
 801333a:	e00e      	b.n	801335a <VL53L4CX_GetDistance+0x9c>
    }
    else if (pObj->IsContinuous == 1U)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013342:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 8013346:	2b01      	cmp	r3, #1
 8013348:	d105      	bne.n	8013356 <VL53L4CX_GetDistance+0x98>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7ef fe45 	bl	8002fda <VL53LX_ClearInterruptAndStartMeasurement>
 8013350:	4603      	mov	r3, r0
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	e001      	b.n	801335a <VL53L4CX_GetDistance+0x9c>
    }
    else
    {
      ret = VL53L4CX_OK;
 8013356:	2300      	movs	r3, #0
 8013358:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801335a:	68fb      	ldr	r3, [r7, #12]
}
 801335c:	4618      	mov	r0, r3
 801335e:	3710      	adds	r7, #16
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}

08013364 <VL53L4CX_Start>:
  * @param pObj    vl53l4cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Start(VL53L4CX_Object_t *pObj, uint32_t Mode)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b084      	sub	sp, #16
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d103      	bne.n	801337c <VL53L4CX_Start+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013374:	f06f 0301 	mvn.w	r3, #1
 8013378:	60fb      	str	r3, [r7, #12]
 801337a:	e06e      	b.n	801345a <VL53L4CX_Start+0xf6>
  }
  else if (pObj->IsRanging == 1U)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013382:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8013386:	2b01      	cmp	r3, #1
 8013388:	d103      	bne.n	8013392 <VL53L4CX_Start+0x2e>
  {
    ret = VL53L4CX_ERROR;
 801338a:	f04f 33ff 	mov.w	r3, #4294967295
 801338e:	60fb      	str	r3, [r7, #12]
 8013390:	e063      	b.n	801345a <VL53L4CX_Start+0xf6>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7ef fdbf 	bl	8002f16 <VL53LX_StartMeasurement>
 8013398:	4603      	mov	r3, r0
 801339a:	2b00      	cmp	r3, #0
 801339c:	d15a      	bne.n	8013454 <VL53L4CX_Start+0xf0>
  {
    pObj->IsRanging = 1;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80133a4:	2201      	movs	r2, #1
 80133a6:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 80133aa:	2300      	movs	r3, #0
 80133ac:	60fb      	str	r3, [r7, #12]

    ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7ef fe13 	bl	8002fda <VL53LX_ClearInterruptAndStartMeasurement>
 80133b4:	4603      	mov	r3, r0
 80133b6:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	3b01      	subs	r3, #1
 80133bc:	2b03      	cmp	r3, #3
 80133be:	d83f      	bhi.n	8013440 <VL53L4CX_Start+0xdc>
 80133c0:	a201      	add	r2, pc, #4	@ (adr r2, 80133c8 <VL53L4CX_Start+0x64>)
 80133c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c6:	bf00      	nop
 80133c8:	080133d9 	.word	0x080133d9
 80133cc:	080133f3 	.word	0x080133f3
 80133d0:	0801340d 	.word	0x0801340d
 80133d4:	08013427 	.word	0x08013427
    {
    case VL53L4CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80133de:	2201      	movs	r2, #1
 80133e0:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80133ea:	2201      	movs	r2, #1
 80133ec:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 80133f0:	e033      	b.n	801345a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80133f8:	2200      	movs	r2, #0
 80133fa:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013404:	2201      	movs	r2, #1
 8013406:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 801340a:	e026      	b.n	801345a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013412:	2201      	movs	r2, #1
 8013414:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801341e:	2200      	movs	r2, #0
 8013420:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8013424:	e019      	b.n	801345a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801342c:	2200      	movs	r2, #0
 801342e:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013438:	2200      	movs	r2, #0
 801343a:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 801343e:	e00c      	b.n	801345a <VL53L4CX_Start+0xf6>

    default:
      pObj->IsRanging = 0U;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013446:	2200      	movs	r2, #0
 8013448:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
      ret = VL53L4CX_INVALID_PARAM;
 801344c:	f06f 0301 	mvn.w	r3, #1
 8013450:	60fb      	str	r3, [r7, #12]
      break;
 8013452:	e002      	b.n	801345a <VL53L4CX_Start+0xf6>
    }
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8013454:	f04f 33ff 	mov.w	r3, #4294967295
 8013458:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801345a:	68fb      	ldr	r3, [r7, #12]
}
 801345c:	4618      	mov	r0, r3
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <VL53L4CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Stop(VL53L4CX_Object_t *pObj)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d103      	bne.n	801347a <VL53L4CX_Stop+0x16>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013472:	f06f 0301 	mvn.w	r3, #1
 8013476:	60fb      	str	r3, [r7, #12]
 8013478:	e01c      	b.n	80134b4 <VL53L4CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013480:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8013484:	2b00      	cmp	r3, #0
 8013486:	d103      	bne.n	8013490 <VL53L4CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L4CX_ERROR;
 8013488:	f04f 33ff 	mov.w	r3, #4294967295
 801348c:	60fb      	str	r3, [r7, #12]
 801348e:	e011      	b.n	80134b4 <VL53L4CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f7ef fd8e 	bl	8002fb2 <VL53LX_StopMeasurement>
 8013496:	4603      	mov	r3, r0
 8013498:	2b00      	cmp	r3, #0
 801349a:	d108      	bne.n	80134ae <VL53L4CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80134a2:	2200      	movs	r2, #0
 80134a4:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 80134a8:	2300      	movs	r3, #0
 80134aa:	60fb      	str	r3, [r7, #12]
 80134ac:	e002      	b.n	80134b4 <VL53L4CX_Stop+0x50>
  }
  else
  {
    ret = VL53L4CX_ERROR;
 80134ae:	f04f 33ff 	mov.w	r3, #4294967295
 80134b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80134b4:	68fb      	ldr	r3, [r7, #12]
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3710      	adds	r7, #16
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <VL53L4CX_SetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param Address     New I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetAddress(VL53L4CX_Object_t *pObj, uint32_t Address)
{
 80134be:	b580      	push	{r7, lr}
 80134c0:	b084      	sub	sp, #16
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
 80134c6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d103      	bne.n	80134d6 <VL53L4CX_SetAddress+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 80134ce:	f06f 0301 	mvn.w	r3, #1
 80134d2:	60fb      	str	r3, [r7, #12]
 80134d4:	e012      	b.n	80134fc <VL53L4CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	4619      	mov	r1, r3
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f7ef fa69 	bl	80029b4 <VL53LX_SetDeviceAddress>
 80134e2:	4603      	mov	r3, r0
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d003      	beq.n	80134f0 <VL53L4CX_SetAddress+0x32>
  {
    ret = VL53L4CX_ERROR;
 80134e8:	f04f 33ff 	mov.w	r3, #4294967295
 80134ec:	60fb      	str	r3, [r7, #12]
 80134ee:	e005      	b.n	80134fc <VL53L4CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	811a      	strh	r2, [r3, #8]
    ret = VL53L4CX_OK;
 80134f8:	2300      	movs	r3, #0
 80134fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80134fc:	68fb      	ldr	r3, [r7, #12]
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3710      	adds	r7, #16
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}

08013506 <VL53L4CX_GetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetAddress(VL53L4CX_Object_t *pObj, uint32_t *pAddress)
{
 8013506:	b480      	push	{r7}
 8013508:	b085      	sub	sp, #20
 801350a:	af00      	add	r7, sp, #0
 801350c:	6078      	str	r0, [r7, #4]
 801350e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d002      	beq.n	801351c <VL53L4CX_GetAddress+0x16>
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d103      	bne.n	8013524 <VL53L4CX_GetAddress+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801351c:	f06f 0301 	mvn.w	r3, #1
 8013520:	60fb      	str	r3, [r7, #12]
 8013522:	e006      	b.n	8013532 <VL53L4CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	891b      	ldrh	r3, [r3, #8]
 8013528:	461a      	mov	r2, r3
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	601a      	str	r2, [r3, #0]
    ret = VL53L4CX_OK;
 801352e:	2300      	movs	r3, #0
 8013530:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013532:	68fb      	ldr	r3, [r7, #12]
}
 8013534:	4618      	mov	r0, r3
 8013536:	3714      	adds	r7, #20
 8013538:	46bd      	mov	sp, r7
 801353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353e:	4770      	bx	lr

08013540 <VL53L4CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetPowerMode(VL53L4CX_Object_t *pObj, uint32_t PowerMode)
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 801354a:	f06f 0303 	mvn.w	r3, #3
}
 801354e:	4618      	mov	r0, r3
 8013550:	370c      	adds	r7, #12
 8013552:	46bd      	mov	sp, r7
 8013554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013558:	4770      	bx	lr

0801355a <VL53L4CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetPowerMode(VL53L4CX_Object_t *pObj, uint32_t *pPowerMode)
{
 801355a:	b480      	push	{r7}
 801355c:	b083      	sub	sp, #12
 801355e:	af00      	add	r7, sp, #0
 8013560:	6078      	str	r0, [r7, #4]
 8013562:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8013564:	f06f 0303 	mvn.w	r3, #3
}
 8013568:	4618      	mov	r0, r3
 801356a:	370c      	adds	r7, #12
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <VL53L4CX_OffsetCalibration>:
  * @param pObj    vl53l4cx context object.
  * @param CalDistance    Calibration distance in mm.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_OffsetCalibration(VL53L4CX_Object_t *pObj, uint32_t CalDistance)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  VL53LX_OffsetCorrectionModes Mode = VL53LX_OFFSETCORRECTIONMODE_STANDARD;
 801357e:	2301      	movs	r3, #1
 8013580:	72fb      	strb	r3, [r7, #11]

  if (VL53LX_SetOffsetCorrectionMode(pObj, Mode) != VL53LX_ERROR_NONE)
 8013582:	7afb      	ldrb	r3, [r7, #11]
 8013584:	4619      	mov	r1, r3
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f7f0 fa52 	bl	8003a30 <VL53LX_SetOffsetCorrectionMode>
 801358c:	4603      	mov	r3, r0
 801358e:	2b00      	cmp	r3, #0
 8013590:	d003      	beq.n	801359a <VL53L4CX_OffsetCalibration+0x26>
  {
    ret = VL53L4CX_ERROR;
 8013592:	f04f 33ff 	mov.w	r3, #4294967295
 8013596:	60fb      	str	r3, [r7, #12]
 8013598:	e00d      	b.n	80135b6 <VL53L4CX_OffsetCalibration+0x42>
  }
  else if (VL53LX_PerformOffsetSimpleCalibration(pObj, (int32_t)CalDistance) != VL53LX_ERROR_NONE)
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	4619      	mov	r1, r3
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f7f0 fa6c 	bl	8003a7c <VL53LX_PerformOffsetSimpleCalibration>
 80135a4:	4603      	mov	r3, r0
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d003      	beq.n	80135b2 <VL53L4CX_OffsetCalibration+0x3e>
  {
    ret = VL53L4CX_ERROR;
 80135aa:	f04f 33ff 	mov.w	r3, #4294967295
 80135ae:	60fb      	str	r3, [r7, #12]
 80135b0:	e001      	b.n	80135b6 <VL53L4CX_OffsetCalibration+0x42>
  }
  else
  {
    ret = VL53L4CX_OK;
 80135b2:	2300      	movs	r3, #0
 80135b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80135b6:	68fb      	ldr	r3, [r7, #12]
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <vl53l4cx_poll_for_measurement>:
/** @defgroup VL53L4CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l4cx_poll_for_measurement(VL53L4CX_Object_t *pObj, uint32_t Timeout)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80135ca:	2300      	movs	r3, #0
 80135cc:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d102      	bne.n	80135da <vl53l4cx_poll_for_measurement+0x1a>
  {
    return VL53L4CX_INVALID_PARAM;
 80135d4:	f06f 0301 	mvn.w	r3, #1
 80135d8:	e01b      	b.n	8013612 <vl53l4cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	695b      	ldr	r3, [r3, #20]
 80135de:	4798      	blx	r3
 80135e0:	4603      	mov	r3, r0
 80135e2:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 80135e4:	f107 030b 	add.w	r3, r7, #11
 80135e8:	4619      	mov	r1, r3
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7ef fd0b 	bl	8003006 <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80135f0:	7afb      	ldrb	r3, [r7, #11]
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	d101      	bne.n	80135fa <vl53l4cx_poll_for_measurement+0x3a>
    {
      return VL53L4CX_OK;
 80135f6:	2300      	movs	r3, #0
 80135f8:	e00b      	b.n	8013612 <vl53l4cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	695b      	ldr	r3, [r3, #20]
 80135fe:	4798      	blx	r3
 8013600:	4603      	mov	r3, r0
 8013602:	461a      	mov	r2, r3
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	1ad3      	subs	r3, r2, r3
 8013608:	683a      	ldr	r2, [r7, #0]
 801360a:	429a      	cmp	r2, r3
 801360c:	d8ea      	bhi.n	80135e4 <vl53l4cx_poll_for_measurement+0x24>

  return VL53L4CX_TIMEOUT;
 801360e:	f06f 0302 	mvn.w	r3, #2
}
 8013612:	4618      	mov	r0, r3
 8013614:	3710      	adds	r7, #16
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}
	...

0801361c <vl53l4cx_get_result>:

static int32_t vl53l4cx_get_result(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 801361c:	b590      	push	{r4, r7, lr}
 801361e:	b089      	sub	sp, #36	@ 0x24
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d002      	beq.n	8013632 <vl53l4cx_get_result+0x16>
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d103      	bne.n	801363a <vl53l4cx_get_result+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013632:	f06f 0301 	mvn.w	r3, #1
 8013636:	61fb      	str	r3, [r7, #28]
 8013638:	e103      	b.n	8013842 <vl53l4cx_get_result+0x226>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 801363a:	4984      	ldr	r1, [pc, #528]	@ (801384c <vl53l4cx_get_result+0x230>)
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f7f0 f8d4 	bl	80037ea <VL53LX_GetMultiRangingData>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d003      	beq.n	8013650 <vl53l4cx_get_result+0x34>
  {
    ret = VL53L4CX_ERROR;
 8013648:	f04f 33ff 	mov.w	r3, #4294967295
 801364c:	61fb      	str	r3, [r7, #28]
 801364e:	e0f8      	b.n	8013842 <vl53l4cx_get_result+0x226>
  }
  else
  {
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 8013650:	2300      	movs	r3, #0
 8013652:	76fb      	strb	r3, [r7, #27]
 8013654:	e0ec      	b.n	8013830 <vl53l4cx_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8013656:	4b7d      	ldr	r3, [pc, #500]	@ (801384c <vl53l4cx_get_result+0x230>)
 8013658:	795b      	ldrb	r3, [r3, #5]
 801365a:	7efa      	ldrb	r2, [r7, #27]
 801365c:	4618      	mov	r0, r3
 801365e:	6839      	ldr	r1, [r7, #0]
 8013660:	4613      	mov	r3, r2
 8013662:	011b      	lsls	r3, r3, #4
 8013664:	4413      	add	r3, r2
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	440b      	add	r3, r1
 801366a:	3304      	adds	r3, #4
 801366c:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 801366e:	2300      	movs	r3, #0
 8013670:	76bb      	strb	r3, [r7, #26]
 8013672:	e0d4      	b.n	801381e <vl53l4cx_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8013674:	7eba      	ldrb	r2, [r7, #26]
 8013676:	4975      	ldr	r1, [pc, #468]	@ (801384c <vl53l4cx_get_result+0x230>)
 8013678:	4613      	mov	r3, r2
 801367a:	009b      	lsls	r3, r3, #2
 801367c:	4413      	add	r3, r2
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	440b      	add	r3, r1
 8013682:	3318      	adds	r3, #24
 8013684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013688:	2b00      	cmp	r3, #0
 801368a:	da0b      	bge.n	80136a4 <vl53l4cx_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 801368c:	7efa      	ldrb	r2, [r7, #27]
 801368e:	7eb8      	ldrb	r0, [r7, #26]
 8013690:	6839      	ldr	r1, [r7, #0]
 8013692:	4613      	mov	r3, r2
 8013694:	011b      	lsls	r3, r3, #4
 8013696:	4413      	add	r3, r2
 8013698:	4403      	add	r3, r0
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	440b      	add	r3, r1
 801369e:	2200      	movs	r2, #0
 80136a0:	609a      	str	r2, [r3, #8]
 80136a2:	e014      	b.n	80136ce <vl53l4cx_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 80136a4:	7eba      	ldrb	r2, [r7, #26]
 80136a6:	4969      	ldr	r1, [pc, #420]	@ (801384c <vl53l4cx_get_result+0x230>)
 80136a8:	4613      	mov	r3, r2
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	4413      	add	r3, r2
 80136ae:	009b      	lsls	r3, r3, #2
 80136b0:	440b      	add	r3, r1
 80136b2:	3318      	adds	r3, #24
 80136b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136b8:	7efa      	ldrb	r2, [r7, #27]
 80136ba:	7eb8      	ldrb	r0, [r7, #26]
 80136bc:	461c      	mov	r4, r3
 80136be:	6839      	ldr	r1, [r7, #0]
 80136c0:	4613      	mov	r3, r2
 80136c2:	011b      	lsls	r3, r3, #4
 80136c4:	4413      	add	r3, r2
 80136c6:	4403      	add	r3, r0
 80136c8:	009b      	lsls	r3, r3, #2
 80136ca:	440b      	add	r3, r1
 80136cc:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80136d4:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d132      	bne.n	8013742 <vl53l4cx_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80136dc:	7eba      	ldrb	r2, [r7, #26]
 80136de:	495b      	ldr	r1, [pc, #364]	@ (801384c <vl53l4cx_get_result+0x230>)
 80136e0:	4613      	mov	r3, r2
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	4413      	add	r3, r2
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	440b      	add	r3, r1
 80136ea:	3310      	adds	r3, #16
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	ee07 3a90 	vmov	s15, r3
 80136f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80136f6:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8013850 <vl53l4cx_get_result+0x234>
 80136fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80136fe:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8013854 <vl53l4cx_get_result+0x238>
 8013702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013706:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 801370a:	4b50      	ldr	r3, [pc, #320]	@ (801384c <vl53l4cx_get_result+0x230>)
 801370c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8013710:	0a1b      	lsrs	r3, r3, #8
 8013712:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8013714:	8a7b      	ldrh	r3, [r7, #18]
 8013716:	ee07 3a90 	vmov	s15, r3
 801371a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801371e:	7efa      	ldrb	r2, [r7, #27]
 8013720:	7eb8      	ldrb	r0, [r7, #26]
 8013722:	edd7 6a05 	vldr	s13, [r7, #20]
 8013726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801372a:	6839      	ldr	r1, [r7, #0]
 801372c:	4613      	mov	r3, r2
 801372e:	011b      	lsls	r3, r3, #4
 8013730:	4413      	add	r3, r2
 8013732:	4403      	add	r3, r0
 8013734:	3308      	adds	r3, #8
 8013736:	009b      	lsls	r3, r3, #2
 8013738:	440b      	add	r3, r1
 801373a:	3308      	adds	r3, #8
 801373c:	edc3 7a00 	vstr	s15, [r3]
 8013740:	e00d      	b.n	801375e <vl53l4cx_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8013742:	7efa      	ldrb	r2, [r7, #27]
 8013744:	7eb8      	ldrb	r0, [r7, #26]
 8013746:	6839      	ldr	r1, [r7, #0]
 8013748:	4613      	mov	r3, r2
 801374a:	011b      	lsls	r3, r3, #4
 801374c:	4413      	add	r3, r2
 801374e:	4403      	add	r3, r0
 8013750:	3308      	adds	r3, #8
 8013752:	009b      	lsls	r3, r3, #2
 8013754:	440b      	add	r3, r1
 8013756:	3308      	adds	r3, #8
 8013758:	f04f 0200 	mov.w	r2, #0
 801375c:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013764:	f893 34ed 	ldrb.w	r3, [r3, #1261]	@ 0x4ed
 8013768:	2b01      	cmp	r3, #1
 801376a:	d132      	bne.n	80137d2 <vl53l4cx_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 801376c:	7eba      	ldrb	r2, [r7, #26]
 801376e:	4937      	ldr	r1, [pc, #220]	@ (801384c <vl53l4cx_get_result+0x230>)
 8013770:	4613      	mov	r3, r2
 8013772:	009b      	lsls	r3, r3, #2
 8013774:	4413      	add	r3, r2
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	440b      	add	r3, r1
 801377a:	330c      	adds	r3, #12
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	ee07 3a90 	vmov	s15, r3
 8013782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013786:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8013850 <vl53l4cx_get_result+0x234>
 801378a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801378e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8013854 <vl53l4cx_get_result+0x238>
 8013792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013796:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 801379a:	4b2c      	ldr	r3, [pc, #176]	@ (801384c <vl53l4cx_get_result+0x230>)
 801379c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80137a0:	0a1b      	lsrs	r3, r3, #8
 80137a2:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 80137a4:	8a7b      	ldrh	r3, [r7, #18]
 80137a6:	ee07 3a90 	vmov	s15, r3
 80137aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80137ae:	7efa      	ldrb	r2, [r7, #27]
 80137b0:	7eb8      	ldrb	r0, [r7, #26]
 80137b2:	edd7 6a03 	vldr	s13, [r7, #12]
 80137b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80137ba:	6839      	ldr	r1, [r7, #0]
 80137bc:	4613      	mov	r3, r2
 80137be:	011b      	lsls	r3, r3, #4
 80137c0:	4413      	add	r3, r2
 80137c2:	4403      	add	r3, r0
 80137c4:	330c      	adds	r3, #12
 80137c6:	009b      	lsls	r3, r3, #2
 80137c8:	440b      	add	r3, r1
 80137ca:	3308      	adds	r3, #8
 80137cc:	edc3 7a00 	vstr	s15, [r3]
 80137d0:	e00d      	b.n	80137ee <vl53l4cx_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80137d2:	7efa      	ldrb	r2, [r7, #27]
 80137d4:	7eb8      	ldrb	r0, [r7, #26]
 80137d6:	6839      	ldr	r1, [r7, #0]
 80137d8:	4613      	mov	r3, r2
 80137da:	011b      	lsls	r3, r3, #4
 80137dc:	4413      	add	r3, r2
 80137de:	4403      	add	r3, r0
 80137e0:	330c      	adds	r3, #12
 80137e2:	009b      	lsls	r3, r3, #2
 80137e4:	440b      	add	r3, r1
 80137e6:	3308      	adds	r3, #8
 80137e8:	f04f 0200 	mov.w	r2, #0
 80137ec:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80137ee:	7eba      	ldrb	r2, [r7, #26]
 80137f0:	4916      	ldr	r1, [pc, #88]	@ (801384c <vl53l4cx_get_result+0x230>)
 80137f2:	4613      	mov	r3, r2
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	4413      	add	r3, r2
 80137f8:	009b      	lsls	r3, r3, #2
 80137fa:	440b      	add	r3, r1
 80137fc:	331a      	adds	r3, #26
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	7efa      	ldrb	r2, [r7, #27]
 8013802:	7eb8      	ldrb	r0, [r7, #26]
 8013804:	461c      	mov	r4, r3
 8013806:	6839      	ldr	r1, [r7, #0]
 8013808:	4613      	mov	r3, r2
 801380a:	011b      	lsls	r3, r3, #4
 801380c:	4413      	add	r3, r2
 801380e:	4403      	add	r3, r0
 8013810:	3304      	adds	r3, #4
 8013812:	009b      	lsls	r3, r3, #2
 8013814:	440b      	add	r3, r1
 8013816:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8013818:	7ebb      	ldrb	r3, [r7, #26]
 801381a:	3301      	adds	r3, #1
 801381c:	76bb      	strb	r3, [r7, #26]
 801381e:	4b0b      	ldr	r3, [pc, #44]	@ (801384c <vl53l4cx_get_result+0x230>)
 8013820:	795b      	ldrb	r3, [r3, #5]
 8013822:	7eba      	ldrb	r2, [r7, #26]
 8013824:	429a      	cmp	r2, r3
 8013826:	f4ff af25 	bcc.w	8013674 <vl53l4cx_get_result+0x58>
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 801382a:	7efb      	ldrb	r3, [r7, #27]
 801382c:	3301      	adds	r3, #1
 801382e:	76fb      	strb	r3, [r7, #27]
 8013830:	7efb      	ldrb	r3, [r7, #27]
 8013832:	2b00      	cmp	r3, #0
 8013834:	f43f af0f 	beq.w	8013656 <vl53l4cx_get_result+0x3a>
      }
    }

    pResult->NumberOfZones = VL53L4CX_MAX_NB_ZONES;
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	2201      	movs	r2, #1
 801383c:	601a      	str	r2, [r3, #0]

    ret = VL53L4CX_OK;
 801383e:	2300      	movs	r3, #0
 8013840:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8013842:	69fb      	ldr	r3, [r7, #28]
}
 8013844:	4618      	mov	r0, r3
 8013846:	3724      	adds	r7, #36	@ 0x24
 8013848:	46bd      	mov	sp, r7
 801384a:	bd90      	pop	{r4, r7, pc}
 801384c:	20007ce8 	.word	0x20007ce8
 8013850:	47800000 	.word	0x47800000
 8013854:	447a0000 	.word	0x447a0000

08013858 <log_init>:

UART_HandleTypeDef *log_huart;

static char log_buffer[LOG_BUFFER_SIZE];

void log_init(void *huart) {
 8013858:	b480      	push	{r7}
 801385a:	b083      	sub	sp, #12
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
	log_huart = (UART_HandleTypeDef*) huart;
 8013860:	4a04      	ldr	r2, [pc, #16]	@ (8013874 <log_init+0x1c>)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	6013      	str	r3, [r2, #0]
}
 8013866:	bf00      	nop
 8013868:	370c      	adds	r7, #12
 801386a:	46bd      	mov	sp, r7
 801386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	20007d44 	.word	0x20007d44

08013878 <log_transmit>:

void log_transmit(uint8_t *data, uint16_t data_len) {
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(log_huart, data, data_len, LOG_UART_TIMEOUT);
 8013884:	4b05      	ldr	r3, [pc, #20]	@ (801389c <log_transmit+0x24>)
 8013886:	6818      	ldr	r0, [r3, #0]
 8013888:	887a      	ldrh	r2, [r7, #2]
 801388a:	2364      	movs	r3, #100	@ 0x64
 801388c:	6879      	ldr	r1, [r7, #4]
 801388e:	f004 f931 	bl	8017af4 <HAL_UART_Transmit>
}
 8013892:	bf00      	nop
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	20007d44 	.word	0x20007d44

080138a0 <log_printf>:

void log_printf(const char *format, ...) {
 80138a0:	b40f      	push	{r0, r1, r2, r3}
 80138a2:	b580      	push	{r7, lr}
 80138a4:	b082      	sub	sp, #8
 80138a6:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 80138a8:	f107 0314 	add.w	r3, r7, #20
 80138ac:	607b      	str	r3, [r7, #4]
	vsnprintf(log_buffer, LOG_BUFFER_SIZE, format, argptr);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	693a      	ldr	r2, [r7, #16]
 80138b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80138b6:	4809      	ldr	r0, [pc, #36]	@ (80138dc <log_printf+0x3c>)
 80138b8:	f009 fa4e 	bl	801cd58 <vsniprintf>
	va_end(argptr);
	log_transmit((uint8_t*) log_buffer, strlen(log_buffer));
 80138bc:	4807      	ldr	r0, [pc, #28]	@ (80138dc <log_printf+0x3c>)
 80138be:	f7ec fc5f 	bl	8000180 <strlen>
 80138c2:	4603      	mov	r3, r0
 80138c4:	b29b      	uxth	r3, r3
 80138c6:	4619      	mov	r1, r3
 80138c8:	4804      	ldr	r0, [pc, #16]	@ (80138dc <log_printf+0x3c>)
 80138ca:	f7ff ffd5 	bl	8013878 <log_transmit>
}
 80138ce:	bf00      	nop
 80138d0:	3708      	adds	r7, #8
 80138d2:	46bd      	mov	sp, r7
 80138d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80138d8:	b004      	add	sp, #16
 80138da:	4770      	bx	lr
 80138dc:	20007d48 	.word	0x20007d48

080138e0 <MyInitLSM6DSO>:

#include "MEMS_library.h"

static LSM6DSO_Object_t lsm6dso_obj_0;

void MyInitLSM6DSO(void){
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b088      	sub	sp, #32
 80138e4:	af00      	add	r7, sp, #0
	LSM6DSO_IO_t io_ctx;
	io_ctx.BusType     = LSM6DSO_I2C_BUS;
 80138e6:	2300      	movs	r3, #0
 80138e8:	60bb      	str	r3, [r7, #8]
	io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80138ea:	23d7      	movs	r3, #215	@ 0xd7
 80138ec:	733b      	strb	r3, [r7, #12]
	io_ctx.Init        = LSM6DSO_I2C_INIT;
 80138ee:	4b0c      	ldr	r3, [pc, #48]	@ (8013920 <MyInitLSM6DSO+0x40>)
 80138f0:	603b      	str	r3, [r7, #0]
	io_ctx.DeInit      = LSM6DSO_I2C_DEINIT;
 80138f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013924 <MyInitLSM6DSO+0x44>)
 80138f4:	607b      	str	r3, [r7, #4]
	io_ctx.ReadReg     = LSM6DSO_I2C_READ_REG;
 80138f6:	4b0c      	ldr	r3, [pc, #48]	@ (8013928 <MyInitLSM6DSO+0x48>)
 80138f8:	617b      	str	r3, [r7, #20]
	io_ctx.WriteReg    = LSM6DSO_I2C_WRITE_REG;
 80138fa:	4b0c      	ldr	r3, [pc, #48]	@ (801392c <MyInitLSM6DSO+0x4c>)
 80138fc:	613b      	str	r3, [r7, #16]
	io_ctx.GetTick     = LSM6DSO_GET_TICK;
 80138fe:	4b0c      	ldr	r3, [pc, #48]	@ (8013930 <MyInitLSM6DSO+0x50>)
 8013900:	61bb      	str	r3, [r7, #24]
	io_ctx.Delay       = LSM6DSO_DELAY;
 8013902:	4b0c      	ldr	r3, [pc, #48]	@ (8013934 <MyInitLSM6DSO+0x54>)
 8013904:	61fb      	str	r3, [r7, #28]

	LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx);
 8013906:	463b      	mov	r3, r7
 8013908:	4619      	mov	r1, r3
 801390a:	480b      	ldr	r0, [pc, #44]	@ (8013938 <MyInitLSM6DSO+0x58>)
 801390c:	f7ee f89e 	bl	8001a4c <LSM6DSO_RegisterBusIO>
	LSM6DSO_Init(&lsm6dso_obj_0);
 8013910:	4809      	ldr	r0, [pc, #36]	@ (8013938 <MyInitLSM6DSO+0x58>)
 8013912:	f7ee f905 	bl	8001b20 <LSM6DSO_Init>
}
 8013916:	bf00      	nop
 8013918:	3720      	adds	r7, #32
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	080011d5 	.word	0x080011d5
 8013924:	08001251 	.word	0x08001251
 8013928:	08001305 	.word	0x08001305
 801392c:	080012a1 	.word	0x080012a1
 8013930:	08001411 	.word	0x08001411
 8013934:	08013a49 	.word	0x08013a49
 8013938:	20007f48 	.word	0x20007f48

0801393c <MyEnableLSM6DSO>:

void MyEnableLSM6DSO(void){
 801393c:	b580      	push	{r7, lr}
 801393e:	af00      	add	r7, sp, #0
	LSM6DSO_ACC_Enable(&lsm6dso_obj_0);
 8013940:	4803      	ldr	r0, [pc, #12]	@ (8013950 <MyEnableLSM6DSO+0x14>)
 8013942:	f7ee f970 	bl	8001c26 <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&lsm6dso_obj_0);
 8013946:	4802      	ldr	r0, [pc, #8]	@ (8013950 <MyEnableLSM6DSO+0x14>)
 8013948:	f7ee fa2f 	bl	8001daa <LSM6DSO_GYRO_Enable>
}
 801394c:	bf00      	nop
 801394e:	bd80      	pop	{r7, pc}
 8013950:	20007f48 	.word	0x20007f48

08013954 <MyGettingLSM6DSO>:

void MyGettingLSM6DSO(LSM6DSO_Axes_t *Acc, LSM6DSO_Axes_t *Gyr){
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
	LSM6DSO_ACC_GetAxes(&lsm6dso_obj_0, Acc);
 801395e:	6879      	ldr	r1, [r7, #4]
 8013960:	480f      	ldr	r0, [pc, #60]	@ (80139a0 <MyGettingLSM6DSO+0x4c>)
 8013962:	f7ee f9cb 	bl	8001cfc <LSM6DSO_ACC_GetAxes>
	LSM6DSO_GYRO_GetAxes(&lsm6dso_obj_0, Gyr);
 8013966:	6839      	ldr	r1, [r7, #0]
 8013968:	480d      	ldr	r0, [pc, #52]	@ (80139a0 <MyGettingLSM6DSO+0x4c>)
 801396a:	f7ee fa95 	bl	8001e98 <LSM6DSO_GYRO_GetAxes>
	printf("______________________________________________________\n");
 801396e:	480d      	ldr	r0, [pc, #52]	@ (80139a4 <MyGettingLSM6DSO+0x50>)
 8013970:	f009 f97c 	bl	801cc6c <puts>
	printf("Gyr X : %ld | Gyr Y : %ld | Gyr Z : %ld\n", Gyr->x, Gyr->y, Gyr->z);
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	6819      	ldr	r1, [r3, #0]
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	685a      	ldr	r2, [r3, #4]
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	689b      	ldr	r3, [r3, #8]
 8013980:	4809      	ldr	r0, [pc, #36]	@ (80139a8 <MyGettingLSM6DSO+0x54>)
 8013982:	f009 f903 	bl	801cb8c <iprintf>
	printf("Acc X : %ld | Acc Y : %ld | Acc Z : %ld\n", Acc->x, Acc->y, Acc->z);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6819      	ldr	r1, [r3, #0]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	685a      	ldr	r2, [r3, #4]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	689b      	ldr	r3, [r3, #8]
 8013992:	4806      	ldr	r0, [pc, #24]	@ (80139ac <MyGettingLSM6DSO+0x58>)
 8013994:	f009 f8fa 	bl	801cb8c <iprintf>
}
 8013998:	bf00      	nop
 801399a:	3708      	adds	r7, #8
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	20007f48 	.word	0x20007f48
 80139a4:	0801df4c 	.word	0x0801df4c
 80139a8:	0801df84 	.word	0x0801df84
 80139ac:	0801dfb0 	.word	0x0801dfb0

080139b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80139b6:	2300      	movs	r3, #0
 80139b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80139ba:	4b0c      	ldr	r3, [pc, #48]	@ (80139ec <HAL_Init+0x3c>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	4a0b      	ldr	r2, [pc, #44]	@ (80139ec <HAL_Init+0x3c>)
 80139c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80139c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80139c6:	2003      	movs	r0, #3
 80139c8:	f000 f90f 	bl	8013bea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80139cc:	200f      	movs	r0, #15
 80139ce:	f7ed fb27 	bl	8001020 <HAL_InitTick>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d002      	beq.n	80139de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80139d8:	2301      	movs	r3, #1
 80139da:	71fb      	strb	r3, [r7, #7]
 80139dc:	e001      	b.n	80139e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80139de:	f7ed fa32 	bl	8000e46 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80139e2:	79fb      	ldrb	r3, [r7, #7]
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3708      	adds	r7, #8
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}
 80139ec:	58004000 	.word	0x58004000

080139f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80139f0:	b480      	push	{r7}
 80139f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80139f4:	4b06      	ldr	r3, [pc, #24]	@ (8013a10 <HAL_IncTick+0x20>)
 80139f6:	781b      	ldrb	r3, [r3, #0]
 80139f8:	461a      	mov	r2, r3
 80139fa:	4b06      	ldr	r3, [pc, #24]	@ (8013a14 <HAL_IncTick+0x24>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	4413      	add	r3, r2
 8013a00:	4a04      	ldr	r2, [pc, #16]	@ (8013a14 <HAL_IncTick+0x24>)
 8013a02:	6013      	str	r3, [r2, #0]
}
 8013a04:	bf00      	nop
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr
 8013a0e:	bf00      	nop
 8013a10:	20000074 	.word	0x20000074
 8013a14:	20007f80 	.word	0x20007f80

08013a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013a18:	b480      	push	{r7}
 8013a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8013a1c:	4b03      	ldr	r3, [pc, #12]	@ (8013a2c <HAL_GetTick+0x14>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr
 8013a2a:	bf00      	nop
 8013a2c:	20007f80 	.word	0x20007f80

08013a30 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8013a30:	b480      	push	{r7}
 8013a32:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8013a34:	4b03      	ldr	r3, [pc, #12]	@ (8013a44 <HAL_GetTickPrio+0x14>)
 8013a36:	681b      	ldr	r3, [r3, #0]
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop
 8013a44:	20000070 	.word	0x20000070

08013a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013a50:	f7ff ffe2 	bl	8013a18 <HAL_GetTick>
 8013a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a60:	d005      	beq.n	8013a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013a62:	4b0a      	ldr	r3, [pc, #40]	@ (8013a8c <HAL_Delay+0x44>)
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	461a      	mov	r2, r3
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	4413      	add	r3, r2
 8013a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8013a6e:	bf00      	nop
 8013a70:	f7ff ffd2 	bl	8013a18 <HAL_GetTick>
 8013a74:	4602      	mov	r2, r0
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	1ad3      	subs	r3, r2, r3
 8013a7a:	68fa      	ldr	r2, [r7, #12]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d8f7      	bhi.n	8013a70 <HAL_Delay+0x28>
  {
  }
}
 8013a80:	bf00      	nop
 8013a82:	bf00      	nop
 8013a84:	3710      	adds	r7, #16
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
 8013a8a:	bf00      	nop
 8013a8c:	20000074 	.word	0x20000074

08013a90 <__NVIC_SetPriorityGrouping>:
{
 8013a90:	b480      	push	{r7}
 8013a92:	b085      	sub	sp, #20
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f003 0307 	and.w	r3, r3, #7
 8013a9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8013ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8013aa2:	68db      	ldr	r3, [r3, #12]
 8013aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8013aac:	4013      	ands	r3, r2
 8013aae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8013abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8013ac2:	4a04      	ldr	r2, [pc, #16]	@ (8013ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	60d3      	str	r3, [r2, #12]
}
 8013ac8:	bf00      	nop
 8013aca:	3714      	adds	r7, #20
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr
 8013ad4:	e000ed00 	.word	0xe000ed00

08013ad8 <__NVIC_GetPriorityGrouping>:
{
 8013ad8:	b480      	push	{r7}
 8013ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013adc:	4b04      	ldr	r3, [pc, #16]	@ (8013af0 <__NVIC_GetPriorityGrouping+0x18>)
 8013ade:	68db      	ldr	r3, [r3, #12]
 8013ae0:	0a1b      	lsrs	r3, r3, #8
 8013ae2:	f003 0307 	and.w	r3, r3, #7
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr
 8013af0:	e000ed00 	.word	0xe000ed00

08013af4 <__NVIC_EnableIRQ>:
{
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	4603      	mov	r3, r0
 8013afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	db0b      	blt.n	8013b1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013b06:	79fb      	ldrb	r3, [r7, #7]
 8013b08:	f003 021f 	and.w	r2, r3, #31
 8013b0c:	4907      	ldr	r1, [pc, #28]	@ (8013b2c <__NVIC_EnableIRQ+0x38>)
 8013b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b12:	095b      	lsrs	r3, r3, #5
 8013b14:	2001      	movs	r0, #1
 8013b16:	fa00 f202 	lsl.w	r2, r0, r2
 8013b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013b1e:	bf00      	nop
 8013b20:	370c      	adds	r7, #12
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr
 8013b2a:	bf00      	nop
 8013b2c:	e000e100 	.word	0xe000e100

08013b30 <__NVIC_SetPriority>:
{
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	4603      	mov	r3, r0
 8013b38:	6039      	str	r1, [r7, #0]
 8013b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	db0a      	blt.n	8013b5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	b2da      	uxtb	r2, r3
 8013b48:	490c      	ldr	r1, [pc, #48]	@ (8013b7c <__NVIC_SetPriority+0x4c>)
 8013b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b4e:	0112      	lsls	r2, r2, #4
 8013b50:	b2d2      	uxtb	r2, r2
 8013b52:	440b      	add	r3, r1
 8013b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013b58:	e00a      	b.n	8013b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	b2da      	uxtb	r2, r3
 8013b5e:	4908      	ldr	r1, [pc, #32]	@ (8013b80 <__NVIC_SetPriority+0x50>)
 8013b60:	79fb      	ldrb	r3, [r7, #7]
 8013b62:	f003 030f 	and.w	r3, r3, #15
 8013b66:	3b04      	subs	r3, #4
 8013b68:	0112      	lsls	r2, r2, #4
 8013b6a:	b2d2      	uxtb	r2, r2
 8013b6c:	440b      	add	r3, r1
 8013b6e:	761a      	strb	r2, [r3, #24]
}
 8013b70:	bf00      	nop
 8013b72:	370c      	adds	r7, #12
 8013b74:	46bd      	mov	sp, r7
 8013b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7a:	4770      	bx	lr
 8013b7c:	e000e100 	.word	0xe000e100
 8013b80:	e000ed00 	.word	0xe000ed00

08013b84 <NVIC_EncodePriority>:
{
 8013b84:	b480      	push	{r7}
 8013b86:	b089      	sub	sp, #36	@ 0x24
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f003 0307 	and.w	r3, r3, #7
 8013b96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013b98:	69fb      	ldr	r3, [r7, #28]
 8013b9a:	f1c3 0307 	rsb	r3, r3, #7
 8013b9e:	2b04      	cmp	r3, #4
 8013ba0:	bf28      	it	cs
 8013ba2:	2304      	movcs	r3, #4
 8013ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	3304      	adds	r3, #4
 8013baa:	2b06      	cmp	r3, #6
 8013bac:	d902      	bls.n	8013bb4 <NVIC_EncodePriority+0x30>
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	3b03      	subs	r3, #3
 8013bb2:	e000      	b.n	8013bb6 <NVIC_EncodePriority+0x32>
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8013bc2:	43da      	mvns	r2, r3
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	401a      	ands	r2, r3
 8013bc8:	697b      	ldr	r3, [r7, #20]
 8013bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8013bd6:	43d9      	mvns	r1, r3
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013bdc:	4313      	orrs	r3, r2
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3724      	adds	r7, #36	@ 0x24
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr

08013bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013bea:	b580      	push	{r7, lr}
 8013bec:	b082      	sub	sp, #8
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff ff4c 	bl	8013a90 <__NVIC_SetPriorityGrouping>
}
 8013bf8:	bf00      	nop
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b086      	sub	sp, #24
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]
 8013c0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8013c0e:	f7ff ff63 	bl	8013ad8 <__NVIC_GetPriorityGrouping>
 8013c12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013c14:	687a      	ldr	r2, [r7, #4]
 8013c16:	68b9      	ldr	r1, [r7, #8]
 8013c18:	6978      	ldr	r0, [r7, #20]
 8013c1a:	f7ff ffb3 	bl	8013b84 <NVIC_EncodePriority>
 8013c1e:	4602      	mov	r2, r0
 8013c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c24:	4611      	mov	r1, r2
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7ff ff82 	bl	8013b30 <__NVIC_SetPriority>
}
 8013c2c:	bf00      	nop
 8013c2e:	3718      	adds	r7, #24
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}

08013c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b082      	sub	sp, #8
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8013c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ff ff56 	bl	8013af4 <__NVIC_EnableIRQ>
}
 8013c48:	bf00      	nop
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013c50:	b480      	push	{r7}
 8013c52:	b087      	sub	sp, #28
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013c5e:	e14c      	b.n	8013efa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	2101      	movs	r1, #1
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	fa01 f303 	lsl.w	r3, r1, r3
 8013c6c:	4013      	ands	r3, r2
 8013c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	f000 813e 	beq.w	8013ef4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	f003 0303 	and.w	r3, r3, #3
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	d005      	beq.n	8013c90 <HAL_GPIO_Init+0x40>
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	f003 0303 	and.w	r3, r3, #3
 8013c8c:	2b02      	cmp	r3, #2
 8013c8e:	d130      	bne.n	8013cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	689b      	ldr	r3, [r3, #8]
 8013c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	005b      	lsls	r3, r3, #1
 8013c9a:	2203      	movs	r2, #3
 8013c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8013ca0:	43db      	mvns	r3, r3
 8013ca2:	693a      	ldr	r2, [r7, #16]
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	68da      	ldr	r2, [r3, #12]
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	005b      	lsls	r3, r3, #1
 8013cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8013cb4:	693a      	ldr	r2, [r7, #16]
 8013cb6:	4313      	orrs	r3, r2
 8013cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	693a      	ldr	r2, [r7, #16]
 8013cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013cc6:	2201      	movs	r2, #1
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	fa02 f303 	lsl.w	r3, r2, r3
 8013cce:	43db      	mvns	r3, r3
 8013cd0:	693a      	ldr	r2, [r7, #16]
 8013cd2:	4013      	ands	r3, r2
 8013cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	685b      	ldr	r3, [r3, #4]
 8013cda:	091b      	lsrs	r3, r3, #4
 8013cdc:	f003 0201 	and.w	r2, r3, #1
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ce6:	693a      	ldr	r2, [r7, #16]
 8013ce8:	4313      	orrs	r3, r2
 8013cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	693a      	ldr	r2, [r7, #16]
 8013cf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	f003 0303 	and.w	r3, r3, #3
 8013cfa:	2b03      	cmp	r3, #3
 8013cfc:	d017      	beq.n	8013d2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	68db      	ldr	r3, [r3, #12]
 8013d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	005b      	lsls	r3, r3, #1
 8013d08:	2203      	movs	r2, #3
 8013d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8013d0e:	43db      	mvns	r3, r3
 8013d10:	693a      	ldr	r2, [r7, #16]
 8013d12:	4013      	ands	r3, r2
 8013d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	689a      	ldr	r2, [r3, #8]
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	005b      	lsls	r3, r3, #1
 8013d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8013d22:	693a      	ldr	r2, [r7, #16]
 8013d24:	4313      	orrs	r3, r2
 8013d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	693a      	ldr	r2, [r7, #16]
 8013d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	f003 0303 	and.w	r3, r3, #3
 8013d36:	2b02      	cmp	r3, #2
 8013d38:	d123      	bne.n	8013d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	08da      	lsrs	r2, r3, #3
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	3208      	adds	r2, #8
 8013d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	f003 0307 	and.w	r3, r3, #7
 8013d4e:	009b      	lsls	r3, r3, #2
 8013d50:	220f      	movs	r2, #15
 8013d52:	fa02 f303 	lsl.w	r3, r2, r3
 8013d56:	43db      	mvns	r3, r3
 8013d58:	693a      	ldr	r2, [r7, #16]
 8013d5a:	4013      	ands	r3, r2
 8013d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	691a      	ldr	r2, [r3, #16]
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	f003 0307 	and.w	r3, r3, #7
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8013d6e:	693a      	ldr	r2, [r7, #16]
 8013d70:	4313      	orrs	r3, r2
 8013d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	08da      	lsrs	r2, r3, #3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	3208      	adds	r2, #8
 8013d7c:	6939      	ldr	r1, [r7, #16]
 8013d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	005b      	lsls	r3, r3, #1
 8013d8c:	2203      	movs	r2, #3
 8013d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8013d92:	43db      	mvns	r3, r3
 8013d94:	693a      	ldr	r2, [r7, #16]
 8013d96:	4013      	ands	r3, r2
 8013d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	685b      	ldr	r3, [r3, #4]
 8013d9e:	f003 0203 	and.w	r2, r3, #3
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	fa02 f303 	lsl.w	r3, r2, r3
 8013daa:	693a      	ldr	r2, [r7, #16]
 8013dac:	4313      	orrs	r3, r2
 8013dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	693a      	ldr	r2, [r7, #16]
 8013db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	685b      	ldr	r3, [r3, #4]
 8013dba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	f000 8098 	beq.w	8013ef4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8013dc4:	4a54      	ldr	r2, [pc, #336]	@ (8013f18 <HAL_GPIO_Init+0x2c8>)
 8013dc6:	697b      	ldr	r3, [r7, #20]
 8013dc8:	089b      	lsrs	r3, r3, #2
 8013dca:	3302      	adds	r3, #2
 8013dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	f003 0303 	and.w	r3, r3, #3
 8013dd8:	009b      	lsls	r3, r3, #2
 8013dda:	220f      	movs	r2, #15
 8013ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8013de0:	43db      	mvns	r3, r3
 8013de2:	693a      	ldr	r2, [r7, #16]
 8013de4:	4013      	ands	r3, r2
 8013de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8013dee:	d019      	beq.n	8013e24 <HAL_GPIO_Init+0x1d4>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	4a4a      	ldr	r2, [pc, #296]	@ (8013f1c <HAL_GPIO_Init+0x2cc>)
 8013df4:	4293      	cmp	r3, r2
 8013df6:	d013      	beq.n	8013e20 <HAL_GPIO_Init+0x1d0>
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	4a49      	ldr	r2, [pc, #292]	@ (8013f20 <HAL_GPIO_Init+0x2d0>)
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d00d      	beq.n	8013e1c <HAL_GPIO_Init+0x1cc>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	4a48      	ldr	r2, [pc, #288]	@ (8013f24 <HAL_GPIO_Init+0x2d4>)
 8013e04:	4293      	cmp	r3, r2
 8013e06:	d007      	beq.n	8013e18 <HAL_GPIO_Init+0x1c8>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4a47      	ldr	r2, [pc, #284]	@ (8013f28 <HAL_GPIO_Init+0x2d8>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d101      	bne.n	8013e14 <HAL_GPIO_Init+0x1c4>
 8013e10:	2304      	movs	r3, #4
 8013e12:	e008      	b.n	8013e26 <HAL_GPIO_Init+0x1d6>
 8013e14:	2307      	movs	r3, #7
 8013e16:	e006      	b.n	8013e26 <HAL_GPIO_Init+0x1d6>
 8013e18:	2303      	movs	r3, #3
 8013e1a:	e004      	b.n	8013e26 <HAL_GPIO_Init+0x1d6>
 8013e1c:	2302      	movs	r3, #2
 8013e1e:	e002      	b.n	8013e26 <HAL_GPIO_Init+0x1d6>
 8013e20:	2301      	movs	r3, #1
 8013e22:	e000      	b.n	8013e26 <HAL_GPIO_Init+0x1d6>
 8013e24:	2300      	movs	r3, #0
 8013e26:	697a      	ldr	r2, [r7, #20]
 8013e28:	f002 0203 	and.w	r2, r2, #3
 8013e2c:	0092      	lsls	r2, r2, #2
 8013e2e:	4093      	lsls	r3, r2
 8013e30:	693a      	ldr	r2, [r7, #16]
 8013e32:	4313      	orrs	r3, r2
 8013e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8013e36:	4938      	ldr	r1, [pc, #224]	@ (8013f18 <HAL_GPIO_Init+0x2c8>)
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	089b      	lsrs	r3, r3, #2
 8013e3c:	3302      	adds	r3, #2
 8013e3e:	693a      	ldr	r2, [r7, #16]
 8013e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013e44:	4b39      	ldr	r3, [pc, #228]	@ (8013f2c <HAL_GPIO_Init+0x2dc>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	43db      	mvns	r3, r3
 8013e4e:	693a      	ldr	r2, [r7, #16]
 8013e50:	4013      	ands	r3, r2
 8013e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d003      	beq.n	8013e68 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8013e60:	693a      	ldr	r2, [r7, #16]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	4313      	orrs	r3, r2
 8013e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8013e68:	4a30      	ldr	r2, [pc, #192]	@ (8013f2c <HAL_GPIO_Init+0x2dc>)
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8013e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8013f2c <HAL_GPIO_Init+0x2dc>)
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	43db      	mvns	r3, r3
 8013e78:	693a      	ldr	r2, [r7, #16]
 8013e7a:	4013      	ands	r3, r2
 8013e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d003      	beq.n	8013e92 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8013e8a:	693a      	ldr	r2, [r7, #16]
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	4313      	orrs	r3, r2
 8013e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8013e92:	4a26      	ldr	r2, [pc, #152]	@ (8013f2c <HAL_GPIO_Init+0x2dc>)
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8013e98:	4b24      	ldr	r3, [pc, #144]	@ (8013f2c <HAL_GPIO_Init+0x2dc>)
 8013e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	43db      	mvns	r3, r3
 8013ea4:	693a      	ldr	r2, [r7, #16]
 8013ea6:	4013      	ands	r3, r2
 8013ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d003      	beq.n	8013ebe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8013eb6:	693a      	ldr	r2, [r7, #16]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	4313      	orrs	r3, r2
 8013ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8013ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8013f2c <HAL_GPIO_Init+0x2dc>)
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8013ec6:	4b19      	ldr	r3, [pc, #100]	@ (8013f2c <HAL_GPIO_Init+0x2dc>)
 8013ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	43db      	mvns	r3, r3
 8013ed2:	693a      	ldr	r2, [r7, #16]
 8013ed4:	4013      	ands	r3, r2
 8013ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d003      	beq.n	8013eec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8013ee4:	693a      	ldr	r2, [r7, #16]
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	4313      	orrs	r3, r2
 8013eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8013eec:	4a0f      	ldr	r2, [pc, #60]	@ (8013f2c <HAL_GPIO_Init+0x2dc>)
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	fa22 f303 	lsr.w	r3, r2, r3
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f47f aeab 	bne.w	8013c60 <HAL_GPIO_Init+0x10>
  }
}
 8013f0a:	bf00      	nop
 8013f0c:	bf00      	nop
 8013f0e:	371c      	adds	r7, #28
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr
 8013f18:	40010000 	.word	0x40010000
 8013f1c:	48000400 	.word	0x48000400
 8013f20:	48000800 	.word	0x48000800
 8013f24:	48000c00 	.word	0x48000c00
 8013f28:	48001000 	.word	0x48001000
 8013f2c:	58000800 	.word	0x58000800

08013f30 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b087      	sub	sp, #28
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8013f3e:	e0bb      	b.n	80140b8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8013f40:	2201      	movs	r2, #1
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	fa02 f303 	lsl.w	r3, r2, r3
 8013f48:	683a      	ldr	r2, [r7, #0]
 8013f4a:	4013      	ands	r3, r2
 8013f4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f000 80ae 	beq.w	80140b2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8013f56:	4a5f      	ldr	r2, [pc, #380]	@ (80140d4 <HAL_GPIO_DeInit+0x1a4>)
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	089b      	lsrs	r3, r3, #2
 8013f5c:	3302      	adds	r3, #2
 8013f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	f003 0303 	and.w	r3, r3, #3
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	220f      	movs	r2, #15
 8013f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8013f72:	68fa      	ldr	r2, [r7, #12]
 8013f74:	4013      	ands	r3, r2
 8013f76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8013f7e:	d019      	beq.n	8013fb4 <HAL_GPIO_DeInit+0x84>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	4a55      	ldr	r2, [pc, #340]	@ (80140d8 <HAL_GPIO_DeInit+0x1a8>)
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d013      	beq.n	8013fb0 <HAL_GPIO_DeInit+0x80>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4a54      	ldr	r2, [pc, #336]	@ (80140dc <HAL_GPIO_DeInit+0x1ac>)
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	d00d      	beq.n	8013fac <HAL_GPIO_DeInit+0x7c>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	4a53      	ldr	r2, [pc, #332]	@ (80140e0 <HAL_GPIO_DeInit+0x1b0>)
 8013f94:	4293      	cmp	r3, r2
 8013f96:	d007      	beq.n	8013fa8 <HAL_GPIO_DeInit+0x78>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	4a52      	ldr	r2, [pc, #328]	@ (80140e4 <HAL_GPIO_DeInit+0x1b4>)
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	d101      	bne.n	8013fa4 <HAL_GPIO_DeInit+0x74>
 8013fa0:	2304      	movs	r3, #4
 8013fa2:	e008      	b.n	8013fb6 <HAL_GPIO_DeInit+0x86>
 8013fa4:	2307      	movs	r3, #7
 8013fa6:	e006      	b.n	8013fb6 <HAL_GPIO_DeInit+0x86>
 8013fa8:	2303      	movs	r3, #3
 8013faa:	e004      	b.n	8013fb6 <HAL_GPIO_DeInit+0x86>
 8013fac:	2302      	movs	r3, #2
 8013fae:	e002      	b.n	8013fb6 <HAL_GPIO_DeInit+0x86>
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	e000      	b.n	8013fb6 <HAL_GPIO_DeInit+0x86>
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	697a      	ldr	r2, [r7, #20]
 8013fb8:	f002 0203 	and.w	r2, r2, #3
 8013fbc:	0092      	lsls	r2, r2, #2
 8013fbe:	4093      	lsls	r3, r2
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d136      	bne.n	8014034 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8013fc6:	4b48      	ldr	r3, [pc, #288]	@ (80140e8 <HAL_GPIO_DeInit+0x1b8>)
 8013fc8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	43db      	mvns	r3, r3
 8013fd0:	4945      	ldr	r1, [pc, #276]	@ (80140e8 <HAL_GPIO_DeInit+0x1b8>)
 8013fd2:	4013      	ands	r3, r2
 8013fd4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8013fd8:	4b43      	ldr	r3, [pc, #268]	@ (80140e8 <HAL_GPIO_DeInit+0x1b8>)
 8013fda:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	43db      	mvns	r3, r3
 8013fe2:	4941      	ldr	r1, [pc, #260]	@ (80140e8 <HAL_GPIO_DeInit+0x1b8>)
 8013fe4:	4013      	ands	r3, r2
 8013fe6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8013fea:	4b3f      	ldr	r3, [pc, #252]	@ (80140e8 <HAL_GPIO_DeInit+0x1b8>)
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	43db      	mvns	r3, r3
 8013ff2:	493d      	ldr	r1, [pc, #244]	@ (80140e8 <HAL_GPIO_DeInit+0x1b8>)
 8013ff4:	4013      	ands	r3, r2
 8013ff6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8013ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80140e8 <HAL_GPIO_DeInit+0x1b8>)
 8013ffa:	685a      	ldr	r2, [r3, #4]
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	43db      	mvns	r3, r3
 8014000:	4939      	ldr	r1, [pc, #228]	@ (80140e8 <HAL_GPIO_DeInit+0x1b8>)
 8014002:	4013      	ands	r3, r2
 8014004:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	f003 0303 	and.w	r3, r3, #3
 801400c:	009b      	lsls	r3, r3, #2
 801400e:	220f      	movs	r2, #15
 8014010:	fa02 f303 	lsl.w	r3, r2, r3
 8014014:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8014016:	4a2f      	ldr	r2, [pc, #188]	@ (80140d4 <HAL_GPIO_DeInit+0x1a4>)
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	089b      	lsrs	r3, r3, #2
 801401c:	3302      	adds	r3, #2
 801401e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	43da      	mvns	r2, r3
 8014026:	482b      	ldr	r0, [pc, #172]	@ (80140d4 <HAL_GPIO_DeInit+0x1a4>)
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	089b      	lsrs	r3, r3, #2
 801402c:	400a      	ands	r2, r1
 801402e:	3302      	adds	r3, #2
 8014030:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681a      	ldr	r2, [r3, #0]
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	005b      	lsls	r3, r3, #1
 801403c:	2103      	movs	r1, #3
 801403e:	fa01 f303 	lsl.w	r3, r1, r3
 8014042:	431a      	orrs	r2, r3
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	08da      	lsrs	r2, r3, #3
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	3208      	adds	r2, #8
 8014050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	f003 0307 	and.w	r3, r3, #7
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	220f      	movs	r2, #15
 801405e:	fa02 f303 	lsl.w	r3, r2, r3
 8014062:	43db      	mvns	r3, r3
 8014064:	697a      	ldr	r2, [r7, #20]
 8014066:	08d2      	lsrs	r2, r2, #3
 8014068:	4019      	ands	r1, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	3208      	adds	r2, #8
 801406e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	68da      	ldr	r2, [r3, #12]
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	005b      	lsls	r3, r3, #1
 801407a:	2103      	movs	r1, #3
 801407c:	fa01 f303 	lsl.w	r3, r1, r3
 8014080:	43db      	mvns	r3, r3
 8014082:	401a      	ands	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	685a      	ldr	r2, [r3, #4]
 801408c:	2101      	movs	r1, #1
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	fa01 f303 	lsl.w	r3, r1, r3
 8014094:	43db      	mvns	r3, r3
 8014096:	401a      	ands	r2, r3
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	689a      	ldr	r2, [r3, #8]
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	005b      	lsls	r3, r3, #1
 80140a4:	2103      	movs	r1, #3
 80140a6:	fa01 f303 	lsl.w	r3, r1, r3
 80140aa:	43db      	mvns	r3, r3
 80140ac:	401a      	ands	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	3301      	adds	r3, #1
 80140b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80140b8:	683a      	ldr	r2, [r7, #0]
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	fa22 f303 	lsr.w	r3, r2, r3
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f47f af3d 	bne.w	8013f40 <HAL_GPIO_DeInit+0x10>
  }
}
 80140c6:	bf00      	nop
 80140c8:	bf00      	nop
 80140ca:	371c      	adds	r7, #28
 80140cc:	46bd      	mov	sp, r7
 80140ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d2:	4770      	bx	lr
 80140d4:	40010000 	.word	0x40010000
 80140d8:	48000400 	.word	0x48000400
 80140dc:	48000800 	.word	0x48000800
 80140e0:	48000c00 	.word	0x48000c00
 80140e4:	48001000 	.word	0x48001000
 80140e8:	58000800 	.word	0x58000800

080140ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80140ec:	b480      	push	{r7}
 80140ee:	b083      	sub	sp, #12
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	460b      	mov	r3, r1
 80140f6:	807b      	strh	r3, [r7, #2]
 80140f8:	4613      	mov	r3, r2
 80140fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80140fc:	787b      	ldrb	r3, [r7, #1]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d003      	beq.n	801410a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8014102:	887a      	ldrh	r2, [r7, #2]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8014108:	e002      	b.n	8014110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801410a:	887a      	ldrh	r2, [r7, #2]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8014110:	bf00      	nop
 8014112:	370c      	adds	r7, #12
 8014114:	46bd      	mov	sp, r7
 8014116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411a:	4770      	bx	lr

0801411c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	4603      	mov	r3, r0
 8014124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8014126:	4b08      	ldr	r3, [pc, #32]	@ (8014148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8014128:	68da      	ldr	r2, [r3, #12]
 801412a:	88fb      	ldrh	r3, [r7, #6]
 801412c:	4013      	ands	r3, r2
 801412e:	2b00      	cmp	r3, #0
 8014130:	d006      	beq.n	8014140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8014132:	4a05      	ldr	r2, [pc, #20]	@ (8014148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8014134:	88fb      	ldrh	r3, [r7, #6]
 8014136:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8014138:	88fb      	ldrh	r3, [r7, #6]
 801413a:	4618      	mov	r0, r3
 801413c:	f000 f806 	bl	801414c <HAL_GPIO_EXTI_Callback>
  }
}
 8014140:	bf00      	nop
 8014142:	3708      	adds	r7, #8
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}
 8014148:	58000800 	.word	0x58000800

0801414c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801414c:	b480      	push	{r7}
 801414e:	b083      	sub	sp, #12
 8014150:	af00      	add	r7, sp, #0
 8014152:	4603      	mov	r3, r0
 8014154:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8014156:	bf00      	nop
 8014158:	370c      	adds	r7, #12
 801415a:	46bd      	mov	sp, r7
 801415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014160:	4770      	bx	lr

08014162 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b082      	sub	sp, #8
 8014166:	af00      	add	r7, sp, #0
 8014168:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d101      	bne.n	8014174 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8014170:	2301      	movs	r3, #1
 8014172:	e08d      	b.n	8014290 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801417a:	b2db      	uxtb	r3, r3
 801417c:	2b00      	cmp	r3, #0
 801417e:	d106      	bne.n	801418e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2200      	movs	r2, #0
 8014184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f000 f8b4 	bl	80142f6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2224      	movs	r2, #36	@ 0x24
 8014192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	681a      	ldr	r2, [r3, #0]
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	f022 0201 	bic.w	r2, r2, #1
 80141a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	685a      	ldr	r2, [r3, #4]
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80141b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	689a      	ldr	r2, [r3, #8]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80141c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d107      	bne.n	80141dc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	689a      	ldr	r2, [r3, #8]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80141d8:	609a      	str	r2, [r3, #8]
 80141da:	e006      	b.n	80141ea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	689a      	ldr	r2, [r3, #8]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80141e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	68db      	ldr	r3, [r3, #12]
 80141ee:	2b02      	cmp	r3, #2
 80141f0:	d108      	bne.n	8014204 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	685a      	ldr	r2, [r3, #4]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014200:	605a      	str	r2, [r3, #4]
 8014202:	e007      	b.n	8014214 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	685a      	ldr	r2, [r3, #4]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014212:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	687a      	ldr	r2, [r7, #4]
 801421c:	6812      	ldr	r2, [r2, #0]
 801421e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8014226:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	68da      	ldr	r2, [r3, #12]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8014236:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	691a      	ldr	r2, [r3, #16]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	695b      	ldr	r3, [r3, #20]
 8014240:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	699b      	ldr	r3, [r3, #24]
 8014248:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	430a      	orrs	r2, r1
 8014250:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	69d9      	ldr	r1, [r3, #28]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6a1a      	ldr	r2, [r3, #32]
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	430a      	orrs	r2, r1
 8014260:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f042 0201 	orr.w	r2, r2, #1
 8014270:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2200      	movs	r2, #0
 8014276:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2220      	movs	r2, #32
 801427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2200      	movs	r2, #0
 8014284:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2200      	movs	r2, #0
 801428a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801428e:	2300      	movs	r3, #0
}
 8014290:	4618      	mov	r0, r3
 8014292:	3708      	adds	r7, #8
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}

08014298 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d101      	bne.n	80142aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80142a6:	2301      	movs	r3, #1
 80142a8:	e021      	b.n	80142ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2224      	movs	r2, #36	@ 0x24
 80142ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	681a      	ldr	r2, [r3, #0]
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	f022 0201 	bic.w	r2, r2, #1
 80142c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f000 f821 	bl	801430a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2200      	movs	r2, #0
 80142cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	2200      	movs	r2, #0
 80142d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2200      	movs	r2, #0
 80142da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2200      	movs	r2, #0
 80142e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2200      	movs	r2, #0
 80142e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80142ec:	2300      	movs	r3, #0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3708      	adds	r7, #8
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}

080142f6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80142f6:	b480      	push	{r7}
 80142f8:	b083      	sub	sp, #12
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80142fe:	bf00      	nop
 8014300:	370c      	adds	r7, #12
 8014302:	46bd      	mov	sp, r7
 8014304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014308:	4770      	bx	lr

0801430a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 801430a:	b480      	push	{r7}
 801430c:	b083      	sub	sp, #12
 801430e:	af00      	add	r7, sp, #0
 8014310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8014312:	bf00      	nop
 8014314:	370c      	adds	r7, #12
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr
	...

08014320 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b088      	sub	sp, #32
 8014324:	af02      	add	r7, sp, #8
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	607a      	str	r2, [r7, #4]
 801432a:	461a      	mov	r2, r3
 801432c:	460b      	mov	r3, r1
 801432e:	817b      	strh	r3, [r7, #10]
 8014330:	4613      	mov	r3, r2
 8014332:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801433a:	b2db      	uxtb	r3, r3
 801433c:	2b20      	cmp	r3, #32
 801433e:	f040 80fd 	bne.w	801453c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014348:	2b01      	cmp	r3, #1
 801434a:	d101      	bne.n	8014350 <HAL_I2C_Master_Transmit+0x30>
 801434c:	2302      	movs	r3, #2
 801434e:	e0f6      	b.n	801453e <HAL_I2C_Master_Transmit+0x21e>
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2201      	movs	r2, #1
 8014354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014358:	f7ff fb5e 	bl	8013a18 <HAL_GetTick>
 801435c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	9300      	str	r3, [sp, #0]
 8014362:	2319      	movs	r3, #25
 8014364:	2201      	movs	r2, #1
 8014366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801436a:	68f8      	ldr	r0, [r7, #12]
 801436c:	f000 fcfa 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 8014370:	4603      	mov	r3, r0
 8014372:	2b00      	cmp	r3, #0
 8014374:	d001      	beq.n	801437a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8014376:	2301      	movs	r3, #1
 8014378:	e0e1      	b.n	801453e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	2221      	movs	r2, #33	@ 0x21
 801437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	2210      	movs	r2, #16
 8014386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	2200      	movs	r2, #0
 801438e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	893a      	ldrh	r2, [r7, #8]
 801439a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2200      	movs	r2, #0
 80143a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	2bff      	cmp	r3, #255	@ 0xff
 80143aa:	d906      	bls.n	80143ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	22ff      	movs	r2, #255	@ 0xff
 80143b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80143b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80143b6:	617b      	str	r3, [r7, #20]
 80143b8:	e007      	b.n	80143ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80143be:	b29a      	uxth	r2, r3
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80143c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80143c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d024      	beq.n	801441c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143d6:	781a      	ldrb	r2, [r3, #0]
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143e2:	1c5a      	adds	r2, r3, #1
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	3b01      	subs	r3, #1
 80143f0:	b29a      	uxth	r2, r3
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80143fa:	3b01      	subs	r3, #1
 80143fc:	b29a      	uxth	r2, r3
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014406:	b2db      	uxtb	r3, r3
 8014408:	3301      	adds	r3, #1
 801440a:	b2da      	uxtb	r2, r3
 801440c:	8979      	ldrh	r1, [r7, #10]
 801440e:	4b4e      	ldr	r3, [pc, #312]	@ (8014548 <HAL_I2C_Master_Transmit+0x228>)
 8014410:	9300      	str	r3, [sp, #0]
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	68f8      	ldr	r0, [r7, #12]
 8014416:	f000 fef5 	bl	8015204 <I2C_TransferConfig>
 801441a:	e066      	b.n	80144ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014420:	b2da      	uxtb	r2, r3
 8014422:	8979      	ldrh	r1, [r7, #10]
 8014424:	4b48      	ldr	r3, [pc, #288]	@ (8014548 <HAL_I2C_Master_Transmit+0x228>)
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	68f8      	ldr	r0, [r7, #12]
 801442c:	f000 feea 	bl	8015204 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8014430:	e05b      	b.n	80144ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014432:	693a      	ldr	r2, [r7, #16]
 8014434:	6a39      	ldr	r1, [r7, #32]
 8014436:	68f8      	ldr	r0, [r7, #12]
 8014438:	f000 fced 	bl	8014e16 <I2C_WaitOnTXISFlagUntilTimeout>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d001      	beq.n	8014446 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8014442:	2301      	movs	r3, #1
 8014444:	e07b      	b.n	801453e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801444a:	781a      	ldrb	r2, [r3, #0]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014456:	1c5a      	adds	r2, r3, #1
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014460:	b29b      	uxth	r3, r3
 8014462:	3b01      	subs	r3, #1
 8014464:	b29a      	uxth	r2, r3
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801446e:	3b01      	subs	r3, #1
 8014470:	b29a      	uxth	r2, r3
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801447a:	b29b      	uxth	r3, r3
 801447c:	2b00      	cmp	r3, #0
 801447e:	d034      	beq.n	80144ea <HAL_I2C_Master_Transmit+0x1ca>
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014484:	2b00      	cmp	r3, #0
 8014486:	d130      	bne.n	80144ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	9300      	str	r3, [sp, #0]
 801448c:	6a3b      	ldr	r3, [r7, #32]
 801448e:	2200      	movs	r2, #0
 8014490:	2180      	movs	r1, #128	@ 0x80
 8014492:	68f8      	ldr	r0, [r7, #12]
 8014494:	f000 fc66 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 8014498:	4603      	mov	r3, r0
 801449a:	2b00      	cmp	r3, #0
 801449c:	d001      	beq.n	80144a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 801449e:	2301      	movs	r3, #1
 80144a0:	e04d      	b.n	801453e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	2bff      	cmp	r3, #255	@ 0xff
 80144aa:	d90e      	bls.n	80144ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	22ff      	movs	r2, #255	@ 0xff
 80144b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144b6:	b2da      	uxtb	r2, r3
 80144b8:	8979      	ldrh	r1, [r7, #10]
 80144ba:	2300      	movs	r3, #0
 80144bc:	9300      	str	r3, [sp, #0]
 80144be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80144c2:	68f8      	ldr	r0, [r7, #12]
 80144c4:	f000 fe9e 	bl	8015204 <I2C_TransferConfig>
 80144c8:	e00f      	b.n	80144ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144d8:	b2da      	uxtb	r2, r3
 80144da:	8979      	ldrh	r1, [r7, #10]
 80144dc:	2300      	movs	r3, #0
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80144e4:	68f8      	ldr	r0, [r7, #12]
 80144e6:	f000 fe8d 	bl	8015204 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d19e      	bne.n	8014432 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80144f4:	693a      	ldr	r2, [r7, #16]
 80144f6:	6a39      	ldr	r1, [r7, #32]
 80144f8:	68f8      	ldr	r0, [r7, #12]
 80144fa:	f000 fcd3 	bl	8014ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b00      	cmp	r3, #0
 8014502:	d001      	beq.n	8014508 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8014504:	2301      	movs	r3, #1
 8014506:	e01a      	b.n	801453e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2220      	movs	r2, #32
 801450e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	6859      	ldr	r1, [r3, #4]
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	681a      	ldr	r2, [r3, #0]
 801451a:	4b0c      	ldr	r3, [pc, #48]	@ (801454c <HAL_I2C_Master_Transmit+0x22c>)
 801451c:	400b      	ands	r3, r1
 801451e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	2220      	movs	r2, #32
 8014524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2200      	movs	r2, #0
 801452c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	2200      	movs	r2, #0
 8014534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	e000      	b.n	801453e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 801453c:	2302      	movs	r3, #2
  }
}
 801453e:	4618      	mov	r0, r3
 8014540:	3718      	adds	r7, #24
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	80002000 	.word	0x80002000
 801454c:	fe00e800 	.word	0xfe00e800

08014550 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b088      	sub	sp, #32
 8014554:	af02      	add	r7, sp, #8
 8014556:	60f8      	str	r0, [r7, #12]
 8014558:	607a      	str	r2, [r7, #4]
 801455a:	461a      	mov	r2, r3
 801455c:	460b      	mov	r3, r1
 801455e:	817b      	strh	r3, [r7, #10]
 8014560:	4613      	mov	r3, r2
 8014562:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801456a:	b2db      	uxtb	r3, r3
 801456c:	2b20      	cmp	r3, #32
 801456e:	f040 80db 	bne.w	8014728 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014578:	2b01      	cmp	r3, #1
 801457a:	d101      	bne.n	8014580 <HAL_I2C_Master_Receive+0x30>
 801457c:	2302      	movs	r3, #2
 801457e:	e0d4      	b.n	801472a <HAL_I2C_Master_Receive+0x1da>
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2201      	movs	r2, #1
 8014584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014588:	f7ff fa46 	bl	8013a18 <HAL_GetTick>
 801458c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	2319      	movs	r3, #25
 8014594:	2201      	movs	r2, #1
 8014596:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801459a:	68f8      	ldr	r0, [r7, #12]
 801459c:	f000 fbe2 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 80145a0:	4603      	mov	r3, r0
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d001      	beq.n	80145aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80145a6:	2301      	movs	r3, #1
 80145a8:	e0bf      	b.n	801472a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2222      	movs	r2, #34	@ 0x22
 80145ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	2210      	movs	r2, #16
 80145b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	2200      	movs	r2, #0
 80145be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	893a      	ldrh	r2, [r7, #8]
 80145ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	2200      	movs	r2, #0
 80145d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	2bff      	cmp	r3, #255	@ 0xff
 80145da:	d90e      	bls.n	80145fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	22ff      	movs	r2, #255	@ 0xff
 80145e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80145e6:	b2da      	uxtb	r2, r3
 80145e8:	8979      	ldrh	r1, [r7, #10]
 80145ea:	4b52      	ldr	r3, [pc, #328]	@ (8014734 <HAL_I2C_Master_Receive+0x1e4>)
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80145f2:	68f8      	ldr	r0, [r7, #12]
 80145f4:	f000 fe06 	bl	8015204 <I2C_TransferConfig>
 80145f8:	e06d      	b.n	80146d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80145fe:	b29a      	uxth	r2, r3
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014608:	b2da      	uxtb	r2, r3
 801460a:	8979      	ldrh	r1, [r7, #10]
 801460c:	4b49      	ldr	r3, [pc, #292]	@ (8014734 <HAL_I2C_Master_Receive+0x1e4>)
 801460e:	9300      	str	r3, [sp, #0]
 8014610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014614:	68f8      	ldr	r0, [r7, #12]
 8014616:	f000 fdf5 	bl	8015204 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801461a:	e05c      	b.n	80146d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801461c:	697a      	ldr	r2, [r7, #20]
 801461e:	6a39      	ldr	r1, [r7, #32]
 8014620:	68f8      	ldr	r0, [r7, #12]
 8014622:	f000 fc83 	bl	8014f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d001      	beq.n	8014630 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 801462c:	2301      	movs	r3, #1
 801462e:	e07c      	b.n	801472a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801463a:	b2d2      	uxtb	r2, r2
 801463c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014642:	1c5a      	adds	r2, r3, #1
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801464c:	3b01      	subs	r3, #1
 801464e:	b29a      	uxth	r2, r3
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014658:	b29b      	uxth	r3, r3
 801465a:	3b01      	subs	r3, #1
 801465c:	b29a      	uxth	r2, r3
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014666:	b29b      	uxth	r3, r3
 8014668:	2b00      	cmp	r3, #0
 801466a:	d034      	beq.n	80146d6 <HAL_I2C_Master_Receive+0x186>
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014670:	2b00      	cmp	r3, #0
 8014672:	d130      	bne.n	80146d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	9300      	str	r3, [sp, #0]
 8014678:	6a3b      	ldr	r3, [r7, #32]
 801467a:	2200      	movs	r2, #0
 801467c:	2180      	movs	r1, #128	@ 0x80
 801467e:	68f8      	ldr	r0, [r7, #12]
 8014680:	f000 fb70 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d001      	beq.n	801468e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801468a:	2301      	movs	r3, #1
 801468c:	e04d      	b.n	801472a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014692:	b29b      	uxth	r3, r3
 8014694:	2bff      	cmp	r3, #255	@ 0xff
 8014696:	d90e      	bls.n	80146b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	22ff      	movs	r2, #255	@ 0xff
 801469c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146a2:	b2da      	uxtb	r2, r3
 80146a4:	8979      	ldrh	r1, [r7, #10]
 80146a6:	2300      	movs	r3, #0
 80146a8:	9300      	str	r3, [sp, #0]
 80146aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f000 fda8 	bl	8015204 <I2C_TransferConfig>
 80146b4:	e00f      	b.n	80146d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146ba:	b29a      	uxth	r2, r3
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146c4:	b2da      	uxtb	r2, r3
 80146c6:	8979      	ldrh	r1, [r7, #10]
 80146c8:	2300      	movs	r3, #0
 80146ca:	9300      	str	r3, [sp, #0]
 80146cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	f000 fd97 	bl	8015204 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146da:	b29b      	uxth	r3, r3
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d19d      	bne.n	801461c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80146e0:	697a      	ldr	r2, [r7, #20]
 80146e2:	6a39      	ldr	r1, [r7, #32]
 80146e4:	68f8      	ldr	r0, [r7, #12]
 80146e6:	f000 fbdd 	bl	8014ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80146ea:	4603      	mov	r3, r0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d001      	beq.n	80146f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80146f0:	2301      	movs	r3, #1
 80146f2:	e01a      	b.n	801472a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	2220      	movs	r2, #32
 80146fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	6859      	ldr	r1, [r3, #4]
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	4b0c      	ldr	r3, [pc, #48]	@ (8014738 <HAL_I2C_Master_Receive+0x1e8>)
 8014708:	400b      	ands	r3, r1
 801470a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	2220      	movs	r2, #32
 8014710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	2200      	movs	r2, #0
 8014718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	2200      	movs	r2, #0
 8014720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014724:	2300      	movs	r3, #0
 8014726:	e000      	b.n	801472a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8014728:	2302      	movs	r3, #2
  }
}
 801472a:	4618      	mov	r0, r3
 801472c:	3718      	adds	r7, #24
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	80002400 	.word	0x80002400
 8014738:	fe00e800 	.word	0xfe00e800

0801473c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b088      	sub	sp, #32
 8014740:	af02      	add	r7, sp, #8
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	4608      	mov	r0, r1
 8014746:	4611      	mov	r1, r2
 8014748:	461a      	mov	r2, r3
 801474a:	4603      	mov	r3, r0
 801474c:	817b      	strh	r3, [r7, #10]
 801474e:	460b      	mov	r3, r1
 8014750:	813b      	strh	r3, [r7, #8]
 8014752:	4613      	mov	r3, r2
 8014754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801475c:	b2db      	uxtb	r3, r3
 801475e:	2b20      	cmp	r3, #32
 8014760:	f040 80f9 	bne.w	8014956 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8014764:	6a3b      	ldr	r3, [r7, #32]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d002      	beq.n	8014770 <HAL_I2C_Mem_Write+0x34>
 801476a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801476c:	2b00      	cmp	r3, #0
 801476e:	d105      	bne.n	801477c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014776:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8014778:	2301      	movs	r3, #1
 801477a:	e0ed      	b.n	8014958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014782:	2b01      	cmp	r3, #1
 8014784:	d101      	bne.n	801478a <HAL_I2C_Mem_Write+0x4e>
 8014786:	2302      	movs	r3, #2
 8014788:	e0e6      	b.n	8014958 <HAL_I2C_Mem_Write+0x21c>
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2201      	movs	r2, #1
 801478e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014792:	f7ff f941 	bl	8013a18 <HAL_GetTick>
 8014796:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	2319      	movs	r3, #25
 801479e:	2201      	movs	r2, #1
 80147a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80147a4:	68f8      	ldr	r0, [r7, #12]
 80147a6:	f000 fadd 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 80147aa:	4603      	mov	r3, r0
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d001      	beq.n	80147b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80147b0:	2301      	movs	r3, #1
 80147b2:	e0d1      	b.n	8014958 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	2221      	movs	r2, #33	@ 0x21
 80147b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2240      	movs	r2, #64	@ 0x40
 80147c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2200      	movs	r2, #0
 80147c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	6a3a      	ldr	r2, [r7, #32]
 80147ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80147d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2200      	movs	r2, #0
 80147da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80147dc:	88f8      	ldrh	r0, [r7, #6]
 80147de:	893a      	ldrh	r2, [r7, #8]
 80147e0:	8979      	ldrh	r1, [r7, #10]
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	9301      	str	r3, [sp, #4]
 80147e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147e8:	9300      	str	r3, [sp, #0]
 80147ea:	4603      	mov	r3, r0
 80147ec:	68f8      	ldr	r0, [r7, #12]
 80147ee:	f000 f9ed 	bl	8014bcc <I2C_RequestMemoryWrite>
 80147f2:	4603      	mov	r3, r0
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d005      	beq.n	8014804 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2200      	movs	r2, #0
 80147fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8014800:	2301      	movs	r3, #1
 8014802:	e0a9      	b.n	8014958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014808:	b29b      	uxth	r3, r3
 801480a:	2bff      	cmp	r3, #255	@ 0xff
 801480c:	d90e      	bls.n	801482c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	22ff      	movs	r2, #255	@ 0xff
 8014812:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014818:	b2da      	uxtb	r2, r3
 801481a:	8979      	ldrh	r1, [r7, #10]
 801481c:	2300      	movs	r3, #0
 801481e:	9300      	str	r3, [sp, #0]
 8014820:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f000 fced 	bl	8015204 <I2C_TransferConfig>
 801482a:	e00f      	b.n	801484c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014830:	b29a      	uxth	r2, r3
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801483a:	b2da      	uxtb	r2, r3
 801483c:	8979      	ldrh	r1, [r7, #10]
 801483e:	2300      	movs	r3, #0
 8014840:	9300      	str	r3, [sp, #0]
 8014842:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014846:	68f8      	ldr	r0, [r7, #12]
 8014848:	f000 fcdc 	bl	8015204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801484c:	697a      	ldr	r2, [r7, #20]
 801484e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014850:	68f8      	ldr	r0, [r7, #12]
 8014852:	f000 fae0 	bl	8014e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8014856:	4603      	mov	r3, r0
 8014858:	2b00      	cmp	r3, #0
 801485a:	d001      	beq.n	8014860 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801485c:	2301      	movs	r3, #1
 801485e:	e07b      	b.n	8014958 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014864:	781a      	ldrb	r2, [r3, #0]
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014870:	1c5a      	adds	r2, r3, #1
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801487a:	b29b      	uxth	r3, r3
 801487c:	3b01      	subs	r3, #1
 801487e:	b29a      	uxth	r2, r3
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014888:	3b01      	subs	r3, #1
 801488a:	b29a      	uxth	r2, r3
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014894:	b29b      	uxth	r3, r3
 8014896:	2b00      	cmp	r3, #0
 8014898:	d034      	beq.n	8014904 <HAL_I2C_Mem_Write+0x1c8>
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d130      	bne.n	8014904 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	9300      	str	r3, [sp, #0]
 80148a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148a8:	2200      	movs	r2, #0
 80148aa:	2180      	movs	r1, #128	@ 0x80
 80148ac:	68f8      	ldr	r0, [r7, #12]
 80148ae:	f000 fa59 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 80148b2:	4603      	mov	r3, r0
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d001      	beq.n	80148bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80148b8:	2301      	movs	r3, #1
 80148ba:	e04d      	b.n	8014958 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148c0:	b29b      	uxth	r3, r3
 80148c2:	2bff      	cmp	r3, #255	@ 0xff
 80148c4:	d90e      	bls.n	80148e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	22ff      	movs	r2, #255	@ 0xff
 80148ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148d0:	b2da      	uxtb	r2, r3
 80148d2:	8979      	ldrh	r1, [r7, #10]
 80148d4:	2300      	movs	r3, #0
 80148d6:	9300      	str	r3, [sp, #0]
 80148d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f000 fc91 	bl	8015204 <I2C_TransferConfig>
 80148e2:	e00f      	b.n	8014904 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148f2:	b2da      	uxtb	r2, r3
 80148f4:	8979      	ldrh	r1, [r7, #10]
 80148f6:	2300      	movs	r3, #0
 80148f8:	9300      	str	r3, [sp, #0]
 80148fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80148fe:	68f8      	ldr	r0, [r7, #12]
 8014900:	f000 fc80 	bl	8015204 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014908:	b29b      	uxth	r3, r3
 801490a:	2b00      	cmp	r3, #0
 801490c:	d19e      	bne.n	801484c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801490e:	697a      	ldr	r2, [r7, #20]
 8014910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014912:	68f8      	ldr	r0, [r7, #12]
 8014914:	f000 fac6 	bl	8014ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d001      	beq.n	8014922 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801491e:	2301      	movs	r3, #1
 8014920:	e01a      	b.n	8014958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	2220      	movs	r2, #32
 8014928:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	6859      	ldr	r1, [r3, #4]
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	681a      	ldr	r2, [r3, #0]
 8014934:	4b0a      	ldr	r3, [pc, #40]	@ (8014960 <HAL_I2C_Mem_Write+0x224>)
 8014936:	400b      	ands	r3, r1
 8014938:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2220      	movs	r2, #32
 801493e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2200      	movs	r2, #0
 8014946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	2200      	movs	r2, #0
 801494e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014952:	2300      	movs	r3, #0
 8014954:	e000      	b.n	8014958 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8014956:	2302      	movs	r3, #2
  }
}
 8014958:	4618      	mov	r0, r3
 801495a:	3718      	adds	r7, #24
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	fe00e800 	.word	0xfe00e800

08014964 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b088      	sub	sp, #32
 8014968:	af02      	add	r7, sp, #8
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	4608      	mov	r0, r1
 801496e:	4611      	mov	r1, r2
 8014970:	461a      	mov	r2, r3
 8014972:	4603      	mov	r3, r0
 8014974:	817b      	strh	r3, [r7, #10]
 8014976:	460b      	mov	r3, r1
 8014978:	813b      	strh	r3, [r7, #8]
 801497a:	4613      	mov	r3, r2
 801497c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014984:	b2db      	uxtb	r3, r3
 8014986:	2b20      	cmp	r3, #32
 8014988:	f040 80fd 	bne.w	8014b86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801498c:	6a3b      	ldr	r3, [r7, #32]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d002      	beq.n	8014998 <HAL_I2C_Mem_Read+0x34>
 8014992:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014994:	2b00      	cmp	r3, #0
 8014996:	d105      	bne.n	80149a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801499e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80149a0:	2301      	movs	r3, #1
 80149a2:	e0f1      	b.n	8014b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80149aa:	2b01      	cmp	r3, #1
 80149ac:	d101      	bne.n	80149b2 <HAL_I2C_Mem_Read+0x4e>
 80149ae:	2302      	movs	r3, #2
 80149b0:	e0ea      	b.n	8014b88 <HAL_I2C_Mem_Read+0x224>
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2201      	movs	r2, #1
 80149b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80149ba:	f7ff f82d 	bl	8013a18 <HAL_GetTick>
 80149be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	2319      	movs	r3, #25
 80149c6:	2201      	movs	r2, #1
 80149c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80149cc:	68f8      	ldr	r0, [r7, #12]
 80149ce:	f000 f9c9 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d001      	beq.n	80149dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80149d8:	2301      	movs	r3, #1
 80149da:	e0d5      	b.n	8014b88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	2222      	movs	r2, #34	@ 0x22
 80149e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	2240      	movs	r2, #64	@ 0x40
 80149e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2200      	movs	r2, #0
 80149f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	6a3a      	ldr	r2, [r7, #32]
 80149f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80149fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8014a04:	88f8      	ldrh	r0, [r7, #6]
 8014a06:	893a      	ldrh	r2, [r7, #8]
 8014a08:	8979      	ldrh	r1, [r7, #10]
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	9301      	str	r3, [sp, #4]
 8014a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a10:	9300      	str	r3, [sp, #0]
 8014a12:	4603      	mov	r3, r0
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f000 f92d 	bl	8014c74 <I2C_RequestMemoryRead>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d005      	beq.n	8014a2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2200      	movs	r2, #0
 8014a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8014a28:	2301      	movs	r3, #1
 8014a2a:	e0ad      	b.n	8014b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	2bff      	cmp	r3, #255	@ 0xff
 8014a34:	d90e      	bls.n	8014a54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	22ff      	movs	r2, #255	@ 0xff
 8014a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014a40:	b2da      	uxtb	r2, r3
 8014a42:	8979      	ldrh	r1, [r7, #10]
 8014a44:	4b52      	ldr	r3, [pc, #328]	@ (8014b90 <HAL_I2C_Mem_Read+0x22c>)
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014a4c:	68f8      	ldr	r0, [r7, #12]
 8014a4e:	f000 fbd9 	bl	8015204 <I2C_TransferConfig>
 8014a52:	e00f      	b.n	8014a74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a58:	b29a      	uxth	r2, r3
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014a62:	b2da      	uxtb	r2, r3
 8014a64:	8979      	ldrh	r1, [r7, #10]
 8014a66:	4b4a      	ldr	r3, [pc, #296]	@ (8014b90 <HAL_I2C_Mem_Read+0x22c>)
 8014a68:	9300      	str	r3, [sp, #0]
 8014a6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	f000 fbc8 	bl	8015204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	9300      	str	r3, [sp, #0]
 8014a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	2104      	movs	r1, #4
 8014a7e:	68f8      	ldr	r0, [r7, #12]
 8014a80:	f000 f970 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 8014a84:	4603      	mov	r3, r0
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d001      	beq.n	8014a8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	e07c      	b.n	8014b88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a98:	b2d2      	uxtb	r2, r2
 8014a9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aa0:	1c5a      	adds	r2, r3, #1
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014aaa:	3b01      	subs	r3, #1
 8014aac:	b29a      	uxth	r2, r3
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	3b01      	subs	r3, #1
 8014aba:	b29a      	uxth	r2, r3
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ac4:	b29b      	uxth	r3, r3
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d034      	beq.n	8014b34 <HAL_I2C_Mem_Read+0x1d0>
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d130      	bne.n	8014b34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	9300      	str	r3, [sp, #0]
 8014ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ad8:	2200      	movs	r2, #0
 8014ada:	2180      	movs	r1, #128	@ 0x80
 8014adc:	68f8      	ldr	r0, [r7, #12]
 8014ade:	f000 f941 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d001      	beq.n	8014aec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e04d      	b.n	8014b88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	2bff      	cmp	r3, #255	@ 0xff
 8014af4:	d90e      	bls.n	8014b14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	22ff      	movs	r2, #255	@ 0xff
 8014afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b00:	b2da      	uxtb	r2, r3
 8014b02:	8979      	ldrh	r1, [r7, #10]
 8014b04:	2300      	movs	r3, #0
 8014b06:	9300      	str	r3, [sp, #0]
 8014b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014b0c:	68f8      	ldr	r0, [r7, #12]
 8014b0e:	f000 fb79 	bl	8015204 <I2C_TransferConfig>
 8014b12:	e00f      	b.n	8014b34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b18:	b29a      	uxth	r2, r3
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b22:	b2da      	uxtb	r2, r3
 8014b24:	8979      	ldrh	r1, [r7, #10]
 8014b26:	2300      	movs	r3, #0
 8014b28:	9300      	str	r3, [sp, #0]
 8014b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014b2e:	68f8      	ldr	r0, [r7, #12]
 8014b30:	f000 fb68 	bl	8015204 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b38:	b29b      	uxth	r3, r3
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d19a      	bne.n	8014a74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014b3e:	697a      	ldr	r2, [r7, #20]
 8014b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b42:	68f8      	ldr	r0, [r7, #12]
 8014b44:	f000 f9ae 	bl	8014ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d001      	beq.n	8014b52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8014b4e:	2301      	movs	r3, #1
 8014b50:	e01a      	b.n	8014b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	2220      	movs	r2, #32
 8014b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	6859      	ldr	r1, [r3, #4]
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	4b0b      	ldr	r3, [pc, #44]	@ (8014b94 <HAL_I2C_Mem_Read+0x230>)
 8014b66:	400b      	ands	r3, r1
 8014b68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	2220      	movs	r2, #32
 8014b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2200      	movs	r2, #0
 8014b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014b82:	2300      	movs	r3, #0
 8014b84:	e000      	b.n	8014b88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8014b86:	2302      	movs	r3, #2
  }
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	80002400 	.word	0x80002400
 8014b94:	fe00e800 	.word	0xfe00e800

08014b98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8014b98:	b480      	push	{r7}
 8014b9a:	b083      	sub	sp, #12
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014ba6:	b2db      	uxtb	r3, r3
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	370c      	adds	r7, #12
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr

08014bb4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	370c      	adds	r7, #12
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bca:	4770      	bx	lr

08014bcc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b086      	sub	sp, #24
 8014bd0:	af02      	add	r7, sp, #8
 8014bd2:	60f8      	str	r0, [r7, #12]
 8014bd4:	4608      	mov	r0, r1
 8014bd6:	4611      	mov	r1, r2
 8014bd8:	461a      	mov	r2, r3
 8014bda:	4603      	mov	r3, r0
 8014bdc:	817b      	strh	r3, [r7, #10]
 8014bde:	460b      	mov	r3, r1
 8014be0:	813b      	strh	r3, [r7, #8]
 8014be2:	4613      	mov	r3, r2
 8014be4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8014be6:	88fb      	ldrh	r3, [r7, #6]
 8014be8:	b2da      	uxtb	r2, r3
 8014bea:	8979      	ldrh	r1, [r7, #10]
 8014bec:	4b20      	ldr	r3, [pc, #128]	@ (8014c70 <I2C_RequestMemoryWrite+0xa4>)
 8014bee:	9300      	str	r3, [sp, #0]
 8014bf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014bf4:	68f8      	ldr	r0, [r7, #12]
 8014bf6:	f000 fb05 	bl	8015204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014bfa:	69fa      	ldr	r2, [r7, #28]
 8014bfc:	69b9      	ldr	r1, [r7, #24]
 8014bfe:	68f8      	ldr	r0, [r7, #12]
 8014c00:	f000 f909 	bl	8014e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8014c04:	4603      	mov	r3, r0
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d001      	beq.n	8014c0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	e02c      	b.n	8014c68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014c0e:	88fb      	ldrh	r3, [r7, #6]
 8014c10:	2b01      	cmp	r3, #1
 8014c12:	d105      	bne.n	8014c20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014c14:	893b      	ldrh	r3, [r7, #8]
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8014c1e:	e015      	b.n	8014c4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8014c20:	893b      	ldrh	r3, [r7, #8]
 8014c22:	0a1b      	lsrs	r3, r3, #8
 8014c24:	b29b      	uxth	r3, r3
 8014c26:	b2da      	uxtb	r2, r3
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014c2e:	69fa      	ldr	r2, [r7, #28]
 8014c30:	69b9      	ldr	r1, [r7, #24]
 8014c32:	68f8      	ldr	r0, [r7, #12]
 8014c34:	f000 f8ef 	bl	8014e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d001      	beq.n	8014c42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8014c3e:	2301      	movs	r3, #1
 8014c40:	e012      	b.n	8014c68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014c42:	893b      	ldrh	r3, [r7, #8]
 8014c44:	b2da      	uxtb	r2, r3
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8014c4c:	69fb      	ldr	r3, [r7, #28]
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	2200      	movs	r2, #0
 8014c54:	2180      	movs	r1, #128	@ 0x80
 8014c56:	68f8      	ldr	r0, [r7, #12]
 8014c58:	f000 f884 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d001      	beq.n	8014c66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8014c62:	2301      	movs	r3, #1
 8014c64:	e000      	b.n	8014c68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8014c66:	2300      	movs	r3, #0
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3710      	adds	r7, #16
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	80002000 	.word	0x80002000

08014c74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b086      	sub	sp, #24
 8014c78:	af02      	add	r7, sp, #8
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	4608      	mov	r0, r1
 8014c7e:	4611      	mov	r1, r2
 8014c80:	461a      	mov	r2, r3
 8014c82:	4603      	mov	r3, r0
 8014c84:	817b      	strh	r3, [r7, #10]
 8014c86:	460b      	mov	r3, r1
 8014c88:	813b      	strh	r3, [r7, #8]
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8014c8e:	88fb      	ldrh	r3, [r7, #6]
 8014c90:	b2da      	uxtb	r2, r3
 8014c92:	8979      	ldrh	r1, [r7, #10]
 8014c94:	4b20      	ldr	r3, [pc, #128]	@ (8014d18 <I2C_RequestMemoryRead+0xa4>)
 8014c96:	9300      	str	r3, [sp, #0]
 8014c98:	2300      	movs	r3, #0
 8014c9a:	68f8      	ldr	r0, [r7, #12]
 8014c9c:	f000 fab2 	bl	8015204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014ca0:	69fa      	ldr	r2, [r7, #28]
 8014ca2:	69b9      	ldr	r1, [r7, #24]
 8014ca4:	68f8      	ldr	r0, [r7, #12]
 8014ca6:	f000 f8b6 	bl	8014e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d001      	beq.n	8014cb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8014cb0:	2301      	movs	r3, #1
 8014cb2:	e02c      	b.n	8014d0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014cb4:	88fb      	ldrh	r3, [r7, #6]
 8014cb6:	2b01      	cmp	r3, #1
 8014cb8:	d105      	bne.n	8014cc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014cba:	893b      	ldrh	r3, [r7, #8]
 8014cbc:	b2da      	uxtb	r2, r3
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8014cc4:	e015      	b.n	8014cf2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8014cc6:	893b      	ldrh	r3, [r7, #8]
 8014cc8:	0a1b      	lsrs	r3, r3, #8
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	b2da      	uxtb	r2, r3
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014cd4:	69fa      	ldr	r2, [r7, #28]
 8014cd6:	69b9      	ldr	r1, [r7, #24]
 8014cd8:	68f8      	ldr	r0, [r7, #12]
 8014cda:	f000 f89c 	bl	8014e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d001      	beq.n	8014ce8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	e012      	b.n	8014d0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014ce8:	893b      	ldrh	r3, [r7, #8]
 8014cea:	b2da      	uxtb	r2, r3
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	9300      	str	r3, [sp, #0]
 8014cf6:	69bb      	ldr	r3, [r7, #24]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	2140      	movs	r1, #64	@ 0x40
 8014cfc:	68f8      	ldr	r0, [r7, #12]
 8014cfe:	f000 f831 	bl	8014d64 <I2C_WaitOnFlagUntilTimeout>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d001      	beq.n	8014d0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8014d08:	2301      	movs	r3, #1
 8014d0a:	e000      	b.n	8014d0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8014d0c:	2300      	movs	r3, #0
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3710      	adds	r7, #16
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}
 8014d16:	bf00      	nop
 8014d18:	80002000 	.word	0x80002000

08014d1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b083      	sub	sp, #12
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	699b      	ldr	r3, [r3, #24]
 8014d2a:	f003 0302 	and.w	r3, r3, #2
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	d103      	bne.n	8014d3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2200      	movs	r2, #0
 8014d38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	699b      	ldr	r3, [r3, #24]
 8014d40:	f003 0301 	and.w	r3, r3, #1
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	d007      	beq.n	8014d58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	699a      	ldr	r2, [r3, #24]
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	f042 0201 	orr.w	r2, r2, #1
 8014d56:	619a      	str	r2, [r3, #24]
  }
}
 8014d58:	bf00      	nop
 8014d5a:	370c      	adds	r7, #12
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d62:	4770      	bx	lr

08014d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	603b      	str	r3, [r7, #0]
 8014d70:	4613      	mov	r3, r2
 8014d72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014d74:	e03b      	b.n	8014dee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014d76:	69ba      	ldr	r2, [r7, #24]
 8014d78:	6839      	ldr	r1, [r7, #0]
 8014d7a:	68f8      	ldr	r0, [r7, #12]
 8014d7c:	f000 f962 	bl	8015044 <I2C_IsErrorOccurred>
 8014d80:	4603      	mov	r3, r0
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d001      	beq.n	8014d8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8014d86:	2301      	movs	r3, #1
 8014d88:	e041      	b.n	8014e0e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d90:	d02d      	beq.n	8014dee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d92:	f7fe fe41 	bl	8013a18 <HAL_GetTick>
 8014d96:	4602      	mov	r2, r0
 8014d98:	69bb      	ldr	r3, [r7, #24]
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	683a      	ldr	r2, [r7, #0]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d302      	bcc.n	8014da8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d122      	bne.n	8014dee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	699a      	ldr	r2, [r3, #24]
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	4013      	ands	r3, r2
 8014db2:	68ba      	ldr	r2, [r7, #8]
 8014db4:	429a      	cmp	r2, r3
 8014db6:	bf0c      	ite	eq
 8014db8:	2301      	moveq	r3, #1
 8014dba:	2300      	movne	r3, #0
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	79fb      	ldrb	r3, [r7, #7]
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d113      	bne.n	8014dee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014dca:	f043 0220 	orr.w	r2, r3, #32
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2220      	movs	r2, #32
 8014dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2200      	movs	r2, #0
 8014de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8014dea:	2301      	movs	r3, #1
 8014dec:	e00f      	b.n	8014e0e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	699a      	ldr	r2, [r3, #24]
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	4013      	ands	r3, r2
 8014df8:	68ba      	ldr	r2, [r7, #8]
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	bf0c      	ite	eq
 8014dfe:	2301      	moveq	r3, #1
 8014e00:	2300      	movne	r3, #0
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	461a      	mov	r2, r3
 8014e06:	79fb      	ldrb	r3, [r7, #7]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d0b4      	beq.n	8014d76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014e0c:	2300      	movs	r3, #0
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	3710      	adds	r7, #16
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}

08014e16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014e16:	b580      	push	{r7, lr}
 8014e18:	b084      	sub	sp, #16
 8014e1a:	af00      	add	r7, sp, #0
 8014e1c:	60f8      	str	r0, [r7, #12]
 8014e1e:	60b9      	str	r1, [r7, #8]
 8014e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014e22:	e033      	b.n	8014e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	68b9      	ldr	r1, [r7, #8]
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f000 f90b 	bl	8015044 <I2C_IsErrorOccurred>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d001      	beq.n	8014e38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014e34:	2301      	movs	r3, #1
 8014e36:	e031      	b.n	8014e9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e3e:	d025      	beq.n	8014e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014e40:	f7fe fdea 	bl	8013a18 <HAL_GetTick>
 8014e44:	4602      	mov	r2, r0
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	1ad3      	subs	r3, r2, r3
 8014e4a:	68ba      	ldr	r2, [r7, #8]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d302      	bcc.n	8014e56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d11a      	bne.n	8014e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	699b      	ldr	r3, [r3, #24]
 8014e5c:	f003 0302 	and.w	r3, r3, #2
 8014e60:	2b02      	cmp	r3, #2
 8014e62:	d013      	beq.n	8014e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e68:	f043 0220 	orr.w	r2, r3, #32
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2220      	movs	r2, #32
 8014e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	2200      	movs	r2, #0
 8014e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8014e88:	2301      	movs	r3, #1
 8014e8a:	e007      	b.n	8014e9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	699b      	ldr	r3, [r3, #24]
 8014e92:	f003 0302 	and.w	r3, r3, #2
 8014e96:	2b02      	cmp	r3, #2
 8014e98:	d1c4      	bne.n	8014e24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8014e9a:	2300      	movs	r3, #0
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3710      	adds	r7, #16
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014eb0:	e02f      	b.n	8014f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	68b9      	ldr	r1, [r7, #8]
 8014eb6:	68f8      	ldr	r0, [r7, #12]
 8014eb8:	f000 f8c4 	bl	8015044 <I2C_IsErrorOccurred>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d001      	beq.n	8014ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	e02d      	b.n	8014f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ec6:	f7fe fda7 	bl	8013a18 <HAL_GetTick>
 8014eca:	4602      	mov	r2, r0
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	1ad3      	subs	r3, r2, r3
 8014ed0:	68ba      	ldr	r2, [r7, #8]
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d302      	bcc.n	8014edc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d11a      	bne.n	8014f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	699b      	ldr	r3, [r3, #24]
 8014ee2:	f003 0320 	and.w	r3, r3, #32
 8014ee6:	2b20      	cmp	r3, #32
 8014ee8:	d013      	beq.n	8014f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eee:	f043 0220 	orr.w	r2, r3, #32
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	2220      	movs	r2, #32
 8014efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	2200      	movs	r2, #0
 8014f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	2200      	movs	r2, #0
 8014f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8014f0e:	2301      	movs	r3, #1
 8014f10:	e007      	b.n	8014f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	699b      	ldr	r3, [r3, #24]
 8014f18:	f003 0320 	and.w	r3, r3, #32
 8014f1c:	2b20      	cmp	r3, #32
 8014f1e:	d1c8      	bne.n	8014eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014f20:	2300      	movs	r3, #0
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3710      	adds	r7, #16
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
	...

08014f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b086      	sub	sp, #24
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8014f3c:	e071      	b.n	8015022 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014f3e:	687a      	ldr	r2, [r7, #4]
 8014f40:	68b9      	ldr	r1, [r7, #8]
 8014f42:	68f8      	ldr	r0, [r7, #12]
 8014f44:	f000 f87e 	bl	8015044 <I2C_IsErrorOccurred>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d001      	beq.n	8014f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8014f4e:	2301      	movs	r3, #1
 8014f50:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	699b      	ldr	r3, [r3, #24]
 8014f58:	f003 0320 	and.w	r3, r3, #32
 8014f5c:	2b20      	cmp	r3, #32
 8014f5e:	d13b      	bne.n	8014fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8014f60:	7dfb      	ldrb	r3, [r7, #23]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d138      	bne.n	8014fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	699b      	ldr	r3, [r3, #24]
 8014f6c:	f003 0304 	and.w	r3, r3, #4
 8014f70:	2b04      	cmp	r3, #4
 8014f72:	d105      	bne.n	8014f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d001      	beq.n	8014f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	699b      	ldr	r3, [r3, #24]
 8014f86:	f003 0310 	and.w	r3, r3, #16
 8014f8a:	2b10      	cmp	r3, #16
 8014f8c:	d121      	bne.n	8014fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2210      	movs	r2, #16
 8014f94:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2204      	movs	r2, #4
 8014f9a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2220      	movs	r2, #32
 8014fa2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	6859      	ldr	r1, [r3, #4]
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	681a      	ldr	r2, [r3, #0]
 8014fae:	4b24      	ldr	r3, [pc, #144]	@ (8015040 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8014fb0:	400b      	ands	r3, r1
 8014fb2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2220      	movs	r2, #32
 8014fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8014fcc:	2301      	movs	r3, #1
 8014fce:	75fb      	strb	r3, [r7, #23]
 8014fd0:	e002      	b.n	8014fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8014fd8:	f7fe fd1e 	bl	8013a18 <HAL_GetTick>
 8014fdc:	4602      	mov	r2, r0
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	1ad3      	subs	r3, r2, r3
 8014fe2:	68ba      	ldr	r2, [r7, #8]
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d302      	bcc.n	8014fee <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d119      	bne.n	8015022 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8014fee:	7dfb      	ldrb	r3, [r7, #23]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d116      	bne.n	8015022 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	699b      	ldr	r3, [r3, #24]
 8014ffa:	f003 0304 	and.w	r3, r3, #4
 8014ffe:	2b04      	cmp	r3, #4
 8015000:	d00f      	beq.n	8015022 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015006:	f043 0220 	orr.w	r2, r3, #32
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2220      	movs	r2, #32
 8015012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	2200      	movs	r2, #0
 801501a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 801501e:	2301      	movs	r3, #1
 8015020:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	699b      	ldr	r3, [r3, #24]
 8015028:	f003 0304 	and.w	r3, r3, #4
 801502c:	2b04      	cmp	r3, #4
 801502e:	d002      	beq.n	8015036 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8015030:	7dfb      	ldrb	r3, [r7, #23]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d083      	beq.n	8014f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8015036:	7dfb      	ldrb	r3, [r7, #23]
}
 8015038:	4618      	mov	r0, r3
 801503a:	3718      	adds	r7, #24
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	fe00e800 	.word	0xfe00e800

08015044 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b08a      	sub	sp, #40	@ 0x28
 8015048:	af00      	add	r7, sp, #0
 801504a:	60f8      	str	r0, [r7, #12]
 801504c:	60b9      	str	r1, [r7, #8]
 801504e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015050:	2300      	movs	r3, #0
 8015052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	699b      	ldr	r3, [r3, #24]
 801505c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801505e:	2300      	movs	r3, #0
 8015060:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8015066:	69bb      	ldr	r3, [r7, #24]
 8015068:	f003 0310 	and.w	r3, r3, #16
 801506c:	2b00      	cmp	r3, #0
 801506e:	d068      	beq.n	8015142 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	2210      	movs	r2, #16
 8015076:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015078:	e049      	b.n	801510e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015080:	d045      	beq.n	801510e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015082:	f7fe fcc9 	bl	8013a18 <HAL_GetTick>
 8015086:	4602      	mov	r2, r0
 8015088:	69fb      	ldr	r3, [r7, #28]
 801508a:	1ad3      	subs	r3, r2, r3
 801508c:	68ba      	ldr	r2, [r7, #8]
 801508e:	429a      	cmp	r2, r3
 8015090:	d302      	bcc.n	8015098 <I2C_IsErrorOccurred+0x54>
 8015092:	68bb      	ldr	r3, [r7, #8]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d13a      	bne.n	801510e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80150a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80150aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	699b      	ldr	r3, [r3, #24]
 80150b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80150b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80150ba:	d121      	bne.n	8015100 <I2C_IsErrorOccurred+0xbc>
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80150c2:	d01d      	beq.n	8015100 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80150c4:	7cfb      	ldrb	r3, [r7, #19]
 80150c6:	2b20      	cmp	r3, #32
 80150c8:	d01a      	beq.n	8015100 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	685a      	ldr	r2, [r3, #4]
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80150d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80150da:	f7fe fc9d 	bl	8013a18 <HAL_GetTick>
 80150de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80150e0:	e00e      	b.n	8015100 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80150e2:	f7fe fc99 	bl	8013a18 <HAL_GetTick>
 80150e6:	4602      	mov	r2, r0
 80150e8:	69fb      	ldr	r3, [r7, #28]
 80150ea:	1ad3      	subs	r3, r2, r3
 80150ec:	2b19      	cmp	r3, #25
 80150ee:	d907      	bls.n	8015100 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80150f0:	6a3b      	ldr	r3, [r7, #32]
 80150f2:	f043 0320 	orr.w	r3, r3, #32
 80150f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80150f8:	2301      	movs	r3, #1
 80150fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80150fe:	e006      	b.n	801510e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	699b      	ldr	r3, [r3, #24]
 8015106:	f003 0320 	and.w	r3, r3, #32
 801510a:	2b20      	cmp	r3, #32
 801510c:	d1e9      	bne.n	80150e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	699b      	ldr	r3, [r3, #24]
 8015114:	f003 0320 	and.w	r3, r3, #32
 8015118:	2b20      	cmp	r3, #32
 801511a:	d003      	beq.n	8015124 <I2C_IsErrorOccurred+0xe0>
 801511c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015120:	2b00      	cmp	r3, #0
 8015122:	d0aa      	beq.n	801507a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8015124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015128:	2b00      	cmp	r3, #0
 801512a:	d103      	bne.n	8015134 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2220      	movs	r2, #32
 8015132:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8015134:	6a3b      	ldr	r3, [r7, #32]
 8015136:	f043 0304 	orr.w	r3, r3, #4
 801513a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801513c:	2301      	movs	r3, #1
 801513e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	699b      	ldr	r3, [r3, #24]
 8015148:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015150:	2b00      	cmp	r3, #0
 8015152:	d00b      	beq.n	801516c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8015154:	6a3b      	ldr	r3, [r7, #32]
 8015156:	f043 0301 	orr.w	r3, r3, #1
 801515a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8015166:	2301      	movs	r3, #1
 8015168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801516c:	69bb      	ldr	r3, [r7, #24]
 801516e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015172:	2b00      	cmp	r3, #0
 8015174:	d00b      	beq.n	801518e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8015176:	6a3b      	ldr	r3, [r7, #32]
 8015178:	f043 0308 	orr.w	r3, r3, #8
 801517c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015186:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8015188:	2301      	movs	r3, #1
 801518a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801518e:	69bb      	ldr	r3, [r7, #24]
 8015190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015194:	2b00      	cmp	r3, #0
 8015196:	d00b      	beq.n	80151b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8015198:	6a3b      	ldr	r3, [r7, #32]
 801519a:	f043 0302 	orr.w	r3, r3, #2
 801519e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80151aa:	2301      	movs	r3, #1
 80151ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80151b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d01c      	beq.n	80151f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	f7ff fdaf 	bl	8014d1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	6859      	ldr	r1, [r3, #4]
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	4b0d      	ldr	r3, [pc, #52]	@ (8015200 <I2C_IsErrorOccurred+0x1bc>)
 80151ca:	400b      	ands	r3, r1
 80151cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80151d2:	6a3b      	ldr	r3, [r7, #32]
 80151d4:	431a      	orrs	r2, r3
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	2220      	movs	r2, #32
 80151de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	2200      	movs	r2, #0
 80151e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	2200      	movs	r2, #0
 80151ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80151f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3728      	adds	r7, #40	@ 0x28
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	fe00e800 	.word	0xfe00e800

08015204 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8015204:	b480      	push	{r7}
 8015206:	b087      	sub	sp, #28
 8015208:	af00      	add	r7, sp, #0
 801520a:	60f8      	str	r0, [r7, #12]
 801520c:	607b      	str	r3, [r7, #4]
 801520e:	460b      	mov	r3, r1
 8015210:	817b      	strh	r3, [r7, #10]
 8015212:	4613      	mov	r3, r2
 8015214:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015216:	897b      	ldrh	r3, [r7, #10]
 8015218:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801521c:	7a7b      	ldrb	r3, [r7, #9]
 801521e:	041b      	lsls	r3, r3, #16
 8015220:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015224:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801522a:	6a3b      	ldr	r3, [r7, #32]
 801522c:	4313      	orrs	r3, r2
 801522e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015232:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	685a      	ldr	r2, [r3, #4]
 801523a:	6a3b      	ldr	r3, [r7, #32]
 801523c:	0d5b      	lsrs	r3, r3, #21
 801523e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8015242:	4b08      	ldr	r3, [pc, #32]	@ (8015264 <I2C_TransferConfig+0x60>)
 8015244:	430b      	orrs	r3, r1
 8015246:	43db      	mvns	r3, r3
 8015248:	ea02 0103 	and.w	r1, r2, r3
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	697a      	ldr	r2, [r7, #20]
 8015252:	430a      	orrs	r2, r1
 8015254:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8015256:	bf00      	nop
 8015258:	371c      	adds	r7, #28
 801525a:	46bd      	mov	sp, r7
 801525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015260:	4770      	bx	lr
 8015262:	bf00      	nop
 8015264:	03ff63ff 	.word	0x03ff63ff

08015268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015278:	b2db      	uxtb	r3, r3
 801527a:	2b20      	cmp	r3, #32
 801527c:	d138      	bne.n	80152f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015284:	2b01      	cmp	r3, #1
 8015286:	d101      	bne.n	801528c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8015288:	2302      	movs	r3, #2
 801528a:	e032      	b.n	80152f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2201      	movs	r2, #1
 8015290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2224      	movs	r2, #36	@ 0x24
 8015298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	681a      	ldr	r2, [r3, #0]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	f022 0201 	bic.w	r2, r2, #1
 80152aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80152ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	6819      	ldr	r1, [r3, #0]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	683a      	ldr	r2, [r7, #0]
 80152c8:	430a      	orrs	r2, r1
 80152ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	681a      	ldr	r2, [r3, #0]
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	f042 0201 	orr.w	r2, r2, #1
 80152da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2220      	movs	r2, #32
 80152e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2200      	movs	r2, #0
 80152e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80152ec:	2300      	movs	r3, #0
 80152ee:	e000      	b.n	80152f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80152f0:	2302      	movs	r3, #2
  }
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	370c      	adds	r7, #12
 80152f6:	46bd      	mov	sp, r7
 80152f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fc:	4770      	bx	lr

080152fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80152fe:	b480      	push	{r7}
 8015300:	b085      	sub	sp, #20
 8015302:	af00      	add	r7, sp, #0
 8015304:	6078      	str	r0, [r7, #4]
 8015306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801530e:	b2db      	uxtb	r3, r3
 8015310:	2b20      	cmp	r3, #32
 8015312:	d139      	bne.n	8015388 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801531a:	2b01      	cmp	r3, #1
 801531c:	d101      	bne.n	8015322 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801531e:	2302      	movs	r3, #2
 8015320:	e033      	b.n	801538a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2201      	movs	r2, #1
 8015326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	2224      	movs	r2, #36	@ 0x24
 801532e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	681a      	ldr	r2, [r3, #0]
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	f022 0201 	bic.w	r2, r2, #1
 8015340:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8015350:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	021b      	lsls	r3, r3, #8
 8015356:	68fa      	ldr	r2, [r7, #12]
 8015358:	4313      	orrs	r3, r2
 801535a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	68fa      	ldr	r2, [r7, #12]
 8015362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	681a      	ldr	r2, [r3, #0]
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	f042 0201 	orr.w	r2, r2, #1
 8015372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	2220      	movs	r2, #32
 8015378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	2200      	movs	r2, #0
 8015380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8015384:	2300      	movs	r3, #0
 8015386:	e000      	b.n	801538a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8015388:	2302      	movs	r3, #2
  }
}
 801538a:	4618      	mov	r0, r3
 801538c:	3714      	adds	r7, #20
 801538e:	46bd      	mov	sp, r7
 8015390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015394:	4770      	bx	lr

08015396 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8015396:	b580      	push	{r7, lr}
 8015398:	b084      	sub	sp, #16
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d101      	bne.n	80153a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80153a4:	2301      	movs	r3, #1
 80153a6:	e0c0      	b.n	801552a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80153ae:	b2db      	uxtb	r3, r3
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d106      	bne.n	80153c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	2200      	movs	r2, #0
 80153b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f7eb fdbf 	bl	8000f40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	2203      	movs	r2, #3
 80153c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f003 f968 	bl	80186a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80153d4:	2300      	movs	r3, #0
 80153d6:	73fb      	strb	r3, [r7, #15]
 80153d8:	e03e      	b.n	8015458 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80153da:	7bfa      	ldrb	r2, [r7, #15]
 80153dc:	6879      	ldr	r1, [r7, #4]
 80153de:	4613      	mov	r3, r2
 80153e0:	009b      	lsls	r3, r3, #2
 80153e2:	4413      	add	r3, r2
 80153e4:	00db      	lsls	r3, r3, #3
 80153e6:	440b      	add	r3, r1
 80153e8:	3311      	adds	r3, #17
 80153ea:	2201      	movs	r2, #1
 80153ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80153ee:	7bfa      	ldrb	r2, [r7, #15]
 80153f0:	6879      	ldr	r1, [r7, #4]
 80153f2:	4613      	mov	r3, r2
 80153f4:	009b      	lsls	r3, r3, #2
 80153f6:	4413      	add	r3, r2
 80153f8:	00db      	lsls	r3, r3, #3
 80153fa:	440b      	add	r3, r1
 80153fc:	3310      	adds	r3, #16
 80153fe:	7bfa      	ldrb	r2, [r7, #15]
 8015400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8015402:	7bfa      	ldrb	r2, [r7, #15]
 8015404:	6879      	ldr	r1, [r7, #4]
 8015406:	4613      	mov	r3, r2
 8015408:	009b      	lsls	r3, r3, #2
 801540a:	4413      	add	r3, r2
 801540c:	00db      	lsls	r3, r3, #3
 801540e:	440b      	add	r3, r1
 8015410:	3313      	adds	r3, #19
 8015412:	2200      	movs	r2, #0
 8015414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8015416:	7bfa      	ldrb	r2, [r7, #15]
 8015418:	6879      	ldr	r1, [r7, #4]
 801541a:	4613      	mov	r3, r2
 801541c:	009b      	lsls	r3, r3, #2
 801541e:	4413      	add	r3, r2
 8015420:	00db      	lsls	r3, r3, #3
 8015422:	440b      	add	r3, r1
 8015424:	3320      	adds	r3, #32
 8015426:	2200      	movs	r2, #0
 8015428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801542a:	7bfa      	ldrb	r2, [r7, #15]
 801542c:	6879      	ldr	r1, [r7, #4]
 801542e:	4613      	mov	r3, r2
 8015430:	009b      	lsls	r3, r3, #2
 8015432:	4413      	add	r3, r2
 8015434:	00db      	lsls	r3, r3, #3
 8015436:	440b      	add	r3, r1
 8015438:	3324      	adds	r3, #36	@ 0x24
 801543a:	2200      	movs	r2, #0
 801543c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801543e:	7bfb      	ldrb	r3, [r7, #15]
 8015440:	6879      	ldr	r1, [r7, #4]
 8015442:	1c5a      	adds	r2, r3, #1
 8015444:	4613      	mov	r3, r2
 8015446:	009b      	lsls	r3, r3, #2
 8015448:	4413      	add	r3, r2
 801544a:	00db      	lsls	r3, r3, #3
 801544c:	440b      	add	r3, r1
 801544e:	2200      	movs	r2, #0
 8015450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015452:	7bfb      	ldrb	r3, [r7, #15]
 8015454:	3301      	adds	r3, #1
 8015456:	73fb      	strb	r3, [r7, #15]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	791b      	ldrb	r3, [r3, #4]
 801545c:	7bfa      	ldrb	r2, [r7, #15]
 801545e:	429a      	cmp	r2, r3
 8015460:	d3bb      	bcc.n	80153da <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015462:	2300      	movs	r3, #0
 8015464:	73fb      	strb	r3, [r7, #15]
 8015466:	e044      	b.n	80154f2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8015468:	7bfa      	ldrb	r2, [r7, #15]
 801546a:	6879      	ldr	r1, [r7, #4]
 801546c:	4613      	mov	r3, r2
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	4413      	add	r3, r2
 8015472:	00db      	lsls	r3, r3, #3
 8015474:	440b      	add	r3, r1
 8015476:	f203 1351 	addw	r3, r3, #337	@ 0x151
 801547a:	2200      	movs	r2, #0
 801547c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801547e:	7bfa      	ldrb	r2, [r7, #15]
 8015480:	6879      	ldr	r1, [r7, #4]
 8015482:	4613      	mov	r3, r2
 8015484:	009b      	lsls	r3, r3, #2
 8015486:	4413      	add	r3, r2
 8015488:	00db      	lsls	r3, r3, #3
 801548a:	440b      	add	r3, r1
 801548c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015490:	7bfa      	ldrb	r2, [r7, #15]
 8015492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8015494:	7bfa      	ldrb	r2, [r7, #15]
 8015496:	6879      	ldr	r1, [r7, #4]
 8015498:	4613      	mov	r3, r2
 801549a:	009b      	lsls	r3, r3, #2
 801549c:	4413      	add	r3, r2
 801549e:	00db      	lsls	r3, r3, #3
 80154a0:	440b      	add	r3, r1
 80154a2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80154a6:	2200      	movs	r2, #0
 80154a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80154aa:	7bfa      	ldrb	r2, [r7, #15]
 80154ac:	6879      	ldr	r1, [r7, #4]
 80154ae:	4613      	mov	r3, r2
 80154b0:	009b      	lsls	r3, r3, #2
 80154b2:	4413      	add	r3, r2
 80154b4:	00db      	lsls	r3, r3, #3
 80154b6:	440b      	add	r3, r1
 80154b8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80154bc:	2200      	movs	r2, #0
 80154be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80154c0:	7bfa      	ldrb	r2, [r7, #15]
 80154c2:	6879      	ldr	r1, [r7, #4]
 80154c4:	4613      	mov	r3, r2
 80154c6:	009b      	lsls	r3, r3, #2
 80154c8:	4413      	add	r3, r2
 80154ca:	00db      	lsls	r3, r3, #3
 80154cc:	440b      	add	r3, r1
 80154ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80154d2:	2200      	movs	r2, #0
 80154d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80154d6:	7bfa      	ldrb	r2, [r7, #15]
 80154d8:	6879      	ldr	r1, [r7, #4]
 80154da:	4613      	mov	r3, r2
 80154dc:	009b      	lsls	r3, r3, #2
 80154de:	4413      	add	r3, r2
 80154e0:	00db      	lsls	r3, r3, #3
 80154e2:	440b      	add	r3, r1
 80154e4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80154e8:	2200      	movs	r2, #0
 80154ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80154ec:	7bfb      	ldrb	r3, [r7, #15]
 80154ee:	3301      	adds	r3, #1
 80154f0:	73fb      	strb	r3, [r7, #15]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	791b      	ldrb	r3, [r3, #4]
 80154f6:	7bfa      	ldrb	r2, [r7, #15]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d3b5      	bcc.n	8015468 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6818      	ldr	r0, [r3, #0]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	3304      	adds	r3, #4
 8015504:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015508:	f003 f8e7 	bl	80186da <USB_DevInit>

  hpcd->USB_Address = 0U;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2200      	movs	r2, #0
 8015510:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2201      	movs	r2, #1
 8015516:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	7a9b      	ldrb	r3, [r3, #10]
 801551e:	2b01      	cmp	r3, #1
 8015520:	d102      	bne.n	8015528 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f000 f805 	bl	8015532 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8015528:	2300      	movs	r3, #0
}
 801552a:	4618      	mov	r0, r3
 801552c:	3710      	adds	r7, #16
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}

08015532 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8015532:	b480      	push	{r7}
 8015534:	b085      	sub	sp, #20
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2201      	movs	r2, #1
 8015544:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2200      	movs	r2, #0
 801554c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8015556:	b29b      	uxth	r3, r3
 8015558:	f043 0301 	orr.w	r3, r3, #1
 801555c:	b29a      	uxth	r2, r3
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 801556a:	b29b      	uxth	r3, r3
 801556c:	f043 0302 	orr.w	r3, r3, #2
 8015570:	b29a      	uxth	r2, r3
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8015578:	2300      	movs	r3, #0
}
 801557a:	4618      	mov	r0, r3
 801557c:	3714      	adds	r7, #20
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr
	...

08015588 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8015588:	b480      	push	{r7}
 801558a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801558c:	4b05      	ldr	r3, [pc, #20]	@ (80155a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	4a04      	ldr	r2, [pc, #16]	@ (80155a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8015592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015596:	6013      	str	r3, [r2, #0]
}
 8015598:	bf00      	nop
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr
 80155a2:	bf00      	nop
 80155a4:	58000400 	.word	0x58000400

080155a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80155a8:	b480      	push	{r7}
 80155aa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80155ac:	4b04      	ldr	r3, [pc, #16]	@ (80155c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	46bd      	mov	sp, r7
 80155b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155bc:	4770      	bx	lr
 80155be:	bf00      	nop
 80155c0:	58000400 	.word	0x58000400

080155c4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80155c4:	b480      	push	{r7}
 80155c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80155c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80155d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80155d6:	d101      	bne.n	80155dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80155d8:	2301      	movs	r3, #1
 80155da:	e000      	b.n	80155de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80155dc:	2300      	movs	r3, #0
}
 80155de:	4618      	mov	r0, r3
 80155e0:	46bd      	mov	sp, r7
 80155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e6:	4770      	bx	lr

080155e8 <LL_RCC_HSE_Enable>:
{
 80155e8:	b480      	push	{r7}
 80155ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80155ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80155f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80155fa:	6013      	str	r3, [r2, #0]
}
 80155fc:	bf00      	nop
 80155fe:	46bd      	mov	sp, r7
 8015600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015604:	4770      	bx	lr

08015606 <LL_RCC_HSE_Disable>:
{
 8015606:	b480      	push	{r7}
 8015608:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801560a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015618:	6013      	str	r3, [r2, #0]
}
 801561a:	bf00      	nop
 801561c:	46bd      	mov	sp, r7
 801561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015622:	4770      	bx	lr

08015624 <LL_RCC_HSE_IsReady>:
{
 8015624:	b480      	push	{r7}
 8015626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8015628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015636:	d101      	bne.n	801563c <LL_RCC_HSE_IsReady+0x18>
 8015638:	2301      	movs	r3, #1
 801563a:	e000      	b.n	801563e <LL_RCC_HSE_IsReady+0x1a>
 801563c:	2300      	movs	r3, #0
}
 801563e:	4618      	mov	r0, r3
 8015640:	46bd      	mov	sp, r7
 8015642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015646:	4770      	bx	lr

08015648 <LL_RCC_HSI_Enable>:
{
 8015648:	b480      	push	{r7}
 801564a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801564c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801565a:	6013      	str	r3, [r2, #0]
}
 801565c:	bf00      	nop
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr

08015666 <LL_RCC_HSI_Disable>:
{
 8015666:	b480      	push	{r7}
 8015668:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801566a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015678:	6013      	str	r3, [r2, #0]
}
 801567a:	bf00      	nop
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr

08015684 <LL_RCC_HSI_IsReady>:
{
 8015684:	b480      	push	{r7}
 8015686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8015688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015696:	d101      	bne.n	801569c <LL_RCC_HSI_IsReady+0x18>
 8015698:	2301      	movs	r3, #1
 801569a:	e000      	b.n	801569e <LL_RCC_HSI_IsReady+0x1a>
 801569c:	2300      	movs	r3, #0
}
 801569e:	4618      	mov	r0, r3
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80156a8:	b480      	push	{r7}
 80156aa:	b083      	sub	sp, #12
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80156b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	061b      	lsls	r3, r3, #24
 80156be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80156c2:	4313      	orrs	r3, r2
 80156c4:	604b      	str	r3, [r1, #4]
}
 80156c6:	bf00      	nop
 80156c8:	370c      	adds	r7, #12
 80156ca:	46bd      	mov	sp, r7
 80156cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d0:	4770      	bx	lr

080156d2 <LL_RCC_HSI48_Enable>:
{
 80156d2:	b480      	push	{r7}
 80156d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80156d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80156de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80156e2:	f043 0301 	orr.w	r3, r3, #1
 80156e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80156ea:	bf00      	nop
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr

080156f4 <LL_RCC_HSI48_Disable>:
{
 80156f4:	b480      	push	{r7}
 80156f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80156f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015700:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015704:	f023 0301 	bic.w	r3, r3, #1
 8015708:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 801570c:	bf00      	nop
 801570e:	46bd      	mov	sp, r7
 8015710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015714:	4770      	bx	lr

08015716 <LL_RCC_HSI48_IsReady>:
{
 8015716:	b480      	push	{r7}
 8015718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801571a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801571e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015722:	f003 0302 	and.w	r3, r3, #2
 8015726:	2b02      	cmp	r3, #2
 8015728:	d101      	bne.n	801572e <LL_RCC_HSI48_IsReady+0x18>
 801572a:	2301      	movs	r3, #1
 801572c:	e000      	b.n	8015730 <LL_RCC_HSI48_IsReady+0x1a>
 801572e:	2300      	movs	r3, #0
}
 8015730:	4618      	mov	r0, r3
 8015732:	46bd      	mov	sp, r7
 8015734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015738:	4770      	bx	lr

0801573a <LL_RCC_LSE_Enable>:
{
 801573a:	b480      	push	{r7}
 801573c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801573e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801574a:	f043 0301 	orr.w	r3, r3, #1
 801574e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8015752:	bf00      	nop
 8015754:	46bd      	mov	sp, r7
 8015756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575a:	4770      	bx	lr

0801575c <LL_RCC_LSE_Disable>:
{
 801575c:	b480      	push	{r7}
 801575e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801576c:	f023 0301 	bic.w	r3, r3, #1
 8015770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8015774:	bf00      	nop
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr

0801577e <LL_RCC_LSE_EnableBypass>:
{
 801577e:	b480      	push	{r7}
 8015780:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8015782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801578a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801578e:	f043 0304 	orr.w	r3, r3, #4
 8015792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8015796:	bf00      	nop
 8015798:	46bd      	mov	sp, r7
 801579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579e:	4770      	bx	lr

080157a0 <LL_RCC_LSE_DisableBypass>:
{
 80157a0:	b480      	push	{r7}
 80157a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80157a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80157a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80157b0:	f023 0304 	bic.w	r3, r3, #4
 80157b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80157b8:	bf00      	nop
 80157ba:	46bd      	mov	sp, r7
 80157bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c0:	4770      	bx	lr

080157c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80157c2:	b480      	push	{r7}
 80157c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80157c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80157ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157ce:	f003 0302 	and.w	r3, r3, #2
 80157d2:	2b02      	cmp	r3, #2
 80157d4:	d101      	bne.n	80157da <LL_RCC_LSE_IsReady+0x18>
 80157d6:	2301      	movs	r3, #1
 80157d8:	e000      	b.n	80157dc <LL_RCC_LSE_IsReady+0x1a>
 80157da:	2300      	movs	r3, #0
}
 80157dc:	4618      	mov	r0, r3
 80157de:	46bd      	mov	sp, r7
 80157e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e4:	4770      	bx	lr

080157e6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80157e6:	b480      	push	{r7}
 80157e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80157ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80157ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80157f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80157f6:	f043 0301 	orr.w	r3, r3, #1
 80157fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80157fe:	bf00      	nop
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr

08015808 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8015808:	b480      	push	{r7}
 801580a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801580c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015818:	f023 0301 	bic.w	r3, r3, #1
 801581c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8015820:	bf00      	nop
 8015822:	46bd      	mov	sp, r7
 8015824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015828:	4770      	bx	lr

0801582a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 801582a:	b480      	push	{r7}
 801582c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801582e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015836:	f003 0302 	and.w	r3, r3, #2
 801583a:	2b02      	cmp	r3, #2
 801583c:	d101      	bne.n	8015842 <LL_RCC_LSI1_IsReady+0x18>
 801583e:	2301      	movs	r3, #1
 8015840:	e000      	b.n	8015844 <LL_RCC_LSI1_IsReady+0x1a>
 8015842:	2300      	movs	r3, #0
}
 8015844:	4618      	mov	r0, r3
 8015846:	46bd      	mov	sp, r7
 8015848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584c:	4770      	bx	lr

0801584e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 801584e:	b480      	push	{r7}
 8015850:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8015852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801585a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801585e:	f043 0304 	orr.w	r3, r3, #4
 8015862:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8015866:	bf00      	nop
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr

08015870 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8015870:	b480      	push	{r7}
 8015872:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8015874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801587c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015880:	f023 0304 	bic.w	r3, r3, #4
 8015884:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8015888:	bf00      	nop
 801588a:	46bd      	mov	sp, r7
 801588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015890:	4770      	bx	lr

08015892 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8015892:	b480      	push	{r7}
 8015894:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8015896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801589a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801589e:	f003 0308 	and.w	r3, r3, #8
 80158a2:	2b08      	cmp	r3, #8
 80158a4:	d101      	bne.n	80158aa <LL_RCC_LSI2_IsReady+0x18>
 80158a6:	2301      	movs	r3, #1
 80158a8:	e000      	b.n	80158ac <LL_RCC_LSI2_IsReady+0x1a>
 80158aa:	2300      	movs	r3, #0
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr

080158b6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80158b6:	b480      	push	{r7}
 80158b8:	b083      	sub	sp, #12
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80158be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80158c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80158c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	021b      	lsls	r3, r3, #8
 80158ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80158d2:	4313      	orrs	r3, r2
 80158d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80158d8:	bf00      	nop
 80158da:	370c      	adds	r7, #12
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr

080158e4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80158e4:	b480      	push	{r7}
 80158e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80158e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80158f2:	f043 0301 	orr.w	r3, r3, #1
 80158f6:	6013      	str	r3, [r2, #0]
}
 80158f8:	bf00      	nop
 80158fa:	46bd      	mov	sp, r7
 80158fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015900:	4770      	bx	lr

08015902 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8015902:	b480      	push	{r7}
 8015904:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8015906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015910:	f023 0301 	bic.w	r3, r3, #1
 8015914:	6013      	str	r3, [r2, #0]
}
 8015916:	bf00      	nop
 8015918:	46bd      	mov	sp, r7
 801591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591e:	4770      	bx	lr

08015920 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8015920:	b480      	push	{r7}
 8015922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8015924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	f003 0302 	and.w	r3, r3, #2
 801592e:	2b02      	cmp	r3, #2
 8015930:	d101      	bne.n	8015936 <LL_RCC_MSI_IsReady+0x16>
 8015932:	2301      	movs	r3, #1
 8015934:	e000      	b.n	8015938 <LL_RCC_MSI_IsReady+0x18>
 8015936:	2300      	movs	r3, #0
}
 8015938:	4618      	mov	r0, r3
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr

08015942 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8015942:	b480      	push	{r7}
 8015944:	b083      	sub	sp, #12
 8015946:	af00      	add	r7, sp, #0
 8015948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801594a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8015954:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	4313      	orrs	r3, r2
 801595c:	600b      	str	r3, [r1, #0]
}
 801595e:	bf00      	nop
 8015960:	370c      	adds	r7, #12
 8015962:	46bd      	mov	sp, r7
 8015964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015968:	4770      	bx	lr

0801596a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 801596a:	b480      	push	{r7}
 801596c:	b083      	sub	sp, #12
 801596e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8015970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801597a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2bb0      	cmp	r3, #176	@ 0xb0
 8015980:	d901      	bls.n	8015986 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8015982:	23b0      	movs	r3, #176	@ 0xb0
 8015984:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8015986:	687b      	ldr	r3, [r7, #4]
}
 8015988:	4618      	mov	r0, r3
 801598a:	370c      	adds	r7, #12
 801598c:	46bd      	mov	sp, r7
 801598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015992:	4770      	bx	lr

08015994 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8015994:	b480      	push	{r7}
 8015996:	b083      	sub	sp, #12
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801599c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	021b      	lsls	r3, r3, #8
 80159aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80159ae:	4313      	orrs	r3, r2
 80159b0:	604b      	str	r3, [r1, #4]
}
 80159b2:	bf00      	nop
 80159b4:	370c      	adds	r7, #12
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr

080159be <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80159be:	b480      	push	{r7}
 80159c0:	b083      	sub	sp, #12
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80159c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80159ca:	689b      	ldr	r3, [r3, #8]
 80159cc:	f023 0203 	bic.w	r2, r3, #3
 80159d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	4313      	orrs	r3, r2
 80159d8:	608b      	str	r3, [r1, #8]
}
 80159da:	bf00      	nop
 80159dc:	370c      	adds	r7, #12
 80159de:	46bd      	mov	sp, r7
 80159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e4:	4770      	bx	lr

080159e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80159e6:	b480      	push	{r7}
 80159e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80159ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80159ee:	689b      	ldr	r3, [r3, #8]
 80159f0:	f003 030c 	and.w	r3, r3, #12
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	46bd      	mov	sp, r7
 80159f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fc:	4770      	bx	lr

080159fe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80159fe:	b480      	push	{r7}
 8015a00:	b083      	sub	sp, #12
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8015a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8015a10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	4313      	orrs	r3, r2
 8015a18:	608b      	str	r3, [r1, #8]
}
 8015a1a:	bf00      	nop
 8015a1c:	370c      	adds	r7, #12
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a24:	4770      	bx	lr

08015a26 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8015a26:	b480      	push	{r7}
 8015a28:	b083      	sub	sp, #12
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8015a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015a32:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8015a36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8015a3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	4313      	orrs	r3, r2
 8015a42:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8015a46:	bf00      	nop
 8015a48:	370c      	adds	r7, #12
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr

08015a52 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8015a52:	b480      	push	{r7}
 8015a54:	b083      	sub	sp, #12
 8015a56:	af00      	add	r7, sp, #0
 8015a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8015a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015a5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8015a62:	f023 020f 	bic.w	r2, r3, #15
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	091b      	lsrs	r3, r3, #4
 8015a6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015a6e:	4313      	orrs	r3, r2
 8015a70:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8015a74:	bf00      	nop
 8015a76:	370c      	adds	r7, #12
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr

08015a80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8015a80:	b480      	push	{r7}
 8015a82:	b083      	sub	sp, #12
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8015a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015a8c:	689b      	ldr	r3, [r3, #8]
 8015a8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8015a92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	4313      	orrs	r3, r2
 8015a9a:	608b      	str	r3, [r1, #8]
}
 8015a9c:	bf00      	nop
 8015a9e:	370c      	adds	r7, #12
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa6:	4770      	bx	lr

08015aa8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8015aa8:	b480      	push	{r7}
 8015aaa:	b083      	sub	sp, #12
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8015ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015ab4:	689b      	ldr	r3, [r3, #8]
 8015ab6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8015aba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	4313      	orrs	r3, r2
 8015ac2:	608b      	str	r3, [r1, #8]
}
 8015ac4:	bf00      	nop
 8015ac6:	370c      	adds	r7, #12
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr

08015ad0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8015ad0:	b480      	push	{r7}
 8015ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8015ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015ad8:	689b      	ldr	r3, [r3, #8]
 8015ada:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae6:	4770      	bx	lr

08015ae8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8015ae8:	b480      	push	{r7}
 8015aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8015aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015af0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8015af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8015af8:	4618      	mov	r0, r3
 8015afa:	46bd      	mov	sp, r7
 8015afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b00:	4770      	bx	lr

08015b02 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8015b02:	b480      	push	{r7}
 8015b04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8015b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8015b0e:	011b      	lsls	r3, r3, #4
 8015b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	46bd      	mov	sp, r7
 8015b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1c:	4770      	bx	lr

08015b1e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8015b1e:	b480      	push	{r7}
 8015b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8015b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b26:	689b      	ldr	r3, [r3, #8]
 8015b28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b34:	4770      	bx	lr

08015b36 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8015b36:	b480      	push	{r7}
 8015b38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8015b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b3e:	689b      	ldr	r3, [r3, #8]
 8015b40:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	46bd      	mov	sp, r7
 8015b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4c:	4770      	bx	lr

08015b4e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8015b4e:	b480      	push	{r7}
 8015b50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8015b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015b5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015b60:	6013      	str	r3, [r2, #0]
}
 8015b62:	bf00      	nop
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr

08015b6c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8015b6c:	b480      	push	{r7}
 8015b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8015b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8015b7e:	6013      	str	r3, [r2, #0]
}
 8015b80:	bf00      	nop
 8015b82:	46bd      	mov	sp, r7
 8015b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b88:	4770      	bx	lr

08015b8a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8015b8a:	b480      	push	{r7}
 8015b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8015b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015b98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015b9c:	d101      	bne.n	8015ba2 <LL_RCC_PLL_IsReady+0x18>
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	e000      	b.n	8015ba4 <LL_RCC_PLL_IsReady+0x1a>
 8015ba2:	2300      	movs	r3, #0
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bac:	4770      	bx	lr

08015bae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8015bae:	b480      	push	{r7}
 8015bb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8015bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015bb6:	68db      	ldr	r3, [r3, #12]
 8015bb8:	0a1b      	lsrs	r3, r3, #8
 8015bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8015bc8:	b480      	push	{r7}
 8015bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8015bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015bd0:	68db      	ldr	r3, [r3, #12]
 8015bd2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bde:	4770      	bx	lr

08015be0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8015be0:	b480      	push	{r7}
 8015be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8015be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015be8:	68db      	ldr	r3, [r3, #12]
 8015bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8015bee:	4618      	mov	r0, r3
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf6:	4770      	bx	lr

08015bf8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8015bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c00:	68db      	ldr	r3, [r3, #12]
 8015c02:	f003 0303 	and.w	r3, r3, #3
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0e:	4770      	bx	lr

08015c10 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8015c10:	b480      	push	{r7}
 8015c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8015c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c18:	689b      	ldr	r3, [r3, #8]
 8015c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015c22:	d101      	bne.n	8015c28 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8015c24:	2301      	movs	r3, #1
 8015c26:	e000      	b.n	8015c2a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8015c28:	2300      	movs	r3, #0
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c32:	4770      	bx	lr

08015c34 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8015c34:	b480      	push	{r7}
 8015c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8015c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8015c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015c44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015c48:	d101      	bne.n	8015c4e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	e000      	b.n	8015c50 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8015c4e:	2300      	movs	r3, #0
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	46bd      	mov	sp, r7
 8015c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c58:	4770      	bx	lr

08015c5a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8015c5a:	b480      	push	{r7}
 8015c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8015c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8015c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015c6e:	d101      	bne.n	8015c74 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8015c70:	2301      	movs	r3, #1
 8015c72:	e000      	b.n	8015c76 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8015c74:	2300      	movs	r3, #0
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7e:	4770      	bx	lr

08015c80 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8015c80:	b480      	push	{r7}
 8015c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8015c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c88:	689b      	ldr	r3, [r3, #8]
 8015c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015c92:	d101      	bne.n	8015c98 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8015c94:	2301      	movs	r3, #1
 8015c96:	e000      	b.n	8015c9a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8015c98:	2300      	movs	r3, #0
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca2:	4770      	bx	lr

08015ca4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8015ca4:	b480      	push	{r7}
 8015ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8015ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015cac:	689b      	ldr	r3, [r3, #8]
 8015cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015cb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015cb6:	d101      	bne.n	8015cbc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8015cb8:	2301      	movs	r3, #1
 8015cba:	e000      	b.n	8015cbe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8015cbc:	2300      	movs	r3, #0
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc6:	4770      	bx	lr

08015cc8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015cc8:	b590      	push	{r4, r7, lr}
 8015cca:	b08d      	sub	sp, #52	@ 0x34
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d101      	bne.n	8015cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	e363      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	f003 0320 	and.w	r3, r3, #32
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	f000 808d 	beq.w	8015e02 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015ce8:	f7ff fe7d 	bl	80159e6 <LL_RCC_GetSysClkSource>
 8015cec:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015cee:	f7ff ff83 	bl	8015bf8 <LL_RCC_PLL_GetMainSource>
 8015cf2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8015cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d005      	beq.n	8015d06 <HAL_RCC_OscConfig+0x3e>
 8015cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cfc:	2b0c      	cmp	r3, #12
 8015cfe:	d147      	bne.n	8015d90 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8015d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d02:	2b01      	cmp	r3, #1
 8015d04:	d144      	bne.n	8015d90 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	69db      	ldr	r3, [r3, #28]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d101      	bne.n	8015d12 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8015d0e:	2301      	movs	r3, #1
 8015d10:	e347      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015d16:	f7ff fe28 	bl	801596a <LL_RCC_MSI_GetRange>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	429c      	cmp	r4, r3
 8015d1e:	d914      	bls.n	8015d4a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d24:	4618      	mov	r0, r3
 8015d26:	f000 fd61 	bl	80167ec <RCC_SetFlashLatencyFromMSIRange>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d001      	beq.n	8015d34 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8015d30:	2301      	movs	r3, #1
 8015d32:	e336      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7ff fe02 	bl	8015942 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	6a1b      	ldr	r3, [r3, #32]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7ff fe26 	bl	8015994 <LL_RCC_MSI_SetCalibTrimming>
 8015d48:	e013      	b.n	8015d72 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7ff fdf7 	bl	8015942 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	6a1b      	ldr	r3, [r3, #32]
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7ff fe1b 	bl	8015994 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d62:	4618      	mov	r0, r3
 8015d64:	f000 fd42 	bl	80167ec <RCC_SetFlashLatencyFromMSIRange>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d001      	beq.n	8015d72 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8015d6e:	2301      	movs	r3, #1
 8015d70:	e317      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8015d72:	f000 fcc9 	bl	8016708 <HAL_RCC_GetHCLKFreq>
 8015d76:	4603      	mov	r3, r0
 8015d78:	4aa4      	ldr	r2, [pc, #656]	@ (801600c <HAL_RCC_OscConfig+0x344>)
 8015d7a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8015d7c:	4ba4      	ldr	r3, [pc, #656]	@ (8016010 <HAL_RCC_OscConfig+0x348>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7eb f94d 	bl	8001020 <HAL_InitTick>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d039      	beq.n	8015e00 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	e308      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	69db      	ldr	r3, [r3, #28]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d01e      	beq.n	8015dd6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015d98:	f7ff fda4 	bl	80158e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015d9c:	f7fd fe3c 	bl	8013a18 <HAL_GetTick>
 8015da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8015da2:	e008      	b.n	8015db6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015da4:	f7fd fe38 	bl	8013a18 <HAL_GetTick>
 8015da8:	4602      	mov	r2, r0
 8015daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dac:	1ad3      	subs	r3, r2, r3
 8015dae:	2b02      	cmp	r3, #2
 8015db0:	d901      	bls.n	8015db6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8015db2:	2303      	movs	r3, #3
 8015db4:	e2f5      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8015db6:	f7ff fdb3 	bl	8015920 <LL_RCC_MSI_IsReady>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d0f1      	beq.n	8015da4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7ff fdbc 	bl	8015942 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6a1b      	ldr	r3, [r3, #32]
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7ff fde0 	bl	8015994 <LL_RCC_MSI_SetCalibTrimming>
 8015dd4:	e015      	b.n	8015e02 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015dd6:	f7ff fd94 	bl	8015902 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015dda:	f7fd fe1d 	bl	8013a18 <HAL_GetTick>
 8015dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8015de0:	e008      	b.n	8015df4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015de2:	f7fd fe19 	bl	8013a18 <HAL_GetTick>
 8015de6:	4602      	mov	r2, r0
 8015de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dea:	1ad3      	subs	r3, r2, r3
 8015dec:	2b02      	cmp	r3, #2
 8015dee:	d901      	bls.n	8015df4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8015df0:	2303      	movs	r3, #3
 8015df2:	e2d6      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8015df4:	f7ff fd94 	bl	8015920 <LL_RCC_MSI_IsReady>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d1f1      	bne.n	8015de2 <HAL_RCC_OscConfig+0x11a>
 8015dfe:	e000      	b.n	8015e02 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8015e00:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	f003 0301 	and.w	r3, r3, #1
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d047      	beq.n	8015e9e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015e0e:	f7ff fdea 	bl	80159e6 <LL_RCC_GetSysClkSource>
 8015e12:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015e14:	f7ff fef0 	bl	8015bf8 <LL_RCC_PLL_GetMainSource>
 8015e18:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8015e1a:	6a3b      	ldr	r3, [r7, #32]
 8015e1c:	2b08      	cmp	r3, #8
 8015e1e:	d005      	beq.n	8015e2c <HAL_RCC_OscConfig+0x164>
 8015e20:	6a3b      	ldr	r3, [r7, #32]
 8015e22:	2b0c      	cmp	r3, #12
 8015e24:	d108      	bne.n	8015e38 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8015e26:	69fb      	ldr	r3, [r7, #28]
 8015e28:	2b03      	cmp	r3, #3
 8015e2a:	d105      	bne.n	8015e38 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	685b      	ldr	r3, [r3, #4]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d134      	bne.n	8015e9e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8015e34:	2301      	movs	r3, #1
 8015e36:	e2b4      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015e40:	d102      	bne.n	8015e48 <HAL_RCC_OscConfig+0x180>
 8015e42:	f7ff fbd1 	bl	80155e8 <LL_RCC_HSE_Enable>
 8015e46:	e001      	b.n	8015e4c <HAL_RCC_OscConfig+0x184>
 8015e48:	f7ff fbdd 	bl	8015606 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d012      	beq.n	8015e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015e54:	f7fd fde0 	bl	8013a18 <HAL_GetTick>
 8015e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8015e5a:	e008      	b.n	8015e6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015e5c:	f7fd fddc 	bl	8013a18 <HAL_GetTick>
 8015e60:	4602      	mov	r2, r0
 8015e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e64:	1ad3      	subs	r3, r2, r3
 8015e66:	2b64      	cmp	r3, #100	@ 0x64
 8015e68:	d901      	bls.n	8015e6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8015e6a:	2303      	movs	r3, #3
 8015e6c:	e299      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8015e6e:	f7ff fbd9 	bl	8015624 <LL_RCC_HSE_IsReady>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d0f1      	beq.n	8015e5c <HAL_RCC_OscConfig+0x194>
 8015e78:	e011      	b.n	8015e9e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015e7a:	f7fd fdcd 	bl	8013a18 <HAL_GetTick>
 8015e7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8015e80:	e008      	b.n	8015e94 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015e82:	f7fd fdc9 	bl	8013a18 <HAL_GetTick>
 8015e86:	4602      	mov	r2, r0
 8015e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e8a:	1ad3      	subs	r3, r2, r3
 8015e8c:	2b64      	cmp	r3, #100	@ 0x64
 8015e8e:	d901      	bls.n	8015e94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8015e90:	2303      	movs	r3, #3
 8015e92:	e286      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8015e94:	f7ff fbc6 	bl	8015624 <LL_RCC_HSE_IsReady>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d1f1      	bne.n	8015e82 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	f003 0302 	and.w	r3, r3, #2
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d04c      	beq.n	8015f44 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015eaa:	f7ff fd9c 	bl	80159e6 <LL_RCC_GetSysClkSource>
 8015eae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015eb0:	f7ff fea2 	bl	8015bf8 <LL_RCC_PLL_GetMainSource>
 8015eb4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8015eb6:	69bb      	ldr	r3, [r7, #24]
 8015eb8:	2b04      	cmp	r3, #4
 8015eba:	d005      	beq.n	8015ec8 <HAL_RCC_OscConfig+0x200>
 8015ebc:	69bb      	ldr	r3, [r7, #24]
 8015ebe:	2b0c      	cmp	r3, #12
 8015ec0:	d10e      	bne.n	8015ee0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	2b02      	cmp	r3, #2
 8015ec6:	d10b      	bne.n	8015ee0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d101      	bne.n	8015ed4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	e266      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	691b      	ldr	r3, [r3, #16]
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7ff fbe5 	bl	80156a8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8015ede:	e031      	b.n	8015f44 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	68db      	ldr	r3, [r3, #12]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d019      	beq.n	8015f1c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015ee8:	f7ff fbae 	bl	8015648 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015eec:	f7fd fd94 	bl	8013a18 <HAL_GetTick>
 8015ef0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8015ef2:	e008      	b.n	8015f06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015ef4:	f7fd fd90 	bl	8013a18 <HAL_GetTick>
 8015ef8:	4602      	mov	r2, r0
 8015efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015efc:	1ad3      	subs	r3, r2, r3
 8015efe:	2b02      	cmp	r3, #2
 8015f00:	d901      	bls.n	8015f06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8015f02:	2303      	movs	r3, #3
 8015f04:	e24d      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8015f06:	f7ff fbbd 	bl	8015684 <LL_RCC_HSI_IsReady>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d0f1      	beq.n	8015ef4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	691b      	ldr	r3, [r3, #16]
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7ff fbc7 	bl	80156a8 <LL_RCC_HSI_SetCalibTrimming>
 8015f1a:	e013      	b.n	8015f44 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015f1c:	f7ff fba3 	bl	8015666 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015f20:	f7fd fd7a 	bl	8013a18 <HAL_GetTick>
 8015f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8015f26:	e008      	b.n	8015f3a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015f28:	f7fd fd76 	bl	8013a18 <HAL_GetTick>
 8015f2c:	4602      	mov	r2, r0
 8015f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f30:	1ad3      	subs	r3, r2, r3
 8015f32:	2b02      	cmp	r3, #2
 8015f34:	d901      	bls.n	8015f3a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8015f36:	2303      	movs	r3, #3
 8015f38:	e233      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8015f3a:	f7ff fba3 	bl	8015684 <LL_RCC_HSI_IsReady>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d1f1      	bne.n	8015f28 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	f003 0308 	and.w	r3, r3, #8
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d106      	bne.n	8015f5e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	f000 80a3 	beq.w	80160a4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	695b      	ldr	r3, [r3, #20]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d076      	beq.n	8016054 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f003 0310 	and.w	r3, r3, #16
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d046      	beq.n	8016000 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8015f72:	f7ff fc5a 	bl	801582a <LL_RCC_LSI1_IsReady>
 8015f76:	4603      	mov	r3, r0
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d113      	bne.n	8015fa4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8015f7c:	f7ff fc33 	bl	80157e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8015f80:	f7fd fd4a 	bl	8013a18 <HAL_GetTick>
 8015f84:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8015f86:	e008      	b.n	8015f9a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8015f88:	f7fd fd46 	bl	8013a18 <HAL_GetTick>
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f90:	1ad3      	subs	r3, r2, r3
 8015f92:	2b02      	cmp	r3, #2
 8015f94:	d901      	bls.n	8015f9a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8015f96:	2303      	movs	r3, #3
 8015f98:	e203      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8015f9a:	f7ff fc46 	bl	801582a <LL_RCC_LSI1_IsReady>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d0f1      	beq.n	8015f88 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8015fa4:	f7ff fc53 	bl	801584e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015fa8:	f7fd fd36 	bl	8013a18 <HAL_GetTick>
 8015fac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8015fae:	e008      	b.n	8015fc2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8015fb0:	f7fd fd32 	bl	8013a18 <HAL_GetTick>
 8015fb4:	4602      	mov	r2, r0
 8015fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fb8:	1ad3      	subs	r3, r2, r3
 8015fba:	2b03      	cmp	r3, #3
 8015fbc:	d901      	bls.n	8015fc2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8015fbe:	2303      	movs	r3, #3
 8015fc0:	e1ef      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8015fc2:	f7ff fc66 	bl	8015892 <LL_RCC_LSI2_IsReady>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d0f1      	beq.n	8015fb0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	699b      	ldr	r3, [r3, #24]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7ff fc70 	bl	80158b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8015fd6:	f7ff fc17 	bl	8015808 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015fda:	f7fd fd1d 	bl	8013a18 <HAL_GetTick>
 8015fde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8015fe0:	e008      	b.n	8015ff4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8015fe2:	f7fd fd19 	bl	8013a18 <HAL_GetTick>
 8015fe6:	4602      	mov	r2, r0
 8015fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fea:	1ad3      	subs	r3, r2, r3
 8015fec:	2b02      	cmp	r3, #2
 8015fee:	d901      	bls.n	8015ff4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8015ff0:	2303      	movs	r3, #3
 8015ff2:	e1d6      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8015ff4:	f7ff fc19 	bl	801582a <LL_RCC_LSI1_IsReady>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d1f1      	bne.n	8015fe2 <HAL_RCC_OscConfig+0x31a>
 8015ffe:	e051      	b.n	80160a4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8016000:	f7ff fbf1 	bl	80157e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016004:	f7fd fd08 	bl	8013a18 <HAL_GetTick>
 8016008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801600a:	e00c      	b.n	8016026 <HAL_RCC_OscConfig+0x35e>
 801600c:	20000008 	.word	0x20000008
 8016010:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8016014:	f7fd fd00 	bl	8013a18 <HAL_GetTick>
 8016018:	4602      	mov	r2, r0
 801601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801601c:	1ad3      	subs	r3, r2, r3
 801601e:	2b02      	cmp	r3, #2
 8016020:	d901      	bls.n	8016026 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8016022:	2303      	movs	r3, #3
 8016024:	e1bd      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8016026:	f7ff fc00 	bl	801582a <LL_RCC_LSI1_IsReady>
 801602a:	4603      	mov	r3, r0
 801602c:	2b00      	cmp	r3, #0
 801602e:	d0f1      	beq.n	8016014 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8016030:	f7ff fc1e 	bl	8015870 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8016034:	e008      	b.n	8016048 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8016036:	f7fd fcef 	bl	8013a18 <HAL_GetTick>
 801603a:	4602      	mov	r2, r0
 801603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801603e:	1ad3      	subs	r3, r2, r3
 8016040:	2b03      	cmp	r3, #3
 8016042:	d901      	bls.n	8016048 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8016044:	2303      	movs	r3, #3
 8016046:	e1ac      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8016048:	f7ff fc23 	bl	8015892 <LL_RCC_LSI2_IsReady>
 801604c:	4603      	mov	r3, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d1f1      	bne.n	8016036 <HAL_RCC_OscConfig+0x36e>
 8016052:	e027      	b.n	80160a4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8016054:	f7ff fc0c 	bl	8015870 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016058:	f7fd fcde 	bl	8013a18 <HAL_GetTick>
 801605c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801605e:	e008      	b.n	8016072 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8016060:	f7fd fcda 	bl	8013a18 <HAL_GetTick>
 8016064:	4602      	mov	r2, r0
 8016066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016068:	1ad3      	subs	r3, r2, r3
 801606a:	2b03      	cmp	r3, #3
 801606c:	d901      	bls.n	8016072 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801606e:	2303      	movs	r3, #3
 8016070:	e197      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8016072:	f7ff fc0e 	bl	8015892 <LL_RCC_LSI2_IsReady>
 8016076:	4603      	mov	r3, r0
 8016078:	2b00      	cmp	r3, #0
 801607a:	d1f1      	bne.n	8016060 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801607c:	f7ff fbc4 	bl	8015808 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016080:	f7fd fcca 	bl	8013a18 <HAL_GetTick>
 8016084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8016086:	e008      	b.n	801609a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8016088:	f7fd fcc6 	bl	8013a18 <HAL_GetTick>
 801608c:	4602      	mov	r2, r0
 801608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016090:	1ad3      	subs	r3, r2, r3
 8016092:	2b02      	cmp	r3, #2
 8016094:	d901      	bls.n	801609a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8016096:	2303      	movs	r3, #3
 8016098:	e183      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801609a:	f7ff fbc6 	bl	801582a <LL_RCC_LSI1_IsReady>
 801609e:	4603      	mov	r3, r0
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d1f1      	bne.n	8016088 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	f003 0304 	and.w	r3, r3, #4
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d05b      	beq.n	8016168 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80160b0:	4ba7      	ldr	r3, [pc, #668]	@ (8016350 <HAL_RCC_OscConfig+0x688>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d114      	bne.n	80160e6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80160bc:	f7ff fa64 	bl	8015588 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80160c0:	f7fd fcaa 	bl	8013a18 <HAL_GetTick>
 80160c4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80160c6:	e008      	b.n	80160da <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80160c8:	f7fd fca6 	bl	8013a18 <HAL_GetTick>
 80160cc:	4602      	mov	r2, r0
 80160ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160d0:	1ad3      	subs	r3, r2, r3
 80160d2:	2b02      	cmp	r3, #2
 80160d4:	d901      	bls.n	80160da <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80160d6:	2303      	movs	r3, #3
 80160d8:	e163      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80160da:	4b9d      	ldr	r3, [pc, #628]	@ (8016350 <HAL_RCC_OscConfig+0x688>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d0f0      	beq.n	80160c8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	689b      	ldr	r3, [r3, #8]
 80160ea:	2b01      	cmp	r3, #1
 80160ec:	d102      	bne.n	80160f4 <HAL_RCC_OscConfig+0x42c>
 80160ee:	f7ff fb24 	bl	801573a <LL_RCC_LSE_Enable>
 80160f2:	e00c      	b.n	801610e <HAL_RCC_OscConfig+0x446>
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	689b      	ldr	r3, [r3, #8]
 80160f8:	2b05      	cmp	r3, #5
 80160fa:	d104      	bne.n	8016106 <HAL_RCC_OscConfig+0x43e>
 80160fc:	f7ff fb3f 	bl	801577e <LL_RCC_LSE_EnableBypass>
 8016100:	f7ff fb1b 	bl	801573a <LL_RCC_LSE_Enable>
 8016104:	e003      	b.n	801610e <HAL_RCC_OscConfig+0x446>
 8016106:	f7ff fb29 	bl	801575c <LL_RCC_LSE_Disable>
 801610a:	f7ff fb49 	bl	80157a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	689b      	ldr	r3, [r3, #8]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d014      	beq.n	8016140 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016116:	f7fd fc7f 	bl	8013a18 <HAL_GetTick>
 801611a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801611c:	e00a      	b.n	8016134 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801611e:	f7fd fc7b 	bl	8013a18 <HAL_GetTick>
 8016122:	4602      	mov	r2, r0
 8016124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016126:	1ad3      	subs	r3, r2, r3
 8016128:	f241 3288 	movw	r2, #5000	@ 0x1388
 801612c:	4293      	cmp	r3, r2
 801612e:	d901      	bls.n	8016134 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8016130:	2303      	movs	r3, #3
 8016132:	e136      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8016134:	f7ff fb45 	bl	80157c2 <LL_RCC_LSE_IsReady>
 8016138:	4603      	mov	r3, r0
 801613a:	2b00      	cmp	r3, #0
 801613c:	d0ef      	beq.n	801611e <HAL_RCC_OscConfig+0x456>
 801613e:	e013      	b.n	8016168 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016140:	f7fd fc6a 	bl	8013a18 <HAL_GetTick>
 8016144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8016146:	e00a      	b.n	801615e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016148:	f7fd fc66 	bl	8013a18 <HAL_GetTick>
 801614c:	4602      	mov	r2, r0
 801614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016150:	1ad3      	subs	r3, r2, r3
 8016152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016156:	4293      	cmp	r3, r2
 8016158:	d901      	bls.n	801615e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801615a:	2303      	movs	r3, #3
 801615c:	e121      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801615e:	f7ff fb30 	bl	80157c2 <LL_RCC_LSE_IsReady>
 8016162:	4603      	mov	r3, r0
 8016164:	2b00      	cmp	r3, #0
 8016166:	d1ef      	bne.n	8016148 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016170:	2b00      	cmp	r3, #0
 8016172:	d02c      	beq.n	80161ce <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016178:	2b00      	cmp	r3, #0
 801617a:	d014      	beq.n	80161a6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801617c:	f7ff faa9 	bl	80156d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016180:	f7fd fc4a 	bl	8013a18 <HAL_GetTick>
 8016184:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8016186:	e008      	b.n	801619a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8016188:	f7fd fc46 	bl	8013a18 <HAL_GetTick>
 801618c:	4602      	mov	r2, r0
 801618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016190:	1ad3      	subs	r3, r2, r3
 8016192:	2b02      	cmp	r3, #2
 8016194:	d901      	bls.n	801619a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8016196:	2303      	movs	r3, #3
 8016198:	e103      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801619a:	f7ff fabc 	bl	8015716 <LL_RCC_HSI48_IsReady>
 801619e:	4603      	mov	r3, r0
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d0f1      	beq.n	8016188 <HAL_RCC_OscConfig+0x4c0>
 80161a4:	e013      	b.n	80161ce <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80161a6:	f7ff faa5 	bl	80156f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80161aa:	f7fd fc35 	bl	8013a18 <HAL_GetTick>
 80161ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80161b0:	e008      	b.n	80161c4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80161b2:	f7fd fc31 	bl	8013a18 <HAL_GetTick>
 80161b6:	4602      	mov	r2, r0
 80161b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ba:	1ad3      	subs	r3, r2, r3
 80161bc:	2b02      	cmp	r3, #2
 80161be:	d901      	bls.n	80161c4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80161c0:	2303      	movs	r3, #3
 80161c2:	e0ee      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80161c4:	f7ff faa7 	bl	8015716 <LL_RCC_HSI48_IsReady>
 80161c8:	4603      	mov	r3, r0
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d1f1      	bne.n	80161b2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	f000 80e4 	beq.w	80163a0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80161d8:	f7ff fc05 	bl	80159e6 <LL_RCC_GetSysClkSource>
 80161dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80161de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80161e2:	68db      	ldr	r3, [r3, #12]
 80161e4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161ea:	2b02      	cmp	r3, #2
 80161ec:	f040 80b4 	bne.w	8016358 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	f003 0203 	and.w	r2, r3, #3
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d123      	bne.n	8016246 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016208:	429a      	cmp	r2, r3
 801620a:	d11c      	bne.n	8016246 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	0a1b      	lsrs	r3, r3, #8
 8016210:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8016218:	429a      	cmp	r2, r3
 801621a:	d114      	bne.n	8016246 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8016226:	429a      	cmp	r2, r3
 8016228:	d10d      	bne.n	8016246 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8016234:	429a      	cmp	r2, r3
 8016236:	d106      	bne.n	8016246 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8016242:	429a      	cmp	r2, r3
 8016244:	d05d      	beq.n	8016302 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	2b0c      	cmp	r3, #12
 801624a:	d058      	beq.n	80162fe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801624c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8016256:	2b00      	cmp	r3, #0
 8016258:	d001      	beq.n	801625e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801625a:	2301      	movs	r3, #1
 801625c:	e0a1      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801625e:	f7ff fc85 	bl	8015b6c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8016262:	f7fd fbd9 	bl	8013a18 <HAL_GetTick>
 8016266:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016268:	e008      	b.n	801627c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801626a:	f7fd fbd5 	bl	8013a18 <HAL_GetTick>
 801626e:	4602      	mov	r2, r0
 8016270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016272:	1ad3      	subs	r3, r2, r3
 8016274:	2b02      	cmp	r3, #2
 8016276:	d901      	bls.n	801627c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8016278:	2303      	movs	r3, #3
 801627a:	e092      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801627c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016286:	2b00      	cmp	r3, #0
 8016288:	d1ef      	bne.n	801626a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801628a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801628e:	68da      	ldr	r2, [r3, #12]
 8016290:	4b30      	ldr	r3, [pc, #192]	@ (8016354 <HAL_RCC_OscConfig+0x68c>)
 8016292:	4013      	ands	r3, r2
 8016294:	687a      	ldr	r2, [r7, #4]
 8016296:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801629c:	4311      	orrs	r1, r2
 801629e:	687a      	ldr	r2, [r7, #4]
 80162a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80162a2:	0212      	lsls	r2, r2, #8
 80162a4:	4311      	orrs	r1, r2
 80162a6:	687a      	ldr	r2, [r7, #4]
 80162a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80162aa:	4311      	orrs	r1, r2
 80162ac:	687a      	ldr	r2, [r7, #4]
 80162ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80162b0:	4311      	orrs	r1, r2
 80162b2:	687a      	ldr	r2, [r7, #4]
 80162b4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80162b6:	430a      	orrs	r2, r1
 80162b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80162bc:	4313      	orrs	r3, r2
 80162be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80162c0:	f7ff fc45 	bl	8015b4e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80162c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80162ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80162d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80162d4:	f7fd fba0 	bl	8013a18 <HAL_GetTick>
 80162d8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80162da:	e008      	b.n	80162ee <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80162dc:	f7fd fb9c 	bl	8013a18 <HAL_GetTick>
 80162e0:	4602      	mov	r2, r0
 80162e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e4:	1ad3      	subs	r3, r2, r3
 80162e6:	2b02      	cmp	r3, #2
 80162e8:	d901      	bls.n	80162ee <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80162ea:	2303      	movs	r3, #3
 80162ec:	e059      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80162ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d0ef      	beq.n	80162dc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80162fc:	e050      	b.n	80163a0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80162fe:	2301      	movs	r3, #1
 8016300:	e04f      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8016302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801630c:	2b00      	cmp	r3, #0
 801630e:	d147      	bne.n	80163a0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8016310:	f7ff fc1d 	bl	8015b4e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8016314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801631e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016322:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8016324:	f7fd fb78 	bl	8013a18 <HAL_GetTick>
 8016328:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801632a:	e008      	b.n	801633e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801632c:	f7fd fb74 	bl	8013a18 <HAL_GetTick>
 8016330:	4602      	mov	r2, r0
 8016332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016334:	1ad3      	subs	r3, r2, r3
 8016336:	2b02      	cmp	r3, #2
 8016338:	d901      	bls.n	801633e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 801633a:	2303      	movs	r3, #3
 801633c:	e031      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801633e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016348:	2b00      	cmp	r3, #0
 801634a:	d0ef      	beq.n	801632c <HAL_RCC_OscConfig+0x664>
 801634c:	e028      	b.n	80163a0 <HAL_RCC_OscConfig+0x6d8>
 801634e:	bf00      	nop
 8016350:	58000400 	.word	0x58000400
 8016354:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	2b0c      	cmp	r3, #12
 801635c:	d01e      	beq.n	801639c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801635e:	f7ff fc05 	bl	8015b6c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016362:	f7fd fb59 	bl	8013a18 <HAL_GetTick>
 8016366:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016368:	e008      	b.n	801637c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801636a:	f7fd fb55 	bl	8013a18 <HAL_GetTick>
 801636e:	4602      	mov	r2, r0
 8016370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016372:	1ad3      	subs	r3, r2, r3
 8016374:	2b02      	cmp	r3, #2
 8016376:	d901      	bls.n	801637c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8016378:	2303      	movs	r3, #3
 801637a:	e012      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801637c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016386:	2b00      	cmp	r3, #0
 8016388:	d1ef      	bne.n	801636a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801638a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801638e:	68da      	ldr	r2, [r3, #12]
 8016390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016394:	4b05      	ldr	r3, [pc, #20]	@ (80163ac <HAL_RCC_OscConfig+0x6e4>)
 8016396:	4013      	ands	r3, r2
 8016398:	60cb      	str	r3, [r1, #12]
 801639a:	e001      	b.n	80163a0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801639c:	2301      	movs	r3, #1
 801639e:	e000      	b.n	80163a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80163a0:	2300      	movs	r3, #0
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3734      	adds	r7, #52	@ 0x34
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd90      	pop	{r4, r7, pc}
 80163aa:	bf00      	nop
 80163ac:	eefefffc 	.word	0xeefefffc

080163b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d101      	bne.n	80163c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80163c0:	2301      	movs	r3, #1
 80163c2:	e12d      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80163c4:	4b98      	ldr	r3, [pc, #608]	@ (8016628 <HAL_RCC_ClockConfig+0x278>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	f003 0307 	and.w	r3, r3, #7
 80163cc:	683a      	ldr	r2, [r7, #0]
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d91b      	bls.n	801640a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80163d2:	4b95      	ldr	r3, [pc, #596]	@ (8016628 <HAL_RCC_ClockConfig+0x278>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	f023 0207 	bic.w	r2, r3, #7
 80163da:	4993      	ldr	r1, [pc, #588]	@ (8016628 <HAL_RCC_ClockConfig+0x278>)
 80163dc:	683b      	ldr	r3, [r7, #0]
 80163de:	4313      	orrs	r3, r2
 80163e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80163e2:	f7fd fb19 	bl	8013a18 <HAL_GetTick>
 80163e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80163e8:	e008      	b.n	80163fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80163ea:	f7fd fb15 	bl	8013a18 <HAL_GetTick>
 80163ee:	4602      	mov	r2, r0
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	1ad3      	subs	r3, r2, r3
 80163f4:	2b02      	cmp	r3, #2
 80163f6:	d901      	bls.n	80163fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80163f8:	2303      	movs	r3, #3
 80163fa:	e111      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80163fc:	4b8a      	ldr	r3, [pc, #552]	@ (8016628 <HAL_RCC_ClockConfig+0x278>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	f003 0307 	and.w	r3, r3, #7
 8016404:	683a      	ldr	r2, [r7, #0]
 8016406:	429a      	cmp	r2, r3
 8016408:	d1ef      	bne.n	80163ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f003 0302 	and.w	r3, r3, #2
 8016412:	2b00      	cmp	r3, #0
 8016414:	d016      	beq.n	8016444 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	689b      	ldr	r3, [r3, #8]
 801641a:	4618      	mov	r0, r3
 801641c:	f7ff faef 	bl	80159fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8016420:	f7fd fafa 	bl	8013a18 <HAL_GetTick>
 8016424:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8016426:	e008      	b.n	801643a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8016428:	f7fd faf6 	bl	8013a18 <HAL_GetTick>
 801642c:	4602      	mov	r2, r0
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	1ad3      	subs	r3, r2, r3
 8016432:	2b02      	cmp	r3, #2
 8016434:	d901      	bls.n	801643a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8016436:	2303      	movs	r3, #3
 8016438:	e0f2      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801643a:	f7ff fbe9 	bl	8015c10 <LL_RCC_IsActiveFlag_HPRE>
 801643e:	4603      	mov	r3, r0
 8016440:	2b00      	cmp	r3, #0
 8016442:	d0f1      	beq.n	8016428 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	f003 0320 	and.w	r3, r3, #32
 801644c:	2b00      	cmp	r3, #0
 801644e:	d016      	beq.n	801647e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	695b      	ldr	r3, [r3, #20]
 8016454:	4618      	mov	r0, r3
 8016456:	f7ff fae6 	bl	8015a26 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801645a:	f7fd fadd 	bl	8013a18 <HAL_GetTick>
 801645e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8016460:	e008      	b.n	8016474 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8016462:	f7fd fad9 	bl	8013a18 <HAL_GetTick>
 8016466:	4602      	mov	r2, r0
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	1ad3      	subs	r3, r2, r3
 801646c:	2b02      	cmp	r3, #2
 801646e:	d901      	bls.n	8016474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8016470:	2303      	movs	r3, #3
 8016472:	e0d5      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8016474:	f7ff fbde 	bl	8015c34 <LL_RCC_IsActiveFlag_C2HPRE>
 8016478:	4603      	mov	r3, r0
 801647a:	2b00      	cmp	r3, #0
 801647c:	d0f1      	beq.n	8016462 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016486:	2b00      	cmp	r3, #0
 8016488:	d016      	beq.n	80164b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	699b      	ldr	r3, [r3, #24]
 801648e:	4618      	mov	r0, r3
 8016490:	f7ff fadf 	bl	8015a52 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8016494:	f7fd fac0 	bl	8013a18 <HAL_GetTick>
 8016498:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801649a:	e008      	b.n	80164ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801649c:	f7fd fabc 	bl	8013a18 <HAL_GetTick>
 80164a0:	4602      	mov	r2, r0
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	1ad3      	subs	r3, r2, r3
 80164a6:	2b02      	cmp	r3, #2
 80164a8:	d901      	bls.n	80164ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80164aa:	2303      	movs	r3, #3
 80164ac:	e0b8      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80164ae:	f7ff fbd4 	bl	8015c5a <LL_RCC_IsActiveFlag_SHDHPRE>
 80164b2:	4603      	mov	r3, r0
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d0f1      	beq.n	801649c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	f003 0304 	and.w	r3, r3, #4
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d016      	beq.n	80164f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	68db      	ldr	r3, [r3, #12]
 80164c8:	4618      	mov	r0, r3
 80164ca:	f7ff fad9 	bl	8015a80 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80164ce:	f7fd faa3 	bl	8013a18 <HAL_GetTick>
 80164d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80164d4:	e008      	b.n	80164e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80164d6:	f7fd fa9f 	bl	8013a18 <HAL_GetTick>
 80164da:	4602      	mov	r2, r0
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	1ad3      	subs	r3, r2, r3
 80164e0:	2b02      	cmp	r3, #2
 80164e2:	d901      	bls.n	80164e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80164e4:	2303      	movs	r3, #3
 80164e6:	e09b      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80164e8:	f7ff fbca 	bl	8015c80 <LL_RCC_IsActiveFlag_PPRE1>
 80164ec:	4603      	mov	r3, r0
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d0f1      	beq.n	80164d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	f003 0308 	and.w	r3, r3, #8
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d017      	beq.n	801652e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	691b      	ldr	r3, [r3, #16]
 8016502:	00db      	lsls	r3, r3, #3
 8016504:	4618      	mov	r0, r3
 8016506:	f7ff facf 	bl	8015aa8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801650a:	f7fd fa85 	bl	8013a18 <HAL_GetTick>
 801650e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8016510:	e008      	b.n	8016524 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8016512:	f7fd fa81 	bl	8013a18 <HAL_GetTick>
 8016516:	4602      	mov	r2, r0
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	1ad3      	subs	r3, r2, r3
 801651c:	2b02      	cmp	r3, #2
 801651e:	d901      	bls.n	8016524 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8016520:	2303      	movs	r3, #3
 8016522:	e07d      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8016524:	f7ff fbbe 	bl	8015ca4 <LL_RCC_IsActiveFlag_PPRE2>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	d0f1      	beq.n	8016512 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f003 0301 	and.w	r3, r3, #1
 8016536:	2b00      	cmp	r3, #0
 8016538:	d043      	beq.n	80165c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	685b      	ldr	r3, [r3, #4]
 801653e:	2b02      	cmp	r3, #2
 8016540:	d106      	bne.n	8016550 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8016542:	f7ff f86f 	bl	8015624 <LL_RCC_HSE_IsReady>
 8016546:	4603      	mov	r3, r0
 8016548:	2b00      	cmp	r3, #0
 801654a:	d11e      	bne.n	801658a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801654c:	2301      	movs	r3, #1
 801654e:	e067      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	685b      	ldr	r3, [r3, #4]
 8016554:	2b03      	cmp	r3, #3
 8016556:	d106      	bne.n	8016566 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8016558:	f7ff fb17 	bl	8015b8a <LL_RCC_PLL_IsReady>
 801655c:	4603      	mov	r3, r0
 801655e:	2b00      	cmp	r3, #0
 8016560:	d113      	bne.n	801658a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8016562:	2301      	movs	r3, #1
 8016564:	e05c      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	685b      	ldr	r3, [r3, #4]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d106      	bne.n	801657c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801656e:	f7ff f9d7 	bl	8015920 <LL_RCC_MSI_IsReady>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d108      	bne.n	801658a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8016578:	2301      	movs	r3, #1
 801657a:	e051      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801657c:	f7ff f882 	bl	8015684 <LL_RCC_HSI_IsReady>
 8016580:	4603      	mov	r3, r0
 8016582:	2b00      	cmp	r3, #0
 8016584:	d101      	bne.n	801658a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8016586:	2301      	movs	r3, #1
 8016588:	e04a      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	4618      	mov	r0, r3
 8016590:	f7ff fa15 	bl	80159be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016594:	f7fd fa40 	bl	8013a18 <HAL_GetTick>
 8016598:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801659a:	e00a      	b.n	80165b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801659c:	f7fd fa3c 	bl	8013a18 <HAL_GetTick>
 80165a0:	4602      	mov	r2, r0
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	1ad3      	subs	r3, r2, r3
 80165a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d901      	bls.n	80165b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80165ae:	2303      	movs	r3, #3
 80165b0:	e036      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80165b2:	f7ff fa18 	bl	80159e6 <LL_RCC_GetSysClkSource>
 80165b6:	4602      	mov	r2, r0
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	685b      	ldr	r3, [r3, #4]
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	429a      	cmp	r2, r3
 80165c0:	d1ec      	bne.n	801659c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80165c2:	4b19      	ldr	r3, [pc, #100]	@ (8016628 <HAL_RCC_ClockConfig+0x278>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f003 0307 	and.w	r3, r3, #7
 80165ca:	683a      	ldr	r2, [r7, #0]
 80165cc:	429a      	cmp	r2, r3
 80165ce:	d21b      	bcs.n	8016608 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80165d0:	4b15      	ldr	r3, [pc, #84]	@ (8016628 <HAL_RCC_ClockConfig+0x278>)
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	f023 0207 	bic.w	r2, r3, #7
 80165d8:	4913      	ldr	r1, [pc, #76]	@ (8016628 <HAL_RCC_ClockConfig+0x278>)
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	4313      	orrs	r3, r2
 80165de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80165e0:	f7fd fa1a 	bl	8013a18 <HAL_GetTick>
 80165e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80165e6:	e008      	b.n	80165fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80165e8:	f7fd fa16 	bl	8013a18 <HAL_GetTick>
 80165ec:	4602      	mov	r2, r0
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	1ad3      	subs	r3, r2, r3
 80165f2:	2b02      	cmp	r3, #2
 80165f4:	d901      	bls.n	80165fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80165f6:	2303      	movs	r3, #3
 80165f8:	e012      	b.n	8016620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80165fa:	4b0b      	ldr	r3, [pc, #44]	@ (8016628 <HAL_RCC_ClockConfig+0x278>)
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	f003 0307 	and.w	r3, r3, #7
 8016602:	683a      	ldr	r2, [r7, #0]
 8016604:	429a      	cmp	r2, r3
 8016606:	d1ef      	bne.n	80165e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8016608:	f000 f87e 	bl	8016708 <HAL_RCC_GetHCLKFreq>
 801660c:	4603      	mov	r3, r0
 801660e:	4a07      	ldr	r2, [pc, #28]	@ (801662c <HAL_RCC_ClockConfig+0x27c>)
 8016610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8016612:	f7fd fa0d 	bl	8013a30 <HAL_GetTickPrio>
 8016616:	4603      	mov	r3, r0
 8016618:	4618      	mov	r0, r3
 801661a:	f7ea fd01 	bl	8001020 <HAL_InitTick>
 801661e:	4603      	mov	r3, r0
}
 8016620:	4618      	mov	r0, r3
 8016622:	3710      	adds	r7, #16
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	58004000 	.word	0x58004000
 801662c:	20000008 	.word	0x20000008

08016630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016630:	b590      	push	{r4, r7, lr}
 8016632:	b085      	sub	sp, #20
 8016634:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016636:	f7ff f9d6 	bl	80159e6 <LL_RCC_GetSysClkSource>
 801663a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d10a      	bne.n	8016658 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8016642:	f7ff f992 	bl	801596a <LL_RCC_MSI_GetRange>
 8016646:	4603      	mov	r3, r0
 8016648:	091b      	lsrs	r3, r3, #4
 801664a:	f003 030f 	and.w	r3, r3, #15
 801664e:	4a2b      	ldr	r2, [pc, #172]	@ (80166fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8016650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016654:	60fb      	str	r3, [r7, #12]
 8016656:	e04b      	b.n	80166f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2b04      	cmp	r3, #4
 801665c:	d102      	bne.n	8016664 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801665e:	4b28      	ldr	r3, [pc, #160]	@ (8016700 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016660:	60fb      	str	r3, [r7, #12]
 8016662:	e045      	b.n	80166f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2b08      	cmp	r3, #8
 8016668:	d10a      	bne.n	8016680 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801666a:	f7fe ffab 	bl	80155c4 <LL_RCC_HSE_IsEnabledDiv2>
 801666e:	4603      	mov	r3, r0
 8016670:	2b01      	cmp	r3, #1
 8016672:	d102      	bne.n	801667a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8016674:	4b22      	ldr	r3, [pc, #136]	@ (8016700 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016676:	60fb      	str	r3, [r7, #12]
 8016678:	e03a      	b.n	80166f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801667a:	4b22      	ldr	r3, [pc, #136]	@ (8016704 <HAL_RCC_GetSysClockFreq+0xd4>)
 801667c:	60fb      	str	r3, [r7, #12]
 801667e:	e037      	b.n	80166f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8016680:	f7ff faba 	bl	8015bf8 <LL_RCC_PLL_GetMainSource>
 8016684:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	2b02      	cmp	r3, #2
 801668a:	d003      	beq.n	8016694 <HAL_RCC_GetSysClockFreq+0x64>
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	2b03      	cmp	r3, #3
 8016690:	d003      	beq.n	801669a <HAL_RCC_GetSysClockFreq+0x6a>
 8016692:	e00d      	b.n	80166b0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8016694:	4b1a      	ldr	r3, [pc, #104]	@ (8016700 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016696:	60bb      	str	r3, [r7, #8]
        break;
 8016698:	e015      	b.n	80166c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801669a:	f7fe ff93 	bl	80155c4 <LL_RCC_HSE_IsEnabledDiv2>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	d102      	bne.n	80166aa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80166a4:	4b16      	ldr	r3, [pc, #88]	@ (8016700 <HAL_RCC_GetSysClockFreq+0xd0>)
 80166a6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80166a8:	e00d      	b.n	80166c6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80166aa:	4b16      	ldr	r3, [pc, #88]	@ (8016704 <HAL_RCC_GetSysClockFreq+0xd4>)
 80166ac:	60bb      	str	r3, [r7, #8]
        break;
 80166ae:	e00a      	b.n	80166c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80166b0:	f7ff f95b 	bl	801596a <LL_RCC_MSI_GetRange>
 80166b4:	4603      	mov	r3, r0
 80166b6:	091b      	lsrs	r3, r3, #4
 80166b8:	f003 030f 	and.w	r3, r3, #15
 80166bc:	4a0f      	ldr	r2, [pc, #60]	@ (80166fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80166be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80166c2:	60bb      	str	r3, [r7, #8]
        break;
 80166c4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80166c6:	f7ff fa72 	bl	8015bae <LL_RCC_PLL_GetN>
 80166ca:	4602      	mov	r2, r0
 80166cc:	68bb      	ldr	r3, [r7, #8]
 80166ce:	fb03 f402 	mul.w	r4, r3, r2
 80166d2:	f7ff fa85 	bl	8015be0 <LL_RCC_PLL_GetDivider>
 80166d6:	4603      	mov	r3, r0
 80166d8:	091b      	lsrs	r3, r3, #4
 80166da:	3301      	adds	r3, #1
 80166dc:	fbb4 f4f3 	udiv	r4, r4, r3
 80166e0:	f7ff fa72 	bl	8015bc8 <LL_RCC_PLL_GetR>
 80166e4:	4603      	mov	r3, r0
 80166e6:	0f5b      	lsrs	r3, r3, #29
 80166e8:	3301      	adds	r3, #1
 80166ea:	fbb4 f3f3 	udiv	r3, r4, r3
 80166ee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80166f0:	68fb      	ldr	r3, [r7, #12]
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	3714      	adds	r7, #20
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd90      	pop	{r4, r7, pc}
 80166fa:	bf00      	nop
 80166fc:	0801e2a4 	.word	0x0801e2a4
 8016700:	00f42400 	.word	0x00f42400
 8016704:	01e84800 	.word	0x01e84800

08016708 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016708:	b598      	push	{r3, r4, r7, lr}
 801670a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801670c:	f7ff ff90 	bl	8016630 <HAL_RCC_GetSysClockFreq>
 8016710:	4604      	mov	r4, r0
 8016712:	f7ff f9dd 	bl	8015ad0 <LL_RCC_GetAHBPrescaler>
 8016716:	4603      	mov	r3, r0
 8016718:	091b      	lsrs	r3, r3, #4
 801671a:	f003 030f 	and.w	r3, r3, #15
 801671e:	4a03      	ldr	r2, [pc, #12]	@ (801672c <HAL_RCC_GetHCLKFreq+0x24>)
 8016720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016724:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8016728:	4618      	mov	r0, r3
 801672a:	bd98      	pop	{r3, r4, r7, pc}
 801672c:	0801e244 	.word	0x0801e244

08016730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016730:	b598      	push	{r3, r4, r7, lr}
 8016732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8016734:	f7ff ffe8 	bl	8016708 <HAL_RCC_GetHCLKFreq>
 8016738:	4604      	mov	r4, r0
 801673a:	f7ff f9f0 	bl	8015b1e <LL_RCC_GetAPB1Prescaler>
 801673e:	4603      	mov	r3, r0
 8016740:	0a1b      	lsrs	r3, r3, #8
 8016742:	f003 0307 	and.w	r3, r3, #7
 8016746:	4a04      	ldr	r2, [pc, #16]	@ (8016758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8016748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801674c:	f003 031f 	and.w	r3, r3, #31
 8016750:	fa24 f303 	lsr.w	r3, r4, r3
}
 8016754:	4618      	mov	r0, r3
 8016756:	bd98      	pop	{r3, r4, r7, pc}
 8016758:	0801e284 	.word	0x0801e284

0801675c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801675c:	b598      	push	{r3, r4, r7, lr}
 801675e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8016760:	f7ff ffd2 	bl	8016708 <HAL_RCC_GetHCLKFreq>
 8016764:	4604      	mov	r4, r0
 8016766:	f7ff f9e6 	bl	8015b36 <LL_RCC_GetAPB2Prescaler>
 801676a:	4603      	mov	r3, r0
 801676c:	0adb      	lsrs	r3, r3, #11
 801676e:	f003 0307 	and.w	r3, r3, #7
 8016772:	4a04      	ldr	r2, [pc, #16]	@ (8016784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8016774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016778:	f003 031f 	and.w	r3, r3, #31
 801677c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8016780:	4618      	mov	r0, r3
 8016782:	bd98      	pop	{r3, r4, r7, pc}
 8016784:	0801e284 	.word	0x0801e284

08016788 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b082      	sub	sp, #8
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	226f      	movs	r2, #111	@ 0x6f
 8016796:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8016798:	f7ff f925 	bl	80159e6 <LL_RCC_GetSysClkSource>
 801679c:	4602      	mov	r2, r0
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80167a2:	f7ff f995 	bl	8015ad0 <LL_RCC_GetAHBPrescaler>
 80167a6:	4602      	mov	r2, r0
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80167ac:	f7ff f9b7 	bl	8015b1e <LL_RCC_GetAPB1Prescaler>
 80167b0:	4602      	mov	r2, r0
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80167b6:	f7ff f9be 	bl	8015b36 <LL_RCC_GetAPB2Prescaler>
 80167ba:	4602      	mov	r2, r0
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80167c0:	f7ff f992 	bl	8015ae8 <LL_C2_RCC_GetAHBPrescaler>
 80167c4:	4602      	mov	r2, r0
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80167ca:	f7ff f99a 	bl	8015b02 <LL_RCC_GetAHB4Prescaler>
 80167ce:	4602      	mov	r2, r0
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80167d4:	4b04      	ldr	r3, [pc, #16]	@ (80167e8 <HAL_RCC_GetClockConfig+0x60>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	f003 0207 	and.w	r2, r3, #7
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	601a      	str	r2, [r3, #0]
}
 80167e0:	bf00      	nop
 80167e2:	3708      	adds	r7, #8
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	58004000 	.word	0x58004000

080167ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80167ec:	b590      	push	{r4, r7, lr}
 80167ee:	b085      	sub	sp, #20
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2bb0      	cmp	r3, #176	@ 0xb0
 80167f8:	d903      	bls.n	8016802 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80167fa:	4b15      	ldr	r3, [pc, #84]	@ (8016850 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80167fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167fe:	60fb      	str	r3, [r7, #12]
 8016800:	e007      	b.n	8016812 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	091b      	lsrs	r3, r3, #4
 8016806:	f003 030f 	and.w	r3, r3, #15
 801680a:	4a11      	ldr	r2, [pc, #68]	@ (8016850 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801680c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016810:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8016812:	f7ff f976 	bl	8015b02 <LL_RCC_GetAHB4Prescaler>
 8016816:	4603      	mov	r3, r0
 8016818:	091b      	lsrs	r3, r3, #4
 801681a:	f003 030f 	and.w	r3, r3, #15
 801681e:	4a0d      	ldr	r2, [pc, #52]	@ (8016854 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8016820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016824:	68fa      	ldr	r2, [r7, #12]
 8016826:	fbb2 f3f3 	udiv	r3, r2, r3
 801682a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	4a0a      	ldr	r2, [pc, #40]	@ (8016858 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8016830:	fba2 2303 	umull	r2, r3, r2, r3
 8016834:	0c9c      	lsrs	r4, r3, #18
 8016836:	f7fe feb7 	bl	80155a8 <HAL_PWREx_GetVoltageRange>
 801683a:	4603      	mov	r3, r0
 801683c:	4619      	mov	r1, r3
 801683e:	4620      	mov	r0, r4
 8016840:	f000 f80c 	bl	801685c <RCC_SetFlashLatency>
 8016844:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8016846:	4618      	mov	r0, r3
 8016848:	3714      	adds	r7, #20
 801684a:	46bd      	mov	sp, r7
 801684c:	bd90      	pop	{r4, r7, pc}
 801684e:	bf00      	nop
 8016850:	0801e2a4 	.word	0x0801e2a4
 8016854:	0801e244 	.word	0x0801e244
 8016858:	431bde83 	.word	0x431bde83

0801685c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801685c:	b590      	push	{r4, r7, lr}
 801685e:	b093      	sub	sp, #76	@ 0x4c
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8016866:	4b37      	ldr	r3, [pc, #220]	@ (8016944 <RCC_SetFlashLatency+0xe8>)
 8016868:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 801686c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801686e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8016872:	4a35      	ldr	r2, [pc, #212]	@ (8016948 <RCC_SetFlashLatency+0xec>)
 8016874:	f107 031c 	add.w	r3, r7, #28
 8016878:	ca07      	ldmia	r2, {r0, r1, r2}
 801687a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801687e:	4b33      	ldr	r3, [pc, #204]	@ (801694c <RCC_SetFlashLatency+0xf0>)
 8016880:	f107 040c 	add.w	r4, r7, #12
 8016884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801688a:	2300      	movs	r3, #0
 801688c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016894:	d11a      	bne.n	80168cc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8016896:	2300      	movs	r3, #0
 8016898:	643b      	str	r3, [r7, #64]	@ 0x40
 801689a:	e013      	b.n	80168c4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801689c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801689e:	009b      	lsls	r3, r3, #2
 80168a0:	3348      	adds	r3, #72	@ 0x48
 80168a2:	443b      	add	r3, r7
 80168a4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80168a8:	687a      	ldr	r2, [r7, #4]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d807      	bhi.n	80168be <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80168ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80168b0:	009b      	lsls	r3, r3, #2
 80168b2:	3348      	adds	r3, #72	@ 0x48
 80168b4:	443b      	add	r3, r7
 80168b6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80168ba:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80168bc:	e020      	b.n	8016900 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80168be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80168c0:	3301      	adds	r3, #1
 80168c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80168c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80168c6:	2b03      	cmp	r3, #3
 80168c8:	d9e8      	bls.n	801689c <RCC_SetFlashLatency+0x40>
 80168ca:	e019      	b.n	8016900 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80168cc:	2300      	movs	r3, #0
 80168ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80168d0:	e013      	b.n	80168fa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80168d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80168d4:	009b      	lsls	r3, r3, #2
 80168d6:	3348      	adds	r3, #72	@ 0x48
 80168d8:	443b      	add	r3, r7
 80168da:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80168de:	687a      	ldr	r2, [r7, #4]
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d807      	bhi.n	80168f4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80168e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80168e6:	009b      	lsls	r3, r3, #2
 80168e8:	3348      	adds	r3, #72	@ 0x48
 80168ea:	443b      	add	r3, r7
 80168ec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80168f0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80168f2:	e005      	b.n	8016900 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80168f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80168f6:	3301      	adds	r3, #1
 80168f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80168fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80168fc:	2b02      	cmp	r3, #2
 80168fe:	d9e8      	bls.n	80168d2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8016900:	4b13      	ldr	r3, [pc, #76]	@ (8016950 <RCC_SetFlashLatency+0xf4>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	f023 0207 	bic.w	r2, r3, #7
 8016908:	4911      	ldr	r1, [pc, #68]	@ (8016950 <RCC_SetFlashLatency+0xf4>)
 801690a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801690c:	4313      	orrs	r3, r2
 801690e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8016910:	f7fd f882 	bl	8013a18 <HAL_GetTick>
 8016914:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8016916:	e008      	b.n	801692a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8016918:	f7fd f87e 	bl	8013a18 <HAL_GetTick>
 801691c:	4602      	mov	r2, r0
 801691e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016920:	1ad3      	subs	r3, r2, r3
 8016922:	2b02      	cmp	r3, #2
 8016924:	d901      	bls.n	801692a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8016926:	2303      	movs	r3, #3
 8016928:	e007      	b.n	801693a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801692a:	4b09      	ldr	r3, [pc, #36]	@ (8016950 <RCC_SetFlashLatency+0xf4>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	f003 0307 	and.w	r3, r3, #7
 8016932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016934:	429a      	cmp	r2, r3
 8016936:	d1ef      	bne.n	8016918 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8016938:	2300      	movs	r3, #0
}
 801693a:	4618      	mov	r0, r3
 801693c:	374c      	adds	r7, #76	@ 0x4c
 801693e:	46bd      	mov	sp, r7
 8016940:	bd90      	pop	{r4, r7, pc}
 8016942:	bf00      	nop
 8016944:	0801dfdc 	.word	0x0801dfdc
 8016948:	0801dfec 	.word	0x0801dfec
 801694c:	0801dff8 	.word	0x0801dff8
 8016950:	58004000 	.word	0x58004000

08016954 <LL_RCC_LSE_IsEnabled>:
{
 8016954:	b480      	push	{r7}
 8016956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8016958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016960:	f003 0301 	and.w	r3, r3, #1
 8016964:	2b01      	cmp	r3, #1
 8016966:	d101      	bne.n	801696c <LL_RCC_LSE_IsEnabled+0x18>
 8016968:	2301      	movs	r3, #1
 801696a:	e000      	b.n	801696e <LL_RCC_LSE_IsEnabled+0x1a>
 801696c:	2300      	movs	r3, #0
}
 801696e:	4618      	mov	r0, r3
 8016970:	46bd      	mov	sp, r7
 8016972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016976:	4770      	bx	lr

08016978 <LL_RCC_LSE_IsReady>:
{
 8016978:	b480      	push	{r7}
 801697a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801697c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016984:	f003 0302 	and.w	r3, r3, #2
 8016988:	2b02      	cmp	r3, #2
 801698a:	d101      	bne.n	8016990 <LL_RCC_LSE_IsReady+0x18>
 801698c:	2301      	movs	r3, #1
 801698e:	e000      	b.n	8016992 <LL_RCC_LSE_IsReady+0x1a>
 8016990:	2300      	movs	r3, #0
}
 8016992:	4618      	mov	r0, r3
 8016994:	46bd      	mov	sp, r7
 8016996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699a:	4770      	bx	lr

0801699c <LL_RCC_MSI_EnablePLLMode>:
{
 801699c:	b480      	push	{r7}
 801699e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80169a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80169aa:	f043 0304 	orr.w	r3, r3, #4
 80169ae:	6013      	str	r3, [r2, #0]
}
 80169b0:	bf00      	nop
 80169b2:	46bd      	mov	sp, r7
 80169b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b8:	4770      	bx	lr

080169ba <LL_RCC_SetRFWKPClockSource>:
{
 80169ba:	b480      	push	{r7}
 80169bc:	b083      	sub	sp, #12
 80169be:	af00      	add	r7, sp, #0
 80169c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80169c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80169c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80169ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80169ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	4313      	orrs	r3, r2
 80169d6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80169da:	bf00      	nop
 80169dc:	370c      	adds	r7, #12
 80169de:	46bd      	mov	sp, r7
 80169e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e4:	4770      	bx	lr

080169e6 <LL_RCC_SetSMPSClockSource>:
{
 80169e6:	b480      	push	{r7}
 80169e8:	b083      	sub	sp, #12
 80169ea:	af00      	add	r7, sp, #0
 80169ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80169ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80169f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169f4:	f023 0203 	bic.w	r2, r3, #3
 80169f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	4313      	orrs	r3, r2
 8016a00:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8016a02:	bf00      	nop
 8016a04:	370c      	adds	r7, #12
 8016a06:	46bd      	mov	sp, r7
 8016a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0c:	4770      	bx	lr

08016a0e <LL_RCC_SetSMPSPrescaler>:
{
 8016a0e:	b480      	push	{r7}
 8016a10:	b083      	sub	sp, #12
 8016a12:	af00      	add	r7, sp, #0
 8016a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8016a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8016a20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	4313      	orrs	r3, r2
 8016a28:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8016a2a:	bf00      	nop
 8016a2c:	370c      	adds	r7, #12
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a34:	4770      	bx	lr

08016a36 <LL_RCC_SetUSARTClockSource>:
{
 8016a36:	b480      	push	{r7}
 8016a38:	b083      	sub	sp, #12
 8016a3a:	af00      	add	r7, sp, #0
 8016a3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8016a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016a46:	f023 0203 	bic.w	r2, r3, #3
 8016a4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	4313      	orrs	r3, r2
 8016a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8016a56:	bf00      	nop
 8016a58:	370c      	adds	r7, #12
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a60:	4770      	bx	lr

08016a62 <LL_RCC_SetLPUARTClockSource>:
{
 8016a62:	b480      	push	{r7}
 8016a64:	b083      	sub	sp, #12
 8016a66:	af00      	add	r7, sp, #0
 8016a68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8016a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016a72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8016a76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	4313      	orrs	r3, r2
 8016a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8016a82:	bf00      	nop
 8016a84:	370c      	adds	r7, #12
 8016a86:	46bd      	mov	sp, r7
 8016a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8c:	4770      	bx	lr

08016a8e <LL_RCC_SetI2CClockSource>:
{
 8016a8e:	b480      	push	{r7}
 8016a90:	b083      	sub	sp, #12
 8016a92:	af00      	add	r7, sp, #0
 8016a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8016a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016a9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	091b      	lsrs	r3, r3, #4
 8016aa2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8016aa6:	43db      	mvns	r3, r3
 8016aa8:	401a      	ands	r2, r3
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	011b      	lsls	r3, r3, #4
 8016aae:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8016ab2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016ab6:	4313      	orrs	r3, r2
 8016ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8016abc:	bf00      	nop
 8016abe:	370c      	adds	r7, #12
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <LL_RCC_SetLPTIMClockSource>:
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b083      	sub	sp, #12
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8016ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016ad4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	0c1b      	lsrs	r3, r3, #16
 8016adc:	041b      	lsls	r3, r3, #16
 8016ade:	43db      	mvns	r3, r3
 8016ae0:	401a      	ands	r2, r3
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	041b      	lsls	r3, r3, #16
 8016ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016aea:	4313      	orrs	r3, r2
 8016aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8016af0:	bf00      	nop
 8016af2:	370c      	adds	r7, #12
 8016af4:	46bd      	mov	sp, r7
 8016af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afa:	4770      	bx	lr

08016afc <LL_RCC_SetSAIClockSource>:
{
 8016afc:	b480      	push	{r7}
 8016afe:	b083      	sub	sp, #12
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8016b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016b0c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8016b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	4313      	orrs	r3, r2
 8016b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8016b1c:	bf00      	nop
 8016b1e:	370c      	adds	r7, #12
 8016b20:	46bd      	mov	sp, r7
 8016b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b26:	4770      	bx	lr

08016b28 <LL_RCC_SetRNGClockSource>:
{
 8016b28:	b480      	push	{r7}
 8016b2a:	b083      	sub	sp, #12
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8016b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016b38:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8016b3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	4313      	orrs	r3, r2
 8016b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8016b48:	bf00      	nop
 8016b4a:	370c      	adds	r7, #12
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr

08016b54 <LL_RCC_SetCLK48ClockSource>:
{
 8016b54:	b480      	push	{r7}
 8016b56:	b083      	sub	sp, #12
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8016b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016b64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8016b68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	4313      	orrs	r3, r2
 8016b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8016b74:	bf00      	nop
 8016b76:	370c      	adds	r7, #12
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7e:	4770      	bx	lr

08016b80 <LL_RCC_SetUSBClockSource>:
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b082      	sub	sp, #8
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f7ff ffe3 	bl	8016b54 <LL_RCC_SetCLK48ClockSource>
}
 8016b8e:	bf00      	nop
 8016b90:	3708      	adds	r7, #8
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}

08016b96 <LL_RCC_SetADCClockSource>:
{
 8016b96:	b480      	push	{r7}
 8016b98:	b083      	sub	sp, #12
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8016b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016ba6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8016baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	4313      	orrs	r3, r2
 8016bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8016bb6:	bf00      	nop
 8016bb8:	370c      	adds	r7, #12
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc0:	4770      	bx	lr

08016bc2 <LL_RCC_SetRTCClockSource>:
{
 8016bc2:	b480      	push	{r7}
 8016bc4:	b083      	sub	sp, #12
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8016bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016bd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8016bd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	4313      	orrs	r3, r2
 8016bde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8016be2:	bf00      	nop
 8016be4:	370c      	adds	r7, #12
 8016be6:	46bd      	mov	sp, r7
 8016be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bec:	4770      	bx	lr

08016bee <LL_RCC_GetRTCClockSource>:
{
 8016bee:	b480      	push	{r7}
 8016bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8016bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	46bd      	mov	sp, r7
 8016c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c06:	4770      	bx	lr

08016c08 <LL_RCC_ForceBackupDomainReset>:
{
 8016c08:	b480      	push	{r7}
 8016c0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8016c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8016c20:	bf00      	nop
 8016c22:	46bd      	mov	sp, r7
 8016c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c28:	4770      	bx	lr

08016c2a <LL_RCC_ReleaseBackupDomainReset>:
{
 8016c2a:	b480      	push	{r7}
 8016c2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8016c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016c36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8016c42:	bf00      	nop
 8016c44:	46bd      	mov	sp, r7
 8016c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4a:	4770      	bx	lr

08016c4c <LL_RCC_PLLSAI1_Enable>:
{
 8016c4c:	b480      	push	{r7}
 8016c4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8016c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016c5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8016c5e:	6013      	str	r3, [r2, #0]
}
 8016c60:	bf00      	nop
 8016c62:	46bd      	mov	sp, r7
 8016c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c68:	4770      	bx	lr

08016c6a <LL_RCC_PLLSAI1_Disable>:
{
 8016c6a:	b480      	push	{r7}
 8016c6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8016c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016c78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8016c7c:	6013      	str	r3, [r2, #0]
}
 8016c7e:	bf00      	nop
 8016c80:	46bd      	mov	sp, r7
 8016c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c86:	4770      	bx	lr

08016c88 <LL_RCC_PLLSAI1_IsReady>:
{
 8016c88:	b480      	push	{r7}
 8016c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8016c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016c96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016c9a:	d101      	bne.n	8016ca0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8016c9c:	2301      	movs	r3, #1
 8016c9e:	e000      	b.n	8016ca2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8016ca0:	2300      	movs	r3, #0
}
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016caa:	4770      	bx	lr

08016cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b088      	sub	sp, #32
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8016cb8:	2300      	movs	r3, #0
 8016cba:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d034      	beq.n	8016d32 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ccc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8016cd0:	d021      	beq.n	8016d16 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8016cd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8016cd6:	d81b      	bhi.n	8016d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8016cd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8016cdc:	d01d      	beq.n	8016d1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8016cde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8016ce2:	d815      	bhi.n	8016d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d00b      	beq.n	8016d00 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8016ce8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016cec:	d110      	bne.n	8016d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8016cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016cf2:	68db      	ldr	r3, [r3, #12]
 8016cf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016cfc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8016cfe:	e00d      	b.n	8016d1c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	3304      	adds	r3, #4
 8016d04:	4618      	mov	r0, r3
 8016d06:	f000 f94d 	bl	8016fa4 <RCCEx_PLLSAI1_ConfigNP>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8016d0e:	e005      	b.n	8016d1c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8016d10:	2301      	movs	r3, #1
 8016d12:	77fb      	strb	r3, [r7, #31]
        break;
 8016d14:	e002      	b.n	8016d1c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8016d16:	bf00      	nop
 8016d18:	e000      	b.n	8016d1c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8016d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016d1c:	7ffb      	ldrb	r3, [r7, #31]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d105      	bne.n	8016d2e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7ff fee8 	bl	8016afc <LL_RCC_SetSAIClockSource>
 8016d2c:	e001      	b.n	8016d32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016d2e:	7ffb      	ldrb	r3, [r7, #31]
 8016d30:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d046      	beq.n	8016dcc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8016d3e:	f7ff ff56 	bl	8016bee <LL_RCC_GetRTCClockSource>
 8016d42:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d48:	69ba      	ldr	r2, [r7, #24]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d03c      	beq.n	8016dc8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8016d4e:	f7fe fc1b 	bl	8015588 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8016d52:	69bb      	ldr	r3, [r7, #24]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d105      	bne.n	8016d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7ff ff30 	bl	8016bc2 <LL_RCC_SetRTCClockSource>
 8016d62:	e02e      	b.n	8016dc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8016d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016d6c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8016d6e:	f7ff ff4b 	bl	8016c08 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8016d72:	f7ff ff5a 	bl	8016c2a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8016d76:	697b      	ldr	r3, [r7, #20]
 8016d78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d80:	4313      	orrs	r3, r2
 8016d82:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8016d84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8016d8e:	f7ff fde1 	bl	8016954 <LL_RCC_LSE_IsEnabled>
 8016d92:	4603      	mov	r3, r0
 8016d94:	2b01      	cmp	r3, #1
 8016d96:	d114      	bne.n	8016dc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8016d98:	f7fc fe3e 	bl	8013a18 <HAL_GetTick>
 8016d9c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8016d9e:	e00b      	b.n	8016db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016da0:	f7fc fe3a 	bl	8013a18 <HAL_GetTick>
 8016da4:	4602      	mov	r2, r0
 8016da6:	693b      	ldr	r3, [r7, #16]
 8016da8:	1ad3      	subs	r3, r2, r3
 8016daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016dae:	4293      	cmp	r3, r2
 8016db0:	d902      	bls.n	8016db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8016db2:	2303      	movs	r3, #3
 8016db4:	77fb      	strb	r3, [r7, #31]
              break;
 8016db6:	e004      	b.n	8016dc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8016db8:	f7ff fdde 	bl	8016978 <LL_RCC_LSE_IsReady>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	2b01      	cmp	r3, #1
 8016dc0:	d1ee      	bne.n	8016da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8016dc2:	7ffb      	ldrb	r3, [r7, #31]
 8016dc4:	77bb      	strb	r3, [r7, #30]
 8016dc6:	e001      	b.n	8016dcc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016dc8:	7ffb      	ldrb	r3, [r7, #31]
 8016dca:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	f003 0301 	and.w	r3, r3, #1
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d004      	beq.n	8016de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	699b      	ldr	r3, [r3, #24]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7ff fe2a 	bl	8016a36 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f003 0302 	and.w	r3, r3, #2
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d004      	beq.n	8016df8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	69db      	ldr	r3, [r3, #28]
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7ff fe35 	bl	8016a62 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	f003 0310 	and.w	r3, r3, #16
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d004      	beq.n	8016e0e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7ff fe5d 	bl	8016ac8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	f003 0320 	and.w	r3, r3, #32
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d004      	beq.n	8016e24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7ff fe52 	bl	8016ac8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	f003 0304 	and.w	r3, r3, #4
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d004      	beq.n	8016e3a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6a1b      	ldr	r3, [r3, #32]
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ff fe2a 	bl	8016a8e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	f003 0308 	and.w	r3, r3, #8
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d004      	beq.n	8016e50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7ff fe1f 	bl	8016a8e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d022      	beq.n	8016ea2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7ff fe8d 	bl	8016b80 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016e6e:	d107      	bne.n	8016e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8016e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016e74:	68db      	ldr	r3, [r3, #12]
 8016e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016e7e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016e88:	d10b      	bne.n	8016ea2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	3304      	adds	r3, #4
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f000 f8e3 	bl	801705a <RCCEx_PLLSAI1_ConfigNQ>
 8016e94:	4603      	mov	r3, r0
 8016e96:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8016e98:	7ffb      	ldrb	r3, [r7, #31]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d001      	beq.n	8016ea2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8016e9e:	7ffb      	ldrb	r3, [r7, #31]
 8016ea0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d02b      	beq.n	8016f06 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016eb6:	d008      	beq.n	8016eca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016ec0:	d003      	beq.n	8016eca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d105      	bne.n	8016ed6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7ff fe2a 	bl	8016b28 <LL_RCC_SetRNGClockSource>
 8016ed4:	e00a      	b.n	8016eec <HAL_RCCEx_PeriphCLKConfig+0x240>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016eda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016ede:	60fb      	str	r3, [r7, #12]
 8016ee0:	2000      	movs	r0, #0
 8016ee2:	f7ff fe21 	bl	8016b28 <LL_RCC_SetRNGClockSource>
 8016ee6:	68f8      	ldr	r0, [r7, #12]
 8016ee8:	f7ff fe34 	bl	8016b54 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ef0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8016ef4:	d107      	bne.n	8016f06 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8016ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016f00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016f04:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d022      	beq.n	8016f58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7ff fe3d 	bl	8016b96 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016f24:	d107      	bne.n	8016f36 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8016f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016f2a:	68db      	ldr	r3, [r3, #12]
 8016f2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016f34:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016f3e:	d10b      	bne.n	8016f58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	3304      	adds	r3, #4
 8016f44:	4618      	mov	r0, r3
 8016f46:	f000 f8e3 	bl	8017110 <RCCEx_PLLSAI1_ConfigNR>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8016f4e:	7ffb      	ldrb	r3, [r7, #31]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d001      	beq.n	8016f58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8016f54:	7ffb      	ldrb	r3, [r7, #31]
 8016f56:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d004      	beq.n	8016f6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7ff fd26 	bl	80169ba <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d009      	beq.n	8016f8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7ff fd45 	bl	8016a0e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7ff fd2c 	bl	80169e6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8016f8e:	7fbb      	ldrb	r3, [r7, #30]
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	3720      	adds	r7, #32
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8016f9c:	f7ff fcfe 	bl	801699c <LL_RCC_MSI_EnablePLLMode>
}
 8016fa0:	bf00      	nop
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b084      	sub	sp, #16
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016fac:	2300      	movs	r3, #0
 8016fae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8016fb0:	f7ff fe5b 	bl	8016c6a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8016fb4:	f7fc fd30 	bl	8013a18 <HAL_GetTick>
 8016fb8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8016fba:	e009      	b.n	8016fd0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8016fbc:	f7fc fd2c 	bl	8013a18 <HAL_GetTick>
 8016fc0:	4602      	mov	r2, r0
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	1ad3      	subs	r3, r2, r3
 8016fc6:	2b02      	cmp	r3, #2
 8016fc8:	d902      	bls.n	8016fd0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8016fca:	2303      	movs	r3, #3
 8016fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8016fce:	e004      	b.n	8016fda <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8016fd0:	f7ff fe5a 	bl	8016c88 <LL_RCC_PLLSAI1_IsReady>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d1f0      	bne.n	8016fbc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8016fda:	7bfb      	ldrb	r3, [r7, #15]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d137      	bne.n	8017050 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8016fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016fe4:	691b      	ldr	r3, [r3, #16]
 8016fe6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	021b      	lsls	r3, r3, #8
 8016ff0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016ff4:	4313      	orrs	r3, r2
 8016ff6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8016ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016ffc:	691b      	ldr	r3, [r3, #16]
 8016ffe:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	685b      	ldr	r3, [r3, #4]
 8017006:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801700a:	4313      	orrs	r3, r2
 801700c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801700e:	f7ff fe1d 	bl	8016c4c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017012:	f7fc fd01 	bl	8013a18 <HAL_GetTick>
 8017016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8017018:	e009      	b.n	801702e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801701a:	f7fc fcfd 	bl	8013a18 <HAL_GetTick>
 801701e:	4602      	mov	r2, r0
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	1ad3      	subs	r3, r2, r3
 8017024:	2b02      	cmp	r3, #2
 8017026:	d902      	bls.n	801702e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8017028:	2303      	movs	r3, #3
 801702a:	73fb      	strb	r3, [r7, #15]
        break;
 801702c:	e004      	b.n	8017038 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801702e:	f7ff fe2b 	bl	8016c88 <LL_RCC_PLLSAI1_IsReady>
 8017032:	4603      	mov	r3, r0
 8017034:	2b01      	cmp	r3, #1
 8017036:	d1f0      	bne.n	801701a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8017038:	7bfb      	ldrb	r3, [r7, #15]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d108      	bne.n	8017050 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801703e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017042:	691a      	ldr	r2, [r3, #16]
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	691b      	ldr	r3, [r3, #16]
 8017048:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801704c:	4313      	orrs	r3, r2
 801704e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8017050:	7bfb      	ldrb	r3, [r7, #15]
}
 8017052:	4618      	mov	r0, r3
 8017054:	3710      	adds	r7, #16
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}

0801705a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801705a:	b580      	push	{r7, lr}
 801705c:	b084      	sub	sp, #16
 801705e:	af00      	add	r7, sp, #0
 8017060:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8017062:	2300      	movs	r3, #0
 8017064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8017066:	f7ff fe00 	bl	8016c6a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801706a:	f7fc fcd5 	bl	8013a18 <HAL_GetTick>
 801706e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8017070:	e009      	b.n	8017086 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8017072:	f7fc fcd1 	bl	8013a18 <HAL_GetTick>
 8017076:	4602      	mov	r2, r0
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	1ad3      	subs	r3, r2, r3
 801707c:	2b02      	cmp	r3, #2
 801707e:	d902      	bls.n	8017086 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8017080:	2303      	movs	r3, #3
 8017082:	73fb      	strb	r3, [r7, #15]
      break;
 8017084:	e004      	b.n	8017090 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8017086:	f7ff fdff 	bl	8016c88 <LL_RCC_PLLSAI1_IsReady>
 801708a:	4603      	mov	r3, r0
 801708c:	2b00      	cmp	r3, #0
 801708e:	d1f0      	bne.n	8017072 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8017090:	7bfb      	ldrb	r3, [r7, #15]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d137      	bne.n	8017106 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8017096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801709a:	691b      	ldr	r3, [r3, #16]
 801709c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	021b      	lsls	r3, r3, #8
 80170a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80170aa:	4313      	orrs	r3, r2
 80170ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80170ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80170b2:	691b      	ldr	r3, [r3, #16]
 80170b4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	689b      	ldr	r3, [r3, #8]
 80170bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80170c0:	4313      	orrs	r3, r2
 80170c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80170c4:	f7ff fdc2 	bl	8016c4c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80170c8:	f7fc fca6 	bl	8013a18 <HAL_GetTick>
 80170cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80170ce:	e009      	b.n	80170e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80170d0:	f7fc fca2 	bl	8013a18 <HAL_GetTick>
 80170d4:	4602      	mov	r2, r0
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	1ad3      	subs	r3, r2, r3
 80170da:	2b02      	cmp	r3, #2
 80170dc:	d902      	bls.n	80170e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80170de:	2303      	movs	r3, #3
 80170e0:	73fb      	strb	r3, [r7, #15]
        break;
 80170e2:	e004      	b.n	80170ee <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80170e4:	f7ff fdd0 	bl	8016c88 <LL_RCC_PLLSAI1_IsReady>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	d1f0      	bne.n	80170d0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80170ee:	7bfb      	ldrb	r3, [r7, #15]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d108      	bne.n	8017106 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80170f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80170f8:	691a      	ldr	r2, [r3, #16]
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	691b      	ldr	r3, [r3, #16]
 80170fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017102:	4313      	orrs	r3, r2
 8017104:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8017106:	7bfb      	ldrb	r3, [r7, #15]
}
 8017108:	4618      	mov	r0, r3
 801710a:	3710      	adds	r7, #16
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}

08017110 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b084      	sub	sp, #16
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8017118:	2300      	movs	r3, #0
 801711a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801711c:	f7ff fda5 	bl	8016c6a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017120:	f7fc fc7a 	bl	8013a18 <HAL_GetTick>
 8017124:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8017126:	e009      	b.n	801713c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8017128:	f7fc fc76 	bl	8013a18 <HAL_GetTick>
 801712c:	4602      	mov	r2, r0
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	1ad3      	subs	r3, r2, r3
 8017132:	2b02      	cmp	r3, #2
 8017134:	d902      	bls.n	801713c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8017136:	2303      	movs	r3, #3
 8017138:	73fb      	strb	r3, [r7, #15]
      break;
 801713a:	e004      	b.n	8017146 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801713c:	f7ff fda4 	bl	8016c88 <LL_RCC_PLLSAI1_IsReady>
 8017140:	4603      	mov	r3, r0
 8017142:	2b00      	cmp	r3, #0
 8017144:	d1f0      	bne.n	8017128 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8017146:	7bfb      	ldrb	r3, [r7, #15]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d137      	bne.n	80171bc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801714c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017150:	691b      	ldr	r3, [r3, #16]
 8017152:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	021b      	lsls	r3, r3, #8
 801715c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017160:	4313      	orrs	r3, r2
 8017162:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8017164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017168:	691b      	ldr	r3, [r3, #16]
 801716a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	68db      	ldr	r3, [r3, #12]
 8017172:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017176:	4313      	orrs	r3, r2
 8017178:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801717a:	f7ff fd67 	bl	8016c4c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801717e:	f7fc fc4b 	bl	8013a18 <HAL_GetTick>
 8017182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8017184:	e009      	b.n	801719a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8017186:	f7fc fc47 	bl	8013a18 <HAL_GetTick>
 801718a:	4602      	mov	r2, r0
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	1ad3      	subs	r3, r2, r3
 8017190:	2b02      	cmp	r3, #2
 8017192:	d902      	bls.n	801719a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8017194:	2303      	movs	r3, #3
 8017196:	73fb      	strb	r3, [r7, #15]
        break;
 8017198:	e004      	b.n	80171a4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801719a:	f7ff fd75 	bl	8016c88 <LL_RCC_PLLSAI1_IsReady>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b01      	cmp	r3, #1
 80171a2:	d1f0      	bne.n	8017186 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80171a4:	7bfb      	ldrb	r3, [r7, #15]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d108      	bne.n	80171bc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80171aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80171ae:	691a      	ldr	r2, [r3, #16]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	691b      	ldr	r3, [r3, #16]
 80171b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80171b8:	4313      	orrs	r3, r2
 80171ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80171bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80171be:	4618      	mov	r0, r3
 80171c0:	3710      	adds	r7, #16
 80171c2:	46bd      	mov	sp, r7
 80171c4:	bd80      	pop	{r7, pc}

080171c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80171c6:	b580      	push	{r7, lr}
 80171c8:	b082      	sub	sp, #8
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d101      	bne.n	80171d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80171d4:	2301      	movs	r3, #1
 80171d6:	e049      	b.n	801726c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d106      	bne.n	80171f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2200      	movs	r2, #0
 80171e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80171ec:	6878      	ldr	r0, [r7, #4]
 80171ee:	f7e9 fe35 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	2202      	movs	r2, #2
 80171f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681a      	ldr	r2, [r3, #0]
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	3304      	adds	r3, #4
 8017202:	4619      	mov	r1, r3
 8017204:	4610      	mov	r0, r2
 8017206:	f000 fa7b 	bl	8017700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	2201      	movs	r2, #1
 801720e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	2201      	movs	r2, #1
 8017216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	2201      	movs	r2, #1
 801721e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2201      	movs	r2, #1
 8017226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	2201      	movs	r2, #1
 801722e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2201      	movs	r2, #1
 8017236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2201      	movs	r2, #1
 801723e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	2201      	movs	r2, #1
 8017246:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2201      	movs	r2, #1
 801724e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2201      	movs	r2, #1
 8017256:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	2201      	movs	r2, #1
 801725e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	2201      	movs	r2, #1
 8017266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801726a:	2300      	movs	r3, #0
}
 801726c:	4618      	mov	r0, r3
 801726e:	3708      	adds	r7, #8
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}

08017274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017274:	b480      	push	{r7}
 8017276:	b085      	sub	sp, #20
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8017282:	b2db      	uxtb	r3, r3
 8017284:	2b01      	cmp	r3, #1
 8017286:	d001      	beq.n	801728c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8017288:	2301      	movs	r3, #1
 801728a:	e036      	b.n	80172fa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2202      	movs	r2, #2
 8017290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	68da      	ldr	r2, [r3, #12]
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	f042 0201 	orr.w	r2, r2, #1
 80172a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	4a17      	ldr	r2, [pc, #92]	@ (8017308 <HAL_TIM_Base_Start_IT+0x94>)
 80172aa:	4293      	cmp	r3, r2
 80172ac:	d004      	beq.n	80172b8 <HAL_TIM_Base_Start_IT+0x44>
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80172b6:	d115      	bne.n	80172e4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	689a      	ldr	r2, [r3, #8]
 80172be:	4b13      	ldr	r3, [pc, #76]	@ (801730c <HAL_TIM_Base_Start_IT+0x98>)
 80172c0:	4013      	ands	r3, r2
 80172c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2b06      	cmp	r3, #6
 80172c8:	d015      	beq.n	80172f6 <HAL_TIM_Base_Start_IT+0x82>
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80172d0:	d011      	beq.n	80172f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	681a      	ldr	r2, [r3, #0]
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	f042 0201 	orr.w	r2, r2, #1
 80172e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80172e2:	e008      	b.n	80172f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	f042 0201 	orr.w	r2, r2, #1
 80172f2:	601a      	str	r2, [r3, #0]
 80172f4:	e000      	b.n	80172f8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80172f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80172f8:	2300      	movs	r3, #0
}
 80172fa:	4618      	mov	r0, r3
 80172fc:	3714      	adds	r7, #20
 80172fe:	46bd      	mov	sp, r7
 8017300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017304:	4770      	bx	lr
 8017306:	bf00      	nop
 8017308:	40012c00 	.word	0x40012c00
 801730c:	00010007 	.word	0x00010007

08017310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b084      	sub	sp, #16
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	68db      	ldr	r3, [r3, #12]
 801731e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	691b      	ldr	r3, [r3, #16]
 8017326:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	f003 0302 	and.w	r3, r3, #2
 801732e:	2b00      	cmp	r3, #0
 8017330:	d020      	beq.n	8017374 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	f003 0302 	and.w	r3, r3, #2
 8017338:	2b00      	cmp	r3, #0
 801733a:	d01b      	beq.n	8017374 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	f06f 0202 	mvn.w	r2, #2
 8017344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2201      	movs	r2, #1
 801734a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	699b      	ldr	r3, [r3, #24]
 8017352:	f003 0303 	and.w	r3, r3, #3
 8017356:	2b00      	cmp	r3, #0
 8017358:	d003      	beq.n	8017362 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f000 f9b2 	bl	80176c4 <HAL_TIM_IC_CaptureCallback>
 8017360:	e005      	b.n	801736e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017362:	6878      	ldr	r0, [r7, #4]
 8017364:	f000 f9a4 	bl	80176b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f000 f9b5 	bl	80176d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	2200      	movs	r2, #0
 8017372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	f003 0304 	and.w	r3, r3, #4
 801737a:	2b00      	cmp	r3, #0
 801737c:	d020      	beq.n	80173c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	f003 0304 	and.w	r3, r3, #4
 8017384:	2b00      	cmp	r3, #0
 8017386:	d01b      	beq.n	80173c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	f06f 0204 	mvn.w	r2, #4
 8017390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	2202      	movs	r2, #2
 8017396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	699b      	ldr	r3, [r3, #24]
 801739e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d003      	beq.n	80173ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f000 f98c 	bl	80176c4 <HAL_TIM_IC_CaptureCallback>
 80173ac:	e005      	b.n	80173ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f000 f97e 	bl	80176b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f000 f98f 	bl	80176d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	2200      	movs	r2, #0
 80173be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	f003 0308 	and.w	r3, r3, #8
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d020      	beq.n	801740c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	f003 0308 	and.w	r3, r3, #8
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d01b      	beq.n	801740c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	f06f 0208 	mvn.w	r2, #8
 80173dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2204      	movs	r2, #4
 80173e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	69db      	ldr	r3, [r3, #28]
 80173ea:	f003 0303 	and.w	r3, r3, #3
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d003      	beq.n	80173fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80173f2:	6878      	ldr	r0, [r7, #4]
 80173f4:	f000 f966 	bl	80176c4 <HAL_TIM_IC_CaptureCallback>
 80173f8:	e005      	b.n	8017406 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	f000 f958 	bl	80176b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 f969 	bl	80176d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	2200      	movs	r2, #0
 801740a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	f003 0310 	and.w	r3, r3, #16
 8017412:	2b00      	cmp	r3, #0
 8017414:	d020      	beq.n	8017458 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	f003 0310 	and.w	r3, r3, #16
 801741c:	2b00      	cmp	r3, #0
 801741e:	d01b      	beq.n	8017458 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	f06f 0210 	mvn.w	r2, #16
 8017428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	2208      	movs	r2, #8
 801742e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	69db      	ldr	r3, [r3, #28]
 8017436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801743a:	2b00      	cmp	r3, #0
 801743c:	d003      	beq.n	8017446 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f000 f940 	bl	80176c4 <HAL_TIM_IC_CaptureCallback>
 8017444:	e005      	b.n	8017452 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017446:	6878      	ldr	r0, [r7, #4]
 8017448:	f000 f932 	bl	80176b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801744c:	6878      	ldr	r0, [r7, #4]
 801744e:	f000 f943 	bl	80176d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2200      	movs	r2, #0
 8017456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	f003 0301 	and.w	r3, r3, #1
 801745e:	2b00      	cmp	r3, #0
 8017460:	d00c      	beq.n	801747c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	f003 0301 	and.w	r3, r3, #1
 8017468:	2b00      	cmp	r3, #0
 801746a:	d007      	beq.n	801747c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	f06f 0201 	mvn.w	r2, #1
 8017474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f7e9 fc56 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801747c:	68bb      	ldr	r3, [r7, #8]
 801747e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017482:	2b00      	cmp	r3, #0
 8017484:	d104      	bne.n	8017490 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8017486:	68bb      	ldr	r3, [r7, #8]
 8017488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801748c:	2b00      	cmp	r3, #0
 801748e:	d00c      	beq.n	80174aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017496:	2b00      	cmp	r3, #0
 8017498:	d007      	beq.n	80174aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80174a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80174a4:	6878      	ldr	r0, [r7, #4]
 80174a6:	f000 faa1 	bl	80179ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d00c      	beq.n	80174ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d007      	beq.n	80174ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80174c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80174c8:	6878      	ldr	r0, [r7, #4]
 80174ca:	f000 fa99 	bl	8017a00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d00c      	beq.n	80174f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d007      	beq.n	80174f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80174ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f000 f8fd 	bl	80176ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	f003 0320 	and.w	r3, r3, #32
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d00c      	beq.n	8017516 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	f003 0320 	and.w	r3, r3, #32
 8017502:	2b00      	cmp	r3, #0
 8017504:	d007      	beq.n	8017516 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	f06f 0220 	mvn.w	r2, #32
 801750e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017510:	6878      	ldr	r0, [r7, #4]
 8017512:	f000 fa61 	bl	80179d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017516:	bf00      	nop
 8017518:	3710      	adds	r7, #16
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}

0801751e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801751e:	b580      	push	{r7, lr}
 8017520:	b084      	sub	sp, #16
 8017522:	af00      	add	r7, sp, #0
 8017524:	6078      	str	r0, [r7, #4]
 8017526:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017528:	2300      	movs	r3, #0
 801752a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017532:	2b01      	cmp	r3, #1
 8017534:	d101      	bne.n	801753a <HAL_TIM_ConfigClockSource+0x1c>
 8017536:	2302      	movs	r3, #2
 8017538:	e0b6      	b.n	80176a8 <HAL_TIM_ConfigClockSource+0x18a>
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	2201      	movs	r2, #1
 801753e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	2202      	movs	r2, #2
 8017546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	689b      	ldr	r3, [r3, #8]
 8017550:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8017558:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801755c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017564:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	68ba      	ldr	r2, [r7, #8]
 801756c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017576:	d03e      	beq.n	80175f6 <HAL_TIM_ConfigClockSource+0xd8>
 8017578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801757c:	f200 8087 	bhi.w	801768e <HAL_TIM_ConfigClockSource+0x170>
 8017580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017584:	f000 8086 	beq.w	8017694 <HAL_TIM_ConfigClockSource+0x176>
 8017588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801758c:	d87f      	bhi.n	801768e <HAL_TIM_ConfigClockSource+0x170>
 801758e:	2b70      	cmp	r3, #112	@ 0x70
 8017590:	d01a      	beq.n	80175c8 <HAL_TIM_ConfigClockSource+0xaa>
 8017592:	2b70      	cmp	r3, #112	@ 0x70
 8017594:	d87b      	bhi.n	801768e <HAL_TIM_ConfigClockSource+0x170>
 8017596:	2b60      	cmp	r3, #96	@ 0x60
 8017598:	d050      	beq.n	801763c <HAL_TIM_ConfigClockSource+0x11e>
 801759a:	2b60      	cmp	r3, #96	@ 0x60
 801759c:	d877      	bhi.n	801768e <HAL_TIM_ConfigClockSource+0x170>
 801759e:	2b50      	cmp	r3, #80	@ 0x50
 80175a0:	d03c      	beq.n	801761c <HAL_TIM_ConfigClockSource+0xfe>
 80175a2:	2b50      	cmp	r3, #80	@ 0x50
 80175a4:	d873      	bhi.n	801768e <HAL_TIM_ConfigClockSource+0x170>
 80175a6:	2b40      	cmp	r3, #64	@ 0x40
 80175a8:	d058      	beq.n	801765c <HAL_TIM_ConfigClockSource+0x13e>
 80175aa:	2b40      	cmp	r3, #64	@ 0x40
 80175ac:	d86f      	bhi.n	801768e <HAL_TIM_ConfigClockSource+0x170>
 80175ae:	2b30      	cmp	r3, #48	@ 0x30
 80175b0:	d064      	beq.n	801767c <HAL_TIM_ConfigClockSource+0x15e>
 80175b2:	2b30      	cmp	r3, #48	@ 0x30
 80175b4:	d86b      	bhi.n	801768e <HAL_TIM_ConfigClockSource+0x170>
 80175b6:	2b20      	cmp	r3, #32
 80175b8:	d060      	beq.n	801767c <HAL_TIM_ConfigClockSource+0x15e>
 80175ba:	2b20      	cmp	r3, #32
 80175bc:	d867      	bhi.n	801768e <HAL_TIM_ConfigClockSource+0x170>
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d05c      	beq.n	801767c <HAL_TIM_ConfigClockSource+0x15e>
 80175c2:	2b10      	cmp	r3, #16
 80175c4:	d05a      	beq.n	801767c <HAL_TIM_ConfigClockSource+0x15e>
 80175c6:	e062      	b.n	801768e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80175d4:	683b      	ldr	r3, [r7, #0]
 80175d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80175d8:	f000 f97e 	bl	80178d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	689b      	ldr	r3, [r3, #8]
 80175e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80175ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	68ba      	ldr	r2, [r7, #8]
 80175f2:	609a      	str	r2, [r3, #8]
      break;
 80175f4:	e04f      	b.n	8017696 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017606:	f000 f967 	bl	80178d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	689a      	ldr	r2, [r3, #8]
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017618:	609a      	str	r2, [r3, #8]
      break;
 801761a:	e03c      	b.n	8017696 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017620:	683b      	ldr	r3, [r7, #0]
 8017622:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017628:	461a      	mov	r2, r3
 801762a:	f000 f8d9 	bl	80177e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	2150      	movs	r1, #80	@ 0x50
 8017634:	4618      	mov	r0, r3
 8017636:	f000 f932 	bl	801789e <TIM_ITRx_SetConfig>
      break;
 801763a:	e02c      	b.n	8017696 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017640:	683b      	ldr	r3, [r7, #0]
 8017642:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017648:	461a      	mov	r2, r3
 801764a:	f000 f8f8 	bl	801783e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	2160      	movs	r1, #96	@ 0x60
 8017654:	4618      	mov	r0, r3
 8017656:	f000 f922 	bl	801789e <TIM_ITRx_SetConfig>
      break;
 801765a:	e01c      	b.n	8017696 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017660:	683b      	ldr	r3, [r7, #0]
 8017662:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017668:	461a      	mov	r2, r3
 801766a:	f000 f8b9 	bl	80177e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	2140      	movs	r1, #64	@ 0x40
 8017674:	4618      	mov	r0, r3
 8017676:	f000 f912 	bl	801789e <TIM_ITRx_SetConfig>
      break;
 801767a:	e00c      	b.n	8017696 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681a      	ldr	r2, [r3, #0]
 8017680:	683b      	ldr	r3, [r7, #0]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	4619      	mov	r1, r3
 8017686:	4610      	mov	r0, r2
 8017688:	f000 f909 	bl	801789e <TIM_ITRx_SetConfig>
      break;
 801768c:	e003      	b.n	8017696 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801768e:	2301      	movs	r3, #1
 8017690:	73fb      	strb	r3, [r7, #15]
      break;
 8017692:	e000      	b.n	8017696 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8017694:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	2201      	movs	r2, #1
 801769a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2200      	movs	r2, #0
 80176a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80176a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3710      	adds	r7, #16
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80176b0:	b480      	push	{r7}
 80176b2:	b083      	sub	sp, #12
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80176b8:	bf00      	nop
 80176ba:	370c      	adds	r7, #12
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr

080176c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80176c4:	b480      	push	{r7}
 80176c6:	b083      	sub	sp, #12
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80176cc:	bf00      	nop
 80176ce:	370c      	adds	r7, #12
 80176d0:	46bd      	mov	sp, r7
 80176d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d6:	4770      	bx	lr

080176d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80176d8:	b480      	push	{r7}
 80176da:	b083      	sub	sp, #12
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80176e0:	bf00      	nop
 80176e2:	370c      	adds	r7, #12
 80176e4:	46bd      	mov	sp, r7
 80176e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ea:	4770      	bx	lr

080176ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80176f4:	bf00      	nop
 80176f6:	370c      	adds	r7, #12
 80176f8:	46bd      	mov	sp, r7
 80176fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fe:	4770      	bx	lr

08017700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017700:	b480      	push	{r7}
 8017702:	b085      	sub	sp, #20
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	4a30      	ldr	r2, [pc, #192]	@ (80177d4 <TIM_Base_SetConfig+0xd4>)
 8017714:	4293      	cmp	r3, r2
 8017716:	d003      	beq.n	8017720 <TIM_Base_SetConfig+0x20>
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801771e:	d108      	bne.n	8017732 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	685b      	ldr	r3, [r3, #4]
 801772c:	68fa      	ldr	r2, [r7, #12]
 801772e:	4313      	orrs	r3, r2
 8017730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	4a27      	ldr	r2, [pc, #156]	@ (80177d4 <TIM_Base_SetConfig+0xd4>)
 8017736:	4293      	cmp	r3, r2
 8017738:	d00b      	beq.n	8017752 <TIM_Base_SetConfig+0x52>
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017740:	d007      	beq.n	8017752 <TIM_Base_SetConfig+0x52>
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	4a24      	ldr	r2, [pc, #144]	@ (80177d8 <TIM_Base_SetConfig+0xd8>)
 8017746:	4293      	cmp	r3, r2
 8017748:	d003      	beq.n	8017752 <TIM_Base_SetConfig+0x52>
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	4a23      	ldr	r2, [pc, #140]	@ (80177dc <TIM_Base_SetConfig+0xdc>)
 801774e:	4293      	cmp	r3, r2
 8017750:	d108      	bne.n	8017764 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	68db      	ldr	r3, [r3, #12]
 801775e:	68fa      	ldr	r2, [r7, #12]
 8017760:	4313      	orrs	r3, r2
 8017762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	695b      	ldr	r3, [r3, #20]
 801776e:	4313      	orrs	r3, r2
 8017770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	68fa      	ldr	r2, [r7, #12]
 8017776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	689a      	ldr	r2, [r3, #8]
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	681a      	ldr	r2, [r3, #0]
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	4a12      	ldr	r2, [pc, #72]	@ (80177d4 <TIM_Base_SetConfig+0xd4>)
 801778c:	4293      	cmp	r3, r2
 801778e:	d007      	beq.n	80177a0 <TIM_Base_SetConfig+0xa0>
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	4a11      	ldr	r2, [pc, #68]	@ (80177d8 <TIM_Base_SetConfig+0xd8>)
 8017794:	4293      	cmp	r3, r2
 8017796:	d003      	beq.n	80177a0 <TIM_Base_SetConfig+0xa0>
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	4a10      	ldr	r2, [pc, #64]	@ (80177dc <TIM_Base_SetConfig+0xdc>)
 801779c:	4293      	cmp	r3, r2
 801779e:	d103      	bne.n	80177a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	691a      	ldr	r2, [r3, #16]
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	2201      	movs	r2, #1
 80177ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	691b      	ldr	r3, [r3, #16]
 80177b2:	f003 0301 	and.w	r3, r3, #1
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	d105      	bne.n	80177c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	691b      	ldr	r3, [r3, #16]
 80177be:	f023 0201 	bic.w	r2, r3, #1
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	611a      	str	r2, [r3, #16]
  }
}
 80177c6:	bf00      	nop
 80177c8:	3714      	adds	r7, #20
 80177ca:	46bd      	mov	sp, r7
 80177cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d0:	4770      	bx	lr
 80177d2:	bf00      	nop
 80177d4:	40012c00 	.word	0x40012c00
 80177d8:	40014400 	.word	0x40014400
 80177dc:	40014800 	.word	0x40014800

080177e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80177e0:	b480      	push	{r7}
 80177e2:	b087      	sub	sp, #28
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	60f8      	str	r0, [r7, #12]
 80177e8:	60b9      	str	r1, [r7, #8]
 80177ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	6a1b      	ldr	r3, [r3, #32]
 80177f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	6a1b      	ldr	r3, [r3, #32]
 80177f6:	f023 0201 	bic.w	r2, r3, #1
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	699b      	ldr	r3, [r3, #24]
 8017802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017804:	693b      	ldr	r3, [r7, #16]
 8017806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801780a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	011b      	lsls	r3, r3, #4
 8017810:	693a      	ldr	r2, [r7, #16]
 8017812:	4313      	orrs	r3, r2
 8017814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017816:	697b      	ldr	r3, [r7, #20]
 8017818:	f023 030a 	bic.w	r3, r3, #10
 801781c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801781e:	697a      	ldr	r2, [r7, #20]
 8017820:	68bb      	ldr	r3, [r7, #8]
 8017822:	4313      	orrs	r3, r2
 8017824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	693a      	ldr	r2, [r7, #16]
 801782a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	697a      	ldr	r2, [r7, #20]
 8017830:	621a      	str	r2, [r3, #32]
}
 8017832:	bf00      	nop
 8017834:	371c      	adds	r7, #28
 8017836:	46bd      	mov	sp, r7
 8017838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801783c:	4770      	bx	lr

0801783e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801783e:	b480      	push	{r7}
 8017840:	b087      	sub	sp, #28
 8017842:	af00      	add	r7, sp, #0
 8017844:	60f8      	str	r0, [r7, #12]
 8017846:	60b9      	str	r1, [r7, #8]
 8017848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	6a1b      	ldr	r3, [r3, #32]
 801784e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	6a1b      	ldr	r3, [r3, #32]
 8017854:	f023 0210 	bic.w	r2, r3, #16
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	699b      	ldr	r3, [r3, #24]
 8017860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017862:	693b      	ldr	r3, [r7, #16]
 8017864:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	031b      	lsls	r3, r3, #12
 801786e:	693a      	ldr	r2, [r7, #16]
 8017870:	4313      	orrs	r3, r2
 8017872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017874:	697b      	ldr	r3, [r7, #20]
 8017876:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801787a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801787c:	68bb      	ldr	r3, [r7, #8]
 801787e:	011b      	lsls	r3, r3, #4
 8017880:	697a      	ldr	r2, [r7, #20]
 8017882:	4313      	orrs	r3, r2
 8017884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	693a      	ldr	r2, [r7, #16]
 801788a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	697a      	ldr	r2, [r7, #20]
 8017890:	621a      	str	r2, [r3, #32]
}
 8017892:	bf00      	nop
 8017894:	371c      	adds	r7, #28
 8017896:	46bd      	mov	sp, r7
 8017898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789c:	4770      	bx	lr

0801789e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801789e:	b480      	push	{r7}
 80178a0:	b085      	sub	sp, #20
 80178a2:	af00      	add	r7, sp, #0
 80178a4:	6078      	str	r0, [r7, #4]
 80178a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	689b      	ldr	r3, [r3, #8]
 80178ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80178b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80178b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80178ba:	683a      	ldr	r2, [r7, #0]
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	4313      	orrs	r3, r2
 80178c0:	f043 0307 	orr.w	r3, r3, #7
 80178c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	68fa      	ldr	r2, [r7, #12]
 80178ca:	609a      	str	r2, [r3, #8]
}
 80178cc:	bf00      	nop
 80178ce:	3714      	adds	r7, #20
 80178d0:	46bd      	mov	sp, r7
 80178d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d6:	4770      	bx	lr

080178d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80178d8:	b480      	push	{r7}
 80178da:	b087      	sub	sp, #28
 80178dc:	af00      	add	r7, sp, #0
 80178de:	60f8      	str	r0, [r7, #12]
 80178e0:	60b9      	str	r1, [r7, #8]
 80178e2:	607a      	str	r2, [r7, #4]
 80178e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	689b      	ldr	r3, [r3, #8]
 80178ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80178ec:	697b      	ldr	r3, [r7, #20]
 80178ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80178f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	021a      	lsls	r2, r3, #8
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	431a      	orrs	r2, r3
 80178fc:	68bb      	ldr	r3, [r7, #8]
 80178fe:	4313      	orrs	r3, r2
 8017900:	697a      	ldr	r2, [r7, #20]
 8017902:	4313      	orrs	r3, r2
 8017904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	697a      	ldr	r2, [r7, #20]
 801790a:	609a      	str	r2, [r3, #8]
}
 801790c:	bf00      	nop
 801790e:	371c      	adds	r7, #28
 8017910:	46bd      	mov	sp, r7
 8017912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017916:	4770      	bx	lr

08017918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017918:	b480      	push	{r7}
 801791a:	b085      	sub	sp, #20
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017928:	2b01      	cmp	r3, #1
 801792a:	d101      	bne.n	8017930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801792c:	2302      	movs	r3, #2
 801792e:	e04a      	b.n	80179c6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2201      	movs	r2, #1
 8017934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2202      	movs	r2, #2
 801793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	685b      	ldr	r3, [r3, #4]
 8017946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	689b      	ldr	r3, [r3, #8]
 801794e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	4a1f      	ldr	r2, [pc, #124]	@ (80179d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8017956:	4293      	cmp	r3, r2
 8017958:	d108      	bne.n	801796c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017960:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017962:	683b      	ldr	r3, [r7, #0]
 8017964:	685b      	ldr	r3, [r3, #4]
 8017966:	68fa      	ldr	r2, [r7, #12]
 8017968:	4313      	orrs	r3, r2
 801796a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	68fa      	ldr	r2, [r7, #12]
 801797a:	4313      	orrs	r3, r2
 801797c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	68fa      	ldr	r2, [r7, #12]
 8017984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	4a12      	ldr	r2, [pc, #72]	@ (80179d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801798c:	4293      	cmp	r3, r2
 801798e:	d004      	beq.n	801799a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017998:	d10c      	bne.n	80179b4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801799a:	68bb      	ldr	r3, [r7, #8]
 801799c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80179a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	689b      	ldr	r3, [r3, #8]
 80179a6:	68ba      	ldr	r2, [r7, #8]
 80179a8:	4313      	orrs	r3, r2
 80179aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	68ba      	ldr	r2, [r7, #8]
 80179b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2201      	movs	r2, #1
 80179b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	2200      	movs	r2, #0
 80179c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80179c4:	2300      	movs	r3, #0
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3714      	adds	r7, #20
 80179ca:	46bd      	mov	sp, r7
 80179cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d0:	4770      	bx	lr
 80179d2:	bf00      	nop
 80179d4:	40012c00 	.word	0x40012c00

080179d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80179d8:	b480      	push	{r7}
 80179da:	b083      	sub	sp, #12
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80179e0:	bf00      	nop
 80179e2:	370c      	adds	r7, #12
 80179e4:	46bd      	mov	sp, r7
 80179e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ea:	4770      	bx	lr

080179ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80179ec:	b480      	push	{r7}
 80179ee:	b083      	sub	sp, #12
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80179f4:	bf00      	nop
 80179f6:	370c      	adds	r7, #12
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr

08017a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017a00:	b480      	push	{r7}
 8017a02:	b083      	sub	sp, #12
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017a08:	bf00      	nop
 8017a0a:	370c      	adds	r7, #12
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a12:	4770      	bx	lr

08017a14 <LL_RCC_GetUSARTClockSource>:
{
 8017a14:	b480      	push	{r7}
 8017a16:	b083      	sub	sp, #12
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8017a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017a20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	4013      	ands	r3, r2
}
 8017a28:	4618      	mov	r0, r3
 8017a2a:	370c      	adds	r7, #12
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a32:	4770      	bx	lr

08017a34 <LL_RCC_GetLPUARTClockSource>:
{
 8017a34:	b480      	push	{r7}
 8017a36:	b083      	sub	sp, #12
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8017a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017a40:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	4013      	ands	r3, r2
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	370c      	adds	r7, #12
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a52:	4770      	bx	lr

08017a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d101      	bne.n	8017a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017a62:	2301      	movs	r3, #1
 8017a64:	e042      	b.n	8017aec <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d106      	bne.n	8017a7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2200      	movs	r2, #0
 8017a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	f7e9 fa1b 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	2224      	movs	r2, #36	@ 0x24
 8017a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	f022 0201 	bic.w	r2, r2, #1
 8017a94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d002      	beq.n	8017aa4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017a9e:	6878      	ldr	r0, [r7, #4]
 8017aa0:	f000 fade 	bl	8018060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f000 f8b3 	bl	8017c10 <UART_SetConfig>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	2b01      	cmp	r3, #1
 8017aae:	d101      	bne.n	8017ab4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	e01b      	b.n	8017aec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	685a      	ldr	r2, [r3, #4]
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	689a      	ldr	r2, [r3, #8]
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	681a      	ldr	r2, [r3, #0]
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	f042 0201 	orr.w	r2, r2, #1
 8017ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017ae4:	6878      	ldr	r0, [r7, #4]
 8017ae6:	f000 fb5d 	bl	80181a4 <UART_CheckIdleState>
 8017aea:	4603      	mov	r3, r0
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3708      	adds	r7, #8
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}

08017af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b08a      	sub	sp, #40	@ 0x28
 8017af8:	af02      	add	r7, sp, #8
 8017afa:	60f8      	str	r0, [r7, #12]
 8017afc:	60b9      	str	r1, [r7, #8]
 8017afe:	603b      	str	r3, [r7, #0]
 8017b00:	4613      	mov	r3, r2
 8017b02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b0a:	2b20      	cmp	r3, #32
 8017b0c:	d17b      	bne.n	8017c06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017b0e:	68bb      	ldr	r3, [r7, #8]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d002      	beq.n	8017b1a <HAL_UART_Transmit+0x26>
 8017b14:	88fb      	ldrh	r3, [r7, #6]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d101      	bne.n	8017b1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	e074      	b.n	8017c08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	2200      	movs	r2, #0
 8017b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2221      	movs	r2, #33	@ 0x21
 8017b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017b2e:	f7fb ff73 	bl	8013a18 <HAL_GetTick>
 8017b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	88fa      	ldrh	r2, [r7, #6]
 8017b38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	88fa      	ldrh	r2, [r7, #6]
 8017b40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	689b      	ldr	r3, [r3, #8]
 8017b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017b4c:	d108      	bne.n	8017b60 <HAL_UART_Transmit+0x6c>
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	691b      	ldr	r3, [r3, #16]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d104      	bne.n	8017b60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017b56:	2300      	movs	r3, #0
 8017b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	61bb      	str	r3, [r7, #24]
 8017b5e:	e003      	b.n	8017b68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017b64:	2300      	movs	r3, #0
 8017b66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017b68:	e030      	b.n	8017bcc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017b6a:	683b      	ldr	r3, [r7, #0]
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	2200      	movs	r2, #0
 8017b72:	2180      	movs	r1, #128	@ 0x80
 8017b74:	68f8      	ldr	r0, [r7, #12]
 8017b76:	f000 fbbf 	bl	80182f8 <UART_WaitOnFlagUntilTimeout>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d005      	beq.n	8017b8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	2220      	movs	r2, #32
 8017b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017b88:	2303      	movs	r3, #3
 8017b8a:	e03d      	b.n	8017c08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017b8c:	69fb      	ldr	r3, [r7, #28]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d10b      	bne.n	8017baa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	881b      	ldrh	r3, [r3, #0]
 8017b96:	461a      	mov	r2, r3
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017ba0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017ba2:	69bb      	ldr	r3, [r7, #24]
 8017ba4:	3302      	adds	r3, #2
 8017ba6:	61bb      	str	r3, [r7, #24]
 8017ba8:	e007      	b.n	8017bba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	781a      	ldrb	r2, [r3, #0]
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017bb4:	69fb      	ldr	r3, [r7, #28]
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017bc0:	b29b      	uxth	r3, r3
 8017bc2:	3b01      	subs	r3, #1
 8017bc4:	b29a      	uxth	r2, r3
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d1c8      	bne.n	8017b6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017bd8:	683b      	ldr	r3, [r7, #0]
 8017bda:	9300      	str	r3, [sp, #0]
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	2200      	movs	r2, #0
 8017be0:	2140      	movs	r1, #64	@ 0x40
 8017be2:	68f8      	ldr	r0, [r7, #12]
 8017be4:	f000 fb88 	bl	80182f8 <UART_WaitOnFlagUntilTimeout>
 8017be8:	4603      	mov	r3, r0
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d005      	beq.n	8017bfa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	2220      	movs	r2, #32
 8017bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017bf6:	2303      	movs	r3, #3
 8017bf8:	e006      	b.n	8017c08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	2220      	movs	r2, #32
 8017bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017c02:	2300      	movs	r3, #0
 8017c04:	e000      	b.n	8017c08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017c06:	2302      	movs	r3, #2
  }
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3720      	adds	r7, #32
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017c14:	b08c      	sub	sp, #48	@ 0x30
 8017c16:	af00      	add	r7, sp, #0
 8017c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017c20:	697b      	ldr	r3, [r7, #20]
 8017c22:	689a      	ldr	r2, [r3, #8]
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	691b      	ldr	r3, [r3, #16]
 8017c28:	431a      	orrs	r2, r3
 8017c2a:	697b      	ldr	r3, [r7, #20]
 8017c2c:	695b      	ldr	r3, [r3, #20]
 8017c2e:	431a      	orrs	r2, r3
 8017c30:	697b      	ldr	r3, [r7, #20]
 8017c32:	69db      	ldr	r3, [r3, #28]
 8017c34:	4313      	orrs	r3, r2
 8017c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017c38:	697b      	ldr	r3, [r7, #20]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	681a      	ldr	r2, [r3, #0]
 8017c3e:	4baf      	ldr	r3, [pc, #700]	@ (8017efc <UART_SetConfig+0x2ec>)
 8017c40:	4013      	ands	r3, r2
 8017c42:	697a      	ldr	r2, [r7, #20]
 8017c44:	6812      	ldr	r2, [r2, #0]
 8017c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017c48:	430b      	orrs	r3, r1
 8017c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017c4c:	697b      	ldr	r3, [r7, #20]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	685b      	ldr	r3, [r3, #4]
 8017c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	68da      	ldr	r2, [r3, #12]
 8017c5a:	697b      	ldr	r3, [r7, #20]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	430a      	orrs	r2, r1
 8017c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017c62:	697b      	ldr	r3, [r7, #20]
 8017c64:	699b      	ldr	r3, [r3, #24]
 8017c66:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017c68:	697b      	ldr	r3, [r7, #20]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	4aa4      	ldr	r2, [pc, #656]	@ (8017f00 <UART_SetConfig+0x2f0>)
 8017c6e:	4293      	cmp	r3, r2
 8017c70:	d004      	beq.n	8017c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	6a1b      	ldr	r3, [r3, #32]
 8017c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017c78:	4313      	orrs	r3, r2
 8017c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017c7c:	697b      	ldr	r3, [r7, #20]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	689b      	ldr	r3, [r3, #8]
 8017c82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8017c86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8017c8a:	697a      	ldr	r2, [r7, #20]
 8017c8c:	6812      	ldr	r2, [r2, #0]
 8017c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017c90:	430b      	orrs	r3, r1
 8017c92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8017c94:	697b      	ldr	r3, [r7, #20]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c9a:	f023 010f 	bic.w	r1, r3, #15
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017ca2:	697b      	ldr	r3, [r7, #20]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	430a      	orrs	r2, r1
 8017ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017caa:	697b      	ldr	r3, [r7, #20]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	4a95      	ldr	r2, [pc, #596]	@ (8017f04 <UART_SetConfig+0x2f4>)
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	d125      	bne.n	8017d00 <UART_SetConfig+0xf0>
 8017cb4:	2003      	movs	r0, #3
 8017cb6:	f7ff fead 	bl	8017a14 <LL_RCC_GetUSARTClockSource>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	2b03      	cmp	r3, #3
 8017cbe:	d81b      	bhi.n	8017cf8 <UART_SetConfig+0xe8>
 8017cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8017cc8 <UART_SetConfig+0xb8>)
 8017cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cc6:	bf00      	nop
 8017cc8:	08017cd9 	.word	0x08017cd9
 8017ccc:	08017ce9 	.word	0x08017ce9
 8017cd0:	08017ce1 	.word	0x08017ce1
 8017cd4:	08017cf1 	.word	0x08017cf1
 8017cd8:	2301      	movs	r3, #1
 8017cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017cde:	e042      	b.n	8017d66 <UART_SetConfig+0x156>
 8017ce0:	2302      	movs	r3, #2
 8017ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017ce6:	e03e      	b.n	8017d66 <UART_SetConfig+0x156>
 8017ce8:	2304      	movs	r3, #4
 8017cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017cee:	e03a      	b.n	8017d66 <UART_SetConfig+0x156>
 8017cf0:	2308      	movs	r3, #8
 8017cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017cf6:	e036      	b.n	8017d66 <UART_SetConfig+0x156>
 8017cf8:	2310      	movs	r3, #16
 8017cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017cfe:	e032      	b.n	8017d66 <UART_SetConfig+0x156>
 8017d00:	697b      	ldr	r3, [r7, #20]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	4a7e      	ldr	r2, [pc, #504]	@ (8017f00 <UART_SetConfig+0x2f0>)
 8017d06:	4293      	cmp	r3, r2
 8017d08:	d12a      	bne.n	8017d60 <UART_SetConfig+0x150>
 8017d0a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8017d0e:	f7ff fe91 	bl	8017a34 <LL_RCC_GetLPUARTClockSource>
 8017d12:	4603      	mov	r3, r0
 8017d14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8017d18:	d01a      	beq.n	8017d50 <UART_SetConfig+0x140>
 8017d1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8017d1e:	d81b      	bhi.n	8017d58 <UART_SetConfig+0x148>
 8017d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017d24:	d00c      	beq.n	8017d40 <UART_SetConfig+0x130>
 8017d26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017d2a:	d815      	bhi.n	8017d58 <UART_SetConfig+0x148>
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d003      	beq.n	8017d38 <UART_SetConfig+0x128>
 8017d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017d34:	d008      	beq.n	8017d48 <UART_SetConfig+0x138>
 8017d36:	e00f      	b.n	8017d58 <UART_SetConfig+0x148>
 8017d38:	2300      	movs	r3, #0
 8017d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017d3e:	e012      	b.n	8017d66 <UART_SetConfig+0x156>
 8017d40:	2302      	movs	r3, #2
 8017d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017d46:	e00e      	b.n	8017d66 <UART_SetConfig+0x156>
 8017d48:	2304      	movs	r3, #4
 8017d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017d4e:	e00a      	b.n	8017d66 <UART_SetConfig+0x156>
 8017d50:	2308      	movs	r3, #8
 8017d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017d56:	e006      	b.n	8017d66 <UART_SetConfig+0x156>
 8017d58:	2310      	movs	r3, #16
 8017d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017d5e:	e002      	b.n	8017d66 <UART_SetConfig+0x156>
 8017d60:	2310      	movs	r3, #16
 8017d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017d66:	697b      	ldr	r3, [r7, #20]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4a65      	ldr	r2, [pc, #404]	@ (8017f00 <UART_SetConfig+0x2f0>)
 8017d6c:	4293      	cmp	r3, r2
 8017d6e:	f040 8097 	bne.w	8017ea0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017d72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017d76:	2b08      	cmp	r3, #8
 8017d78:	d823      	bhi.n	8017dc2 <UART_SetConfig+0x1b2>
 8017d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8017d80 <UART_SetConfig+0x170>)
 8017d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d80:	08017da5 	.word	0x08017da5
 8017d84:	08017dc3 	.word	0x08017dc3
 8017d88:	08017dad 	.word	0x08017dad
 8017d8c:	08017dc3 	.word	0x08017dc3
 8017d90:	08017db3 	.word	0x08017db3
 8017d94:	08017dc3 	.word	0x08017dc3
 8017d98:	08017dc3 	.word	0x08017dc3
 8017d9c:	08017dc3 	.word	0x08017dc3
 8017da0:	08017dbb 	.word	0x08017dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017da4:	f7fe fcc4 	bl	8016730 <HAL_RCC_GetPCLK1Freq>
 8017da8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8017daa:	e010      	b.n	8017dce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017dac:	4b56      	ldr	r3, [pc, #344]	@ (8017f08 <UART_SetConfig+0x2f8>)
 8017dae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8017db0:	e00d      	b.n	8017dce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017db2:	f7fe fc3d 	bl	8016630 <HAL_RCC_GetSysClockFreq>
 8017db6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8017db8:	e009      	b.n	8017dce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017dbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8017dc0:	e005      	b.n	8017dce <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8017dc6:	2301      	movs	r3, #1
 8017dc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8017dcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	f000 812b 	beq.w	801802c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8017dd6:	697b      	ldr	r3, [r7, #20]
 8017dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dda:	4a4c      	ldr	r2, [pc, #304]	@ (8017f0c <UART_SetConfig+0x2fc>)
 8017ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017de0:	461a      	mov	r2, r3
 8017de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017de4:	fbb3 f3f2 	udiv	r3, r3, r2
 8017de8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	685a      	ldr	r2, [r3, #4]
 8017dee:	4613      	mov	r3, r2
 8017df0:	005b      	lsls	r3, r3, #1
 8017df2:	4413      	add	r3, r2
 8017df4:	69ba      	ldr	r2, [r7, #24]
 8017df6:	429a      	cmp	r2, r3
 8017df8:	d305      	bcc.n	8017e06 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8017dfa:	697b      	ldr	r3, [r7, #20]
 8017dfc:	685b      	ldr	r3, [r3, #4]
 8017dfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017e00:	69ba      	ldr	r2, [r7, #24]
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d903      	bls.n	8017e0e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8017e06:	2301      	movs	r3, #1
 8017e08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8017e0c:	e10e      	b.n	801802c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e10:	2200      	movs	r2, #0
 8017e12:	60bb      	str	r3, [r7, #8]
 8017e14:	60fa      	str	r2, [r7, #12]
 8017e16:	697b      	ldr	r3, [r7, #20]
 8017e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e1a:	4a3c      	ldr	r2, [pc, #240]	@ (8017f0c <UART_SetConfig+0x2fc>)
 8017e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017e20:	b29b      	uxth	r3, r3
 8017e22:	2200      	movs	r2, #0
 8017e24:	603b      	str	r3, [r7, #0]
 8017e26:	607a      	str	r2, [r7, #4]
 8017e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017e2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017e30:	f7e8 fa4e 	bl	80002d0 <__aeabi_uldivmod>
 8017e34:	4602      	mov	r2, r0
 8017e36:	460b      	mov	r3, r1
 8017e38:	4610      	mov	r0, r2
 8017e3a:	4619      	mov	r1, r3
 8017e3c:	f04f 0200 	mov.w	r2, #0
 8017e40:	f04f 0300 	mov.w	r3, #0
 8017e44:	020b      	lsls	r3, r1, #8
 8017e46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8017e4a:	0202      	lsls	r2, r0, #8
 8017e4c:	6979      	ldr	r1, [r7, #20]
 8017e4e:	6849      	ldr	r1, [r1, #4]
 8017e50:	0849      	lsrs	r1, r1, #1
 8017e52:	2000      	movs	r0, #0
 8017e54:	460c      	mov	r4, r1
 8017e56:	4605      	mov	r5, r0
 8017e58:	eb12 0804 	adds.w	r8, r2, r4
 8017e5c:	eb43 0905 	adc.w	r9, r3, r5
 8017e60:	697b      	ldr	r3, [r7, #20]
 8017e62:	685b      	ldr	r3, [r3, #4]
 8017e64:	2200      	movs	r2, #0
 8017e66:	469a      	mov	sl, r3
 8017e68:	4693      	mov	fp, r2
 8017e6a:	4652      	mov	r2, sl
 8017e6c:	465b      	mov	r3, fp
 8017e6e:	4640      	mov	r0, r8
 8017e70:	4649      	mov	r1, r9
 8017e72:	f7e8 fa2d 	bl	80002d0 <__aeabi_uldivmod>
 8017e76:	4602      	mov	r2, r0
 8017e78:	460b      	mov	r3, r1
 8017e7a:	4613      	mov	r3, r2
 8017e7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017e7e:	6a3b      	ldr	r3, [r7, #32]
 8017e80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017e84:	d308      	bcc.n	8017e98 <UART_SetConfig+0x288>
 8017e86:	6a3b      	ldr	r3, [r7, #32]
 8017e88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017e8c:	d204      	bcs.n	8017e98 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	6a3a      	ldr	r2, [r7, #32]
 8017e94:	60da      	str	r2, [r3, #12]
 8017e96:	e0c9      	b.n	801802c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8017e98:	2301      	movs	r3, #1
 8017e9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8017e9e:	e0c5      	b.n	801802c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	69db      	ldr	r3, [r3, #28]
 8017ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017ea8:	d16d      	bne.n	8017f86 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8017eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017eae:	3b01      	subs	r3, #1
 8017eb0:	2b07      	cmp	r3, #7
 8017eb2:	d82d      	bhi.n	8017f10 <UART_SetConfig+0x300>
 8017eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8017ebc <UART_SetConfig+0x2ac>)
 8017eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017eba:	bf00      	nop
 8017ebc:	08017edd 	.word	0x08017edd
 8017ec0:	08017ee5 	.word	0x08017ee5
 8017ec4:	08017f11 	.word	0x08017f11
 8017ec8:	08017eeb 	.word	0x08017eeb
 8017ecc:	08017f11 	.word	0x08017f11
 8017ed0:	08017f11 	.word	0x08017f11
 8017ed4:	08017f11 	.word	0x08017f11
 8017ed8:	08017ef3 	.word	0x08017ef3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017edc:	f7fe fc3e 	bl	801675c <HAL_RCC_GetPCLK2Freq>
 8017ee0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8017ee2:	e01b      	b.n	8017f1c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017ee4:	4b08      	ldr	r3, [pc, #32]	@ (8017f08 <UART_SetConfig+0x2f8>)
 8017ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8017ee8:	e018      	b.n	8017f1c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017eea:	f7fe fba1 	bl	8016630 <HAL_RCC_GetSysClockFreq>
 8017eee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8017ef0:	e014      	b.n	8017f1c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8017ef8:	e010      	b.n	8017f1c <UART_SetConfig+0x30c>
 8017efa:	bf00      	nop
 8017efc:	cfff69f3 	.word	0xcfff69f3
 8017f00:	40008000 	.word	0x40008000
 8017f04:	40013800 	.word	0x40013800
 8017f08:	00f42400 	.word	0x00f42400
 8017f0c:	0801e2e4 	.word	0x0801e2e4
      default:
        pclk = 0U;
 8017f10:	2300      	movs	r3, #0
 8017f12:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8017f14:	2301      	movs	r3, #1
 8017f16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8017f1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	f000 8084 	beq.w	801802c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017f24:	697b      	ldr	r3, [r7, #20]
 8017f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f28:	4a4b      	ldr	r2, [pc, #300]	@ (8018058 <UART_SetConfig+0x448>)
 8017f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017f2e:	461a      	mov	r2, r3
 8017f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8017f36:	005a      	lsls	r2, r3, #1
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	085b      	lsrs	r3, r3, #1
 8017f3e:	441a      	add	r2, r3
 8017f40:	697b      	ldr	r3, [r7, #20]
 8017f42:	685b      	ldr	r3, [r3, #4]
 8017f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f48:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017f4a:	6a3b      	ldr	r3, [r7, #32]
 8017f4c:	2b0f      	cmp	r3, #15
 8017f4e:	d916      	bls.n	8017f7e <UART_SetConfig+0x36e>
 8017f50:	6a3b      	ldr	r3, [r7, #32]
 8017f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017f56:	d212      	bcs.n	8017f7e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017f58:	6a3b      	ldr	r3, [r7, #32]
 8017f5a:	b29b      	uxth	r3, r3
 8017f5c:	f023 030f 	bic.w	r3, r3, #15
 8017f60:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017f62:	6a3b      	ldr	r3, [r7, #32]
 8017f64:	085b      	lsrs	r3, r3, #1
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	f003 0307 	and.w	r3, r3, #7
 8017f6c:	b29a      	uxth	r2, r3
 8017f6e:	8bfb      	ldrh	r3, [r7, #30]
 8017f70:	4313      	orrs	r3, r2
 8017f72:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8017f74:	697b      	ldr	r3, [r7, #20]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	8bfa      	ldrh	r2, [r7, #30]
 8017f7a:	60da      	str	r2, [r3, #12]
 8017f7c:	e056      	b.n	801802c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8017f7e:	2301      	movs	r3, #1
 8017f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8017f84:	e052      	b.n	801802c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8017f86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017f8a:	3b01      	subs	r3, #1
 8017f8c:	2b07      	cmp	r3, #7
 8017f8e:	d822      	bhi.n	8017fd6 <UART_SetConfig+0x3c6>
 8017f90:	a201      	add	r2, pc, #4	@ (adr r2, 8017f98 <UART_SetConfig+0x388>)
 8017f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f96:	bf00      	nop
 8017f98:	08017fb9 	.word	0x08017fb9
 8017f9c:	08017fc1 	.word	0x08017fc1
 8017fa0:	08017fd7 	.word	0x08017fd7
 8017fa4:	08017fc7 	.word	0x08017fc7
 8017fa8:	08017fd7 	.word	0x08017fd7
 8017fac:	08017fd7 	.word	0x08017fd7
 8017fb0:	08017fd7 	.word	0x08017fd7
 8017fb4:	08017fcf 	.word	0x08017fcf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017fb8:	f7fe fbd0 	bl	801675c <HAL_RCC_GetPCLK2Freq>
 8017fbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8017fbe:	e010      	b.n	8017fe2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017fc0:	4b26      	ldr	r3, [pc, #152]	@ (801805c <UART_SetConfig+0x44c>)
 8017fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8017fc4:	e00d      	b.n	8017fe2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017fc6:	f7fe fb33 	bl	8016630 <HAL_RCC_GetSysClockFreq>
 8017fca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8017fcc:	e009      	b.n	8017fe2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8017fd4:	e005      	b.n	8017fe2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8017fda:	2301      	movs	r3, #1
 8017fdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8017fe0:	bf00      	nop
    }

    if (pclk != 0U)
 8017fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d021      	beq.n	801802c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017fe8:	697b      	ldr	r3, [r7, #20]
 8017fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fec:	4a1a      	ldr	r2, [pc, #104]	@ (8018058 <UART_SetConfig+0x448>)
 8017fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ff6:	fbb3 f2f2 	udiv	r2, r3, r2
 8017ffa:	697b      	ldr	r3, [r7, #20]
 8017ffc:	685b      	ldr	r3, [r3, #4]
 8017ffe:	085b      	lsrs	r3, r3, #1
 8018000:	441a      	add	r2, r3
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	685b      	ldr	r3, [r3, #4]
 8018006:	fbb2 f3f3 	udiv	r3, r2, r3
 801800a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801800c:	6a3b      	ldr	r3, [r7, #32]
 801800e:	2b0f      	cmp	r3, #15
 8018010:	d909      	bls.n	8018026 <UART_SetConfig+0x416>
 8018012:	6a3b      	ldr	r3, [r7, #32]
 8018014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018018:	d205      	bcs.n	8018026 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801801a:	6a3b      	ldr	r3, [r7, #32]
 801801c:	b29a      	uxth	r2, r3
 801801e:	697b      	ldr	r3, [r7, #20]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	60da      	str	r2, [r3, #12]
 8018024:	e002      	b.n	801802c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018026:	2301      	movs	r3, #1
 8018028:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	2201      	movs	r2, #1
 8018030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	2201      	movs	r2, #1
 8018038:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	2200      	movs	r2, #0
 8018040:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	2200      	movs	r2, #0
 8018046:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8018048:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801804c:	4618      	mov	r0, r3
 801804e:	3730      	adds	r7, #48	@ 0x30
 8018050:	46bd      	mov	sp, r7
 8018052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018056:	bf00      	nop
 8018058:	0801e2e4 	.word	0x0801e2e4
 801805c:	00f42400 	.word	0x00f42400

08018060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018060:	b480      	push	{r7}
 8018062:	b083      	sub	sp, #12
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801806c:	f003 0308 	and.w	r3, r3, #8
 8018070:	2b00      	cmp	r3, #0
 8018072:	d00a      	beq.n	801808a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	430a      	orrs	r2, r1
 8018088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801808e:	f003 0301 	and.w	r3, r3, #1
 8018092:	2b00      	cmp	r3, #0
 8018094:	d00a      	beq.n	80180ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	685b      	ldr	r3, [r3, #4]
 801809c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	430a      	orrs	r2, r1
 80180aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180b0:	f003 0302 	and.w	r3, r3, #2
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d00a      	beq.n	80180ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	685b      	ldr	r3, [r3, #4]
 80180be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	430a      	orrs	r2, r1
 80180cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180d2:	f003 0304 	and.w	r3, r3, #4
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d00a      	beq.n	80180f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	685b      	ldr	r3, [r3, #4]
 80180e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	430a      	orrs	r2, r1
 80180ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180f4:	f003 0310 	and.w	r3, r3, #16
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d00a      	beq.n	8018112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	689b      	ldr	r3, [r3, #8]
 8018102:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	430a      	orrs	r2, r1
 8018110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018116:	f003 0320 	and.w	r3, r3, #32
 801811a:	2b00      	cmp	r3, #0
 801811c:	d00a      	beq.n	8018134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	689b      	ldr	r3, [r3, #8]
 8018124:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	430a      	orrs	r2, r1
 8018132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801813c:	2b00      	cmp	r3, #0
 801813e:	d01a      	beq.n	8018176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	685b      	ldr	r3, [r3, #4]
 8018146:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	430a      	orrs	r2, r1
 8018154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801815a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801815e:	d10a      	bne.n	8018176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	685b      	ldr	r3, [r3, #4]
 8018166:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	430a      	orrs	r2, r1
 8018174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801817a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801817e:	2b00      	cmp	r3, #0
 8018180:	d00a      	beq.n	8018198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	685b      	ldr	r3, [r3, #4]
 8018188:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	430a      	orrs	r2, r1
 8018196:	605a      	str	r2, [r3, #4]
  }
}
 8018198:	bf00      	nop
 801819a:	370c      	adds	r7, #12
 801819c:	46bd      	mov	sp, r7
 801819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a2:	4770      	bx	lr

080181a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b098      	sub	sp, #96	@ 0x60
 80181a8:	af02      	add	r7, sp, #8
 80181aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	2200      	movs	r2, #0
 80181b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80181b4:	f7fb fc30 	bl	8013a18 <HAL_GetTick>
 80181b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	f003 0308 	and.w	r3, r3, #8
 80181c4:	2b08      	cmp	r3, #8
 80181c6:	d12f      	bne.n	8018228 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80181c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80181cc:	9300      	str	r3, [sp, #0]
 80181ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80181d0:	2200      	movs	r2, #0
 80181d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f000 f88e 	bl	80182f8 <UART_WaitOnFlagUntilTimeout>
 80181dc:	4603      	mov	r3, r0
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d022      	beq.n	8018228 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181ea:	e853 3f00 	ldrex	r3, [r3]
 80181ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80181f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80181f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	461a      	mov	r2, r3
 80181fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018200:	647b      	str	r3, [r7, #68]	@ 0x44
 8018202:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018208:	e841 2300 	strex	r3, r2, [r1]
 801820c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801820e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018210:	2b00      	cmp	r3, #0
 8018212:	d1e6      	bne.n	80181e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2220      	movs	r2, #32
 8018218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	2200      	movs	r2, #0
 8018220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018224:	2303      	movs	r3, #3
 8018226:	e063      	b.n	80182f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	f003 0304 	and.w	r3, r3, #4
 8018232:	2b04      	cmp	r3, #4
 8018234:	d149      	bne.n	80182ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018236:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801823a:	9300      	str	r3, [sp, #0]
 801823c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801823e:	2200      	movs	r2, #0
 8018240:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8018244:	6878      	ldr	r0, [r7, #4]
 8018246:	f000 f857 	bl	80182f8 <UART_WaitOnFlagUntilTimeout>
 801824a:	4603      	mov	r3, r0
 801824c:	2b00      	cmp	r3, #0
 801824e:	d03c      	beq.n	80182ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018258:	e853 3f00 	ldrex	r3, [r3]
 801825c:	623b      	str	r3, [r7, #32]
   return(result);
 801825e:	6a3b      	ldr	r3, [r7, #32]
 8018260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018264:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	461a      	mov	r2, r3
 801826c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801826e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018270:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018276:	e841 2300 	strex	r3, r2, [r1]
 801827a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801827e:	2b00      	cmp	r3, #0
 8018280:	d1e6      	bne.n	8018250 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	3308      	adds	r3, #8
 8018288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801828a:	693b      	ldr	r3, [r7, #16]
 801828c:	e853 3f00 	ldrex	r3, [r3]
 8018290:	60fb      	str	r3, [r7, #12]
   return(result);
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	f023 0301 	bic.w	r3, r3, #1
 8018298:	64bb      	str	r3, [r7, #72]	@ 0x48
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	3308      	adds	r3, #8
 80182a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80182a2:	61fa      	str	r2, [r7, #28]
 80182a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182a6:	69b9      	ldr	r1, [r7, #24]
 80182a8:	69fa      	ldr	r2, [r7, #28]
 80182aa:	e841 2300 	strex	r3, r2, [r1]
 80182ae:	617b      	str	r3, [r7, #20]
   return(result);
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d1e5      	bne.n	8018282 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	2220      	movs	r2, #32
 80182ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	2200      	movs	r2, #0
 80182c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80182c6:	2303      	movs	r3, #3
 80182c8:	e012      	b.n	80182f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	2220      	movs	r2, #32
 80182ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	2220      	movs	r2, #32
 80182d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	2200      	movs	r2, #0
 80182de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2200      	movs	r2, #0
 80182e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2200      	movs	r2, #0
 80182ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80182ee:	2300      	movs	r3, #0
}
 80182f0:	4618      	mov	r0, r3
 80182f2:	3758      	adds	r7, #88	@ 0x58
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}

080182f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b084      	sub	sp, #16
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	60f8      	str	r0, [r7, #12]
 8018300:	60b9      	str	r1, [r7, #8]
 8018302:	603b      	str	r3, [r7, #0]
 8018304:	4613      	mov	r3, r2
 8018306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018308:	e04f      	b.n	80183aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801830a:	69bb      	ldr	r3, [r7, #24]
 801830c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018310:	d04b      	beq.n	80183aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018312:	f7fb fb81 	bl	8013a18 <HAL_GetTick>
 8018316:	4602      	mov	r2, r0
 8018318:	683b      	ldr	r3, [r7, #0]
 801831a:	1ad3      	subs	r3, r2, r3
 801831c:	69ba      	ldr	r2, [r7, #24]
 801831e:	429a      	cmp	r2, r3
 8018320:	d302      	bcc.n	8018328 <UART_WaitOnFlagUntilTimeout+0x30>
 8018322:	69bb      	ldr	r3, [r7, #24]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d101      	bne.n	801832c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8018328:	2303      	movs	r3, #3
 801832a:	e04e      	b.n	80183ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	f003 0304 	and.w	r3, r3, #4
 8018336:	2b00      	cmp	r3, #0
 8018338:	d037      	beq.n	80183aa <UART_WaitOnFlagUntilTimeout+0xb2>
 801833a:	68bb      	ldr	r3, [r7, #8]
 801833c:	2b80      	cmp	r3, #128	@ 0x80
 801833e:	d034      	beq.n	80183aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8018340:	68bb      	ldr	r3, [r7, #8]
 8018342:	2b40      	cmp	r3, #64	@ 0x40
 8018344:	d031      	beq.n	80183aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	69db      	ldr	r3, [r3, #28]
 801834c:	f003 0308 	and.w	r3, r3, #8
 8018350:	2b08      	cmp	r3, #8
 8018352:	d110      	bne.n	8018376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	2208      	movs	r2, #8
 801835a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801835c:	68f8      	ldr	r0, [r7, #12]
 801835e:	f000 f838 	bl	80183d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	2208      	movs	r2, #8
 8018366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	2200      	movs	r2, #0
 801836e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8018372:	2301      	movs	r3, #1
 8018374:	e029      	b.n	80183ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	69db      	ldr	r3, [r3, #28]
 801837c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018384:	d111      	bne.n	80183aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801838e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018390:	68f8      	ldr	r0, [r7, #12]
 8018392:	f000 f81e 	bl	80183d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	2220      	movs	r2, #32
 801839a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	2200      	movs	r2, #0
 80183a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80183a6:	2303      	movs	r3, #3
 80183a8:	e00f      	b.n	80183ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	69da      	ldr	r2, [r3, #28]
 80183b0:	68bb      	ldr	r3, [r7, #8]
 80183b2:	4013      	ands	r3, r2
 80183b4:	68ba      	ldr	r2, [r7, #8]
 80183b6:	429a      	cmp	r2, r3
 80183b8:	bf0c      	ite	eq
 80183ba:	2301      	moveq	r3, #1
 80183bc:	2300      	movne	r3, #0
 80183be:	b2db      	uxtb	r3, r3
 80183c0:	461a      	mov	r2, r3
 80183c2:	79fb      	ldrb	r3, [r7, #7]
 80183c4:	429a      	cmp	r2, r3
 80183c6:	d0a0      	beq.n	801830a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80183c8:	2300      	movs	r3, #0
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3710      	adds	r7, #16
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}

080183d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80183d2:	b480      	push	{r7}
 80183d4:	b095      	sub	sp, #84	@ 0x54
 80183d6:	af00      	add	r7, sp, #0
 80183d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183e2:	e853 3f00 	ldrex	r3, [r3]
 80183e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80183e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80183ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	461a      	mov	r2, r3
 80183f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80183fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80183fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018400:	e841 2300 	strex	r3, r2, [r1]
 8018404:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8018406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018408:	2b00      	cmp	r3, #0
 801840a:	d1e6      	bne.n	80183da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	3308      	adds	r3, #8
 8018412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018414:	6a3b      	ldr	r3, [r7, #32]
 8018416:	e853 3f00 	ldrex	r3, [r3]
 801841a:	61fb      	str	r3, [r7, #28]
   return(result);
 801841c:	69fb      	ldr	r3, [r7, #28]
 801841e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018422:	f023 0301 	bic.w	r3, r3, #1
 8018426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	3308      	adds	r3, #8
 801842e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018430:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8018432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018438:	e841 2300 	strex	r3, r2, [r1]
 801843c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018440:	2b00      	cmp	r3, #0
 8018442:	d1e3      	bne.n	801840c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018448:	2b01      	cmp	r3, #1
 801844a:	d118      	bne.n	801847e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	e853 3f00 	ldrex	r3, [r3]
 8018458:	60bb      	str	r3, [r7, #8]
   return(result);
 801845a:	68bb      	ldr	r3, [r7, #8]
 801845c:	f023 0310 	bic.w	r3, r3, #16
 8018460:	647b      	str	r3, [r7, #68]	@ 0x44
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	461a      	mov	r2, r3
 8018468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801846a:	61bb      	str	r3, [r7, #24]
 801846c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801846e:	6979      	ldr	r1, [r7, #20]
 8018470:	69ba      	ldr	r2, [r7, #24]
 8018472:	e841 2300 	strex	r3, r2, [r1]
 8018476:	613b      	str	r3, [r7, #16]
   return(result);
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d1e6      	bne.n	801844c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	2220      	movs	r2, #32
 8018482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2200      	movs	r2, #0
 801848a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2200      	movs	r2, #0
 8018490:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8018492:	bf00      	nop
 8018494:	3754      	adds	r7, #84	@ 0x54
 8018496:	46bd      	mov	sp, r7
 8018498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849c:	4770      	bx	lr

0801849e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801849e:	b480      	push	{r7}
 80184a0:	b085      	sub	sp, #20
 80184a2:	af00      	add	r7, sp, #0
 80184a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80184ac:	2b01      	cmp	r3, #1
 80184ae:	d101      	bne.n	80184b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80184b0:	2302      	movs	r3, #2
 80184b2:	e027      	b.n	8018504 <HAL_UARTEx_DisableFifoMode+0x66>
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	2201      	movs	r2, #1
 80184b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2224      	movs	r2, #36	@ 0x24
 80184c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	f022 0201 	bic.w	r2, r2, #1
 80184da:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80184e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2200      	movs	r2, #0
 80184e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	68fa      	ldr	r2, [r7, #12]
 80184f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	2220      	movs	r2, #32
 80184f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2200      	movs	r2, #0
 80184fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8018502:	2300      	movs	r3, #0
}
 8018504:	4618      	mov	r0, r3
 8018506:	3714      	adds	r7, #20
 8018508:	46bd      	mov	sp, r7
 801850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850e:	4770      	bx	lr

08018510 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b084      	sub	sp, #16
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
 8018518:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8018520:	2b01      	cmp	r3, #1
 8018522:	d101      	bne.n	8018528 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018524:	2302      	movs	r3, #2
 8018526:	e02d      	b.n	8018584 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	2201      	movs	r2, #1
 801852c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	2224      	movs	r2, #36	@ 0x24
 8018534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	681a      	ldr	r2, [r3, #0]
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	f022 0201 	bic.w	r2, r2, #1
 801854e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	689b      	ldr	r3, [r3, #8]
 8018556:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	683a      	ldr	r2, [r7, #0]
 8018560:	430a      	orrs	r2, r1
 8018562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018564:	6878      	ldr	r0, [r7, #4]
 8018566:	f000 f84f 	bl	8018608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	68fa      	ldr	r2, [r7, #12]
 8018570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2220      	movs	r2, #32
 8018576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	2200      	movs	r2, #0
 801857e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8018582:	2300      	movs	r3, #0
}
 8018584:	4618      	mov	r0, r3
 8018586:	3710      	adds	r7, #16
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}

0801858c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b084      	sub	sp, #16
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801859c:	2b01      	cmp	r3, #1
 801859e:	d101      	bne.n	80185a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80185a0:	2302      	movs	r3, #2
 80185a2:	e02d      	b.n	8018600 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	2201      	movs	r2, #1
 80185a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	2224      	movs	r2, #36	@ 0x24
 80185b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	681a      	ldr	r2, [r3, #0]
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	f022 0201 	bic.w	r2, r2, #1
 80185ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	689b      	ldr	r3, [r3, #8]
 80185d2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	683a      	ldr	r2, [r7, #0]
 80185dc:	430a      	orrs	r2, r1
 80185de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f000 f811 	bl	8018608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	68fa      	ldr	r2, [r7, #12]
 80185ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2220      	movs	r2, #32
 80185f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	2200      	movs	r2, #0
 80185fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80185fe:	2300      	movs	r3, #0
}
 8018600:	4618      	mov	r0, r3
 8018602:	3710      	adds	r7, #16
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}

08018608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018608:	b480      	push	{r7}
 801860a:	b085      	sub	sp, #20
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018614:	2b00      	cmp	r3, #0
 8018616:	d108      	bne.n	801862a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	2201      	movs	r2, #1
 801861c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	2201      	movs	r2, #1
 8018624:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018628:	e031      	b.n	801868e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801862a:	2308      	movs	r3, #8
 801862c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801862e:	2308      	movs	r3, #8
 8018630:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	689b      	ldr	r3, [r3, #8]
 8018638:	0e5b      	lsrs	r3, r3, #25
 801863a:	b2db      	uxtb	r3, r3
 801863c:	f003 0307 	and.w	r3, r3, #7
 8018640:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	689b      	ldr	r3, [r3, #8]
 8018648:	0f5b      	lsrs	r3, r3, #29
 801864a:	b2db      	uxtb	r3, r3
 801864c:	f003 0307 	and.w	r3, r3, #7
 8018650:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018652:	7bbb      	ldrb	r3, [r7, #14]
 8018654:	7b3a      	ldrb	r2, [r7, #12]
 8018656:	4911      	ldr	r1, [pc, #68]	@ (801869c <UARTEx_SetNbDataToProcess+0x94>)
 8018658:	5c8a      	ldrb	r2, [r1, r2]
 801865a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801865e:	7b3a      	ldrb	r2, [r7, #12]
 8018660:	490f      	ldr	r1, [pc, #60]	@ (80186a0 <UARTEx_SetNbDataToProcess+0x98>)
 8018662:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018664:	fb93 f3f2 	sdiv	r3, r3, r2
 8018668:	b29a      	uxth	r2, r3
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018670:	7bfb      	ldrb	r3, [r7, #15]
 8018672:	7b7a      	ldrb	r2, [r7, #13]
 8018674:	4909      	ldr	r1, [pc, #36]	@ (801869c <UARTEx_SetNbDataToProcess+0x94>)
 8018676:	5c8a      	ldrb	r2, [r1, r2]
 8018678:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801867c:	7b7a      	ldrb	r2, [r7, #13]
 801867e:	4908      	ldr	r1, [pc, #32]	@ (80186a0 <UARTEx_SetNbDataToProcess+0x98>)
 8018680:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018682:	fb93 f3f2 	sdiv	r3, r3, r2
 8018686:	b29a      	uxth	r2, r3
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801868e:	bf00      	nop
 8018690:	3714      	adds	r7, #20
 8018692:	46bd      	mov	sp, r7
 8018694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018698:	4770      	bx	lr
 801869a:	bf00      	nop
 801869c:	0801e2fc 	.word	0x0801e2fc
 80186a0:	0801e304 	.word	0x0801e304

080186a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80186a4:	b480      	push	{r7}
 80186a6:	b085      	sub	sp, #20
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80186ac:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80186b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80186b8:	b29a      	uxth	r2, r3
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	b29b      	uxth	r3, r3
 80186be:	43db      	mvns	r3, r3
 80186c0:	b29b      	uxth	r3, r3
 80186c2:	4013      	ands	r3, r2
 80186c4:	b29a      	uxth	r2, r3
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80186cc:	2300      	movs	r3, #0
}
 80186ce:	4618      	mov	r0, r3
 80186d0:	3714      	adds	r7, #20
 80186d2:	46bd      	mov	sp, r7
 80186d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d8:	4770      	bx	lr

080186da <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80186da:	b480      	push	{r7}
 80186dc:	b085      	sub	sp, #20
 80186de:	af00      	add	r7, sp, #0
 80186e0:	60f8      	str	r0, [r7, #12]
 80186e2:	1d3b      	adds	r3, r7, #4
 80186e4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	2201      	movs	r2, #1
 80186ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	2200      	movs	r2, #0
 80186f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	2200      	movs	r2, #0
 80186fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	2200      	movs	r2, #0
 8018704:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8018708:	2300      	movs	r3, #0
}
 801870a:	4618      	mov	r0, r3
 801870c:	3714      	adds	r7, #20
 801870e:	46bd      	mov	sp, r7
 8018710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018714:	4770      	bx	lr
	...

08018718 <ToF_init>:
RANGING_SENSOR_Result_t Result;
int32_t status = 0;

static int32_t decimal_part(float_t x);

void ToF_init(void){
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
	uint32_t cal_distance_mm = 100; /* target distance used for offset calibration */
 801871e:	2364      	movs	r3, #100	@ 0x64
 8018720:	603b      	str	r3, [r7, #0]
	  	printf("CTOS ToF Sensor \n");
 8018722:	483a      	ldr	r0, [pc, #232]	@ (801880c <ToF_init+0xf4>)
 8018724:	f004 faa2 	bl	801cc6c <puts>

	  	//initialisation du sensor
	  	status = VL53L4A2_RANGING_SENSOR_Init(VL53L4A2_DEV_CENTER);
 8018728:	2001      	movs	r0, #1
 801872a:	f7e9 f82c 	bl	8001786 <VL53L4A2_RANGING_SENSOR_Init>
 801872e:	4603      	mov	r3, r0
 8018730:	4a37      	ldr	r2, [pc, #220]	@ (8018810 <ToF_init+0xf8>)
 8018732:	6013      	str	r3, [r2, #0]
	  	/*if (status != BSP_ERROR_NONE)
	  	 {
	  	 printf("VL53L4A2_RANGING_SENSOR_Init failed\n");
	  	 while (1);
	  	 }*/
	  	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8018734:	4b37      	ldr	r3, [pc, #220]	@ (8018814 <ToF_init+0xfc>)
 8018736:	2202      	movs	r2, #2
 8018738:	601a      	str	r2, [r3, #0]
	  	Profile.TimingBudget = TIMING_BUDGET;
 801873a:	4b36      	ldr	r3, [pc, #216]	@ (8018814 <ToF_init+0xfc>)
 801873c:	221e      	movs	r2, #30
 801873e:	605a      	str	r2, [r3, #4]
	  	Profile.Frequency = 0; /* Induces intermeasurement period, NOT USED for normal ranging */
 8018740:	4b34      	ldr	r3, [pc, #208]	@ (8018814 <ToF_init+0xfc>)
 8018742:	2200      	movs	r2, #0
 8018744:	609a      	str	r2, [r3, #8]
	  	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8018746:	4b33      	ldr	r3, [pc, #204]	@ (8018814 <ToF_init+0xfc>)
 8018748:	2201      	movs	r2, #1
 801874a:	60da      	str	r2, [r3, #12]
	  	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 801874c:	4b31      	ldr	r3, [pc, #196]	@ (8018814 <ToF_init+0xfc>)
 801874e:	2201      	movs	r2, #1
 8018750:	611a      	str	r2, [r3, #16]

	  	//Configuration of the sensor
	  	status = VL53L4A2_RANGING_SENSOR_ConfigProfile(VL53L4A2_DEV_CENTER,&Profile);
 8018752:	4930      	ldr	r1, [pc, #192]	@ (8018814 <ToF_init+0xfc>)
 8018754:	2001      	movs	r0, #1
 8018756:	f7e9 f82b 	bl	80017b0 <VL53L4A2_RANGING_SENSOR_ConfigProfile>
 801875a:	4603      	mov	r3, r0
 801875c:	4a2c      	ldr	r2, [pc, #176]	@ (8018810 <ToF_init+0xf8>)
 801875e:	6013      	str	r3, [r2, #0]

	  	if (status != BSP_ERROR_NONE) {
 8018760:	4b2b      	ldr	r3, [pc, #172]	@ (8018810 <ToF_init+0xf8>)
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d008      	beq.n	801877a <ToF_init+0x62>

	  		printf("VL53L4A2_RANGING_SENSOR_ConfigProfile failed with status %ld\n",status);
 8018768:	4b29      	ldr	r3, [pc, #164]	@ (8018810 <ToF_init+0xf8>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	4619      	mov	r1, r3
 801876e:	482a      	ldr	r0, [pc, #168]	@ (8018818 <ToF_init+0x100>)
 8018770:	f004 fa0c 	bl	801cb8c <iprintf>
	  		Error_Handler();
 8018774:	f7e8 fb16 	bl	8000da4 <Error_Handler>
 8018778:	e002      	b.n	8018780 <ToF_init+0x68>

	  	} else {

	  		printf("VL53L4A2_RANGING_SENSOR_ConfigProfile succeeded\n");
 801877a:	4828      	ldr	r0, [pc, #160]	@ (801881c <ToF_init+0x104>)
 801877c:	f004 fa76 	bl	801cc6c <puts>
	  	}

	  	//Start the ToF sensor on the central board in blocking continuous mode
	  	status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER,RS_MODE_BLOCKING_CONTINUOUS);
 8018780:	2101      	movs	r1, #1
 8018782:	2001      	movs	r0, #1
 8018784:	f7e9 f864 	bl	8001850 <VL53L4A2_RANGING_SENSOR_Start>
 8018788:	4603      	mov	r3, r0
 801878a:	4a21      	ldr	r2, [pc, #132]	@ (8018810 <ToF_init+0xf8>)
 801878c:	6013      	str	r3, [r2, #0]

	  	if (status != BSP_ERROR_NONE) {
 801878e:	4b20      	ldr	r3, [pc, #128]	@ (8018810 <ToF_init+0xf8>)
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d004      	beq.n	80187a0 <ToF_init+0x88>
	  		printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 8018796:	4822      	ldr	r0, [pc, #136]	@ (8018820 <ToF_init+0x108>)
 8018798:	f004 fa68 	bl	801cc6c <puts>
	  		while (1)
 801879c:	bf00      	nop
 801879e:	e7fd      	b.n	801879c <ToF_init+0x84>
	  			;
	  	}

	  	//Data collection for Calibration of the sensor
	  	for (int i = 0; i < 10; i++) {
 80187a0:	2300      	movs	r3, #0
 80187a2:	607b      	str	r3, [r7, #4]
 80187a4:	e013      	b.n	80187ce <ToF_init+0xb6>
	  		status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER,
 80187a6:	491f      	ldr	r1, [pc, #124]	@ (8018824 <ToF_init+0x10c>)
 80187a8:	2001      	movs	r0, #1
 80187aa:	f7e9 f829 	bl	8001800 <VL53L4A2_RANGING_SENSOR_GetDistance>
 80187ae:	4603      	mov	r3, r0
 80187b0:	4a17      	ldr	r2, [pc, #92]	@ (8018810 <ToF_init+0xf8>)
 80187b2:	6013      	str	r3, [r2, #0]
	  				&Result);

	  		if (status == BSP_ERROR_NONE) {
 80187b4:	4b16      	ldr	r3, [pc, #88]	@ (8018810 <ToF_init+0xf8>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d102      	bne.n	80187c2 <ToF_init+0xaa>
	  			print_result(&Result);
 80187bc:	4819      	ldr	r0, [pc, #100]	@ (8018824 <ToF_init+0x10c>)
 80187be:	f000 f84b 	bl	8018858 <print_result>
	  		}

	  		HAL_Delay(POLLING_PERIOD);
 80187c2:	20fa      	movs	r0, #250	@ 0xfa
 80187c4:	f7fb f940 	bl	8013a48 <HAL_Delay>
	  	for (int i = 0; i < 10; i++) {
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	3301      	adds	r3, #1
 80187cc:	607b      	str	r3, [r7, #4]
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	2b09      	cmp	r3, #9
 80187d2:	dde8      	ble.n	80187a6 <ToF_init+0x8e>
	  	}
	  	VL53L4A2_RANGING_SENSOR_Stop(VL53L4A2_DEV_CENTER);
 80187d4:	2001      	movs	r0, #1
 80187d6:	f7e9 f863 	bl	80018a0 <VL53L4A2_RANGING_SENSOR_Stop>
	  	//Calibration of the module using data collected during calibration period
	  	VL53L4A2_RANGING_SENSOR_OffsetCalibration(VL53L4A2_DEV_CENTER, cal_distance_mm);
 80187da:	6839      	ldr	r1, [r7, #0]
 80187dc:	2001      	movs	r0, #1
 80187de:	f7e9 f885 	bl	80018ec <VL53L4A2_RANGING_SENSOR_OffsetCalibration>

	  	//Start the ToF sensor on the central board in blocking continuous mode
	  	status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80187e2:	2101      	movs	r1, #1
 80187e4:	2001      	movs	r0, #1
 80187e6:	f7e9 f833 	bl	8001850 <VL53L4A2_RANGING_SENSOR_Start>
 80187ea:	4603      	mov	r3, r0
 80187ec:	4a08      	ldr	r2, [pc, #32]	@ (8018810 <ToF_init+0xf8>)
 80187ee:	6013      	str	r3, [r2, #0]

	  	//if error are detected a message is returned
	  	if (status != BSP_ERROR_NONE) {
 80187f0:	4b07      	ldr	r3, [pc, #28]	@ (8018810 <ToF_init+0xf8>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d004      	beq.n	8018802 <ToF_init+0xea>
	  		printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 80187f8:	4809      	ldr	r0, [pc, #36]	@ (8018820 <ToF_init+0x108>)
 80187fa:	f004 fa37 	bl	801cc6c <puts>
	  		while (1)
 80187fe:	bf00      	nop
 8018800:	e7fd      	b.n	80187fe <ToF_init+0xe6>
	  			;
	  	}
}
 8018802:	bf00      	nop
 8018804:	3708      	adds	r7, #8
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}
 801880a:	bf00      	nop
 801880c:	0801e008 	.word	0x0801e008
 8018810:	20007fe0 	.word	0x20007fe0
 8018814:	20007f84 	.word	0x20007f84
 8018818:	0801e01c 	.word	0x0801e01c
 801881c:	0801e05c 	.word	0x0801e05c
 8018820:	0801e08c 	.word	0x0801e08c
 8018824:	20007f98 	.word	0x20007f98

08018828 <ToF_acquire_data>:

void ToF_acquire_data(RANGING_SENSOR_Result_t* result) {
 8018828:	b580      	push	{r7, lr}
 801882a:	b082      	sub	sp, #8
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]

	status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, result);
 8018830:	6879      	ldr	r1, [r7, #4]
 8018832:	2001      	movs	r0, #1
 8018834:	f7e8 ffe4 	bl	8001800 <VL53L4A2_RANGING_SENSOR_GetDistance>
 8018838:	4603      	mov	r3, r0
 801883a:	4a06      	ldr	r2, [pc, #24]	@ (8018854 <ToF_acquire_data+0x2c>)
 801883c:	6013      	str	r3, [r2, #0]
	if(status != BSP_ERROR_NONE){
 801883e:	4b05      	ldr	r3, [pc, #20]	@ (8018854 <ToF_acquire_data+0x2c>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d001      	beq.n	801884a <ToF_acquire_data+0x22>
		Error_Handler();
 8018846:	f7e8 faad 	bl	8000da4 <Error_Handler>
	}
}
 801884a:	bf00      	nop
 801884c:	3708      	adds	r7, #8
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}
 8018852:	bf00      	nop
 8018854:	20007fe0 	.word	0x20007fe0

08018858 <print_result>:


void print_result(RANGING_SENSOR_Result_t *Result)
{
 8018858:	b590      	push	{r4, r7, lr}
 801885a:	ed2d 8b02 	vpush	{d8}
 801885e:	b085      	sub	sp, #20
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8018864:	2300      	movs	r3, #0
 8018866:	73fb      	strb	r3, [r7, #15]
 8018868:	e096      	b.n	8018998 <print_result+0x140>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 801886a:	7bfa      	ldrb	r2, [r7, #15]
 801886c:	6879      	ldr	r1, [r7, #4]
 801886e:	4613      	mov	r3, r2
 8018870:	011b      	lsls	r3, r3, #4
 8018872:	4413      	add	r3, r2
 8018874:	009b      	lsls	r3, r3, #2
 8018876:	440b      	add	r3, r1
 8018878:	3304      	adds	r3, #4
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	4619      	mov	r1, r3
 801887e:	484d      	ldr	r0, [pc, #308]	@ (80189b4 <print_result+0x15c>)
 8018880:	f004 f984 	bl	801cb8c <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8018884:	2300      	movs	r3, #0
 8018886:	73bb      	strb	r3, [r7, #14]
 8018888:	e076      	b.n	8018978 <print_result+0x120>
    {
      printf("\n |---> ");
 801888a:	484b      	ldr	r0, [pc, #300]	@ (80189b8 <print_result+0x160>)
 801888c:	f004 f97e 	bl	801cb8c <iprintf>

      printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 8018890:	7bfa      	ldrb	r2, [r7, #15]
 8018892:	7bb8      	ldrb	r0, [r7, #14]
 8018894:	6879      	ldr	r1, [r7, #4]
 8018896:	4613      	mov	r3, r2
 8018898:	011b      	lsls	r3, r3, #4
 801889a:	4413      	add	r3, r2
 801889c:	4403      	add	r3, r0
 801889e:	3304      	adds	r3, #4
 80188a0:	009b      	lsls	r3, r3, #2
 80188a2:	440b      	add	r3, r1
 80188a4:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80188a6:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 80188a8:	7bfa      	ldrb	r2, [r7, #15]
 80188aa:	7bb8      	ldrb	r0, [r7, #14]
 80188ac:	6879      	ldr	r1, [r7, #4]
 80188ae:	4613      	mov	r3, r2
 80188b0:	011b      	lsls	r3, r3, #4
 80188b2:	4413      	add	r3, r2
 80188b4:	4403      	add	r3, r0
 80188b6:	009b      	lsls	r3, r3, #2
 80188b8:	440b      	add	r3, r1
 80188ba:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80188bc:	461a      	mov	r2, r3
 80188be:	4621      	mov	r1, r4
 80188c0:	483e      	ldr	r0, [pc, #248]	@ (80189bc <print_result+0x164>)
 80188c2:	f004 f963 	bl	801cb8c <iprintf>

      if (Profile.EnableAmbient)
 80188c6:	4b3e      	ldr	r3, [pc, #248]	@ (80189c0 <print_result+0x168>)
 80188c8:	68db      	ldr	r3, [r3, #12]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d026      	beq.n	801891c <print_result+0xc4>
        printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 80188ce:	7bfa      	ldrb	r2, [r7, #15]
 80188d0:	7bb8      	ldrb	r0, [r7, #14]
 80188d2:	6879      	ldr	r1, [r7, #4]
 80188d4:	4613      	mov	r3, r2
 80188d6:	011b      	lsls	r3, r3, #4
 80188d8:	4413      	add	r3, r2
 80188da:	4403      	add	r3, r0
 80188dc:	3308      	adds	r3, #8
 80188de:	009b      	lsls	r3, r3, #2
 80188e0:	440b      	add	r3, r1
 80188e2:	3308      	adds	r3, #8
 80188e4:	edd3 7a00 	vldr	s15, [r3]
        printf(", Ambient = %ld.%02ld kcps/spad",
 80188e8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 80188ec:	7bfa      	ldrb	r2, [r7, #15]
 80188ee:	7bb8      	ldrb	r0, [r7, #14]
 80188f0:	6879      	ldr	r1, [r7, #4]
 80188f2:	4613      	mov	r3, r2
 80188f4:	011b      	lsls	r3, r3, #4
 80188f6:	4413      	add	r3, r2
 80188f8:	4403      	add	r3, r0
 80188fa:	3308      	adds	r3, #8
 80188fc:	009b      	lsls	r3, r3, #2
 80188fe:	440b      	add	r3, r1
 8018900:	3308      	adds	r3, #8
 8018902:	edd3 7a00 	vldr	s15, [r3]
 8018906:	eeb0 0a67 	vmov.f32	s0, s15
 801890a:	f000 f91b 	bl	8018b44 <decimal_part>
 801890e:	4603      	mov	r3, r0
        printf(", Ambient = %ld.%02ld kcps/spad",
 8018910:	461a      	mov	r2, r3
 8018912:	ee18 1a10 	vmov	r1, s16
 8018916:	482b      	ldr	r0, [pc, #172]	@ (80189c4 <print_result+0x16c>)
 8018918:	f004 f938 	bl	801cb8c <iprintf>

      if (Profile.EnableSignal)
 801891c:	4b28      	ldr	r3, [pc, #160]	@ (80189c0 <print_result+0x168>)
 801891e:	691b      	ldr	r3, [r3, #16]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d026      	beq.n	8018972 <print_result+0x11a>
        printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 8018924:	7bfa      	ldrb	r2, [r7, #15]
 8018926:	7bb8      	ldrb	r0, [r7, #14]
 8018928:	6879      	ldr	r1, [r7, #4]
 801892a:	4613      	mov	r3, r2
 801892c:	011b      	lsls	r3, r3, #4
 801892e:	4413      	add	r3, r2
 8018930:	4403      	add	r3, r0
 8018932:	330c      	adds	r3, #12
 8018934:	009b      	lsls	r3, r3, #2
 8018936:	440b      	add	r3, r1
 8018938:	3308      	adds	r3, #8
 801893a:	edd3 7a00 	vldr	s15, [r3]
        printf(", Signal = %ld.%02ld kcps/spad",
 801893e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 8018942:	7bfa      	ldrb	r2, [r7, #15]
 8018944:	7bb8      	ldrb	r0, [r7, #14]
 8018946:	6879      	ldr	r1, [r7, #4]
 8018948:	4613      	mov	r3, r2
 801894a:	011b      	lsls	r3, r3, #4
 801894c:	4413      	add	r3, r2
 801894e:	4403      	add	r3, r0
 8018950:	330c      	adds	r3, #12
 8018952:	009b      	lsls	r3, r3, #2
 8018954:	440b      	add	r3, r1
 8018956:	3308      	adds	r3, #8
 8018958:	edd3 7a00 	vldr	s15, [r3]
 801895c:	eeb0 0a67 	vmov.f32	s0, s15
 8018960:	f000 f8f0 	bl	8018b44 <decimal_part>
 8018964:	4603      	mov	r3, r0
        printf(", Signal = %ld.%02ld kcps/spad",
 8018966:	461a      	mov	r2, r3
 8018968:	ee18 1a10 	vmov	r1, s16
 801896c:	4816      	ldr	r0, [pc, #88]	@ (80189c8 <print_result+0x170>)
 801896e:	f004 f90d 	bl	801cb8c <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8018972:	7bbb      	ldrb	r3, [r7, #14]
 8018974:	3301      	adds	r3, #1
 8018976:	73bb      	strb	r3, [r7, #14]
 8018978:	7bb9      	ldrb	r1, [r7, #14]
 801897a:	7bfa      	ldrb	r2, [r7, #15]
 801897c:	6878      	ldr	r0, [r7, #4]
 801897e:	4613      	mov	r3, r2
 8018980:	011b      	lsls	r3, r3, #4
 8018982:	4413      	add	r3, r2
 8018984:	009b      	lsls	r3, r3, #2
 8018986:	4403      	add	r3, r0
 8018988:	3304      	adds	r3, #4
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	4299      	cmp	r1, r3
 801898e:	f4ff af7c 	bcc.w	801888a <print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8018992:	7bfb      	ldrb	r3, [r7, #15]
 8018994:	3301      	adds	r3, #1
 8018996:	73fb      	strb	r3, [r7, #15]
 8018998:	7bfb      	ldrb	r3, [r7, #15]
 801899a:	2b00      	cmp	r3, #0
 801899c:	f43f af65 	beq.w	801886a <print_result+0x12>
    }
  }
  printf("\n");
 80189a0:	200a      	movs	r0, #10
 80189a2:	f004 f905 	bl	801cbb0 <putchar>
}
 80189a6:	bf00      	nop
 80189a8:	3714      	adds	r7, #20
 80189aa:	46bd      	mov	sp, r7
 80189ac:	ecbd 8b02 	vpop	{d8}
 80189b0:	bd90      	pop	{r4, r7, pc}
 80189b2:	bf00      	nop
 80189b4:	0801e0b4 	.word	0x0801e0b4
 80189b8:	0801e0c4 	.word	0x0801e0c4
 80189bc:	0801e0d0 	.word	0x0801e0d0
 80189c0:	20007f84 	.word	0x20007f84
 80189c4:	0801e0f4 	.word	0x0801e0f4
 80189c8:	0801e114 	.word	0x0801e114

080189cc <logger_print_result>:

void logger_print_result(RANGING_SENSOR_Result_t *Result)
{
 80189cc:	b590      	push	{r4, r7, lr}
 80189ce:	ed2d 8b02 	vpush	{d8}
 80189d2:	b085      	sub	sp, #20
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80189d8:	2300      	movs	r3, #0
 80189da:	73fb      	strb	r3, [r7, #15]
 80189dc:	e096      	b.n	8018b0c <logger_print_result+0x140>
  {
    log_printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 80189de:	7bfa      	ldrb	r2, [r7, #15]
 80189e0:	6879      	ldr	r1, [r7, #4]
 80189e2:	4613      	mov	r3, r2
 80189e4:	011b      	lsls	r3, r3, #4
 80189e6:	4413      	add	r3, r2
 80189e8:	009b      	lsls	r3, r3, #2
 80189ea:	440b      	add	r3, r1
 80189ec:	3304      	adds	r3, #4
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	4619      	mov	r1, r3
 80189f2:	484d      	ldr	r0, [pc, #308]	@ (8018b28 <logger_print_result+0x15c>)
 80189f4:	f7fa ff54 	bl	80138a0 <log_printf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80189f8:	2300      	movs	r3, #0
 80189fa:	73bb      	strb	r3, [r7, #14]
 80189fc:	e076      	b.n	8018aec <logger_print_result+0x120>
    {
      log_printf("\n |---> ");
 80189fe:	484b      	ldr	r0, [pc, #300]	@ (8018b2c <logger_print_result+0x160>)
 8018a00:	f7fa ff4e 	bl	80138a0 <log_printf>

      log_printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 8018a04:	7bfa      	ldrb	r2, [r7, #15]
 8018a06:	7bb8      	ldrb	r0, [r7, #14]
 8018a08:	6879      	ldr	r1, [r7, #4]
 8018a0a:	4613      	mov	r3, r2
 8018a0c:	011b      	lsls	r3, r3, #4
 8018a0e:	4413      	add	r3, r2
 8018a10:	4403      	add	r3, r0
 8018a12:	3304      	adds	r3, #4
 8018a14:	009b      	lsls	r3, r3, #2
 8018a16:	440b      	add	r3, r1
 8018a18:	689b      	ldr	r3, [r3, #8]
      log_printf("Status = %ld, Distance = %5ld mm ",
 8018a1a:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 8018a1c:	7bfa      	ldrb	r2, [r7, #15]
 8018a1e:	7bb8      	ldrb	r0, [r7, #14]
 8018a20:	6879      	ldr	r1, [r7, #4]
 8018a22:	4613      	mov	r3, r2
 8018a24:	011b      	lsls	r3, r3, #4
 8018a26:	4413      	add	r3, r2
 8018a28:	4403      	add	r3, r0
 8018a2a:	009b      	lsls	r3, r3, #2
 8018a2c:	440b      	add	r3, r1
 8018a2e:	689b      	ldr	r3, [r3, #8]
      log_printf("Status = %ld, Distance = %5ld mm ",
 8018a30:	461a      	mov	r2, r3
 8018a32:	4621      	mov	r1, r4
 8018a34:	483e      	ldr	r0, [pc, #248]	@ (8018b30 <logger_print_result+0x164>)
 8018a36:	f7fa ff33 	bl	80138a0 <log_printf>

      if (Profile.EnableAmbient)
 8018a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8018b34 <logger_print_result+0x168>)
 8018a3c:	68db      	ldr	r3, [r3, #12]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d026      	beq.n	8018a90 <logger_print_result+0xc4>
        log_printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 8018a42:	7bfa      	ldrb	r2, [r7, #15]
 8018a44:	7bb8      	ldrb	r0, [r7, #14]
 8018a46:	6879      	ldr	r1, [r7, #4]
 8018a48:	4613      	mov	r3, r2
 8018a4a:	011b      	lsls	r3, r3, #4
 8018a4c:	4413      	add	r3, r2
 8018a4e:	4403      	add	r3, r0
 8018a50:	3308      	adds	r3, #8
 8018a52:	009b      	lsls	r3, r3, #2
 8018a54:	440b      	add	r3, r1
 8018a56:	3308      	adds	r3, #8
 8018a58:	edd3 7a00 	vldr	s15, [r3]
        log_printf(", Ambient = %ld.%02ld kcps/spad",
 8018a5c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 8018a60:	7bfa      	ldrb	r2, [r7, #15]
 8018a62:	7bb8      	ldrb	r0, [r7, #14]
 8018a64:	6879      	ldr	r1, [r7, #4]
 8018a66:	4613      	mov	r3, r2
 8018a68:	011b      	lsls	r3, r3, #4
 8018a6a:	4413      	add	r3, r2
 8018a6c:	4403      	add	r3, r0
 8018a6e:	3308      	adds	r3, #8
 8018a70:	009b      	lsls	r3, r3, #2
 8018a72:	440b      	add	r3, r1
 8018a74:	3308      	adds	r3, #8
 8018a76:	edd3 7a00 	vldr	s15, [r3]
 8018a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8018a7e:	f000 f861 	bl	8018b44 <decimal_part>
 8018a82:	4603      	mov	r3, r0
        log_printf(", Ambient = %ld.%02ld kcps/spad",
 8018a84:	461a      	mov	r2, r3
 8018a86:	ee18 1a10 	vmov	r1, s16
 8018a8a:	482b      	ldr	r0, [pc, #172]	@ (8018b38 <logger_print_result+0x16c>)
 8018a8c:	f7fa ff08 	bl	80138a0 <log_printf>

      if (Profile.EnableSignal)
 8018a90:	4b28      	ldr	r3, [pc, #160]	@ (8018b34 <logger_print_result+0x168>)
 8018a92:	691b      	ldr	r3, [r3, #16]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d026      	beq.n	8018ae6 <logger_print_result+0x11a>
        log_printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 8018a98:	7bfa      	ldrb	r2, [r7, #15]
 8018a9a:	7bb8      	ldrb	r0, [r7, #14]
 8018a9c:	6879      	ldr	r1, [r7, #4]
 8018a9e:	4613      	mov	r3, r2
 8018aa0:	011b      	lsls	r3, r3, #4
 8018aa2:	4413      	add	r3, r2
 8018aa4:	4403      	add	r3, r0
 8018aa6:	330c      	adds	r3, #12
 8018aa8:	009b      	lsls	r3, r3, #2
 8018aaa:	440b      	add	r3, r1
 8018aac:	3308      	adds	r3, #8
 8018aae:	edd3 7a00 	vldr	s15, [r3]
        log_printf(", Signal = %ld.%02ld kcps/spad",
 8018ab2:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 8018ab6:	7bfa      	ldrb	r2, [r7, #15]
 8018ab8:	7bb8      	ldrb	r0, [r7, #14]
 8018aba:	6879      	ldr	r1, [r7, #4]
 8018abc:	4613      	mov	r3, r2
 8018abe:	011b      	lsls	r3, r3, #4
 8018ac0:	4413      	add	r3, r2
 8018ac2:	4403      	add	r3, r0
 8018ac4:	330c      	adds	r3, #12
 8018ac6:	009b      	lsls	r3, r3, #2
 8018ac8:	440b      	add	r3, r1
 8018aca:	3308      	adds	r3, #8
 8018acc:	edd3 7a00 	vldr	s15, [r3]
 8018ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8018ad4:	f000 f836 	bl	8018b44 <decimal_part>
 8018ad8:	4603      	mov	r3, r0
        log_printf(", Signal = %ld.%02ld kcps/spad",
 8018ada:	461a      	mov	r2, r3
 8018adc:	ee18 1a10 	vmov	r1, s16
 8018ae0:	4816      	ldr	r0, [pc, #88]	@ (8018b3c <logger_print_result+0x170>)
 8018ae2:	f7fa fedd 	bl	80138a0 <log_printf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8018ae6:	7bbb      	ldrb	r3, [r7, #14]
 8018ae8:	3301      	adds	r3, #1
 8018aea:	73bb      	strb	r3, [r7, #14]
 8018aec:	7bb9      	ldrb	r1, [r7, #14]
 8018aee:	7bfa      	ldrb	r2, [r7, #15]
 8018af0:	6878      	ldr	r0, [r7, #4]
 8018af2:	4613      	mov	r3, r2
 8018af4:	011b      	lsls	r3, r3, #4
 8018af6:	4413      	add	r3, r2
 8018af8:	009b      	lsls	r3, r3, #2
 8018afa:	4403      	add	r3, r0
 8018afc:	3304      	adds	r3, #4
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	4299      	cmp	r1, r3
 8018b02:	f4ff af7c 	bcc.w	80189fe <logger_print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8018b06:	7bfb      	ldrb	r3, [r7, #15]
 8018b08:	3301      	adds	r3, #1
 8018b0a:	73fb      	strb	r3, [r7, #15]
 8018b0c:	7bfb      	ldrb	r3, [r7, #15]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	f43f af65 	beq.w	80189de <logger_print_result+0x12>
    }
  }
  log_printf("\n");
 8018b14:	480a      	ldr	r0, [pc, #40]	@ (8018b40 <logger_print_result+0x174>)
 8018b16:	f7fa fec3 	bl	80138a0 <log_printf>
}
 8018b1a:	bf00      	nop
 8018b1c:	3714      	adds	r7, #20
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	ecbd 8b02 	vpop	{d8}
 8018b24:	bd90      	pop	{r4, r7, pc}
 8018b26:	bf00      	nop
 8018b28:	0801e0b4 	.word	0x0801e0b4
 8018b2c:	0801e0c4 	.word	0x0801e0c4
 8018b30:	0801e0d0 	.word	0x0801e0d0
 8018b34:	20007f84 	.word	0x20007f84
 8018b38:	0801e0f4 	.word	0x0801e0f4
 8018b3c:	0801e114 	.word	0x0801e114
 8018b40:	0801e134 	.word	0x0801e134

08018b44 <decimal_part>:

static int32_t decimal_part(float_t x)
{
 8018b44:	b480      	push	{r7}
 8018b46:	b085      	sub	sp, #20
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t int_part = (int32_t) x;
 8018b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8018b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018b56:	ee17 3a90 	vmov	r3, s15
 8018b5a:	60fb      	str	r3, [r7, #12]
  return (int32_t)((x - int_part) * 100);
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	ee07 3a90 	vmov	s15, r3
 8018b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b66:	ed97 7a01 	vldr	s14, [r7, #4]
 8018b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b6e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8018b8c <decimal_part+0x48>
 8018b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018b7a:	ee17 3a90 	vmov	r3, s15
}
 8018b7e:	4618      	mov	r0, r3
 8018b80:	3714      	adds	r7, #20
 8018b82:	46bd      	mov	sp, r7
 8018b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b88:	4770      	bx	lr
 8018b8a:	bf00      	nop
 8018b8c:	42c80000 	.word	0x42c80000

08018b90 <__NVIC_SetPriority>:
{
 8018b90:	b480      	push	{r7}
 8018b92:	b083      	sub	sp, #12
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	4603      	mov	r3, r0
 8018b98:	6039      	str	r1, [r7, #0]
 8018b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	db0a      	blt.n	8018bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018ba4:	683b      	ldr	r3, [r7, #0]
 8018ba6:	b2da      	uxtb	r2, r3
 8018ba8:	490c      	ldr	r1, [pc, #48]	@ (8018bdc <__NVIC_SetPriority+0x4c>)
 8018baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018bae:	0112      	lsls	r2, r2, #4
 8018bb0:	b2d2      	uxtb	r2, r2
 8018bb2:	440b      	add	r3, r1
 8018bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8018bb8:	e00a      	b.n	8018bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	b2da      	uxtb	r2, r3
 8018bbe:	4908      	ldr	r1, [pc, #32]	@ (8018be0 <__NVIC_SetPriority+0x50>)
 8018bc0:	79fb      	ldrb	r3, [r7, #7]
 8018bc2:	f003 030f 	and.w	r3, r3, #15
 8018bc6:	3b04      	subs	r3, #4
 8018bc8:	0112      	lsls	r2, r2, #4
 8018bca:	b2d2      	uxtb	r2, r2
 8018bcc:	440b      	add	r3, r1
 8018bce:	761a      	strb	r2, [r3, #24]
}
 8018bd0:	bf00      	nop
 8018bd2:	370c      	adds	r7, #12
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bda:	4770      	bx	lr
 8018bdc:	e000e100 	.word	0xe000e100
 8018be0:	e000ed00 	.word	0xe000ed00

08018be4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8018be4:	b580      	push	{r7, lr}
 8018be6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8018be8:	4b05      	ldr	r3, [pc, #20]	@ (8018c00 <SysTick_Handler+0x1c>)
 8018bea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018bec:	f002 fb88 	bl	801b300 <xTaskGetSchedulerState>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	2b01      	cmp	r3, #1
 8018bf4:	d001      	beq.n	8018bfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8018bf6:	f003 fc87 	bl	801c508 <xPortSysTickHandler>
  }
}
 8018bfa:	bf00      	nop
 8018bfc:	bd80      	pop	{r7, pc}
 8018bfe:	bf00      	nop
 8018c00:	e000e010 	.word	0xe000e010

08018c04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8018c04:	b580      	push	{r7, lr}
 8018c06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8018c08:	2100      	movs	r1, #0
 8018c0a:	f06f 0004 	mvn.w	r0, #4
 8018c0e:	f7ff ffbf 	bl	8018b90 <__NVIC_SetPriority>
#endif
}
 8018c12:	bf00      	nop
 8018c14:	bd80      	pop	{r7, pc}
	...

08018c18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8018c18:	b480      	push	{r7}
 8018c1a:	b083      	sub	sp, #12
 8018c1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018c1e:	f3ef 8305 	mrs	r3, IPSR
 8018c22:	603b      	str	r3, [r7, #0]
  return(result);
 8018c24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d003      	beq.n	8018c32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8018c2a:	f06f 0305 	mvn.w	r3, #5
 8018c2e:	607b      	str	r3, [r7, #4]
 8018c30:	e00c      	b.n	8018c4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8018c32:	4b0a      	ldr	r3, [pc, #40]	@ (8018c5c <osKernelInitialize+0x44>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d105      	bne.n	8018c46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018c3a:	4b08      	ldr	r3, [pc, #32]	@ (8018c5c <osKernelInitialize+0x44>)
 8018c3c:	2201      	movs	r2, #1
 8018c3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018c40:	2300      	movs	r3, #0
 8018c42:	607b      	str	r3, [r7, #4]
 8018c44:	e002      	b.n	8018c4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8018c46:	f04f 33ff 	mov.w	r3, #4294967295
 8018c4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018c4c:	687b      	ldr	r3, [r7, #4]
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	370c      	adds	r7, #12
 8018c52:	46bd      	mov	sp, r7
 8018c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c58:	4770      	bx	lr
 8018c5a:	bf00      	nop
 8018c5c:	20007fe4 	.word	0x20007fe4

08018c60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b082      	sub	sp, #8
 8018c64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018c66:	f3ef 8305 	mrs	r3, IPSR
 8018c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8018c6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d003      	beq.n	8018c7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8018c72:	f06f 0305 	mvn.w	r3, #5
 8018c76:	607b      	str	r3, [r7, #4]
 8018c78:	e010      	b.n	8018c9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8018c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8018ca8 <osKernelStart+0x48>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	2b01      	cmp	r3, #1
 8018c80:	d109      	bne.n	8018c96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8018c82:	f7ff ffbf 	bl	8018c04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018c86:	4b08      	ldr	r3, [pc, #32]	@ (8018ca8 <osKernelStart+0x48>)
 8018c88:	2202      	movs	r2, #2
 8018c8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018c8c:	f001 feb2 	bl	801a9f4 <vTaskStartScheduler>
      stat = osOK;
 8018c90:	2300      	movs	r3, #0
 8018c92:	607b      	str	r3, [r7, #4]
 8018c94:	e002      	b.n	8018c9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8018c96:	f04f 33ff 	mov.w	r3, #4294967295
 8018c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018c9c:	687b      	ldr	r3, [r7, #4]
}
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	3708      	adds	r7, #8
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	bd80      	pop	{r7, pc}
 8018ca6:	bf00      	nop
 8018ca8:	20007fe4 	.word	0x20007fe4

08018cac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018cb2:	f3ef 8305 	mrs	r3, IPSR
 8018cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8018cb8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d003      	beq.n	8018cc6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8018cbe:	f001 ffc5 	bl	801ac4c <xTaskGetTickCountFromISR>
 8018cc2:	6078      	str	r0, [r7, #4]
 8018cc4:	e002      	b.n	8018ccc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8018cc6:	f001 ffb1 	bl	801ac2c <xTaskGetTickCount>
 8018cca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8018ccc:	687b      	ldr	r3, [r7, #4]
}
 8018cce:	4618      	mov	r0, r3
 8018cd0:	3708      	adds	r7, #8
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	bd80      	pop	{r7, pc}

08018cd6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018cd6:	b580      	push	{r7, lr}
 8018cd8:	b08e      	sub	sp, #56	@ 0x38
 8018cda:	af04      	add	r7, sp, #16
 8018cdc:	60f8      	str	r0, [r7, #12]
 8018cde:	60b9      	str	r1, [r7, #8]
 8018ce0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018ce6:	f3ef 8305 	mrs	r3, IPSR
 8018cea:	617b      	str	r3, [r7, #20]
  return(result);
 8018cec:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d17e      	bne.n	8018df0 <osThreadNew+0x11a>
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d07b      	beq.n	8018df0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8018cf8:	2380      	movs	r3, #128	@ 0x80
 8018cfa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8018cfc:	2318      	movs	r3, #24
 8018cfe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8018d00:	2300      	movs	r3, #0
 8018d02:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8018d04:	f04f 33ff 	mov.w	r3, #4294967295
 8018d08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d045      	beq.n	8018d9c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d002      	beq.n	8018d1e <osThreadNew+0x48>
        name = attr->name;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	699b      	ldr	r3, [r3, #24]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d002      	beq.n	8018d2c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	699b      	ldr	r3, [r3, #24]
 8018d2a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8018d2c:	69fb      	ldr	r3, [r7, #28]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d008      	beq.n	8018d44 <osThreadNew+0x6e>
 8018d32:	69fb      	ldr	r3, [r7, #28]
 8018d34:	2b38      	cmp	r3, #56	@ 0x38
 8018d36:	d805      	bhi.n	8018d44 <osThreadNew+0x6e>
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	685b      	ldr	r3, [r3, #4]
 8018d3c:	f003 0301 	and.w	r3, r3, #1
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d001      	beq.n	8018d48 <osThreadNew+0x72>
        return (NULL);
 8018d44:	2300      	movs	r3, #0
 8018d46:	e054      	b.n	8018df2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	695b      	ldr	r3, [r3, #20]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d003      	beq.n	8018d58 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	695b      	ldr	r3, [r3, #20]
 8018d54:	089b      	lsrs	r3, r3, #2
 8018d56:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	689b      	ldr	r3, [r3, #8]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d00e      	beq.n	8018d7e <osThreadNew+0xa8>
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	68db      	ldr	r3, [r3, #12]
 8018d64:	2ba7      	cmp	r3, #167	@ 0xa7
 8018d66:	d90a      	bls.n	8018d7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d006      	beq.n	8018d7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	695b      	ldr	r3, [r3, #20]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d002      	beq.n	8018d7e <osThreadNew+0xa8>
        mem = 1;
 8018d78:	2301      	movs	r3, #1
 8018d7a:	61bb      	str	r3, [r7, #24]
 8018d7c:	e010      	b.n	8018da0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	689b      	ldr	r3, [r3, #8]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d10c      	bne.n	8018da0 <osThreadNew+0xca>
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	68db      	ldr	r3, [r3, #12]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d108      	bne.n	8018da0 <osThreadNew+0xca>
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	691b      	ldr	r3, [r3, #16]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d104      	bne.n	8018da0 <osThreadNew+0xca>
          mem = 0;
 8018d96:	2300      	movs	r3, #0
 8018d98:	61bb      	str	r3, [r7, #24]
 8018d9a:	e001      	b.n	8018da0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8018da0:	69bb      	ldr	r3, [r7, #24]
 8018da2:	2b01      	cmp	r3, #1
 8018da4:	d110      	bne.n	8018dc8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018daa:	687a      	ldr	r2, [r7, #4]
 8018dac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018dae:	9202      	str	r2, [sp, #8]
 8018db0:	9301      	str	r3, [sp, #4]
 8018db2:	69fb      	ldr	r3, [r7, #28]
 8018db4:	9300      	str	r3, [sp, #0]
 8018db6:	68bb      	ldr	r3, [r7, #8]
 8018db8:	6a3a      	ldr	r2, [r7, #32]
 8018dba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018dbc:	68f8      	ldr	r0, [r7, #12]
 8018dbe:	f001 fc25 	bl	801a60c <xTaskCreateStatic>
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	613b      	str	r3, [r7, #16]
 8018dc6:	e013      	b.n	8018df0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8018dc8:	69bb      	ldr	r3, [r7, #24]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d110      	bne.n	8018df0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8018dce:	6a3b      	ldr	r3, [r7, #32]
 8018dd0:	b29a      	uxth	r2, r3
 8018dd2:	f107 0310 	add.w	r3, r7, #16
 8018dd6:	9301      	str	r3, [sp, #4]
 8018dd8:	69fb      	ldr	r3, [r7, #28]
 8018dda:	9300      	str	r3, [sp, #0]
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018de0:	68f8      	ldr	r0, [r7, #12]
 8018de2:	f001 fc73 	bl	801a6cc <xTaskCreate>
 8018de6:	4603      	mov	r3, r0
 8018de8:	2b01      	cmp	r3, #1
 8018dea:	d001      	beq.n	8018df0 <osThreadNew+0x11a>
            hTask = NULL;
 8018dec:	2300      	movs	r3, #0
 8018dee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8018df0:	693b      	ldr	r3, [r7, #16]
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3728      	adds	r7, #40	@ 0x28
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}
	...

08018dfc <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b088      	sub	sp, #32
 8018e00:	af02      	add	r7, sp, #8
 8018e02:	6078      	str	r0, [r7, #4]
 8018e04:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8018e0a:	697b      	ldr	r3, [r7, #20]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d002      	beq.n	8018e16 <osThreadFlagsSet+0x1a>
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	da03      	bge.n	8018e1e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8018e16:	f06f 0303 	mvn.w	r3, #3
 8018e1a:	60fb      	str	r3, [r7, #12]
 8018e1c:	e035      	b.n	8018e8a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8018e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8018e22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018e24:	f3ef 8305 	mrs	r3, IPSR
 8018e28:	613b      	str	r3, [r7, #16]
  return(result);
 8018e2a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d01f      	beq.n	8018e70 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8018e30:	2300      	movs	r3, #0
 8018e32:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8018e34:	f107 0308 	add.w	r3, r7, #8
 8018e38:	9300      	str	r3, [sp, #0]
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	2201      	movs	r2, #1
 8018e3e:	6839      	ldr	r1, [r7, #0]
 8018e40:	6978      	ldr	r0, [r7, #20]
 8018e42:	f002 fd0d 	bl	801b860 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8018e46:	f107 030c 	add.w	r3, r7, #12
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	9200      	str	r2, [sp, #0]
 8018e4e:	2200      	movs	r2, #0
 8018e50:	2100      	movs	r1, #0
 8018e52:	6978      	ldr	r0, [r7, #20]
 8018e54:	f002 fd04 	bl	801b860 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8018e58:	68bb      	ldr	r3, [r7, #8]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d015      	beq.n	8018e8a <osThreadFlagsSet+0x8e>
 8018e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8018e94 <osThreadFlagsSet+0x98>)
 8018e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e64:	601a      	str	r2, [r3, #0]
 8018e66:	f3bf 8f4f 	dsb	sy
 8018e6a:	f3bf 8f6f 	isb	sy
 8018e6e:	e00c      	b.n	8018e8a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8018e70:	2300      	movs	r3, #0
 8018e72:	2201      	movs	r2, #1
 8018e74:	6839      	ldr	r1, [r7, #0]
 8018e76:	6978      	ldr	r0, [r7, #20]
 8018e78:	f002 fc30 	bl	801b6dc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8018e7c:	f107 030c 	add.w	r3, r7, #12
 8018e80:	2200      	movs	r2, #0
 8018e82:	2100      	movs	r1, #0
 8018e84:	6978      	ldr	r0, [r7, #20]
 8018e86:	f002 fc29 	bl	801b6dc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8018e8a:	68fb      	ldr	r3, [r7, #12]
}
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	3718      	adds	r7, #24
 8018e90:	46bd      	mov	sp, r7
 8018e92:	bd80      	pop	{r7, pc}
 8018e94:	e000ed04 	.word	0xe000ed04

08018e98 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b08c      	sub	sp, #48	@ 0x30
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	60f8      	str	r0, [r7, #12]
 8018ea0:	60b9      	str	r1, [r7, #8]
 8018ea2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018ea4:	f3ef 8305 	mrs	r3, IPSR
 8018ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8018eaa:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d003      	beq.n	8018eb8 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8018eb0:	f06f 0305 	mvn.w	r3, #5
 8018eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018eb6:	e06b      	b.n	8018f90 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	da03      	bge.n	8018ec6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8018ebe:	f06f 0303 	mvn.w	r3, #3
 8018ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ec4:	e064      	b.n	8018f90 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8018ec6:	68bb      	ldr	r3, [r7, #8]
 8018ec8:	f003 0302 	and.w	r3, r3, #2
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d002      	beq.n	8018ed6 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018ed4:	e001      	b.n	8018eda <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8018eda:	2300      	movs	r3, #0
 8018edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8018ee2:	f001 fea3 	bl	801ac2c <xTaskGetTickCount>
 8018ee6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8018ee8:	f107 0210 	add.w	r2, r7, #16
 8018eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018ef0:	2000      	movs	r0, #0
 8018ef2:	f002 fb93 	bl	801b61c <xTaskNotifyWait>
 8018ef6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8018ef8:	69fb      	ldr	r3, [r7, #28]
 8018efa:	2b01      	cmp	r3, #1
 8018efc:	d137      	bne.n	8018f6e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8018efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	4013      	ands	r3, r2
 8018f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018f0a:	4313      	orrs	r3, r2
 8018f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8018f0e:	68bb      	ldr	r3, [r7, #8]
 8018f10:	f003 0301 	and.w	r3, r3, #1
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d00c      	beq.n	8018f32 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8018f18:	68fa      	ldr	r2, [r7, #12]
 8018f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f1c:	4013      	ands	r3, r2
 8018f1e:	68fa      	ldr	r2, [r7, #12]
 8018f20:	429a      	cmp	r2, r3
 8018f22:	d032      	beq.n	8018f8a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d10f      	bne.n	8018f4a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8018f2a:	f06f 0302 	mvn.w	r3, #2
 8018f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8018f30:	e02e      	b.n	8018f90 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8018f32:	68fa      	ldr	r2, [r7, #12]
 8018f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f36:	4013      	ands	r3, r2
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d128      	bne.n	8018f8e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d103      	bne.n	8018f4a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8018f42:	f06f 0302 	mvn.w	r3, #2
 8018f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8018f48:	e022      	b.n	8018f90 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8018f4a:	f001 fe6f 	bl	801ac2c <xTaskGetTickCount>
 8018f4e:	4602      	mov	r2, r0
 8018f50:	6a3b      	ldr	r3, [r7, #32]
 8018f52:	1ad3      	subs	r3, r2, r3
 8018f54:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8018f56:	69ba      	ldr	r2, [r7, #24]
 8018f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	d902      	bls.n	8018f64 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8018f5e:	2300      	movs	r3, #0
 8018f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f62:	e00e      	b.n	8018f82 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8018f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f66:	69bb      	ldr	r3, [r7, #24]
 8018f68:	1ad3      	subs	r3, r2, r3
 8018f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f6c:	e009      	b.n	8018f82 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d103      	bne.n	8018f7c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8018f74:	f06f 0302 	mvn.w	r3, #2
 8018f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018f7a:	e002      	b.n	8018f82 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8018f7c:	f06f 0301 	mvn.w	r3, #1
 8018f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8018f82:	69fb      	ldr	r3, [r7, #28]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d1af      	bne.n	8018ee8 <osThreadFlagsWait+0x50>
 8018f88:	e002      	b.n	8018f90 <osThreadFlagsWait+0xf8>
            break;
 8018f8a:	bf00      	nop
 8018f8c:	e000      	b.n	8018f90 <osThreadFlagsWait+0xf8>
            break;
 8018f8e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8018f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8018f92:	4618      	mov	r0, r3
 8018f94:	3730      	adds	r7, #48	@ 0x30
 8018f96:	46bd      	mov	sp, r7
 8018f98:	bd80      	pop	{r7, pc}

08018f9a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018f9a:	b580      	push	{r7, lr}
 8018f9c:	b084      	sub	sp, #16
 8018f9e:	af00      	add	r7, sp, #0
 8018fa0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018fa2:	f3ef 8305 	mrs	r3, IPSR
 8018fa6:	60bb      	str	r3, [r7, #8]
  return(result);
 8018fa8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d003      	beq.n	8018fb6 <osDelay+0x1c>
    stat = osErrorISR;
 8018fae:	f06f 0305 	mvn.w	r3, #5
 8018fb2:	60fb      	str	r3, [r7, #12]
 8018fb4:	e007      	b.n	8018fc6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d002      	beq.n	8018fc6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	f001 fce1 	bl	801a988 <vTaskDelay>
    }
  }

  return (stat);
 8018fc6:	68fb      	ldr	r3, [r7, #12]
}
 8018fc8:	4618      	mov	r0, r3
 8018fca:	3710      	adds	r7, #16
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}

08018fd0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b088      	sub	sp, #32
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8018fd8:	2300      	movs	r3, #0
 8018fda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018fdc:	f3ef 8305 	mrs	r3, IPSR
 8018fe0:	60bb      	str	r3, [r7, #8]
  return(result);
 8018fe2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d174      	bne.n	80190d2 <osMutexNew+0x102>
    if (attr != NULL) {
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d003      	beq.n	8018ff6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	61bb      	str	r3, [r7, #24]
 8018ff4:	e001      	b.n	8018ffa <osMutexNew+0x2a>
    } else {
      type = 0U;
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8018ffa:	69bb      	ldr	r3, [r7, #24]
 8018ffc:	f003 0301 	and.w	r3, r3, #1
 8019000:	2b00      	cmp	r3, #0
 8019002:	d002      	beq.n	801900a <osMutexNew+0x3a>
      rmtx = 1U;
 8019004:	2301      	movs	r3, #1
 8019006:	617b      	str	r3, [r7, #20]
 8019008:	e001      	b.n	801900e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801900a:	2300      	movs	r3, #0
 801900c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801900e:	69bb      	ldr	r3, [r7, #24]
 8019010:	f003 0308 	and.w	r3, r3, #8
 8019014:	2b00      	cmp	r3, #0
 8019016:	d15c      	bne.n	80190d2 <osMutexNew+0x102>
      mem = -1;
 8019018:	f04f 33ff 	mov.w	r3, #4294967295
 801901c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d015      	beq.n	8019050 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	689b      	ldr	r3, [r3, #8]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d006      	beq.n	801903a <osMutexNew+0x6a>
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	68db      	ldr	r3, [r3, #12]
 8019030:	2b4f      	cmp	r3, #79	@ 0x4f
 8019032:	d902      	bls.n	801903a <osMutexNew+0x6a>
          mem = 1;
 8019034:	2301      	movs	r3, #1
 8019036:	613b      	str	r3, [r7, #16]
 8019038:	e00c      	b.n	8019054 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	689b      	ldr	r3, [r3, #8]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d108      	bne.n	8019054 <osMutexNew+0x84>
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	68db      	ldr	r3, [r3, #12]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d104      	bne.n	8019054 <osMutexNew+0x84>
            mem = 0;
 801904a:	2300      	movs	r3, #0
 801904c:	613b      	str	r3, [r7, #16]
 801904e:	e001      	b.n	8019054 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8019050:	2300      	movs	r3, #0
 8019052:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8019054:	693b      	ldr	r3, [r7, #16]
 8019056:	2b01      	cmp	r3, #1
 8019058:	d112      	bne.n	8019080 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d007      	beq.n	8019070 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	689b      	ldr	r3, [r3, #8]
 8019064:	4619      	mov	r1, r3
 8019066:	2004      	movs	r0, #4
 8019068:	f000 fc71 	bl	801994e <xQueueCreateMutexStatic>
 801906c:	61f8      	str	r0, [r7, #28]
 801906e:	e016      	b.n	801909e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	689b      	ldr	r3, [r3, #8]
 8019074:	4619      	mov	r1, r3
 8019076:	2001      	movs	r0, #1
 8019078:	f000 fc69 	bl	801994e <xQueueCreateMutexStatic>
 801907c:	61f8      	str	r0, [r7, #28]
 801907e:	e00e      	b.n	801909e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8019080:	693b      	ldr	r3, [r7, #16]
 8019082:	2b00      	cmp	r3, #0
 8019084:	d10b      	bne.n	801909e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8019086:	697b      	ldr	r3, [r7, #20]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d004      	beq.n	8019096 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801908c:	2004      	movs	r0, #4
 801908e:	f000 fc46 	bl	801991e <xQueueCreateMutex>
 8019092:	61f8      	str	r0, [r7, #28]
 8019094:	e003      	b.n	801909e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8019096:	2001      	movs	r0, #1
 8019098:	f000 fc41 	bl	801991e <xQueueCreateMutex>
 801909c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801909e:	69fb      	ldr	r3, [r7, #28]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d00c      	beq.n	80190be <osMutexNew+0xee>
        if (attr != NULL) {
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d003      	beq.n	80190b2 <osMutexNew+0xe2>
          name = attr->name;
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	60fb      	str	r3, [r7, #12]
 80190b0:	e001      	b.n	80190b6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80190b2:	2300      	movs	r3, #0
 80190b4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80190b6:	68f9      	ldr	r1, [r7, #12]
 80190b8:	69f8      	ldr	r0, [r7, #28]
 80190ba:	f001 fa49 	bl	801a550 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80190be:	69fb      	ldr	r3, [r7, #28]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d006      	beq.n	80190d2 <osMutexNew+0x102>
 80190c4:	697b      	ldr	r3, [r7, #20]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d003      	beq.n	80190d2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80190ca:	69fb      	ldr	r3, [r7, #28]
 80190cc:	f043 0301 	orr.w	r3, r3, #1
 80190d0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80190d2:	69fb      	ldr	r3, [r7, #28]
}
 80190d4:	4618      	mov	r0, r3
 80190d6:	3720      	adds	r7, #32
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}

080190dc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80190dc:	b580      	push	{r7, lr}
 80190de:	b086      	sub	sp, #24
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
 80190e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f023 0301 	bic.w	r3, r3, #1
 80190ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	f003 0301 	and.w	r3, r3, #1
 80190f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80190f6:	2300      	movs	r3, #0
 80190f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80190fa:	f3ef 8305 	mrs	r3, IPSR
 80190fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8019100:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019102:	2b00      	cmp	r3, #0
 8019104:	d003      	beq.n	801910e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8019106:	f06f 0305 	mvn.w	r3, #5
 801910a:	617b      	str	r3, [r7, #20]
 801910c:	e02c      	b.n	8019168 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801910e:	693b      	ldr	r3, [r7, #16]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d103      	bne.n	801911c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8019114:	f06f 0303 	mvn.w	r3, #3
 8019118:	617b      	str	r3, [r7, #20]
 801911a:	e025      	b.n	8019168 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d011      	beq.n	8019146 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8019122:	6839      	ldr	r1, [r7, #0]
 8019124:	6938      	ldr	r0, [r7, #16]
 8019126:	f000 fc62 	bl	80199ee <xQueueTakeMutexRecursive>
 801912a:	4603      	mov	r3, r0
 801912c:	2b01      	cmp	r3, #1
 801912e:	d01b      	beq.n	8019168 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019130:	683b      	ldr	r3, [r7, #0]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d003      	beq.n	801913e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8019136:	f06f 0301 	mvn.w	r3, #1
 801913a:	617b      	str	r3, [r7, #20]
 801913c:	e014      	b.n	8019168 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801913e:	f06f 0302 	mvn.w	r3, #2
 8019142:	617b      	str	r3, [r7, #20]
 8019144:	e010      	b.n	8019168 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8019146:	6839      	ldr	r1, [r7, #0]
 8019148:	6938      	ldr	r0, [r7, #16]
 801914a:	f000 ff09 	bl	8019f60 <xQueueSemaphoreTake>
 801914e:	4603      	mov	r3, r0
 8019150:	2b01      	cmp	r3, #1
 8019152:	d009      	beq.n	8019168 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019154:	683b      	ldr	r3, [r7, #0]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d003      	beq.n	8019162 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801915a:	f06f 0301 	mvn.w	r3, #1
 801915e:	617b      	str	r3, [r7, #20]
 8019160:	e002      	b.n	8019168 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8019162:	f06f 0302 	mvn.w	r3, #2
 8019166:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8019168:	697b      	ldr	r3, [r7, #20]
}
 801916a:	4618      	mov	r0, r3
 801916c:	3718      	adds	r7, #24
 801916e:	46bd      	mov	sp, r7
 8019170:	bd80      	pop	{r7, pc}

08019172 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8019172:	b580      	push	{r7, lr}
 8019174:	b086      	sub	sp, #24
 8019176:	af00      	add	r7, sp, #0
 8019178:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	f023 0301 	bic.w	r3, r3, #1
 8019180:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	f003 0301 	and.w	r3, r3, #1
 8019188:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801918a:	2300      	movs	r3, #0
 801918c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801918e:	f3ef 8305 	mrs	r3, IPSR
 8019192:	60bb      	str	r3, [r7, #8]
  return(result);
 8019194:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019196:	2b00      	cmp	r3, #0
 8019198:	d003      	beq.n	80191a2 <osMutexRelease+0x30>
    stat = osErrorISR;
 801919a:	f06f 0305 	mvn.w	r3, #5
 801919e:	617b      	str	r3, [r7, #20]
 80191a0:	e01f      	b.n	80191e2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80191a2:	693b      	ldr	r3, [r7, #16]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d103      	bne.n	80191b0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80191a8:	f06f 0303 	mvn.w	r3, #3
 80191ac:	617b      	str	r3, [r7, #20]
 80191ae:	e018      	b.n	80191e2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d009      	beq.n	80191ca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80191b6:	6938      	ldr	r0, [r7, #16]
 80191b8:	f000 fbe4 	bl	8019984 <xQueueGiveMutexRecursive>
 80191bc:	4603      	mov	r3, r0
 80191be:	2b01      	cmp	r3, #1
 80191c0:	d00f      	beq.n	80191e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80191c2:	f06f 0302 	mvn.w	r3, #2
 80191c6:	617b      	str	r3, [r7, #20]
 80191c8:	e00b      	b.n	80191e2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80191ca:	2300      	movs	r3, #0
 80191cc:	2200      	movs	r2, #0
 80191ce:	2100      	movs	r1, #0
 80191d0:	6938      	ldr	r0, [r7, #16]
 80191d2:	f000 fc43 	bl	8019a5c <xQueueGenericSend>
 80191d6:	4603      	mov	r3, r0
 80191d8:	2b01      	cmp	r3, #1
 80191da:	d002      	beq.n	80191e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80191dc:	f06f 0302 	mvn.w	r3, #2
 80191e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80191e2:	697b      	ldr	r3, [r7, #20]
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3718      	adds	r7, #24
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}

080191ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b08a      	sub	sp, #40	@ 0x28
 80191f0:	af02      	add	r7, sp, #8
 80191f2:	60f8      	str	r0, [r7, #12]
 80191f4:	60b9      	str	r1, [r7, #8]
 80191f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80191f8:	2300      	movs	r3, #0
 80191fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80191fc:	f3ef 8305 	mrs	r3, IPSR
 8019200:	613b      	str	r3, [r7, #16]
  return(result);
 8019202:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8019204:	2b00      	cmp	r3, #0
 8019206:	d15f      	bne.n	80192c8 <osMessageQueueNew+0xdc>
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d05c      	beq.n	80192c8 <osMessageQueueNew+0xdc>
 801920e:	68bb      	ldr	r3, [r7, #8]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d059      	beq.n	80192c8 <osMessageQueueNew+0xdc>
    mem = -1;
 8019214:	f04f 33ff 	mov.w	r3, #4294967295
 8019218:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d029      	beq.n	8019274 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	689b      	ldr	r3, [r3, #8]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d012      	beq.n	801924e <osMessageQueueNew+0x62>
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	68db      	ldr	r3, [r3, #12]
 801922c:	2b4f      	cmp	r3, #79	@ 0x4f
 801922e:	d90e      	bls.n	801924e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019234:	2b00      	cmp	r3, #0
 8019236:	d00a      	beq.n	801924e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	695a      	ldr	r2, [r3, #20]
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	68b9      	ldr	r1, [r7, #8]
 8019240:	fb01 f303 	mul.w	r3, r1, r3
 8019244:	429a      	cmp	r2, r3
 8019246:	d302      	bcc.n	801924e <osMessageQueueNew+0x62>
        mem = 1;
 8019248:	2301      	movs	r3, #1
 801924a:	61bb      	str	r3, [r7, #24]
 801924c:	e014      	b.n	8019278 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	689b      	ldr	r3, [r3, #8]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d110      	bne.n	8019278 <osMessageQueueNew+0x8c>
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	68db      	ldr	r3, [r3, #12]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d10c      	bne.n	8019278 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8019262:	2b00      	cmp	r3, #0
 8019264:	d108      	bne.n	8019278 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	695b      	ldr	r3, [r3, #20]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d104      	bne.n	8019278 <osMessageQueueNew+0x8c>
          mem = 0;
 801926e:	2300      	movs	r3, #0
 8019270:	61bb      	str	r3, [r7, #24]
 8019272:	e001      	b.n	8019278 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8019274:	2300      	movs	r3, #0
 8019276:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8019278:	69bb      	ldr	r3, [r7, #24]
 801927a:	2b01      	cmp	r3, #1
 801927c:	d10b      	bne.n	8019296 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	691a      	ldr	r2, [r3, #16]
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	689b      	ldr	r3, [r3, #8]
 8019286:	2100      	movs	r1, #0
 8019288:	9100      	str	r1, [sp, #0]
 801928a:	68b9      	ldr	r1, [r7, #8]
 801928c:	68f8      	ldr	r0, [r7, #12]
 801928e:	f000 fa51 	bl	8019734 <xQueueGenericCreateStatic>
 8019292:	61f8      	str	r0, [r7, #28]
 8019294:	e008      	b.n	80192a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8019296:	69bb      	ldr	r3, [r7, #24]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d105      	bne.n	80192a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801929c:	2200      	movs	r2, #0
 801929e:	68b9      	ldr	r1, [r7, #8]
 80192a0:	68f8      	ldr	r0, [r7, #12]
 80192a2:	f000 fac4 	bl	801982e <xQueueGenericCreate>
 80192a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80192a8:	69fb      	ldr	r3, [r7, #28]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d00c      	beq.n	80192c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d003      	beq.n	80192bc <osMessageQueueNew+0xd0>
        name = attr->name;
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	617b      	str	r3, [r7, #20]
 80192ba:	e001      	b.n	80192c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80192bc:	2300      	movs	r3, #0
 80192be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80192c0:	6979      	ldr	r1, [r7, #20]
 80192c2:	69f8      	ldr	r0, [r7, #28]
 80192c4:	f001 f944 	bl	801a550 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80192c8:	69fb      	ldr	r3, [r7, #28]
}
 80192ca:	4618      	mov	r0, r3
 80192cc:	3720      	adds	r7, #32
 80192ce:	46bd      	mov	sp, r7
 80192d0:	bd80      	pop	{r7, pc}
	...

080192d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b088      	sub	sp, #32
 80192d8:	af00      	add	r7, sp, #0
 80192da:	60f8      	str	r0, [r7, #12]
 80192dc:	60b9      	str	r1, [r7, #8]
 80192de:	603b      	str	r3, [r7, #0]
 80192e0:	4613      	mov	r3, r2
 80192e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80192e8:	2300      	movs	r3, #0
 80192ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80192ec:	f3ef 8305 	mrs	r3, IPSR
 80192f0:	617b      	str	r3, [r7, #20]
  return(result);
 80192f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d028      	beq.n	801934a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80192f8:	69bb      	ldr	r3, [r7, #24]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d005      	beq.n	801930a <osMessageQueuePut+0x36>
 80192fe:	68bb      	ldr	r3, [r7, #8]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d002      	beq.n	801930a <osMessageQueuePut+0x36>
 8019304:	683b      	ldr	r3, [r7, #0]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d003      	beq.n	8019312 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801930a:	f06f 0303 	mvn.w	r3, #3
 801930e:	61fb      	str	r3, [r7, #28]
 8019310:	e038      	b.n	8019384 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8019312:	2300      	movs	r3, #0
 8019314:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8019316:	f107 0210 	add.w	r2, r7, #16
 801931a:	2300      	movs	r3, #0
 801931c:	68b9      	ldr	r1, [r7, #8]
 801931e:	69b8      	ldr	r0, [r7, #24]
 8019320:	f000 fc9e 	bl	8019c60 <xQueueGenericSendFromISR>
 8019324:	4603      	mov	r3, r0
 8019326:	2b01      	cmp	r3, #1
 8019328:	d003      	beq.n	8019332 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801932a:	f06f 0302 	mvn.w	r3, #2
 801932e:	61fb      	str	r3, [r7, #28]
 8019330:	e028      	b.n	8019384 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8019332:	693b      	ldr	r3, [r7, #16]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d025      	beq.n	8019384 <osMessageQueuePut+0xb0>
 8019338:	4b15      	ldr	r3, [pc, #84]	@ (8019390 <osMessageQueuePut+0xbc>)
 801933a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801933e:	601a      	str	r2, [r3, #0]
 8019340:	f3bf 8f4f 	dsb	sy
 8019344:	f3bf 8f6f 	isb	sy
 8019348:	e01c      	b.n	8019384 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801934a:	69bb      	ldr	r3, [r7, #24]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d002      	beq.n	8019356 <osMessageQueuePut+0x82>
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d103      	bne.n	801935e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8019356:	f06f 0303 	mvn.w	r3, #3
 801935a:	61fb      	str	r3, [r7, #28]
 801935c:	e012      	b.n	8019384 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801935e:	2300      	movs	r3, #0
 8019360:	683a      	ldr	r2, [r7, #0]
 8019362:	68b9      	ldr	r1, [r7, #8]
 8019364:	69b8      	ldr	r0, [r7, #24]
 8019366:	f000 fb79 	bl	8019a5c <xQueueGenericSend>
 801936a:	4603      	mov	r3, r0
 801936c:	2b01      	cmp	r3, #1
 801936e:	d009      	beq.n	8019384 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d003      	beq.n	801937e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8019376:	f06f 0301 	mvn.w	r3, #1
 801937a:	61fb      	str	r3, [r7, #28]
 801937c:	e002      	b.n	8019384 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801937e:	f06f 0302 	mvn.w	r3, #2
 8019382:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8019384:	69fb      	ldr	r3, [r7, #28]
}
 8019386:	4618      	mov	r0, r3
 8019388:	3720      	adds	r7, #32
 801938a:	46bd      	mov	sp, r7
 801938c:	bd80      	pop	{r7, pc}
 801938e:	bf00      	nop
 8019390:	e000ed04 	.word	0xe000ed04

08019394 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8019394:	b580      	push	{r7, lr}
 8019396:	b088      	sub	sp, #32
 8019398:	af00      	add	r7, sp, #0
 801939a:	60f8      	str	r0, [r7, #12]
 801939c:	60b9      	str	r1, [r7, #8]
 801939e:	607a      	str	r2, [r7, #4]
 80193a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80193a6:	2300      	movs	r3, #0
 80193a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80193aa:	f3ef 8305 	mrs	r3, IPSR
 80193ae:	617b      	str	r3, [r7, #20]
  return(result);
 80193b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d028      	beq.n	8019408 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80193b6:	69bb      	ldr	r3, [r7, #24]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d005      	beq.n	80193c8 <osMessageQueueGet+0x34>
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d002      	beq.n	80193c8 <osMessageQueueGet+0x34>
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d003      	beq.n	80193d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80193c8:	f06f 0303 	mvn.w	r3, #3
 80193cc:	61fb      	str	r3, [r7, #28]
 80193ce:	e037      	b.n	8019440 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80193d0:	2300      	movs	r3, #0
 80193d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80193d4:	f107 0310 	add.w	r3, r7, #16
 80193d8:	461a      	mov	r2, r3
 80193da:	68b9      	ldr	r1, [r7, #8]
 80193dc:	69b8      	ldr	r0, [r7, #24]
 80193de:	f000 fecf 	bl	801a180 <xQueueReceiveFromISR>
 80193e2:	4603      	mov	r3, r0
 80193e4:	2b01      	cmp	r3, #1
 80193e6:	d003      	beq.n	80193f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80193e8:	f06f 0302 	mvn.w	r3, #2
 80193ec:	61fb      	str	r3, [r7, #28]
 80193ee:	e027      	b.n	8019440 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80193f0:	693b      	ldr	r3, [r7, #16]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d024      	beq.n	8019440 <osMessageQueueGet+0xac>
 80193f6:	4b15      	ldr	r3, [pc, #84]	@ (801944c <osMessageQueueGet+0xb8>)
 80193f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80193fc:	601a      	str	r2, [r3, #0]
 80193fe:	f3bf 8f4f 	dsb	sy
 8019402:	f3bf 8f6f 	isb	sy
 8019406:	e01b      	b.n	8019440 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019408:	69bb      	ldr	r3, [r7, #24]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d002      	beq.n	8019414 <osMessageQueueGet+0x80>
 801940e:	68bb      	ldr	r3, [r7, #8]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d103      	bne.n	801941c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8019414:	f06f 0303 	mvn.w	r3, #3
 8019418:	61fb      	str	r3, [r7, #28]
 801941a:	e011      	b.n	8019440 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801941c:	683a      	ldr	r2, [r7, #0]
 801941e:	68b9      	ldr	r1, [r7, #8]
 8019420:	69b8      	ldr	r0, [r7, #24]
 8019422:	f000 fcbb 	bl	8019d9c <xQueueReceive>
 8019426:	4603      	mov	r3, r0
 8019428:	2b01      	cmp	r3, #1
 801942a:	d009      	beq.n	8019440 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801942c:	683b      	ldr	r3, [r7, #0]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d003      	beq.n	801943a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8019432:	f06f 0301 	mvn.w	r3, #1
 8019436:	61fb      	str	r3, [r7, #28]
 8019438:	e002      	b.n	8019440 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801943a:	f06f 0302 	mvn.w	r3, #2
 801943e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8019440:	69fb      	ldr	r3, [r7, #28]
}
 8019442:	4618      	mov	r0, r3
 8019444:	3720      	adds	r7, #32
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}
 801944a:	bf00      	nop
 801944c:	e000ed04 	.word	0xe000ed04

08019450 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8019450:	b580      	push	{r7, lr}
 8019452:	b086      	sub	sp, #24
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 801945c:	693b      	ldr	r3, [r7, #16]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d102      	bne.n	8019468 <osMessageQueueGetCount+0x18>
    count = 0U;
 8019462:	2300      	movs	r3, #0
 8019464:	617b      	str	r3, [r7, #20]
 8019466:	e00e      	b.n	8019486 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019468:	f3ef 8305 	mrs	r3, IPSR
 801946c:	60fb      	str	r3, [r7, #12]
  return(result);
 801946e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8019470:	2b00      	cmp	r3, #0
 8019472:	d004      	beq.n	801947e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8019474:	6938      	ldr	r0, [r7, #16]
 8019476:	f000 ff24 	bl	801a2c2 <uxQueueMessagesWaitingFromISR>
 801947a:	6178      	str	r0, [r7, #20]
 801947c:	e003      	b.n	8019486 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 801947e:	6938      	ldr	r0, [r7, #16]
 8019480:	f000 ff00 	bl	801a284 <uxQueueMessagesWaiting>
 8019484:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8019486:	697b      	ldr	r3, [r7, #20]
}
 8019488:	4618      	mov	r0, r3
 801948a:	3718      	adds	r7, #24
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}

08019490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019490:	b480      	push	{r7}
 8019492:	b085      	sub	sp, #20
 8019494:	af00      	add	r7, sp, #0
 8019496:	60f8      	str	r0, [r7, #12]
 8019498:	60b9      	str	r1, [r7, #8]
 801949a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	4a07      	ldr	r2, [pc, #28]	@ (80194bc <vApplicationGetIdleTaskMemory+0x2c>)
 80194a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	4a06      	ldr	r2, [pc, #24]	@ (80194c0 <vApplicationGetIdleTaskMemory+0x30>)
 80194a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	2280      	movs	r2, #128	@ 0x80
 80194ac:	601a      	str	r2, [r3, #0]
}
 80194ae:	bf00      	nop
 80194b0:	3714      	adds	r7, #20
 80194b2:	46bd      	mov	sp, r7
 80194b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b8:	4770      	bx	lr
 80194ba:	bf00      	nop
 80194bc:	20007fe8 	.word	0x20007fe8
 80194c0:	20008090 	.word	0x20008090

080194c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80194c4:	b480      	push	{r7}
 80194c6:	b085      	sub	sp, #20
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	60f8      	str	r0, [r7, #12]
 80194cc:	60b9      	str	r1, [r7, #8]
 80194ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	4a07      	ldr	r2, [pc, #28]	@ (80194f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80194d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80194d6:	68bb      	ldr	r3, [r7, #8]
 80194d8:	4a06      	ldr	r2, [pc, #24]	@ (80194f4 <vApplicationGetTimerTaskMemory+0x30>)
 80194da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80194e2:	601a      	str	r2, [r3, #0]
}
 80194e4:	bf00      	nop
 80194e6:	3714      	adds	r7, #20
 80194e8:	46bd      	mov	sp, r7
 80194ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ee:	4770      	bx	lr
 80194f0:	20008290 	.word	0x20008290
 80194f4:	20008338 	.word	0x20008338

080194f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80194f8:	b480      	push	{r7}
 80194fa:	b083      	sub	sp, #12
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	f103 0208 	add.w	r2, r3, #8
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	f04f 32ff 	mov.w	r2, #4294967295
 8019510:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	f103 0208 	add.w	r2, r3, #8
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	f103 0208 	add.w	r2, r3, #8
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	2200      	movs	r2, #0
 801952a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801952c:	bf00      	nop
 801952e:	370c      	adds	r7, #12
 8019530:	46bd      	mov	sp, r7
 8019532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019536:	4770      	bx	lr

08019538 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019538:	b480      	push	{r7}
 801953a:	b083      	sub	sp, #12
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	2200      	movs	r2, #0
 8019544:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019546:	bf00      	nop
 8019548:	370c      	adds	r7, #12
 801954a:	46bd      	mov	sp, r7
 801954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019550:	4770      	bx	lr

08019552 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019552:	b480      	push	{r7}
 8019554:	b085      	sub	sp, #20
 8019556:	af00      	add	r7, sp, #0
 8019558:	6078      	str	r0, [r7, #4]
 801955a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	685b      	ldr	r3, [r3, #4]
 8019560:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	68fa      	ldr	r2, [r7, #12]
 8019566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	689a      	ldr	r2, [r3, #8]
 801956c:	683b      	ldr	r3, [r7, #0]
 801956e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	689b      	ldr	r3, [r3, #8]
 8019574:	683a      	ldr	r2, [r7, #0]
 8019576:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	683a      	ldr	r2, [r7, #0]
 801957c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	1c5a      	adds	r2, r3, #1
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	601a      	str	r2, [r3, #0]
}
 801958e:	bf00      	nop
 8019590:	3714      	adds	r7, #20
 8019592:	46bd      	mov	sp, r7
 8019594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019598:	4770      	bx	lr

0801959a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801959a:	b480      	push	{r7}
 801959c:	b085      	sub	sp, #20
 801959e:	af00      	add	r7, sp, #0
 80195a0:	6078      	str	r0, [r7, #4]
 80195a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80195aa:	68bb      	ldr	r3, [r7, #8]
 80195ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195b0:	d103      	bne.n	80195ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	691b      	ldr	r3, [r3, #16]
 80195b6:	60fb      	str	r3, [r7, #12]
 80195b8:	e00c      	b.n	80195d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	3308      	adds	r3, #8
 80195be:	60fb      	str	r3, [r7, #12]
 80195c0:	e002      	b.n	80195c8 <vListInsert+0x2e>
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	685b      	ldr	r3, [r3, #4]
 80195c6:	60fb      	str	r3, [r7, #12]
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	685b      	ldr	r3, [r3, #4]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	68ba      	ldr	r2, [r7, #8]
 80195d0:	429a      	cmp	r2, r3
 80195d2:	d2f6      	bcs.n	80195c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	685a      	ldr	r2, [r3, #4]
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	685b      	ldr	r3, [r3, #4]
 80195e0:	683a      	ldr	r2, [r7, #0]
 80195e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	68fa      	ldr	r2, [r7, #12]
 80195e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	683a      	ldr	r2, [r7, #0]
 80195ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	687a      	ldr	r2, [r7, #4]
 80195f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	1c5a      	adds	r2, r3, #1
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	601a      	str	r2, [r3, #0]
}
 8019600:	bf00      	nop
 8019602:	3714      	adds	r7, #20
 8019604:	46bd      	mov	sp, r7
 8019606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960a:	4770      	bx	lr

0801960c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801960c:	b480      	push	{r7}
 801960e:	b085      	sub	sp, #20
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	691b      	ldr	r3, [r3, #16]
 8019618:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	685b      	ldr	r3, [r3, #4]
 801961e:	687a      	ldr	r2, [r7, #4]
 8019620:	6892      	ldr	r2, [r2, #8]
 8019622:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	689b      	ldr	r3, [r3, #8]
 8019628:	687a      	ldr	r2, [r7, #4]
 801962a:	6852      	ldr	r2, [r2, #4]
 801962c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	685b      	ldr	r3, [r3, #4]
 8019632:	687a      	ldr	r2, [r7, #4]
 8019634:	429a      	cmp	r2, r3
 8019636:	d103      	bne.n	8019640 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	689a      	ldr	r2, [r3, #8]
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	2200      	movs	r2, #0
 8019644:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	1e5a      	subs	r2, r3, #1
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	681b      	ldr	r3, [r3, #0]
}
 8019654:	4618      	mov	r0, r3
 8019656:	3714      	adds	r7, #20
 8019658:	46bd      	mov	sp, r7
 801965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965e:	4770      	bx	lr

08019660 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b084      	sub	sp, #16
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d10b      	bne.n	801968c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019678:	f383 8811 	msr	BASEPRI, r3
 801967c:	f3bf 8f6f 	isb	sy
 8019680:	f3bf 8f4f 	dsb	sy
 8019684:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019686:	bf00      	nop
 8019688:	bf00      	nop
 801968a:	e7fd      	b.n	8019688 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801968c:	f002 feac 	bl	801c3e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	681a      	ldr	r2, [r3, #0]
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019698:	68f9      	ldr	r1, [r7, #12]
 801969a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801969c:	fb01 f303 	mul.w	r3, r1, r3
 80196a0:	441a      	add	r2, r3
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	2200      	movs	r2, #0
 80196aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	681a      	ldr	r2, [r3, #0]
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	681a      	ldr	r2, [r3, #0]
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80196bc:	3b01      	subs	r3, #1
 80196be:	68f9      	ldr	r1, [r7, #12]
 80196c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80196c2:	fb01 f303 	mul.w	r3, r1, r3
 80196c6:	441a      	add	r2, r3
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	22ff      	movs	r2, #255	@ 0xff
 80196d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	22ff      	movs	r2, #255	@ 0xff
 80196d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80196dc:	683b      	ldr	r3, [r7, #0]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d114      	bne.n	801970c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	691b      	ldr	r3, [r3, #16]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d01a      	beq.n	8019720 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	3310      	adds	r3, #16
 80196ee:	4618      	mov	r0, r3
 80196f0:	f001 fc30 	bl	801af54 <xTaskRemoveFromEventList>
 80196f4:	4603      	mov	r3, r0
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d012      	beq.n	8019720 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80196fa:	4b0d      	ldr	r3, [pc, #52]	@ (8019730 <xQueueGenericReset+0xd0>)
 80196fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019700:	601a      	str	r2, [r3, #0]
 8019702:	f3bf 8f4f 	dsb	sy
 8019706:	f3bf 8f6f 	isb	sy
 801970a:	e009      	b.n	8019720 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	3310      	adds	r3, #16
 8019710:	4618      	mov	r0, r3
 8019712:	f7ff fef1 	bl	80194f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	3324      	adds	r3, #36	@ 0x24
 801971a:	4618      	mov	r0, r3
 801971c:	f7ff feec 	bl	80194f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019720:	f002 fe94 	bl	801c44c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019724:	2301      	movs	r3, #1
}
 8019726:	4618      	mov	r0, r3
 8019728:	3710      	adds	r7, #16
 801972a:	46bd      	mov	sp, r7
 801972c:	bd80      	pop	{r7, pc}
 801972e:	bf00      	nop
 8019730:	e000ed04 	.word	0xe000ed04

08019734 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019734:	b580      	push	{r7, lr}
 8019736:	b08e      	sub	sp, #56	@ 0x38
 8019738:	af02      	add	r7, sp, #8
 801973a:	60f8      	str	r0, [r7, #12]
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	607a      	str	r2, [r7, #4]
 8019740:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d10b      	bne.n	8019760 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8019748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801974c:	f383 8811 	msr	BASEPRI, r3
 8019750:	f3bf 8f6f 	isb	sy
 8019754:	f3bf 8f4f 	dsb	sy
 8019758:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801975a:	bf00      	nop
 801975c:	bf00      	nop
 801975e:	e7fd      	b.n	801975c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019760:	683b      	ldr	r3, [r7, #0]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d10b      	bne.n	801977e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8019766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801976a:	f383 8811 	msr	BASEPRI, r3
 801976e:	f3bf 8f6f 	isb	sy
 8019772:	f3bf 8f4f 	dsb	sy
 8019776:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019778:	bf00      	nop
 801977a:	bf00      	nop
 801977c:	e7fd      	b.n	801977a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d002      	beq.n	801978a <xQueueGenericCreateStatic+0x56>
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d001      	beq.n	801978e <xQueueGenericCreateStatic+0x5a>
 801978a:	2301      	movs	r3, #1
 801978c:	e000      	b.n	8019790 <xQueueGenericCreateStatic+0x5c>
 801978e:	2300      	movs	r3, #0
 8019790:	2b00      	cmp	r3, #0
 8019792:	d10b      	bne.n	80197ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8019794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019798:	f383 8811 	msr	BASEPRI, r3
 801979c:	f3bf 8f6f 	isb	sy
 80197a0:	f3bf 8f4f 	dsb	sy
 80197a4:	623b      	str	r3, [r7, #32]
}
 80197a6:	bf00      	nop
 80197a8:	bf00      	nop
 80197aa:	e7fd      	b.n	80197a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d102      	bne.n	80197b8 <xQueueGenericCreateStatic+0x84>
 80197b2:	68bb      	ldr	r3, [r7, #8]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d101      	bne.n	80197bc <xQueueGenericCreateStatic+0x88>
 80197b8:	2301      	movs	r3, #1
 80197ba:	e000      	b.n	80197be <xQueueGenericCreateStatic+0x8a>
 80197bc:	2300      	movs	r3, #0
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d10b      	bne.n	80197da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80197c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197c6:	f383 8811 	msr	BASEPRI, r3
 80197ca:	f3bf 8f6f 	isb	sy
 80197ce:	f3bf 8f4f 	dsb	sy
 80197d2:	61fb      	str	r3, [r7, #28]
}
 80197d4:	bf00      	nop
 80197d6:	bf00      	nop
 80197d8:	e7fd      	b.n	80197d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80197da:	2350      	movs	r3, #80	@ 0x50
 80197dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80197de:	697b      	ldr	r3, [r7, #20]
 80197e0:	2b50      	cmp	r3, #80	@ 0x50
 80197e2:	d00b      	beq.n	80197fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80197e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197e8:	f383 8811 	msr	BASEPRI, r3
 80197ec:	f3bf 8f6f 	isb	sy
 80197f0:	f3bf 8f4f 	dsb	sy
 80197f4:	61bb      	str	r3, [r7, #24]
}
 80197f6:	bf00      	nop
 80197f8:	bf00      	nop
 80197fa:	e7fd      	b.n	80197f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80197fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8019802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019804:	2b00      	cmp	r3, #0
 8019806:	d00d      	beq.n	8019824 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801980a:	2201      	movs	r2, #1
 801980c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019810:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019816:	9300      	str	r3, [sp, #0]
 8019818:	4613      	mov	r3, r2
 801981a:	687a      	ldr	r2, [r7, #4]
 801981c:	68b9      	ldr	r1, [r7, #8]
 801981e:	68f8      	ldr	r0, [r7, #12]
 8019820:	f000 f840 	bl	80198a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8019826:	4618      	mov	r0, r3
 8019828:	3730      	adds	r7, #48	@ 0x30
 801982a:	46bd      	mov	sp, r7
 801982c:	bd80      	pop	{r7, pc}

0801982e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801982e:	b580      	push	{r7, lr}
 8019830:	b08a      	sub	sp, #40	@ 0x28
 8019832:	af02      	add	r7, sp, #8
 8019834:	60f8      	str	r0, [r7, #12]
 8019836:	60b9      	str	r1, [r7, #8]
 8019838:	4613      	mov	r3, r2
 801983a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d10b      	bne.n	801985a <xQueueGenericCreate+0x2c>
	__asm volatile
 8019842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019846:	f383 8811 	msr	BASEPRI, r3
 801984a:	f3bf 8f6f 	isb	sy
 801984e:	f3bf 8f4f 	dsb	sy
 8019852:	613b      	str	r3, [r7, #16]
}
 8019854:	bf00      	nop
 8019856:	bf00      	nop
 8019858:	e7fd      	b.n	8019856 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	68ba      	ldr	r2, [r7, #8]
 801985e:	fb02 f303 	mul.w	r3, r2, r3
 8019862:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019864:	69fb      	ldr	r3, [r7, #28]
 8019866:	3350      	adds	r3, #80	@ 0x50
 8019868:	4618      	mov	r0, r3
 801986a:	f002 fedf 	bl	801c62c <pvPortMalloc>
 801986e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019870:	69bb      	ldr	r3, [r7, #24]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d011      	beq.n	801989a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019876:	69bb      	ldr	r3, [r7, #24]
 8019878:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801987a:	697b      	ldr	r3, [r7, #20]
 801987c:	3350      	adds	r3, #80	@ 0x50
 801987e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019880:	69bb      	ldr	r3, [r7, #24]
 8019882:	2200      	movs	r2, #0
 8019884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019888:	79fa      	ldrb	r2, [r7, #7]
 801988a:	69bb      	ldr	r3, [r7, #24]
 801988c:	9300      	str	r3, [sp, #0]
 801988e:	4613      	mov	r3, r2
 8019890:	697a      	ldr	r2, [r7, #20]
 8019892:	68b9      	ldr	r1, [r7, #8]
 8019894:	68f8      	ldr	r0, [r7, #12]
 8019896:	f000 f805 	bl	80198a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801989a:	69bb      	ldr	r3, [r7, #24]
	}
 801989c:	4618      	mov	r0, r3
 801989e:	3720      	adds	r7, #32
 80198a0:	46bd      	mov	sp, r7
 80198a2:	bd80      	pop	{r7, pc}

080198a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b084      	sub	sp, #16
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	60f8      	str	r0, [r7, #12]
 80198ac:	60b9      	str	r1, [r7, #8]
 80198ae:	607a      	str	r2, [r7, #4]
 80198b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80198b2:	68bb      	ldr	r3, [r7, #8]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d103      	bne.n	80198c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80198b8:	69bb      	ldr	r3, [r7, #24]
 80198ba:	69ba      	ldr	r2, [r7, #24]
 80198bc:	601a      	str	r2, [r3, #0]
 80198be:	e002      	b.n	80198c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80198c0:	69bb      	ldr	r3, [r7, #24]
 80198c2:	687a      	ldr	r2, [r7, #4]
 80198c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80198c6:	69bb      	ldr	r3, [r7, #24]
 80198c8:	68fa      	ldr	r2, [r7, #12]
 80198ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80198cc:	69bb      	ldr	r3, [r7, #24]
 80198ce:	68ba      	ldr	r2, [r7, #8]
 80198d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80198d2:	2101      	movs	r1, #1
 80198d4:	69b8      	ldr	r0, [r7, #24]
 80198d6:	f7ff fec3 	bl	8019660 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80198da:	69bb      	ldr	r3, [r7, #24]
 80198dc:	78fa      	ldrb	r2, [r7, #3]
 80198de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80198e2:	bf00      	nop
 80198e4:	3710      	adds	r7, #16
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}

080198ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80198ea:	b580      	push	{r7, lr}
 80198ec:	b082      	sub	sp, #8
 80198ee:	af00      	add	r7, sp, #0
 80198f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d00e      	beq.n	8019916 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	2200      	movs	r2, #0
 80198fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	2200      	movs	r2, #0
 8019902:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	2200      	movs	r2, #0
 8019908:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801990a:	2300      	movs	r3, #0
 801990c:	2200      	movs	r2, #0
 801990e:	2100      	movs	r1, #0
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f000 f8a3 	bl	8019a5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8019916:	bf00      	nop
 8019918:	3708      	adds	r7, #8
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}

0801991e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801991e:	b580      	push	{r7, lr}
 8019920:	b086      	sub	sp, #24
 8019922:	af00      	add	r7, sp, #0
 8019924:	4603      	mov	r3, r0
 8019926:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019928:	2301      	movs	r3, #1
 801992a:	617b      	str	r3, [r7, #20]
 801992c:	2300      	movs	r3, #0
 801992e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019930:	79fb      	ldrb	r3, [r7, #7]
 8019932:	461a      	mov	r2, r3
 8019934:	6939      	ldr	r1, [r7, #16]
 8019936:	6978      	ldr	r0, [r7, #20]
 8019938:	f7ff ff79 	bl	801982e <xQueueGenericCreate>
 801993c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801993e:	68f8      	ldr	r0, [r7, #12]
 8019940:	f7ff ffd3 	bl	80198ea <prvInitialiseMutex>

		return xNewQueue;
 8019944:	68fb      	ldr	r3, [r7, #12]
	}
 8019946:	4618      	mov	r0, r3
 8019948:	3718      	adds	r7, #24
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}

0801994e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801994e:	b580      	push	{r7, lr}
 8019950:	b088      	sub	sp, #32
 8019952:	af02      	add	r7, sp, #8
 8019954:	4603      	mov	r3, r0
 8019956:	6039      	str	r1, [r7, #0]
 8019958:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801995a:	2301      	movs	r3, #1
 801995c:	617b      	str	r3, [r7, #20]
 801995e:	2300      	movs	r3, #0
 8019960:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019962:	79fb      	ldrb	r3, [r7, #7]
 8019964:	9300      	str	r3, [sp, #0]
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	2200      	movs	r2, #0
 801996a:	6939      	ldr	r1, [r7, #16]
 801996c:	6978      	ldr	r0, [r7, #20]
 801996e:	f7ff fee1 	bl	8019734 <xQueueGenericCreateStatic>
 8019972:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019974:	68f8      	ldr	r0, [r7, #12]
 8019976:	f7ff ffb8 	bl	80198ea <prvInitialiseMutex>

		return xNewQueue;
 801997a:	68fb      	ldr	r3, [r7, #12]
	}
 801997c:	4618      	mov	r0, r3
 801997e:	3718      	adds	r7, #24
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}

08019984 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8019984:	b590      	push	{r4, r7, lr}
 8019986:	b087      	sub	sp, #28
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8019990:	693b      	ldr	r3, [r7, #16]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d10b      	bne.n	80199ae <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8019996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801999a:	f383 8811 	msr	BASEPRI, r3
 801999e:	f3bf 8f6f 	isb	sy
 80199a2:	f3bf 8f4f 	dsb	sy
 80199a6:	60fb      	str	r3, [r7, #12]
}
 80199a8:	bf00      	nop
 80199aa:	bf00      	nop
 80199ac:	e7fd      	b.n	80199aa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80199ae:	693b      	ldr	r3, [r7, #16]
 80199b0:	689c      	ldr	r4, [r3, #8]
 80199b2:	f001 fc95 	bl	801b2e0 <xTaskGetCurrentTaskHandle>
 80199b6:	4603      	mov	r3, r0
 80199b8:	429c      	cmp	r4, r3
 80199ba:	d111      	bne.n	80199e0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80199bc:	693b      	ldr	r3, [r7, #16]
 80199be:	68db      	ldr	r3, [r3, #12]
 80199c0:	1e5a      	subs	r2, r3, #1
 80199c2:	693b      	ldr	r3, [r7, #16]
 80199c4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80199c6:	693b      	ldr	r3, [r7, #16]
 80199c8:	68db      	ldr	r3, [r3, #12]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d105      	bne.n	80199da <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80199ce:	2300      	movs	r3, #0
 80199d0:	2200      	movs	r2, #0
 80199d2:	2100      	movs	r1, #0
 80199d4:	6938      	ldr	r0, [r7, #16]
 80199d6:	f000 f841 	bl	8019a5c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80199da:	2301      	movs	r3, #1
 80199dc:	617b      	str	r3, [r7, #20]
 80199de:	e001      	b.n	80199e4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80199e0:	2300      	movs	r3, #0
 80199e2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80199e4:	697b      	ldr	r3, [r7, #20]
	}
 80199e6:	4618      	mov	r0, r3
 80199e8:	371c      	adds	r7, #28
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd90      	pop	{r4, r7, pc}

080199ee <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80199ee:	b590      	push	{r4, r7, lr}
 80199f0:	b087      	sub	sp, #28
 80199f2:	af00      	add	r7, sp, #0
 80199f4:	6078      	str	r0, [r7, #4]
 80199f6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80199fc:	693b      	ldr	r3, [r7, #16]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d10b      	bne.n	8019a1a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8019a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a06:	f383 8811 	msr	BASEPRI, r3
 8019a0a:	f3bf 8f6f 	isb	sy
 8019a0e:	f3bf 8f4f 	dsb	sy
 8019a12:	60fb      	str	r3, [r7, #12]
}
 8019a14:	bf00      	nop
 8019a16:	bf00      	nop
 8019a18:	e7fd      	b.n	8019a16 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019a1a:	693b      	ldr	r3, [r7, #16]
 8019a1c:	689c      	ldr	r4, [r3, #8]
 8019a1e:	f001 fc5f 	bl	801b2e0 <xTaskGetCurrentTaskHandle>
 8019a22:	4603      	mov	r3, r0
 8019a24:	429c      	cmp	r4, r3
 8019a26:	d107      	bne.n	8019a38 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019a28:	693b      	ldr	r3, [r7, #16]
 8019a2a:	68db      	ldr	r3, [r3, #12]
 8019a2c:	1c5a      	adds	r2, r3, #1
 8019a2e:	693b      	ldr	r3, [r7, #16]
 8019a30:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8019a32:	2301      	movs	r3, #1
 8019a34:	617b      	str	r3, [r7, #20]
 8019a36:	e00c      	b.n	8019a52 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019a38:	6839      	ldr	r1, [r7, #0]
 8019a3a:	6938      	ldr	r0, [r7, #16]
 8019a3c:	f000 fa90 	bl	8019f60 <xQueueSemaphoreTake>
 8019a40:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d004      	beq.n	8019a52 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	68db      	ldr	r3, [r3, #12]
 8019a4c:	1c5a      	adds	r2, r3, #1
 8019a4e:	693b      	ldr	r3, [r7, #16]
 8019a50:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8019a52:	697b      	ldr	r3, [r7, #20]
	}
 8019a54:	4618      	mov	r0, r3
 8019a56:	371c      	adds	r7, #28
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bd90      	pop	{r4, r7, pc}

08019a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b08e      	sub	sp, #56	@ 0x38
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	60f8      	str	r0, [r7, #12]
 8019a64:	60b9      	str	r1, [r7, #8]
 8019a66:	607a      	str	r2, [r7, #4]
 8019a68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8019a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d10b      	bne.n	8019a90 <xQueueGenericSend+0x34>
	__asm volatile
 8019a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a7c:	f383 8811 	msr	BASEPRI, r3
 8019a80:	f3bf 8f6f 	isb	sy
 8019a84:	f3bf 8f4f 	dsb	sy
 8019a88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019a8a:	bf00      	nop
 8019a8c:	bf00      	nop
 8019a8e:	e7fd      	b.n	8019a8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019a90:	68bb      	ldr	r3, [r7, #8]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d103      	bne.n	8019a9e <xQueueGenericSend+0x42>
 8019a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d101      	bne.n	8019aa2 <xQueueGenericSend+0x46>
 8019a9e:	2301      	movs	r3, #1
 8019aa0:	e000      	b.n	8019aa4 <xQueueGenericSend+0x48>
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d10b      	bne.n	8019ac0 <xQueueGenericSend+0x64>
	__asm volatile
 8019aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019aac:	f383 8811 	msr	BASEPRI, r3
 8019ab0:	f3bf 8f6f 	isb	sy
 8019ab4:	f3bf 8f4f 	dsb	sy
 8019ab8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019aba:	bf00      	nop
 8019abc:	bf00      	nop
 8019abe:	e7fd      	b.n	8019abc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019ac0:	683b      	ldr	r3, [r7, #0]
 8019ac2:	2b02      	cmp	r3, #2
 8019ac4:	d103      	bne.n	8019ace <xQueueGenericSend+0x72>
 8019ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019aca:	2b01      	cmp	r3, #1
 8019acc:	d101      	bne.n	8019ad2 <xQueueGenericSend+0x76>
 8019ace:	2301      	movs	r3, #1
 8019ad0:	e000      	b.n	8019ad4 <xQueueGenericSend+0x78>
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d10b      	bne.n	8019af0 <xQueueGenericSend+0x94>
	__asm volatile
 8019ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019adc:	f383 8811 	msr	BASEPRI, r3
 8019ae0:	f3bf 8f6f 	isb	sy
 8019ae4:	f3bf 8f4f 	dsb	sy
 8019ae8:	623b      	str	r3, [r7, #32]
}
 8019aea:	bf00      	nop
 8019aec:	bf00      	nop
 8019aee:	e7fd      	b.n	8019aec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019af0:	f001 fc06 	bl	801b300 <xTaskGetSchedulerState>
 8019af4:	4603      	mov	r3, r0
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d102      	bne.n	8019b00 <xQueueGenericSend+0xa4>
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d101      	bne.n	8019b04 <xQueueGenericSend+0xa8>
 8019b00:	2301      	movs	r3, #1
 8019b02:	e000      	b.n	8019b06 <xQueueGenericSend+0xaa>
 8019b04:	2300      	movs	r3, #0
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d10b      	bne.n	8019b22 <xQueueGenericSend+0xc6>
	__asm volatile
 8019b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b0e:	f383 8811 	msr	BASEPRI, r3
 8019b12:	f3bf 8f6f 	isb	sy
 8019b16:	f3bf 8f4f 	dsb	sy
 8019b1a:	61fb      	str	r3, [r7, #28]
}
 8019b1c:	bf00      	nop
 8019b1e:	bf00      	nop
 8019b20:	e7fd      	b.n	8019b1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019b22:	f002 fc61 	bl	801c3e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	d302      	bcc.n	8019b38 <xQueueGenericSend+0xdc>
 8019b32:	683b      	ldr	r3, [r7, #0]
 8019b34:	2b02      	cmp	r3, #2
 8019b36:	d129      	bne.n	8019b8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019b38:	683a      	ldr	r2, [r7, #0]
 8019b3a:	68b9      	ldr	r1, [r7, #8]
 8019b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019b3e:	f000 fbf7 	bl	801a330 <prvCopyDataToQueue>
 8019b42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d010      	beq.n	8019b6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b4e:	3324      	adds	r3, #36	@ 0x24
 8019b50:	4618      	mov	r0, r3
 8019b52:	f001 f9ff 	bl	801af54 <xTaskRemoveFromEventList>
 8019b56:	4603      	mov	r3, r0
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d013      	beq.n	8019b84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8019c5c <xQueueGenericSend+0x200>)
 8019b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019b62:	601a      	str	r2, [r3, #0]
 8019b64:	f3bf 8f4f 	dsb	sy
 8019b68:	f3bf 8f6f 	isb	sy
 8019b6c:	e00a      	b.n	8019b84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d007      	beq.n	8019b84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019b74:	4b39      	ldr	r3, [pc, #228]	@ (8019c5c <xQueueGenericSend+0x200>)
 8019b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019b7a:	601a      	str	r2, [r3, #0]
 8019b7c:	f3bf 8f4f 	dsb	sy
 8019b80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019b84:	f002 fc62 	bl	801c44c <vPortExitCritical>
				return pdPASS;
 8019b88:	2301      	movs	r3, #1
 8019b8a:	e063      	b.n	8019c54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d103      	bne.n	8019b9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019b92:	f002 fc5b 	bl	801c44c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019b96:	2300      	movs	r3, #0
 8019b98:	e05c      	b.n	8019c54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d106      	bne.n	8019bae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019ba0:	f107 0314 	add.w	r3, r7, #20
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f001 fa39 	bl	801b01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019baa:	2301      	movs	r3, #1
 8019bac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019bae:	f002 fc4d 	bl	801c44c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019bb2:	f000 ff8f 	bl	801aad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019bb6:	f002 fc17 	bl	801c3e8 <vPortEnterCritical>
 8019bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019bc0:	b25b      	sxtb	r3, r3
 8019bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bc6:	d103      	bne.n	8019bd0 <xQueueGenericSend+0x174>
 8019bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bca:	2200      	movs	r2, #0
 8019bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019bd6:	b25b      	sxtb	r3, r3
 8019bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bdc:	d103      	bne.n	8019be6 <xQueueGenericSend+0x18a>
 8019bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019be0:	2200      	movs	r2, #0
 8019be2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019be6:	f002 fc31 	bl	801c44c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019bea:	1d3a      	adds	r2, r7, #4
 8019bec:	f107 0314 	add.w	r3, r7, #20
 8019bf0:	4611      	mov	r1, r2
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f001 fa28 	bl	801b048 <xTaskCheckForTimeOut>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d124      	bne.n	8019c48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019bfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c00:	f000 fc8e 	bl	801a520 <prvIsQueueFull>
 8019c04:	4603      	mov	r3, r0
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d018      	beq.n	8019c3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c0c:	3310      	adds	r3, #16
 8019c0e:	687a      	ldr	r2, [r7, #4]
 8019c10:	4611      	mov	r1, r2
 8019c12:	4618      	mov	r0, r3
 8019c14:	f001 f94c 	bl	801aeb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019c18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c1a:	f000 fc19 	bl	801a450 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019c1e:	f000 ff67 	bl	801aaf0 <xTaskResumeAll>
 8019c22:	4603      	mov	r3, r0
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	f47f af7c 	bne.w	8019b22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8019c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8019c5c <xQueueGenericSend+0x200>)
 8019c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019c30:	601a      	str	r2, [r3, #0]
 8019c32:	f3bf 8f4f 	dsb	sy
 8019c36:	f3bf 8f6f 	isb	sy
 8019c3a:	e772      	b.n	8019b22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019c3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c3e:	f000 fc07 	bl	801a450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019c42:	f000 ff55 	bl	801aaf0 <xTaskResumeAll>
 8019c46:	e76c      	b.n	8019b22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c4a:	f000 fc01 	bl	801a450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019c4e:	f000 ff4f 	bl	801aaf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019c52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3738      	adds	r7, #56	@ 0x38
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}
 8019c5c:	e000ed04 	.word	0xe000ed04

08019c60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b090      	sub	sp, #64	@ 0x40
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	60f8      	str	r0, [r7, #12]
 8019c68:	60b9      	str	r1, [r7, #8]
 8019c6a:	607a      	str	r2, [r7, #4]
 8019c6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8019c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d10b      	bne.n	8019c90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8019c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c7c:	f383 8811 	msr	BASEPRI, r3
 8019c80:	f3bf 8f6f 	isb	sy
 8019c84:	f3bf 8f4f 	dsb	sy
 8019c88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019c8a:	bf00      	nop
 8019c8c:	bf00      	nop
 8019c8e:	e7fd      	b.n	8019c8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d103      	bne.n	8019c9e <xQueueGenericSendFromISR+0x3e>
 8019c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d101      	bne.n	8019ca2 <xQueueGenericSendFromISR+0x42>
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	e000      	b.n	8019ca4 <xQueueGenericSendFromISR+0x44>
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d10b      	bne.n	8019cc0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8019ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cac:	f383 8811 	msr	BASEPRI, r3
 8019cb0:	f3bf 8f6f 	isb	sy
 8019cb4:	f3bf 8f4f 	dsb	sy
 8019cb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019cba:	bf00      	nop
 8019cbc:	bf00      	nop
 8019cbe:	e7fd      	b.n	8019cbc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019cc0:	683b      	ldr	r3, [r7, #0]
 8019cc2:	2b02      	cmp	r3, #2
 8019cc4:	d103      	bne.n	8019cce <xQueueGenericSendFromISR+0x6e>
 8019cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019cca:	2b01      	cmp	r3, #1
 8019ccc:	d101      	bne.n	8019cd2 <xQueueGenericSendFromISR+0x72>
 8019cce:	2301      	movs	r3, #1
 8019cd0:	e000      	b.n	8019cd4 <xQueueGenericSendFromISR+0x74>
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d10b      	bne.n	8019cf0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8019cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cdc:	f383 8811 	msr	BASEPRI, r3
 8019ce0:	f3bf 8f6f 	isb	sy
 8019ce4:	f3bf 8f4f 	dsb	sy
 8019ce8:	623b      	str	r3, [r7, #32]
}
 8019cea:	bf00      	nop
 8019cec:	bf00      	nop
 8019cee:	e7fd      	b.n	8019cec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019cf0:	f002 fc5a 	bl	801c5a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019cf4:	f3ef 8211 	mrs	r2, BASEPRI
 8019cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cfc:	f383 8811 	msr	BASEPRI, r3
 8019d00:	f3bf 8f6f 	isb	sy
 8019d04:	f3bf 8f4f 	dsb	sy
 8019d08:	61fa      	str	r2, [r7, #28]
 8019d0a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019d0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019d0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d18:	429a      	cmp	r2, r3
 8019d1a:	d302      	bcc.n	8019d22 <xQueueGenericSendFromISR+0xc2>
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	2b02      	cmp	r3, #2
 8019d20:	d12f      	bne.n	8019d82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019d28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019d32:	683a      	ldr	r2, [r7, #0]
 8019d34:	68b9      	ldr	r1, [r7, #8]
 8019d36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019d38:	f000 fafa 	bl	801a330 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019d3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8019d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d44:	d112      	bne.n	8019d6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d016      	beq.n	8019d7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d50:	3324      	adds	r3, #36	@ 0x24
 8019d52:	4618      	mov	r0, r3
 8019d54:	f001 f8fe 	bl	801af54 <xTaskRemoveFromEventList>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d00e      	beq.n	8019d7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d00b      	beq.n	8019d7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2201      	movs	r2, #1
 8019d68:	601a      	str	r2, [r3, #0]
 8019d6a:	e007      	b.n	8019d7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019d70:	3301      	adds	r3, #1
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	b25a      	sxtb	r2, r3
 8019d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8019d7c:	2301      	movs	r3, #1
 8019d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8019d80:	e001      	b.n	8019d86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019d82:	2300      	movs	r3, #0
 8019d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d88:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019d8a:	697b      	ldr	r3, [r7, #20]
 8019d8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019d90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8019d94:	4618      	mov	r0, r3
 8019d96:	3740      	adds	r7, #64	@ 0x40
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}

08019d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b08c      	sub	sp, #48	@ 0x30
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	60f8      	str	r0, [r7, #12]
 8019da4:	60b9      	str	r1, [r7, #8]
 8019da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019da8:	2300      	movs	r3, #0
 8019daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d10b      	bne.n	8019dce <xQueueReceive+0x32>
	__asm volatile
 8019db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dba:	f383 8811 	msr	BASEPRI, r3
 8019dbe:	f3bf 8f6f 	isb	sy
 8019dc2:	f3bf 8f4f 	dsb	sy
 8019dc6:	623b      	str	r3, [r7, #32]
}
 8019dc8:	bf00      	nop
 8019dca:	bf00      	nop
 8019dcc:	e7fd      	b.n	8019dca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019dce:	68bb      	ldr	r3, [r7, #8]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d103      	bne.n	8019ddc <xQueueReceive+0x40>
 8019dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d101      	bne.n	8019de0 <xQueueReceive+0x44>
 8019ddc:	2301      	movs	r3, #1
 8019dde:	e000      	b.n	8019de2 <xQueueReceive+0x46>
 8019de0:	2300      	movs	r3, #0
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d10b      	bne.n	8019dfe <xQueueReceive+0x62>
	__asm volatile
 8019de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dea:	f383 8811 	msr	BASEPRI, r3
 8019dee:	f3bf 8f6f 	isb	sy
 8019df2:	f3bf 8f4f 	dsb	sy
 8019df6:	61fb      	str	r3, [r7, #28]
}
 8019df8:	bf00      	nop
 8019dfa:	bf00      	nop
 8019dfc:	e7fd      	b.n	8019dfa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019dfe:	f001 fa7f 	bl	801b300 <xTaskGetSchedulerState>
 8019e02:	4603      	mov	r3, r0
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d102      	bne.n	8019e0e <xQueueReceive+0x72>
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d101      	bne.n	8019e12 <xQueueReceive+0x76>
 8019e0e:	2301      	movs	r3, #1
 8019e10:	e000      	b.n	8019e14 <xQueueReceive+0x78>
 8019e12:	2300      	movs	r3, #0
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d10b      	bne.n	8019e30 <xQueueReceive+0x94>
	__asm volatile
 8019e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e1c:	f383 8811 	msr	BASEPRI, r3
 8019e20:	f3bf 8f6f 	isb	sy
 8019e24:	f3bf 8f4f 	dsb	sy
 8019e28:	61bb      	str	r3, [r7, #24]
}
 8019e2a:	bf00      	nop
 8019e2c:	bf00      	nop
 8019e2e:	e7fd      	b.n	8019e2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019e30:	f002 fada 	bl	801c3e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d01f      	beq.n	8019e80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019e40:	68b9      	ldr	r1, [r7, #8]
 8019e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019e44:	f000 fade 	bl	801a404 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e4a:	1e5a      	subs	r2, r3, #1
 8019e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e52:	691b      	ldr	r3, [r3, #16]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d00f      	beq.n	8019e78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e5a:	3310      	adds	r3, #16
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	f001 f879 	bl	801af54 <xTaskRemoveFromEventList>
 8019e62:	4603      	mov	r3, r0
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d007      	beq.n	8019e78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019e68:	4b3c      	ldr	r3, [pc, #240]	@ (8019f5c <xQueueReceive+0x1c0>)
 8019e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019e6e:	601a      	str	r2, [r3, #0]
 8019e70:	f3bf 8f4f 	dsb	sy
 8019e74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019e78:	f002 fae8 	bl	801c44c <vPortExitCritical>
				return pdPASS;
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	e069      	b.n	8019f54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d103      	bne.n	8019e8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019e86:	f002 fae1 	bl	801c44c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	e062      	b.n	8019f54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d106      	bne.n	8019ea2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019e94:	f107 0310 	add.w	r3, r7, #16
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f001 f8bf 	bl	801b01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019e9e:	2301      	movs	r3, #1
 8019ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019ea2:	f002 fad3 	bl	801c44c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019ea6:	f000 fe15 	bl	801aad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019eaa:	f002 fa9d 	bl	801c3e8 <vPortEnterCritical>
 8019eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019eb4:	b25b      	sxtb	r3, r3
 8019eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019eba:	d103      	bne.n	8019ec4 <xQueueReceive+0x128>
 8019ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ebe:	2200      	movs	r2, #0
 8019ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019eca:	b25b      	sxtb	r3, r3
 8019ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ed0:	d103      	bne.n	8019eda <xQueueReceive+0x13e>
 8019ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ed4:	2200      	movs	r2, #0
 8019ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019eda:	f002 fab7 	bl	801c44c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019ede:	1d3a      	adds	r2, r7, #4
 8019ee0:	f107 0310 	add.w	r3, r7, #16
 8019ee4:	4611      	mov	r1, r2
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	f001 f8ae 	bl	801b048 <xTaskCheckForTimeOut>
 8019eec:	4603      	mov	r3, r0
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d123      	bne.n	8019f3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019ef4:	f000 fafe 	bl	801a4f4 <prvIsQueueEmpty>
 8019ef8:	4603      	mov	r3, r0
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d017      	beq.n	8019f2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f00:	3324      	adds	r3, #36	@ 0x24
 8019f02:	687a      	ldr	r2, [r7, #4]
 8019f04:	4611      	mov	r1, r2
 8019f06:	4618      	mov	r0, r3
 8019f08:	f000 ffd2 	bl	801aeb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019f0e:	f000 fa9f 	bl	801a450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019f12:	f000 fded 	bl	801aaf0 <xTaskResumeAll>
 8019f16:	4603      	mov	r3, r0
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d189      	bne.n	8019e30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8019f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8019f5c <xQueueReceive+0x1c0>)
 8019f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019f22:	601a      	str	r2, [r3, #0]
 8019f24:	f3bf 8f4f 	dsb	sy
 8019f28:	f3bf 8f6f 	isb	sy
 8019f2c:	e780      	b.n	8019e30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019f30:	f000 fa8e 	bl	801a450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019f34:	f000 fddc 	bl	801aaf0 <xTaskResumeAll>
 8019f38:	e77a      	b.n	8019e30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019f3c:	f000 fa88 	bl	801a450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019f40:	f000 fdd6 	bl	801aaf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019f44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019f46:	f000 fad5 	bl	801a4f4 <prvIsQueueEmpty>
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	f43f af6f 	beq.w	8019e30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019f52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019f54:	4618      	mov	r0, r3
 8019f56:	3730      	adds	r7, #48	@ 0x30
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bd80      	pop	{r7, pc}
 8019f5c:	e000ed04 	.word	0xe000ed04

08019f60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b08e      	sub	sp, #56	@ 0x38
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
 8019f68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019f72:	2300      	movs	r3, #0
 8019f74:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d10b      	bne.n	8019f94 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8019f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f80:	f383 8811 	msr	BASEPRI, r3
 8019f84:	f3bf 8f6f 	isb	sy
 8019f88:	f3bf 8f4f 	dsb	sy
 8019f8c:	623b      	str	r3, [r7, #32]
}
 8019f8e:	bf00      	nop
 8019f90:	bf00      	nop
 8019f92:	e7fd      	b.n	8019f90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d00b      	beq.n	8019fb4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8019f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fa0:	f383 8811 	msr	BASEPRI, r3
 8019fa4:	f3bf 8f6f 	isb	sy
 8019fa8:	f3bf 8f4f 	dsb	sy
 8019fac:	61fb      	str	r3, [r7, #28]
}
 8019fae:	bf00      	nop
 8019fb0:	bf00      	nop
 8019fb2:	e7fd      	b.n	8019fb0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019fb4:	f001 f9a4 	bl	801b300 <xTaskGetSchedulerState>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d102      	bne.n	8019fc4 <xQueueSemaphoreTake+0x64>
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d101      	bne.n	8019fc8 <xQueueSemaphoreTake+0x68>
 8019fc4:	2301      	movs	r3, #1
 8019fc6:	e000      	b.n	8019fca <xQueueSemaphoreTake+0x6a>
 8019fc8:	2300      	movs	r3, #0
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d10b      	bne.n	8019fe6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8019fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fd2:	f383 8811 	msr	BASEPRI, r3
 8019fd6:	f3bf 8f6f 	isb	sy
 8019fda:	f3bf 8f4f 	dsb	sy
 8019fde:	61bb      	str	r3, [r7, #24]
}
 8019fe0:	bf00      	nop
 8019fe2:	bf00      	nop
 8019fe4:	e7fd      	b.n	8019fe2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019fe6:	f002 f9ff 	bl	801c3e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019fee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d024      	beq.n	801a040 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ff8:	1e5a      	subs	r2, r3, #1
 8019ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ffc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d104      	bne.n	801a010 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a006:	f001 faf5 	bl	801b5f4 <pvTaskIncrementMutexHeldCount>
 801a00a:	4602      	mov	r2, r0
 801a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a00e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a012:	691b      	ldr	r3, [r3, #16]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d00f      	beq.n	801a038 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a01a:	3310      	adds	r3, #16
 801a01c:	4618      	mov	r0, r3
 801a01e:	f000 ff99 	bl	801af54 <xTaskRemoveFromEventList>
 801a022:	4603      	mov	r3, r0
 801a024:	2b00      	cmp	r3, #0
 801a026:	d007      	beq.n	801a038 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a028:	4b54      	ldr	r3, [pc, #336]	@ (801a17c <xQueueSemaphoreTake+0x21c>)
 801a02a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a02e:	601a      	str	r2, [r3, #0]
 801a030:	f3bf 8f4f 	dsb	sy
 801a034:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a038:	f002 fa08 	bl	801c44c <vPortExitCritical>
				return pdPASS;
 801a03c:	2301      	movs	r3, #1
 801a03e:	e098      	b.n	801a172 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a040:	683b      	ldr	r3, [r7, #0]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d112      	bne.n	801a06c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d00b      	beq.n	801a064 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801a04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a050:	f383 8811 	msr	BASEPRI, r3
 801a054:	f3bf 8f6f 	isb	sy
 801a058:	f3bf 8f4f 	dsb	sy
 801a05c:	617b      	str	r3, [r7, #20]
}
 801a05e:	bf00      	nop
 801a060:	bf00      	nop
 801a062:	e7fd      	b.n	801a060 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a064:	f002 f9f2 	bl	801c44c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a068:	2300      	movs	r3, #0
 801a06a:	e082      	b.n	801a172 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d106      	bne.n	801a080 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a072:	f107 030c 	add.w	r3, r7, #12
 801a076:	4618      	mov	r0, r3
 801a078:	f000 ffd0 	bl	801b01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a07c:	2301      	movs	r3, #1
 801a07e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a080:	f002 f9e4 	bl	801c44c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a084:	f000 fd26 	bl	801aad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a088:	f002 f9ae 	bl	801c3e8 <vPortEnterCritical>
 801a08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a08e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a092:	b25b      	sxtb	r3, r3
 801a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a098:	d103      	bne.n	801a0a2 <xQueueSemaphoreTake+0x142>
 801a09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a09c:	2200      	movs	r2, #0
 801a09e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a0a8:	b25b      	sxtb	r3, r3
 801a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0ae:	d103      	bne.n	801a0b8 <xQueueSemaphoreTake+0x158>
 801a0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a0b8:	f002 f9c8 	bl	801c44c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a0bc:	463a      	mov	r2, r7
 801a0be:	f107 030c 	add.w	r3, r7, #12
 801a0c2:	4611      	mov	r1, r2
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	f000 ffbf 	bl	801b048 <xTaskCheckForTimeOut>
 801a0ca:	4603      	mov	r3, r0
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d132      	bne.n	801a136 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a0d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a0d2:	f000 fa0f 	bl	801a4f4 <prvIsQueueEmpty>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d026      	beq.n	801a12a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d109      	bne.n	801a0f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801a0e4:	f002 f980 	bl	801c3e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0ea:	689b      	ldr	r3, [r3, #8]
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f001 f925 	bl	801b33c <xTaskPriorityInherit>
 801a0f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801a0f4:	f002 f9aa 	bl	801c44c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0fa:	3324      	adds	r3, #36	@ 0x24
 801a0fc:	683a      	ldr	r2, [r7, #0]
 801a0fe:	4611      	mov	r1, r2
 801a100:	4618      	mov	r0, r3
 801a102:	f000 fed5 	bl	801aeb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a106:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a108:	f000 f9a2 	bl	801a450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a10c:	f000 fcf0 	bl	801aaf0 <xTaskResumeAll>
 801a110:	4603      	mov	r3, r0
 801a112:	2b00      	cmp	r3, #0
 801a114:	f47f af67 	bne.w	8019fe6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801a118:	4b18      	ldr	r3, [pc, #96]	@ (801a17c <xQueueSemaphoreTake+0x21c>)
 801a11a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a11e:	601a      	str	r2, [r3, #0]
 801a120:	f3bf 8f4f 	dsb	sy
 801a124:	f3bf 8f6f 	isb	sy
 801a128:	e75d      	b.n	8019fe6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a12a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a12c:	f000 f990 	bl	801a450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a130:	f000 fcde 	bl	801aaf0 <xTaskResumeAll>
 801a134:	e757      	b.n	8019fe6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a136:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a138:	f000 f98a 	bl	801a450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a13c:	f000 fcd8 	bl	801aaf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a140:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a142:	f000 f9d7 	bl	801a4f4 <prvIsQueueEmpty>
 801a146:	4603      	mov	r3, r0
 801a148:	2b00      	cmp	r3, #0
 801a14a:	f43f af4c 	beq.w	8019fe6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a150:	2b00      	cmp	r3, #0
 801a152:	d00d      	beq.n	801a170 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801a154:	f002 f948 	bl	801c3e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a158:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a15a:	f000 f8d1 	bl	801a300 <prvGetDisinheritPriorityAfterTimeout>
 801a15e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a162:	689b      	ldr	r3, [r3, #8]
 801a164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a166:	4618      	mov	r0, r3
 801a168:	f001 f9c0 	bl	801b4ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a16c:	f002 f96e 	bl	801c44c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a170:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a172:	4618      	mov	r0, r3
 801a174:	3738      	adds	r7, #56	@ 0x38
 801a176:	46bd      	mov	sp, r7
 801a178:	bd80      	pop	{r7, pc}
 801a17a:	bf00      	nop
 801a17c:	e000ed04 	.word	0xe000ed04

0801a180 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b08e      	sub	sp, #56	@ 0x38
 801a184:	af00      	add	r7, sp, #0
 801a186:	60f8      	str	r0, [r7, #12]
 801a188:	60b9      	str	r1, [r7, #8]
 801a18a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801a190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a192:	2b00      	cmp	r3, #0
 801a194:	d10b      	bne.n	801a1ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a19a:	f383 8811 	msr	BASEPRI, r3
 801a19e:	f3bf 8f6f 	isb	sy
 801a1a2:	f3bf 8f4f 	dsb	sy
 801a1a6:	623b      	str	r3, [r7, #32]
}
 801a1a8:	bf00      	nop
 801a1aa:	bf00      	nop
 801a1ac:	e7fd      	b.n	801a1aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a1ae:	68bb      	ldr	r3, [r7, #8]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d103      	bne.n	801a1bc <xQueueReceiveFromISR+0x3c>
 801a1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d101      	bne.n	801a1c0 <xQueueReceiveFromISR+0x40>
 801a1bc:	2301      	movs	r3, #1
 801a1be:	e000      	b.n	801a1c2 <xQueueReceiveFromISR+0x42>
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d10b      	bne.n	801a1de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1ca:	f383 8811 	msr	BASEPRI, r3
 801a1ce:	f3bf 8f6f 	isb	sy
 801a1d2:	f3bf 8f4f 	dsb	sy
 801a1d6:	61fb      	str	r3, [r7, #28]
}
 801a1d8:	bf00      	nop
 801a1da:	bf00      	nop
 801a1dc:	e7fd      	b.n	801a1da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a1de:	f002 f9e3 	bl	801c5a8 <vPortValidateInterruptPriority>
	__asm volatile
 801a1e2:	f3ef 8211 	mrs	r2, BASEPRI
 801a1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1ea:	f383 8811 	msr	BASEPRI, r3
 801a1ee:	f3bf 8f6f 	isb	sy
 801a1f2:	f3bf 8f4f 	dsb	sy
 801a1f6:	61ba      	str	r2, [r7, #24]
 801a1f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a1fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a202:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a206:	2b00      	cmp	r3, #0
 801a208:	d02f      	beq.n	801a26a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a20c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a214:	68b9      	ldr	r1, [r7, #8]
 801a216:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a218:	f000 f8f4 	bl	801a404 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a21e:	1e5a      	subs	r2, r3, #1
 801a220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a222:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a224:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a22c:	d112      	bne.n	801a254 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a230:	691b      	ldr	r3, [r3, #16]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d016      	beq.n	801a264 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a238:	3310      	adds	r3, #16
 801a23a:	4618      	mov	r0, r3
 801a23c:	f000 fe8a 	bl	801af54 <xTaskRemoveFromEventList>
 801a240:	4603      	mov	r3, r0
 801a242:	2b00      	cmp	r3, #0
 801a244:	d00e      	beq.n	801a264 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d00b      	beq.n	801a264 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2201      	movs	r2, #1
 801a250:	601a      	str	r2, [r3, #0]
 801a252:	e007      	b.n	801a264 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a258:	3301      	adds	r3, #1
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	b25a      	sxtb	r2, r3
 801a25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801a264:	2301      	movs	r3, #1
 801a266:	637b      	str	r3, [r7, #52]	@ 0x34
 801a268:	e001      	b.n	801a26e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801a26a:	2300      	movs	r3, #0
 801a26c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a270:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a272:	693b      	ldr	r3, [r7, #16]
 801a274:	f383 8811 	msr	BASEPRI, r3
}
 801a278:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801a27c:	4618      	mov	r0, r3
 801a27e:	3738      	adds	r7, #56	@ 0x38
 801a280:	46bd      	mov	sp, r7
 801a282:	bd80      	pop	{r7, pc}

0801a284 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b084      	sub	sp, #16
 801a288:	af00      	add	r7, sp, #0
 801a28a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d10b      	bne.n	801a2aa <uxQueueMessagesWaiting+0x26>
	__asm volatile
 801a292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a296:	f383 8811 	msr	BASEPRI, r3
 801a29a:	f3bf 8f6f 	isb	sy
 801a29e:	f3bf 8f4f 	dsb	sy
 801a2a2:	60bb      	str	r3, [r7, #8]
}
 801a2a4:	bf00      	nop
 801a2a6:	bf00      	nop
 801a2a8:	e7fd      	b.n	801a2a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801a2aa:	f002 f89d 	bl	801c3e8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a2b2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801a2b4:	f002 f8ca 	bl	801c44c <vPortExitCritical>

	return uxReturn;
 801a2b8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	3710      	adds	r7, #16
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	bd80      	pop	{r7, pc}

0801a2c2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801a2c2:	b480      	push	{r7}
 801a2c4:	b087      	sub	sp, #28
 801a2c6:	af00      	add	r7, sp, #0
 801a2c8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801a2ce:	697b      	ldr	r3, [r7, #20]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d10b      	bne.n	801a2ec <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 801a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2d8:	f383 8811 	msr	BASEPRI, r3
 801a2dc:	f3bf 8f6f 	isb	sy
 801a2e0:	f3bf 8f4f 	dsb	sy
 801a2e4:	60fb      	str	r3, [r7, #12]
}
 801a2e6:	bf00      	nop
 801a2e8:	bf00      	nop
 801a2ea:	e7fd      	b.n	801a2e8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 801a2ec:	697b      	ldr	r3, [r7, #20]
 801a2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a2f0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801a2f2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	371c      	adds	r7, #28
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fe:	4770      	bx	lr

0801a300 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a300:	b480      	push	{r7}
 801a302:	b085      	sub	sp, #20
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d006      	beq.n	801a31e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801a31a:	60fb      	str	r3, [r7, #12]
 801a31c:	e001      	b.n	801a322 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a31e:	2300      	movs	r3, #0
 801a320:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a322:	68fb      	ldr	r3, [r7, #12]
	}
 801a324:	4618      	mov	r0, r3
 801a326:	3714      	adds	r7, #20
 801a328:	46bd      	mov	sp, r7
 801a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a32e:	4770      	bx	lr

0801a330 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b086      	sub	sp, #24
 801a334:	af00      	add	r7, sp, #0
 801a336:	60f8      	str	r0, [r7, #12]
 801a338:	60b9      	str	r1, [r7, #8]
 801a33a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a33c:	2300      	movs	r3, #0
 801a33e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a344:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d10d      	bne.n	801a36a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d14d      	bne.n	801a3f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	689b      	ldr	r3, [r3, #8]
 801a35a:	4618      	mov	r0, r3
 801a35c:	f001 f856 	bl	801b40c <xTaskPriorityDisinherit>
 801a360:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	2200      	movs	r2, #0
 801a366:	609a      	str	r2, [r3, #8]
 801a368:	e043      	b.n	801a3f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d119      	bne.n	801a3a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	6858      	ldr	r0, [r3, #4]
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a378:	461a      	mov	r2, r3
 801a37a:	68b9      	ldr	r1, [r7, #8]
 801a37c:	f002 fe73 	bl	801d066 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	685a      	ldr	r2, [r3, #4]
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a388:	441a      	add	r2, r3
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	685a      	ldr	r2, [r3, #4]
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	689b      	ldr	r3, [r3, #8]
 801a396:	429a      	cmp	r2, r3
 801a398:	d32b      	bcc.n	801a3f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	681a      	ldr	r2, [r3, #0]
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	605a      	str	r2, [r3, #4]
 801a3a2:	e026      	b.n	801a3f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	68d8      	ldr	r0, [r3, #12]
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a3ac:	461a      	mov	r2, r3
 801a3ae:	68b9      	ldr	r1, [r7, #8]
 801a3b0:	f002 fe59 	bl	801d066 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	68da      	ldr	r2, [r3, #12]
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a3bc:	425b      	negs	r3, r3
 801a3be:	441a      	add	r2, r3
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	68da      	ldr	r2, [r3, #12]
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	429a      	cmp	r2, r3
 801a3ce:	d207      	bcs.n	801a3e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	689a      	ldr	r2, [r3, #8]
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a3d8:	425b      	negs	r3, r3
 801a3da:	441a      	add	r2, r3
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	2b02      	cmp	r3, #2
 801a3e4:	d105      	bne.n	801a3f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a3e6:	693b      	ldr	r3, [r7, #16]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d002      	beq.n	801a3f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a3ec:	693b      	ldr	r3, [r7, #16]
 801a3ee:	3b01      	subs	r3, #1
 801a3f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a3f2:	693b      	ldr	r3, [r7, #16]
 801a3f4:	1c5a      	adds	r2, r3, #1
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801a3fa:	697b      	ldr	r3, [r7, #20]
}
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	3718      	adds	r7, #24
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}

0801a404 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b082      	sub	sp, #8
 801a408:	af00      	add	r7, sp, #0
 801a40a:	6078      	str	r0, [r7, #4]
 801a40c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a412:	2b00      	cmp	r3, #0
 801a414:	d018      	beq.n	801a448 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	68da      	ldr	r2, [r3, #12]
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a41e:	441a      	add	r2, r3
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	68da      	ldr	r2, [r3, #12]
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	689b      	ldr	r3, [r3, #8]
 801a42c:	429a      	cmp	r2, r3
 801a42e:	d303      	bcc.n	801a438 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681a      	ldr	r2, [r3, #0]
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	68d9      	ldr	r1, [r3, #12]
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a440:	461a      	mov	r2, r3
 801a442:	6838      	ldr	r0, [r7, #0]
 801a444:	f002 fe0f 	bl	801d066 <memcpy>
	}
}
 801a448:	bf00      	nop
 801a44a:	3708      	adds	r7, #8
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a458:	f001 ffc6 	bl	801c3e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a462:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a464:	e011      	b.n	801a48a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d012      	beq.n	801a494 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	3324      	adds	r3, #36	@ 0x24
 801a472:	4618      	mov	r0, r3
 801a474:	f000 fd6e 	bl	801af54 <xTaskRemoveFromEventList>
 801a478:	4603      	mov	r3, r0
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d001      	beq.n	801a482 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a47e:	f000 fe47 	bl	801b110 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a482:	7bfb      	ldrb	r3, [r7, #15]
 801a484:	3b01      	subs	r3, #1
 801a486:	b2db      	uxtb	r3, r3
 801a488:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	dce9      	bgt.n	801a466 <prvUnlockQueue+0x16>
 801a492:	e000      	b.n	801a496 <prvUnlockQueue+0x46>
					break;
 801a494:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	22ff      	movs	r2, #255	@ 0xff
 801a49a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801a49e:	f001 ffd5 	bl	801c44c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a4a2:	f001 ffa1 	bl	801c3e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a4ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a4ae:	e011      	b.n	801a4d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	691b      	ldr	r3, [r3, #16]
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d012      	beq.n	801a4de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	3310      	adds	r3, #16
 801a4bc:	4618      	mov	r0, r3
 801a4be:	f000 fd49 	bl	801af54 <xTaskRemoveFromEventList>
 801a4c2:	4603      	mov	r3, r0
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d001      	beq.n	801a4cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a4c8:	f000 fe22 	bl	801b110 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a4cc:	7bbb      	ldrb	r3, [r7, #14]
 801a4ce:	3b01      	subs	r3, #1
 801a4d0:	b2db      	uxtb	r3, r3
 801a4d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a4d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	dce9      	bgt.n	801a4b0 <prvUnlockQueue+0x60>
 801a4dc:	e000      	b.n	801a4e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a4de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	22ff      	movs	r2, #255	@ 0xff
 801a4e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801a4e8:	f001 ffb0 	bl	801c44c <vPortExitCritical>
}
 801a4ec:	bf00      	nop
 801a4ee:	3710      	adds	r7, #16
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	bd80      	pop	{r7, pc}

0801a4f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a4f4:	b580      	push	{r7, lr}
 801a4f6:	b084      	sub	sp, #16
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a4fc:	f001 ff74 	bl	801c3e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a504:	2b00      	cmp	r3, #0
 801a506:	d102      	bne.n	801a50e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a508:	2301      	movs	r3, #1
 801a50a:	60fb      	str	r3, [r7, #12]
 801a50c:	e001      	b.n	801a512 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a50e:	2300      	movs	r3, #0
 801a510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a512:	f001 ff9b 	bl	801c44c <vPortExitCritical>

	return xReturn;
 801a516:	68fb      	ldr	r3, [r7, #12]
}
 801a518:	4618      	mov	r0, r3
 801a51a:	3710      	adds	r7, #16
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd80      	pop	{r7, pc}

0801a520 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b084      	sub	sp, #16
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a528:	f001 ff5e 	bl	801c3e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a534:	429a      	cmp	r2, r3
 801a536:	d102      	bne.n	801a53e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a538:	2301      	movs	r3, #1
 801a53a:	60fb      	str	r3, [r7, #12]
 801a53c:	e001      	b.n	801a542 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a53e:	2300      	movs	r3, #0
 801a540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a542:	f001 ff83 	bl	801c44c <vPortExitCritical>

	return xReturn;
 801a546:	68fb      	ldr	r3, [r7, #12]
}
 801a548:	4618      	mov	r0, r3
 801a54a:	3710      	adds	r7, #16
 801a54c:	46bd      	mov	sp, r7
 801a54e:	bd80      	pop	{r7, pc}

0801a550 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a550:	b480      	push	{r7}
 801a552:	b085      	sub	sp, #20
 801a554:	af00      	add	r7, sp, #0
 801a556:	6078      	str	r0, [r7, #4]
 801a558:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a55a:	2300      	movs	r3, #0
 801a55c:	60fb      	str	r3, [r7, #12]
 801a55e:	e014      	b.n	801a58a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a560:	4a0f      	ldr	r2, [pc, #60]	@ (801a5a0 <vQueueAddToRegistry+0x50>)
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d10b      	bne.n	801a584 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a56c:	490c      	ldr	r1, [pc, #48]	@ (801a5a0 <vQueueAddToRegistry+0x50>)
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	683a      	ldr	r2, [r7, #0]
 801a572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a576:	4a0a      	ldr	r2, [pc, #40]	@ (801a5a0 <vQueueAddToRegistry+0x50>)
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	00db      	lsls	r3, r3, #3
 801a57c:	4413      	add	r3, r2
 801a57e:	687a      	ldr	r2, [r7, #4]
 801a580:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a582:	e006      	b.n	801a592 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	3301      	adds	r3, #1
 801a588:	60fb      	str	r3, [r7, #12]
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	2b07      	cmp	r3, #7
 801a58e:	d9e7      	bls.n	801a560 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a590:	bf00      	nop
 801a592:	bf00      	nop
 801a594:	3714      	adds	r7, #20
 801a596:	46bd      	mov	sp, r7
 801a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59c:	4770      	bx	lr
 801a59e:	bf00      	nop
 801a5a0:	20008738 	.word	0x20008738

0801a5a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b086      	sub	sp, #24
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	60f8      	str	r0, [r7, #12]
 801a5ac:	60b9      	str	r1, [r7, #8]
 801a5ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a5b4:	f001 ff18 	bl	801c3e8 <vPortEnterCritical>
 801a5b8:	697b      	ldr	r3, [r7, #20]
 801a5ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a5be:	b25b      	sxtb	r3, r3
 801a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5c4:	d103      	bne.n	801a5ce <vQueueWaitForMessageRestricted+0x2a>
 801a5c6:	697b      	ldr	r3, [r7, #20]
 801a5c8:	2200      	movs	r2, #0
 801a5ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a5ce:	697b      	ldr	r3, [r7, #20]
 801a5d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a5d4:	b25b      	sxtb	r3, r3
 801a5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5da:	d103      	bne.n	801a5e4 <vQueueWaitForMessageRestricted+0x40>
 801a5dc:	697b      	ldr	r3, [r7, #20]
 801a5de:	2200      	movs	r2, #0
 801a5e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a5e4:	f001 ff32 	bl	801c44c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a5e8:	697b      	ldr	r3, [r7, #20]
 801a5ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d106      	bne.n	801a5fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a5f0:	697b      	ldr	r3, [r7, #20]
 801a5f2:	3324      	adds	r3, #36	@ 0x24
 801a5f4:	687a      	ldr	r2, [r7, #4]
 801a5f6:	68b9      	ldr	r1, [r7, #8]
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	f000 fc7f 	bl	801aefc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a5fe:	6978      	ldr	r0, [r7, #20]
 801a600:	f7ff ff26 	bl	801a450 <prvUnlockQueue>
	}
 801a604:	bf00      	nop
 801a606:	3718      	adds	r7, #24
 801a608:	46bd      	mov	sp, r7
 801a60a:	bd80      	pop	{r7, pc}

0801a60c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b08e      	sub	sp, #56	@ 0x38
 801a610:	af04      	add	r7, sp, #16
 801a612:	60f8      	str	r0, [r7, #12]
 801a614:	60b9      	str	r1, [r7, #8]
 801a616:	607a      	str	r2, [r7, #4]
 801a618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d10b      	bne.n	801a638 <xTaskCreateStatic+0x2c>
	__asm volatile
 801a620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a624:	f383 8811 	msr	BASEPRI, r3
 801a628:	f3bf 8f6f 	isb	sy
 801a62c:	f3bf 8f4f 	dsb	sy
 801a630:	623b      	str	r3, [r7, #32]
}
 801a632:	bf00      	nop
 801a634:	bf00      	nop
 801a636:	e7fd      	b.n	801a634 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d10b      	bne.n	801a656 <xTaskCreateStatic+0x4a>
	__asm volatile
 801a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a642:	f383 8811 	msr	BASEPRI, r3
 801a646:	f3bf 8f6f 	isb	sy
 801a64a:	f3bf 8f4f 	dsb	sy
 801a64e:	61fb      	str	r3, [r7, #28]
}
 801a650:	bf00      	nop
 801a652:	bf00      	nop
 801a654:	e7fd      	b.n	801a652 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a656:	23a8      	movs	r3, #168	@ 0xa8
 801a658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a65a:	693b      	ldr	r3, [r7, #16]
 801a65c:	2ba8      	cmp	r3, #168	@ 0xa8
 801a65e:	d00b      	beq.n	801a678 <xTaskCreateStatic+0x6c>
	__asm volatile
 801a660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a664:	f383 8811 	msr	BASEPRI, r3
 801a668:	f3bf 8f6f 	isb	sy
 801a66c:	f3bf 8f4f 	dsb	sy
 801a670:	61bb      	str	r3, [r7, #24]
}
 801a672:	bf00      	nop
 801a674:	bf00      	nop
 801a676:	e7fd      	b.n	801a674 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a678:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d01e      	beq.n	801a6be <xTaskCreateStatic+0xb2>
 801a680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a682:	2b00      	cmp	r3, #0
 801a684:	d01b      	beq.n	801a6be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a688:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a68c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a68e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a692:	2202      	movs	r2, #2
 801a694:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a698:	2300      	movs	r3, #0
 801a69a:	9303      	str	r3, [sp, #12]
 801a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a69e:	9302      	str	r3, [sp, #8]
 801a6a0:	f107 0314 	add.w	r3, r7, #20
 801a6a4:	9301      	str	r3, [sp, #4]
 801a6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6a8:	9300      	str	r3, [sp, #0]
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	687a      	ldr	r2, [r7, #4]
 801a6ae:	68b9      	ldr	r1, [r7, #8]
 801a6b0:	68f8      	ldr	r0, [r7, #12]
 801a6b2:	f000 f851 	bl	801a758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a6b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a6b8:	f000 f8f6 	bl	801a8a8 <prvAddNewTaskToReadyList>
 801a6bc:	e001      	b.n	801a6c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801a6be:	2300      	movs	r3, #0
 801a6c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a6c2:	697b      	ldr	r3, [r7, #20]
	}
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	3728      	adds	r7, #40	@ 0x28
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	bd80      	pop	{r7, pc}

0801a6cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b08c      	sub	sp, #48	@ 0x30
 801a6d0:	af04      	add	r7, sp, #16
 801a6d2:	60f8      	str	r0, [r7, #12]
 801a6d4:	60b9      	str	r1, [r7, #8]
 801a6d6:	603b      	str	r3, [r7, #0]
 801a6d8:	4613      	mov	r3, r2
 801a6da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a6dc:	88fb      	ldrh	r3, [r7, #6]
 801a6de:	009b      	lsls	r3, r3, #2
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f001 ffa3 	bl	801c62c <pvPortMalloc>
 801a6e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a6e8:	697b      	ldr	r3, [r7, #20]
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d00e      	beq.n	801a70c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a6ee:	20a8      	movs	r0, #168	@ 0xa8
 801a6f0:	f001 ff9c 	bl	801c62c <pvPortMalloc>
 801a6f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a6f6:	69fb      	ldr	r3, [r7, #28]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d003      	beq.n	801a704 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a6fc:	69fb      	ldr	r3, [r7, #28]
 801a6fe:	697a      	ldr	r2, [r7, #20]
 801a700:	631a      	str	r2, [r3, #48]	@ 0x30
 801a702:	e005      	b.n	801a710 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a704:	6978      	ldr	r0, [r7, #20]
 801a706:	f002 f85f 	bl	801c7c8 <vPortFree>
 801a70a:	e001      	b.n	801a710 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a70c:	2300      	movs	r3, #0
 801a70e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a710:	69fb      	ldr	r3, [r7, #28]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d017      	beq.n	801a746 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a716:	69fb      	ldr	r3, [r7, #28]
 801a718:	2200      	movs	r2, #0
 801a71a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a71e:	88fa      	ldrh	r2, [r7, #6]
 801a720:	2300      	movs	r3, #0
 801a722:	9303      	str	r3, [sp, #12]
 801a724:	69fb      	ldr	r3, [r7, #28]
 801a726:	9302      	str	r3, [sp, #8]
 801a728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a72a:	9301      	str	r3, [sp, #4]
 801a72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a72e:	9300      	str	r3, [sp, #0]
 801a730:	683b      	ldr	r3, [r7, #0]
 801a732:	68b9      	ldr	r1, [r7, #8]
 801a734:	68f8      	ldr	r0, [r7, #12]
 801a736:	f000 f80f 	bl	801a758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a73a:	69f8      	ldr	r0, [r7, #28]
 801a73c:	f000 f8b4 	bl	801a8a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a740:	2301      	movs	r3, #1
 801a742:	61bb      	str	r3, [r7, #24]
 801a744:	e002      	b.n	801a74c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a746:	f04f 33ff 	mov.w	r3, #4294967295
 801a74a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a74c:	69bb      	ldr	r3, [r7, #24]
	}
 801a74e:	4618      	mov	r0, r3
 801a750:	3720      	adds	r7, #32
 801a752:	46bd      	mov	sp, r7
 801a754:	bd80      	pop	{r7, pc}
	...

0801a758 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b088      	sub	sp, #32
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	60f8      	str	r0, [r7, #12]
 801a760:	60b9      	str	r1, [r7, #8]
 801a762:	607a      	str	r2, [r7, #4]
 801a764:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a768:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	009b      	lsls	r3, r3, #2
 801a76e:	461a      	mov	r2, r3
 801a770:	21a5      	movs	r1, #165	@ 0xa5
 801a772:	f002 fb93 	bl	801ce9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801a780:	3b01      	subs	r3, #1
 801a782:	009b      	lsls	r3, r3, #2
 801a784:	4413      	add	r3, r2
 801a786:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a788:	69bb      	ldr	r3, [r7, #24]
 801a78a:	f023 0307 	bic.w	r3, r3, #7
 801a78e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a790:	69bb      	ldr	r3, [r7, #24]
 801a792:	f003 0307 	and.w	r3, r3, #7
 801a796:	2b00      	cmp	r3, #0
 801a798:	d00b      	beq.n	801a7b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801a79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a79e:	f383 8811 	msr	BASEPRI, r3
 801a7a2:	f3bf 8f6f 	isb	sy
 801a7a6:	f3bf 8f4f 	dsb	sy
 801a7aa:	617b      	str	r3, [r7, #20]
}
 801a7ac:	bf00      	nop
 801a7ae:	bf00      	nop
 801a7b0:	e7fd      	b.n	801a7ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a7b2:	68bb      	ldr	r3, [r7, #8]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d01f      	beq.n	801a7f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	61fb      	str	r3, [r7, #28]
 801a7bc:	e012      	b.n	801a7e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a7be:	68ba      	ldr	r2, [r7, #8]
 801a7c0:	69fb      	ldr	r3, [r7, #28]
 801a7c2:	4413      	add	r3, r2
 801a7c4:	7819      	ldrb	r1, [r3, #0]
 801a7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a7c8:	69fb      	ldr	r3, [r7, #28]
 801a7ca:	4413      	add	r3, r2
 801a7cc:	3334      	adds	r3, #52	@ 0x34
 801a7ce:	460a      	mov	r2, r1
 801a7d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a7d2:	68ba      	ldr	r2, [r7, #8]
 801a7d4:	69fb      	ldr	r3, [r7, #28]
 801a7d6:	4413      	add	r3, r2
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d006      	beq.n	801a7ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a7de:	69fb      	ldr	r3, [r7, #28]
 801a7e0:	3301      	adds	r3, #1
 801a7e2:	61fb      	str	r3, [r7, #28]
 801a7e4:	69fb      	ldr	r3, [r7, #28]
 801a7e6:	2b0f      	cmp	r3, #15
 801a7e8:	d9e9      	bls.n	801a7be <prvInitialiseNewTask+0x66>
 801a7ea:	e000      	b.n	801a7ee <prvInitialiseNewTask+0x96>
			{
				break;
 801a7ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7f0:	2200      	movs	r2, #0
 801a7f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801a7f6:	e003      	b.n	801a800 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7fa:	2200      	movs	r2, #0
 801a7fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a802:	2b37      	cmp	r3, #55	@ 0x37
 801a804:	d901      	bls.n	801a80a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a806:	2337      	movs	r3, #55	@ 0x37
 801a808:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a80c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a80e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a814:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801a816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a818:	2200      	movs	r2, #0
 801a81a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a81e:	3304      	adds	r3, #4
 801a820:	4618      	mov	r0, r3
 801a822:	f7fe fe89 	bl	8019538 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a828:	3318      	adds	r3, #24
 801a82a:	4618      	mov	r0, r3
 801a82c:	f7fe fe84 	bl	8019538 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a834:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a838:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a83e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a844:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a848:	2200      	movs	r2, #0
 801a84a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a850:	2200      	movs	r2, #0
 801a852:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801a856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a858:	3354      	adds	r3, #84	@ 0x54
 801a85a:	224c      	movs	r2, #76	@ 0x4c
 801a85c:	2100      	movs	r1, #0
 801a85e:	4618      	mov	r0, r3
 801a860:	f002 fb1c 	bl	801ce9c <memset>
 801a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a866:	4a0d      	ldr	r2, [pc, #52]	@ (801a89c <prvInitialiseNewTask+0x144>)
 801a868:	659a      	str	r2, [r3, #88]	@ 0x58
 801a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a86c:	4a0c      	ldr	r2, [pc, #48]	@ (801a8a0 <prvInitialiseNewTask+0x148>)
 801a86e:	65da      	str	r2, [r3, #92]	@ 0x5c
 801a870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a872:	4a0c      	ldr	r2, [pc, #48]	@ (801a8a4 <prvInitialiseNewTask+0x14c>)
 801a874:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a876:	683a      	ldr	r2, [r7, #0]
 801a878:	68f9      	ldr	r1, [r7, #12]
 801a87a:	69b8      	ldr	r0, [r7, #24]
 801a87c:	f001 fc84 	bl	801c188 <pxPortInitialiseStack>
 801a880:	4602      	mov	r2, r0
 801a882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a884:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d002      	beq.n	801a892 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a88e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a892:	bf00      	nop
 801a894:	3720      	adds	r7, #32
 801a896:	46bd      	mov	sp, r7
 801a898:	bd80      	pop	{r7, pc}
 801a89a:	bf00      	nop
 801a89c:	2000bdcc 	.word	0x2000bdcc
 801a8a0:	2000be34 	.word	0x2000be34
 801a8a4:	2000be9c 	.word	0x2000be9c

0801a8a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	b082      	sub	sp, #8
 801a8ac:	af00      	add	r7, sp, #0
 801a8ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a8b0:	f001 fd9a 	bl	801c3e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a8b4:	4b2d      	ldr	r3, [pc, #180]	@ (801a96c <prvAddNewTaskToReadyList+0xc4>)
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	3301      	adds	r3, #1
 801a8ba:	4a2c      	ldr	r2, [pc, #176]	@ (801a96c <prvAddNewTaskToReadyList+0xc4>)
 801a8bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a8be:	4b2c      	ldr	r3, [pc, #176]	@ (801a970 <prvAddNewTaskToReadyList+0xc8>)
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d109      	bne.n	801a8da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a8c6:	4a2a      	ldr	r2, [pc, #168]	@ (801a970 <prvAddNewTaskToReadyList+0xc8>)
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a8cc:	4b27      	ldr	r3, [pc, #156]	@ (801a96c <prvAddNewTaskToReadyList+0xc4>)
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	2b01      	cmp	r3, #1
 801a8d2:	d110      	bne.n	801a8f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a8d4:	f000 fc40 	bl	801b158 <prvInitialiseTaskLists>
 801a8d8:	e00d      	b.n	801a8f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a8da:	4b26      	ldr	r3, [pc, #152]	@ (801a974 <prvAddNewTaskToReadyList+0xcc>)
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d109      	bne.n	801a8f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a8e2:	4b23      	ldr	r3, [pc, #140]	@ (801a970 <prvAddNewTaskToReadyList+0xc8>)
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a8ec:	429a      	cmp	r2, r3
 801a8ee:	d802      	bhi.n	801a8f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a8f0:	4a1f      	ldr	r2, [pc, #124]	@ (801a970 <prvAddNewTaskToReadyList+0xc8>)
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a8f6:	4b20      	ldr	r3, [pc, #128]	@ (801a978 <prvAddNewTaskToReadyList+0xd0>)
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	3301      	adds	r3, #1
 801a8fc:	4a1e      	ldr	r2, [pc, #120]	@ (801a978 <prvAddNewTaskToReadyList+0xd0>)
 801a8fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a900:	4b1d      	ldr	r3, [pc, #116]	@ (801a978 <prvAddNewTaskToReadyList+0xd0>)
 801a902:	681a      	ldr	r2, [r3, #0]
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a90c:	4b1b      	ldr	r3, [pc, #108]	@ (801a97c <prvAddNewTaskToReadyList+0xd4>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	429a      	cmp	r2, r3
 801a912:	d903      	bls.n	801a91c <prvAddNewTaskToReadyList+0x74>
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a918:	4a18      	ldr	r2, [pc, #96]	@ (801a97c <prvAddNewTaskToReadyList+0xd4>)
 801a91a:	6013      	str	r3, [r2, #0]
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a920:	4613      	mov	r3, r2
 801a922:	009b      	lsls	r3, r3, #2
 801a924:	4413      	add	r3, r2
 801a926:	009b      	lsls	r3, r3, #2
 801a928:	4a15      	ldr	r2, [pc, #84]	@ (801a980 <prvAddNewTaskToReadyList+0xd8>)
 801a92a:	441a      	add	r2, r3
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	3304      	adds	r3, #4
 801a930:	4619      	mov	r1, r3
 801a932:	4610      	mov	r0, r2
 801a934:	f7fe fe0d 	bl	8019552 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a938:	f001 fd88 	bl	801c44c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a93c:	4b0d      	ldr	r3, [pc, #52]	@ (801a974 <prvAddNewTaskToReadyList+0xcc>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d00e      	beq.n	801a962 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a944:	4b0a      	ldr	r3, [pc, #40]	@ (801a970 <prvAddNewTaskToReadyList+0xc8>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a94e:	429a      	cmp	r2, r3
 801a950:	d207      	bcs.n	801a962 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a952:	4b0c      	ldr	r3, [pc, #48]	@ (801a984 <prvAddNewTaskToReadyList+0xdc>)
 801a954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a958:	601a      	str	r2, [r3, #0]
 801a95a:	f3bf 8f4f 	dsb	sy
 801a95e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a962:	bf00      	nop
 801a964:	3708      	adds	r7, #8
 801a966:	46bd      	mov	sp, r7
 801a968:	bd80      	pop	{r7, pc}
 801a96a:	bf00      	nop
 801a96c:	20008c4c 	.word	0x20008c4c
 801a970:	20008778 	.word	0x20008778
 801a974:	20008c58 	.word	0x20008c58
 801a978:	20008c68 	.word	0x20008c68
 801a97c:	20008c54 	.word	0x20008c54
 801a980:	2000877c 	.word	0x2000877c
 801a984:	e000ed04 	.word	0xe000ed04

0801a988 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b084      	sub	sp, #16
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a990:	2300      	movs	r3, #0
 801a992:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d018      	beq.n	801a9cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a99a:	4b14      	ldr	r3, [pc, #80]	@ (801a9ec <vTaskDelay+0x64>)
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d00b      	beq.n	801a9ba <vTaskDelay+0x32>
	__asm volatile
 801a9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9a6:	f383 8811 	msr	BASEPRI, r3
 801a9aa:	f3bf 8f6f 	isb	sy
 801a9ae:	f3bf 8f4f 	dsb	sy
 801a9b2:	60bb      	str	r3, [r7, #8]
}
 801a9b4:	bf00      	nop
 801a9b6:	bf00      	nop
 801a9b8:	e7fd      	b.n	801a9b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801a9ba:	f000 f88b 	bl	801aad4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a9be:	2100      	movs	r1, #0
 801a9c0:	6878      	ldr	r0, [r7, #4]
 801a9c2:	f001 f833 	bl	801ba2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a9c6:	f000 f893 	bl	801aaf0 <xTaskResumeAll>
 801a9ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d107      	bne.n	801a9e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801a9d2:	4b07      	ldr	r3, [pc, #28]	@ (801a9f0 <vTaskDelay+0x68>)
 801a9d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a9d8:	601a      	str	r2, [r3, #0]
 801a9da:	f3bf 8f4f 	dsb	sy
 801a9de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a9e2:	bf00      	nop
 801a9e4:	3710      	adds	r7, #16
 801a9e6:	46bd      	mov	sp, r7
 801a9e8:	bd80      	pop	{r7, pc}
 801a9ea:	bf00      	nop
 801a9ec:	20008c74 	.word	0x20008c74
 801a9f0:	e000ed04 	.word	0xe000ed04

0801a9f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b08a      	sub	sp, #40	@ 0x28
 801a9f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a9fe:	2300      	movs	r3, #0
 801aa00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801aa02:	463a      	mov	r2, r7
 801aa04:	1d39      	adds	r1, r7, #4
 801aa06:	f107 0308 	add.w	r3, r7, #8
 801aa0a:	4618      	mov	r0, r3
 801aa0c:	f7fe fd40 	bl	8019490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801aa10:	6839      	ldr	r1, [r7, #0]
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	68ba      	ldr	r2, [r7, #8]
 801aa16:	9202      	str	r2, [sp, #8]
 801aa18:	9301      	str	r3, [sp, #4]
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	9300      	str	r3, [sp, #0]
 801aa1e:	2300      	movs	r3, #0
 801aa20:	460a      	mov	r2, r1
 801aa22:	4924      	ldr	r1, [pc, #144]	@ (801aab4 <vTaskStartScheduler+0xc0>)
 801aa24:	4824      	ldr	r0, [pc, #144]	@ (801aab8 <vTaskStartScheduler+0xc4>)
 801aa26:	f7ff fdf1 	bl	801a60c <xTaskCreateStatic>
 801aa2a:	4603      	mov	r3, r0
 801aa2c:	4a23      	ldr	r2, [pc, #140]	@ (801aabc <vTaskStartScheduler+0xc8>)
 801aa2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801aa30:	4b22      	ldr	r3, [pc, #136]	@ (801aabc <vTaskStartScheduler+0xc8>)
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d002      	beq.n	801aa3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801aa38:	2301      	movs	r3, #1
 801aa3a:	617b      	str	r3, [r7, #20]
 801aa3c:	e001      	b.n	801aa42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801aa3e:	2300      	movs	r3, #0
 801aa40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801aa42:	697b      	ldr	r3, [r7, #20]
 801aa44:	2b01      	cmp	r3, #1
 801aa46:	d102      	bne.n	801aa4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801aa48:	f001 f844 	bl	801bad4 <xTimerCreateTimerTask>
 801aa4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801aa4e:	697b      	ldr	r3, [r7, #20]
 801aa50:	2b01      	cmp	r3, #1
 801aa52:	d11b      	bne.n	801aa8c <vTaskStartScheduler+0x98>
	__asm volatile
 801aa54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa58:	f383 8811 	msr	BASEPRI, r3
 801aa5c:	f3bf 8f6f 	isb	sy
 801aa60:	f3bf 8f4f 	dsb	sy
 801aa64:	613b      	str	r3, [r7, #16]
}
 801aa66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801aa68:	4b15      	ldr	r3, [pc, #84]	@ (801aac0 <vTaskStartScheduler+0xcc>)
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	3354      	adds	r3, #84	@ 0x54
 801aa6e:	4a15      	ldr	r2, [pc, #84]	@ (801aac4 <vTaskStartScheduler+0xd0>)
 801aa70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801aa72:	4b15      	ldr	r3, [pc, #84]	@ (801aac8 <vTaskStartScheduler+0xd4>)
 801aa74:	f04f 32ff 	mov.w	r2, #4294967295
 801aa78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801aa7a:	4b14      	ldr	r3, [pc, #80]	@ (801aacc <vTaskStartScheduler+0xd8>)
 801aa7c:	2201      	movs	r2, #1
 801aa7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801aa80:	4b13      	ldr	r3, [pc, #76]	@ (801aad0 <vTaskStartScheduler+0xdc>)
 801aa82:	2200      	movs	r2, #0
 801aa84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801aa86:	f001 fc0b 	bl	801c2a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801aa8a:	e00f      	b.n	801aaac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801aa8c:	697b      	ldr	r3, [r7, #20]
 801aa8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa92:	d10b      	bne.n	801aaac <vTaskStartScheduler+0xb8>
	__asm volatile
 801aa94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa98:	f383 8811 	msr	BASEPRI, r3
 801aa9c:	f3bf 8f6f 	isb	sy
 801aaa0:	f3bf 8f4f 	dsb	sy
 801aaa4:	60fb      	str	r3, [r7, #12]
}
 801aaa6:	bf00      	nop
 801aaa8:	bf00      	nop
 801aaaa:	e7fd      	b.n	801aaa8 <vTaskStartScheduler+0xb4>
}
 801aaac:	bf00      	nop
 801aaae:	3718      	adds	r7, #24
 801aab0:	46bd      	mov	sp, r7
 801aab2:	bd80      	pop	{r7, pc}
 801aab4:	0801e138 	.word	0x0801e138
 801aab8:	0801b129 	.word	0x0801b129
 801aabc:	20008c70 	.word	0x20008c70
 801aac0:	20008778 	.word	0x20008778
 801aac4:	20000088 	.word	0x20000088
 801aac8:	20008c6c 	.word	0x20008c6c
 801aacc:	20008c58 	.word	0x20008c58
 801aad0:	20008c50 	.word	0x20008c50

0801aad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801aad4:	b480      	push	{r7}
 801aad6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801aad8:	4b04      	ldr	r3, [pc, #16]	@ (801aaec <vTaskSuspendAll+0x18>)
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	3301      	adds	r3, #1
 801aade:	4a03      	ldr	r2, [pc, #12]	@ (801aaec <vTaskSuspendAll+0x18>)
 801aae0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801aae2:	bf00      	nop
 801aae4:	46bd      	mov	sp, r7
 801aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaea:	4770      	bx	lr
 801aaec:	20008c74 	.word	0x20008c74

0801aaf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b084      	sub	sp, #16
 801aaf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801aafa:	2300      	movs	r3, #0
 801aafc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801aafe:	4b42      	ldr	r3, [pc, #264]	@ (801ac08 <xTaskResumeAll+0x118>)
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d10b      	bne.n	801ab1e <xTaskResumeAll+0x2e>
	__asm volatile
 801ab06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab0a:	f383 8811 	msr	BASEPRI, r3
 801ab0e:	f3bf 8f6f 	isb	sy
 801ab12:	f3bf 8f4f 	dsb	sy
 801ab16:	603b      	str	r3, [r7, #0]
}
 801ab18:	bf00      	nop
 801ab1a:	bf00      	nop
 801ab1c:	e7fd      	b.n	801ab1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801ab1e:	f001 fc63 	bl	801c3e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801ab22:	4b39      	ldr	r3, [pc, #228]	@ (801ac08 <xTaskResumeAll+0x118>)
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	3b01      	subs	r3, #1
 801ab28:	4a37      	ldr	r2, [pc, #220]	@ (801ac08 <xTaskResumeAll+0x118>)
 801ab2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ab2c:	4b36      	ldr	r3, [pc, #216]	@ (801ac08 <xTaskResumeAll+0x118>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d162      	bne.n	801abfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801ab34:	4b35      	ldr	r3, [pc, #212]	@ (801ac0c <xTaskResumeAll+0x11c>)
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d05e      	beq.n	801abfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ab3c:	e02f      	b.n	801ab9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ab3e:	4b34      	ldr	r3, [pc, #208]	@ (801ac10 <xTaskResumeAll+0x120>)
 801ab40:	68db      	ldr	r3, [r3, #12]
 801ab42:	68db      	ldr	r3, [r3, #12]
 801ab44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	3318      	adds	r3, #24
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f7fe fd5e 	bl	801960c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	3304      	adds	r3, #4
 801ab54:	4618      	mov	r0, r3
 801ab56:	f7fe fd59 	bl	801960c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab5e:	4b2d      	ldr	r3, [pc, #180]	@ (801ac14 <xTaskResumeAll+0x124>)
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	429a      	cmp	r2, r3
 801ab64:	d903      	bls.n	801ab6e <xTaskResumeAll+0x7e>
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab6a:	4a2a      	ldr	r2, [pc, #168]	@ (801ac14 <xTaskResumeAll+0x124>)
 801ab6c:	6013      	str	r3, [r2, #0]
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab72:	4613      	mov	r3, r2
 801ab74:	009b      	lsls	r3, r3, #2
 801ab76:	4413      	add	r3, r2
 801ab78:	009b      	lsls	r3, r3, #2
 801ab7a:	4a27      	ldr	r2, [pc, #156]	@ (801ac18 <xTaskResumeAll+0x128>)
 801ab7c:	441a      	add	r2, r3
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	3304      	adds	r3, #4
 801ab82:	4619      	mov	r1, r3
 801ab84:	4610      	mov	r0, r2
 801ab86:	f7fe fce4 	bl	8019552 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab8e:	4b23      	ldr	r3, [pc, #140]	@ (801ac1c <xTaskResumeAll+0x12c>)
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d302      	bcc.n	801ab9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801ab98:	4b21      	ldr	r3, [pc, #132]	@ (801ac20 <xTaskResumeAll+0x130>)
 801ab9a:	2201      	movs	r2, #1
 801ab9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ab9e:	4b1c      	ldr	r3, [pc, #112]	@ (801ac10 <xTaskResumeAll+0x120>)
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d1cb      	bne.n	801ab3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d001      	beq.n	801abb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801abac:	f000 fb78 	bl	801b2a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801abb0:	4b1c      	ldr	r3, [pc, #112]	@ (801ac24 <xTaskResumeAll+0x134>)
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d010      	beq.n	801abde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801abbc:	f000 f858 	bl	801ac70 <xTaskIncrementTick>
 801abc0:	4603      	mov	r3, r0
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d002      	beq.n	801abcc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801abc6:	4b16      	ldr	r3, [pc, #88]	@ (801ac20 <xTaskResumeAll+0x130>)
 801abc8:	2201      	movs	r2, #1
 801abca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	3b01      	subs	r3, #1
 801abd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d1f1      	bne.n	801abbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801abd8:	4b12      	ldr	r3, [pc, #72]	@ (801ac24 <xTaskResumeAll+0x134>)
 801abda:	2200      	movs	r2, #0
 801abdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801abde:	4b10      	ldr	r3, [pc, #64]	@ (801ac20 <xTaskResumeAll+0x130>)
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d009      	beq.n	801abfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801abe6:	2301      	movs	r3, #1
 801abe8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801abea:	4b0f      	ldr	r3, [pc, #60]	@ (801ac28 <xTaskResumeAll+0x138>)
 801abec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801abf0:	601a      	str	r2, [r3, #0]
 801abf2:	f3bf 8f4f 	dsb	sy
 801abf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801abfa:	f001 fc27 	bl	801c44c <vPortExitCritical>

	return xAlreadyYielded;
 801abfe:	68bb      	ldr	r3, [r7, #8]
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3710      	adds	r7, #16
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bd80      	pop	{r7, pc}
 801ac08:	20008c74 	.word	0x20008c74
 801ac0c:	20008c4c 	.word	0x20008c4c
 801ac10:	20008c0c 	.word	0x20008c0c
 801ac14:	20008c54 	.word	0x20008c54
 801ac18:	2000877c 	.word	0x2000877c
 801ac1c:	20008778 	.word	0x20008778
 801ac20:	20008c60 	.word	0x20008c60
 801ac24:	20008c5c 	.word	0x20008c5c
 801ac28:	e000ed04 	.word	0xe000ed04

0801ac2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801ac2c:	b480      	push	{r7}
 801ac2e:	b083      	sub	sp, #12
 801ac30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801ac32:	4b05      	ldr	r3, [pc, #20]	@ (801ac48 <xTaskGetTickCount+0x1c>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801ac38:	687b      	ldr	r3, [r7, #4]
}
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	370c      	adds	r7, #12
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac44:	4770      	bx	lr
 801ac46:	bf00      	nop
 801ac48:	20008c50 	.word	0x20008c50

0801ac4c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801ac4c:	b580      	push	{r7, lr}
 801ac4e:	b082      	sub	sp, #8
 801ac50:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ac52:	f001 fca9 	bl	801c5a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801ac56:	2300      	movs	r3, #0
 801ac58:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801ac5a:	4b04      	ldr	r3, [pc, #16]	@ (801ac6c <xTaskGetTickCountFromISR+0x20>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801ac60:	683b      	ldr	r3, [r7, #0]
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	3708      	adds	r7, #8
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd80      	pop	{r7, pc}
 801ac6a:	bf00      	nop
 801ac6c:	20008c50 	.word	0x20008c50

0801ac70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b086      	sub	sp, #24
 801ac74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801ac76:	2300      	movs	r3, #0
 801ac78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ac7a:	4b4f      	ldr	r3, [pc, #316]	@ (801adb8 <xTaskIncrementTick+0x148>)
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	f040 8090 	bne.w	801ada4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801ac84:	4b4d      	ldr	r3, [pc, #308]	@ (801adbc <xTaskIncrementTick+0x14c>)
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	3301      	adds	r3, #1
 801ac8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801ac8c:	4a4b      	ldr	r2, [pc, #300]	@ (801adbc <xTaskIncrementTick+0x14c>)
 801ac8e:	693b      	ldr	r3, [r7, #16]
 801ac90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801ac92:	693b      	ldr	r3, [r7, #16]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d121      	bne.n	801acdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801ac98:	4b49      	ldr	r3, [pc, #292]	@ (801adc0 <xTaskIncrementTick+0x150>)
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d00b      	beq.n	801acba <xTaskIncrementTick+0x4a>
	__asm volatile
 801aca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aca6:	f383 8811 	msr	BASEPRI, r3
 801acaa:	f3bf 8f6f 	isb	sy
 801acae:	f3bf 8f4f 	dsb	sy
 801acb2:	603b      	str	r3, [r7, #0]
}
 801acb4:	bf00      	nop
 801acb6:	bf00      	nop
 801acb8:	e7fd      	b.n	801acb6 <xTaskIncrementTick+0x46>
 801acba:	4b41      	ldr	r3, [pc, #260]	@ (801adc0 <xTaskIncrementTick+0x150>)
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	60fb      	str	r3, [r7, #12]
 801acc0:	4b40      	ldr	r3, [pc, #256]	@ (801adc4 <xTaskIncrementTick+0x154>)
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	4a3e      	ldr	r2, [pc, #248]	@ (801adc0 <xTaskIncrementTick+0x150>)
 801acc6:	6013      	str	r3, [r2, #0]
 801acc8:	4a3e      	ldr	r2, [pc, #248]	@ (801adc4 <xTaskIncrementTick+0x154>)
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	6013      	str	r3, [r2, #0]
 801acce:	4b3e      	ldr	r3, [pc, #248]	@ (801adc8 <xTaskIncrementTick+0x158>)
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	3301      	adds	r3, #1
 801acd4:	4a3c      	ldr	r2, [pc, #240]	@ (801adc8 <xTaskIncrementTick+0x158>)
 801acd6:	6013      	str	r3, [r2, #0]
 801acd8:	f000 fae2 	bl	801b2a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801acdc:	4b3b      	ldr	r3, [pc, #236]	@ (801adcc <xTaskIncrementTick+0x15c>)
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	693a      	ldr	r2, [r7, #16]
 801ace2:	429a      	cmp	r2, r3
 801ace4:	d349      	bcc.n	801ad7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ace6:	4b36      	ldr	r3, [pc, #216]	@ (801adc0 <xTaskIncrementTick+0x150>)
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d104      	bne.n	801acfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801acf0:	4b36      	ldr	r3, [pc, #216]	@ (801adcc <xTaskIncrementTick+0x15c>)
 801acf2:	f04f 32ff 	mov.w	r2, #4294967295
 801acf6:	601a      	str	r2, [r3, #0]
					break;
 801acf8:	e03f      	b.n	801ad7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801acfa:	4b31      	ldr	r3, [pc, #196]	@ (801adc0 <xTaskIncrementTick+0x150>)
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	68db      	ldr	r3, [r3, #12]
 801ad00:	68db      	ldr	r3, [r3, #12]
 801ad02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801ad04:	68bb      	ldr	r3, [r7, #8]
 801ad06:	685b      	ldr	r3, [r3, #4]
 801ad08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801ad0a:	693a      	ldr	r2, [r7, #16]
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	429a      	cmp	r2, r3
 801ad10:	d203      	bcs.n	801ad1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801ad12:	4a2e      	ldr	r2, [pc, #184]	@ (801adcc <xTaskIncrementTick+0x15c>)
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801ad18:	e02f      	b.n	801ad7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ad1a:	68bb      	ldr	r3, [r7, #8]
 801ad1c:	3304      	adds	r3, #4
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f7fe fc74 	bl	801960c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801ad24:	68bb      	ldr	r3, [r7, #8]
 801ad26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d004      	beq.n	801ad36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	3318      	adds	r3, #24
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7fe fc6b 	bl	801960c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801ad36:	68bb      	ldr	r3, [r7, #8]
 801ad38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad3a:	4b25      	ldr	r3, [pc, #148]	@ (801add0 <xTaskIncrementTick+0x160>)
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	429a      	cmp	r2, r3
 801ad40:	d903      	bls.n	801ad4a <xTaskIncrementTick+0xda>
 801ad42:	68bb      	ldr	r3, [r7, #8]
 801ad44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad46:	4a22      	ldr	r2, [pc, #136]	@ (801add0 <xTaskIncrementTick+0x160>)
 801ad48:	6013      	str	r3, [r2, #0]
 801ad4a:	68bb      	ldr	r3, [r7, #8]
 801ad4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad4e:	4613      	mov	r3, r2
 801ad50:	009b      	lsls	r3, r3, #2
 801ad52:	4413      	add	r3, r2
 801ad54:	009b      	lsls	r3, r3, #2
 801ad56:	4a1f      	ldr	r2, [pc, #124]	@ (801add4 <xTaskIncrementTick+0x164>)
 801ad58:	441a      	add	r2, r3
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	3304      	adds	r3, #4
 801ad5e:	4619      	mov	r1, r3
 801ad60:	4610      	mov	r0, r2
 801ad62:	f7fe fbf6 	bl	8019552 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ad66:	68bb      	ldr	r3, [r7, #8]
 801ad68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad6a:	4b1b      	ldr	r3, [pc, #108]	@ (801add8 <xTaskIncrementTick+0x168>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad70:	429a      	cmp	r2, r3
 801ad72:	d3b8      	bcc.n	801ace6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801ad74:	2301      	movs	r3, #1
 801ad76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ad78:	e7b5      	b.n	801ace6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801ad7a:	4b17      	ldr	r3, [pc, #92]	@ (801add8 <xTaskIncrementTick+0x168>)
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad80:	4914      	ldr	r1, [pc, #80]	@ (801add4 <xTaskIncrementTick+0x164>)
 801ad82:	4613      	mov	r3, r2
 801ad84:	009b      	lsls	r3, r3, #2
 801ad86:	4413      	add	r3, r2
 801ad88:	009b      	lsls	r3, r3, #2
 801ad8a:	440b      	add	r3, r1
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	2b01      	cmp	r3, #1
 801ad90:	d901      	bls.n	801ad96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801ad92:	2301      	movs	r3, #1
 801ad94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801ad96:	4b11      	ldr	r3, [pc, #68]	@ (801addc <xTaskIncrementTick+0x16c>)
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d007      	beq.n	801adae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801ad9e:	2301      	movs	r3, #1
 801ada0:	617b      	str	r3, [r7, #20]
 801ada2:	e004      	b.n	801adae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801ada4:	4b0e      	ldr	r3, [pc, #56]	@ (801ade0 <xTaskIncrementTick+0x170>)
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	3301      	adds	r3, #1
 801adaa:	4a0d      	ldr	r2, [pc, #52]	@ (801ade0 <xTaskIncrementTick+0x170>)
 801adac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801adae:	697b      	ldr	r3, [r7, #20]
}
 801adb0:	4618      	mov	r0, r3
 801adb2:	3718      	adds	r7, #24
 801adb4:	46bd      	mov	sp, r7
 801adb6:	bd80      	pop	{r7, pc}
 801adb8:	20008c74 	.word	0x20008c74
 801adbc:	20008c50 	.word	0x20008c50
 801adc0:	20008c04 	.word	0x20008c04
 801adc4:	20008c08 	.word	0x20008c08
 801adc8:	20008c64 	.word	0x20008c64
 801adcc:	20008c6c 	.word	0x20008c6c
 801add0:	20008c54 	.word	0x20008c54
 801add4:	2000877c 	.word	0x2000877c
 801add8:	20008778 	.word	0x20008778
 801addc:	20008c60 	.word	0x20008c60
 801ade0:	20008c5c 	.word	0x20008c5c

0801ade4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801ade4:	b480      	push	{r7}
 801ade6:	b085      	sub	sp, #20
 801ade8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801adea:	4b2b      	ldr	r3, [pc, #172]	@ (801ae98 <vTaskSwitchContext+0xb4>)
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d003      	beq.n	801adfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801adf2:	4b2a      	ldr	r3, [pc, #168]	@ (801ae9c <vTaskSwitchContext+0xb8>)
 801adf4:	2201      	movs	r2, #1
 801adf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801adf8:	e047      	b.n	801ae8a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801adfa:	4b28      	ldr	r3, [pc, #160]	@ (801ae9c <vTaskSwitchContext+0xb8>)
 801adfc:	2200      	movs	r2, #0
 801adfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ae00:	4b27      	ldr	r3, [pc, #156]	@ (801aea0 <vTaskSwitchContext+0xbc>)
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	60fb      	str	r3, [r7, #12]
 801ae06:	e011      	b.n	801ae2c <vTaskSwitchContext+0x48>
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d10b      	bne.n	801ae26 <vTaskSwitchContext+0x42>
	__asm volatile
 801ae0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae12:	f383 8811 	msr	BASEPRI, r3
 801ae16:	f3bf 8f6f 	isb	sy
 801ae1a:	f3bf 8f4f 	dsb	sy
 801ae1e:	607b      	str	r3, [r7, #4]
}
 801ae20:	bf00      	nop
 801ae22:	bf00      	nop
 801ae24:	e7fd      	b.n	801ae22 <vTaskSwitchContext+0x3e>
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	3b01      	subs	r3, #1
 801ae2a:	60fb      	str	r3, [r7, #12]
 801ae2c:	491d      	ldr	r1, [pc, #116]	@ (801aea4 <vTaskSwitchContext+0xc0>)
 801ae2e:	68fa      	ldr	r2, [r7, #12]
 801ae30:	4613      	mov	r3, r2
 801ae32:	009b      	lsls	r3, r3, #2
 801ae34:	4413      	add	r3, r2
 801ae36:	009b      	lsls	r3, r3, #2
 801ae38:	440b      	add	r3, r1
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d0e3      	beq.n	801ae08 <vTaskSwitchContext+0x24>
 801ae40:	68fa      	ldr	r2, [r7, #12]
 801ae42:	4613      	mov	r3, r2
 801ae44:	009b      	lsls	r3, r3, #2
 801ae46:	4413      	add	r3, r2
 801ae48:	009b      	lsls	r3, r3, #2
 801ae4a:	4a16      	ldr	r2, [pc, #88]	@ (801aea4 <vTaskSwitchContext+0xc0>)
 801ae4c:	4413      	add	r3, r2
 801ae4e:	60bb      	str	r3, [r7, #8]
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	685b      	ldr	r3, [r3, #4]
 801ae54:	685a      	ldr	r2, [r3, #4]
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	605a      	str	r2, [r3, #4]
 801ae5a:	68bb      	ldr	r3, [r7, #8]
 801ae5c:	685a      	ldr	r2, [r3, #4]
 801ae5e:	68bb      	ldr	r3, [r7, #8]
 801ae60:	3308      	adds	r3, #8
 801ae62:	429a      	cmp	r2, r3
 801ae64:	d104      	bne.n	801ae70 <vTaskSwitchContext+0x8c>
 801ae66:	68bb      	ldr	r3, [r7, #8]
 801ae68:	685b      	ldr	r3, [r3, #4]
 801ae6a:	685a      	ldr	r2, [r3, #4]
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	605a      	str	r2, [r3, #4]
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	685b      	ldr	r3, [r3, #4]
 801ae74:	68db      	ldr	r3, [r3, #12]
 801ae76:	4a0c      	ldr	r2, [pc, #48]	@ (801aea8 <vTaskSwitchContext+0xc4>)
 801ae78:	6013      	str	r3, [r2, #0]
 801ae7a:	4a09      	ldr	r2, [pc, #36]	@ (801aea0 <vTaskSwitchContext+0xbc>)
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801ae80:	4b09      	ldr	r3, [pc, #36]	@ (801aea8 <vTaskSwitchContext+0xc4>)
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	3354      	adds	r3, #84	@ 0x54
 801ae86:	4a09      	ldr	r2, [pc, #36]	@ (801aeac <vTaskSwitchContext+0xc8>)
 801ae88:	6013      	str	r3, [r2, #0]
}
 801ae8a:	bf00      	nop
 801ae8c:	3714      	adds	r7, #20
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae94:	4770      	bx	lr
 801ae96:	bf00      	nop
 801ae98:	20008c74 	.word	0x20008c74
 801ae9c:	20008c60 	.word	0x20008c60
 801aea0:	20008c54 	.word	0x20008c54
 801aea4:	2000877c 	.word	0x2000877c
 801aea8:	20008778 	.word	0x20008778
 801aeac:	20000088 	.word	0x20000088

0801aeb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	b084      	sub	sp, #16
 801aeb4:	af00      	add	r7, sp, #0
 801aeb6:	6078      	str	r0, [r7, #4]
 801aeb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d10b      	bne.n	801aed8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801aec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aec4:	f383 8811 	msr	BASEPRI, r3
 801aec8:	f3bf 8f6f 	isb	sy
 801aecc:	f3bf 8f4f 	dsb	sy
 801aed0:	60fb      	str	r3, [r7, #12]
}
 801aed2:	bf00      	nop
 801aed4:	bf00      	nop
 801aed6:	e7fd      	b.n	801aed4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801aed8:	4b07      	ldr	r3, [pc, #28]	@ (801aef8 <vTaskPlaceOnEventList+0x48>)
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	3318      	adds	r3, #24
 801aede:	4619      	mov	r1, r3
 801aee0:	6878      	ldr	r0, [r7, #4]
 801aee2:	f7fe fb5a 	bl	801959a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801aee6:	2101      	movs	r1, #1
 801aee8:	6838      	ldr	r0, [r7, #0]
 801aeea:	f000 fd9f 	bl	801ba2c <prvAddCurrentTaskToDelayedList>
}
 801aeee:	bf00      	nop
 801aef0:	3710      	adds	r7, #16
 801aef2:	46bd      	mov	sp, r7
 801aef4:	bd80      	pop	{r7, pc}
 801aef6:	bf00      	nop
 801aef8:	20008778 	.word	0x20008778

0801aefc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b086      	sub	sp, #24
 801af00:	af00      	add	r7, sp, #0
 801af02:	60f8      	str	r0, [r7, #12]
 801af04:	60b9      	str	r1, [r7, #8]
 801af06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d10b      	bne.n	801af26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801af0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af12:	f383 8811 	msr	BASEPRI, r3
 801af16:	f3bf 8f6f 	isb	sy
 801af1a:	f3bf 8f4f 	dsb	sy
 801af1e:	617b      	str	r3, [r7, #20]
}
 801af20:	bf00      	nop
 801af22:	bf00      	nop
 801af24:	e7fd      	b.n	801af22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801af26:	4b0a      	ldr	r3, [pc, #40]	@ (801af50 <vTaskPlaceOnEventListRestricted+0x54>)
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	3318      	adds	r3, #24
 801af2c:	4619      	mov	r1, r3
 801af2e:	68f8      	ldr	r0, [r7, #12]
 801af30:	f7fe fb0f 	bl	8019552 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d002      	beq.n	801af40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801af3a:	f04f 33ff 	mov.w	r3, #4294967295
 801af3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801af40:	6879      	ldr	r1, [r7, #4]
 801af42:	68b8      	ldr	r0, [r7, #8]
 801af44:	f000 fd72 	bl	801ba2c <prvAddCurrentTaskToDelayedList>
	}
 801af48:	bf00      	nop
 801af4a:	3718      	adds	r7, #24
 801af4c:	46bd      	mov	sp, r7
 801af4e:	bd80      	pop	{r7, pc}
 801af50:	20008778 	.word	0x20008778

0801af54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b086      	sub	sp, #24
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	68db      	ldr	r3, [r3, #12]
 801af60:	68db      	ldr	r3, [r3, #12]
 801af62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801af64:	693b      	ldr	r3, [r7, #16]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d10b      	bne.n	801af82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801af6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af6e:	f383 8811 	msr	BASEPRI, r3
 801af72:	f3bf 8f6f 	isb	sy
 801af76:	f3bf 8f4f 	dsb	sy
 801af7a:	60fb      	str	r3, [r7, #12]
}
 801af7c:	bf00      	nop
 801af7e:	bf00      	nop
 801af80:	e7fd      	b.n	801af7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801af82:	693b      	ldr	r3, [r7, #16]
 801af84:	3318      	adds	r3, #24
 801af86:	4618      	mov	r0, r3
 801af88:	f7fe fb40 	bl	801960c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801af8c:	4b1d      	ldr	r3, [pc, #116]	@ (801b004 <xTaskRemoveFromEventList+0xb0>)
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d11d      	bne.n	801afd0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801af94:	693b      	ldr	r3, [r7, #16]
 801af96:	3304      	adds	r3, #4
 801af98:	4618      	mov	r0, r3
 801af9a:	f7fe fb37 	bl	801960c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801af9e:	693b      	ldr	r3, [r7, #16]
 801afa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afa2:	4b19      	ldr	r3, [pc, #100]	@ (801b008 <xTaskRemoveFromEventList+0xb4>)
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	429a      	cmp	r2, r3
 801afa8:	d903      	bls.n	801afb2 <xTaskRemoveFromEventList+0x5e>
 801afaa:	693b      	ldr	r3, [r7, #16]
 801afac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afae:	4a16      	ldr	r2, [pc, #88]	@ (801b008 <xTaskRemoveFromEventList+0xb4>)
 801afb0:	6013      	str	r3, [r2, #0]
 801afb2:	693b      	ldr	r3, [r7, #16]
 801afb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afb6:	4613      	mov	r3, r2
 801afb8:	009b      	lsls	r3, r3, #2
 801afba:	4413      	add	r3, r2
 801afbc:	009b      	lsls	r3, r3, #2
 801afbe:	4a13      	ldr	r2, [pc, #76]	@ (801b00c <xTaskRemoveFromEventList+0xb8>)
 801afc0:	441a      	add	r2, r3
 801afc2:	693b      	ldr	r3, [r7, #16]
 801afc4:	3304      	adds	r3, #4
 801afc6:	4619      	mov	r1, r3
 801afc8:	4610      	mov	r0, r2
 801afca:	f7fe fac2 	bl	8019552 <vListInsertEnd>
 801afce:	e005      	b.n	801afdc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801afd0:	693b      	ldr	r3, [r7, #16]
 801afd2:	3318      	adds	r3, #24
 801afd4:	4619      	mov	r1, r3
 801afd6:	480e      	ldr	r0, [pc, #56]	@ (801b010 <xTaskRemoveFromEventList+0xbc>)
 801afd8:	f7fe fabb 	bl	8019552 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801afdc:	693b      	ldr	r3, [r7, #16]
 801afde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afe0:	4b0c      	ldr	r3, [pc, #48]	@ (801b014 <xTaskRemoveFromEventList+0xc0>)
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afe6:	429a      	cmp	r2, r3
 801afe8:	d905      	bls.n	801aff6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801afea:	2301      	movs	r3, #1
 801afec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801afee:	4b0a      	ldr	r3, [pc, #40]	@ (801b018 <xTaskRemoveFromEventList+0xc4>)
 801aff0:	2201      	movs	r2, #1
 801aff2:	601a      	str	r2, [r3, #0]
 801aff4:	e001      	b.n	801affa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801aff6:	2300      	movs	r3, #0
 801aff8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801affa:	697b      	ldr	r3, [r7, #20]
}
 801affc:	4618      	mov	r0, r3
 801affe:	3718      	adds	r7, #24
 801b000:	46bd      	mov	sp, r7
 801b002:	bd80      	pop	{r7, pc}
 801b004:	20008c74 	.word	0x20008c74
 801b008:	20008c54 	.word	0x20008c54
 801b00c:	2000877c 	.word	0x2000877c
 801b010:	20008c0c 	.word	0x20008c0c
 801b014:	20008778 	.word	0x20008778
 801b018:	20008c60 	.word	0x20008c60

0801b01c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b01c:	b480      	push	{r7}
 801b01e:	b083      	sub	sp, #12
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b024:	4b06      	ldr	r3, [pc, #24]	@ (801b040 <vTaskInternalSetTimeOutState+0x24>)
 801b026:	681a      	ldr	r2, [r3, #0]
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b02c:	4b05      	ldr	r3, [pc, #20]	@ (801b044 <vTaskInternalSetTimeOutState+0x28>)
 801b02e:	681a      	ldr	r2, [r3, #0]
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	605a      	str	r2, [r3, #4]
}
 801b034:	bf00      	nop
 801b036:	370c      	adds	r7, #12
 801b038:	46bd      	mov	sp, r7
 801b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b03e:	4770      	bx	lr
 801b040:	20008c64 	.word	0x20008c64
 801b044:	20008c50 	.word	0x20008c50

0801b048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b088      	sub	sp, #32
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
 801b050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d10b      	bne.n	801b070 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801b058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b05c:	f383 8811 	msr	BASEPRI, r3
 801b060:	f3bf 8f6f 	isb	sy
 801b064:	f3bf 8f4f 	dsb	sy
 801b068:	613b      	str	r3, [r7, #16]
}
 801b06a:	bf00      	nop
 801b06c:	bf00      	nop
 801b06e:	e7fd      	b.n	801b06c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b070:	683b      	ldr	r3, [r7, #0]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d10b      	bne.n	801b08e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801b076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b07a:	f383 8811 	msr	BASEPRI, r3
 801b07e:	f3bf 8f6f 	isb	sy
 801b082:	f3bf 8f4f 	dsb	sy
 801b086:	60fb      	str	r3, [r7, #12]
}
 801b088:	bf00      	nop
 801b08a:	bf00      	nop
 801b08c:	e7fd      	b.n	801b08a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801b08e:	f001 f9ab 	bl	801c3e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b092:	4b1d      	ldr	r3, [pc, #116]	@ (801b108 <xTaskCheckForTimeOut+0xc0>)
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	685b      	ldr	r3, [r3, #4]
 801b09c:	69ba      	ldr	r2, [r7, #24]
 801b09e:	1ad3      	subs	r3, r2, r3
 801b0a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b0aa:	d102      	bne.n	801b0b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	61fb      	str	r3, [r7, #28]
 801b0b0:	e023      	b.n	801b0fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681a      	ldr	r2, [r3, #0]
 801b0b6:	4b15      	ldr	r3, [pc, #84]	@ (801b10c <xTaskCheckForTimeOut+0xc4>)
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	429a      	cmp	r2, r3
 801b0bc:	d007      	beq.n	801b0ce <xTaskCheckForTimeOut+0x86>
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	685b      	ldr	r3, [r3, #4]
 801b0c2:	69ba      	ldr	r2, [r7, #24]
 801b0c4:	429a      	cmp	r2, r3
 801b0c6:	d302      	bcc.n	801b0ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b0c8:	2301      	movs	r3, #1
 801b0ca:	61fb      	str	r3, [r7, #28]
 801b0cc:	e015      	b.n	801b0fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	697a      	ldr	r2, [r7, #20]
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	d20b      	bcs.n	801b0f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b0d8:	683b      	ldr	r3, [r7, #0]
 801b0da:	681a      	ldr	r2, [r3, #0]
 801b0dc:	697b      	ldr	r3, [r7, #20]
 801b0de:	1ad2      	subs	r2, r2, r3
 801b0e0:	683b      	ldr	r3, [r7, #0]
 801b0e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b0e4:	6878      	ldr	r0, [r7, #4]
 801b0e6:	f7ff ff99 	bl	801b01c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	61fb      	str	r3, [r7, #28]
 801b0ee:	e004      	b.n	801b0fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801b0f0:	683b      	ldr	r3, [r7, #0]
 801b0f2:	2200      	movs	r2, #0
 801b0f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b0f6:	2301      	movs	r3, #1
 801b0f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b0fa:	f001 f9a7 	bl	801c44c <vPortExitCritical>

	return xReturn;
 801b0fe:	69fb      	ldr	r3, [r7, #28]
}
 801b100:	4618      	mov	r0, r3
 801b102:	3720      	adds	r7, #32
 801b104:	46bd      	mov	sp, r7
 801b106:	bd80      	pop	{r7, pc}
 801b108:	20008c50 	.word	0x20008c50
 801b10c:	20008c64 	.word	0x20008c64

0801b110 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b110:	b480      	push	{r7}
 801b112:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b114:	4b03      	ldr	r3, [pc, #12]	@ (801b124 <vTaskMissedYield+0x14>)
 801b116:	2201      	movs	r2, #1
 801b118:	601a      	str	r2, [r3, #0]
}
 801b11a:	bf00      	nop
 801b11c:	46bd      	mov	sp, r7
 801b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b122:	4770      	bx	lr
 801b124:	20008c60 	.word	0x20008c60

0801b128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b128:	b580      	push	{r7, lr}
 801b12a:	b082      	sub	sp, #8
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b130:	f000 f852 	bl	801b1d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b134:	4b06      	ldr	r3, [pc, #24]	@ (801b150 <prvIdleTask+0x28>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	2b01      	cmp	r3, #1
 801b13a:	d9f9      	bls.n	801b130 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b13c:	4b05      	ldr	r3, [pc, #20]	@ (801b154 <prvIdleTask+0x2c>)
 801b13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b142:	601a      	str	r2, [r3, #0]
 801b144:	f3bf 8f4f 	dsb	sy
 801b148:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b14c:	e7f0      	b.n	801b130 <prvIdleTask+0x8>
 801b14e:	bf00      	nop
 801b150:	2000877c 	.word	0x2000877c
 801b154:	e000ed04 	.word	0xe000ed04

0801b158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b15e:	2300      	movs	r3, #0
 801b160:	607b      	str	r3, [r7, #4]
 801b162:	e00c      	b.n	801b17e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b164:	687a      	ldr	r2, [r7, #4]
 801b166:	4613      	mov	r3, r2
 801b168:	009b      	lsls	r3, r3, #2
 801b16a:	4413      	add	r3, r2
 801b16c:	009b      	lsls	r3, r3, #2
 801b16e:	4a12      	ldr	r2, [pc, #72]	@ (801b1b8 <prvInitialiseTaskLists+0x60>)
 801b170:	4413      	add	r3, r2
 801b172:	4618      	mov	r0, r3
 801b174:	f7fe f9c0 	bl	80194f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	3301      	adds	r3, #1
 801b17c:	607b      	str	r3, [r7, #4]
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	2b37      	cmp	r3, #55	@ 0x37
 801b182:	d9ef      	bls.n	801b164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b184:	480d      	ldr	r0, [pc, #52]	@ (801b1bc <prvInitialiseTaskLists+0x64>)
 801b186:	f7fe f9b7 	bl	80194f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b18a:	480d      	ldr	r0, [pc, #52]	@ (801b1c0 <prvInitialiseTaskLists+0x68>)
 801b18c:	f7fe f9b4 	bl	80194f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b190:	480c      	ldr	r0, [pc, #48]	@ (801b1c4 <prvInitialiseTaskLists+0x6c>)
 801b192:	f7fe f9b1 	bl	80194f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b196:	480c      	ldr	r0, [pc, #48]	@ (801b1c8 <prvInitialiseTaskLists+0x70>)
 801b198:	f7fe f9ae 	bl	80194f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b19c:	480b      	ldr	r0, [pc, #44]	@ (801b1cc <prvInitialiseTaskLists+0x74>)
 801b19e:	f7fe f9ab 	bl	80194f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b1a2:	4b0b      	ldr	r3, [pc, #44]	@ (801b1d0 <prvInitialiseTaskLists+0x78>)
 801b1a4:	4a05      	ldr	r2, [pc, #20]	@ (801b1bc <prvInitialiseTaskLists+0x64>)
 801b1a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (801b1d4 <prvInitialiseTaskLists+0x7c>)
 801b1aa:	4a05      	ldr	r2, [pc, #20]	@ (801b1c0 <prvInitialiseTaskLists+0x68>)
 801b1ac:	601a      	str	r2, [r3, #0]
}
 801b1ae:	bf00      	nop
 801b1b0:	3708      	adds	r7, #8
 801b1b2:	46bd      	mov	sp, r7
 801b1b4:	bd80      	pop	{r7, pc}
 801b1b6:	bf00      	nop
 801b1b8:	2000877c 	.word	0x2000877c
 801b1bc:	20008bdc 	.word	0x20008bdc
 801b1c0:	20008bf0 	.word	0x20008bf0
 801b1c4:	20008c0c 	.word	0x20008c0c
 801b1c8:	20008c20 	.word	0x20008c20
 801b1cc:	20008c38 	.word	0x20008c38
 801b1d0:	20008c04 	.word	0x20008c04
 801b1d4:	20008c08 	.word	0x20008c08

0801b1d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b082      	sub	sp, #8
 801b1dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b1de:	e019      	b.n	801b214 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b1e0:	f001 f902 	bl	801c3e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b1e4:	4b10      	ldr	r3, [pc, #64]	@ (801b228 <prvCheckTasksWaitingTermination+0x50>)
 801b1e6:	68db      	ldr	r3, [r3, #12]
 801b1e8:	68db      	ldr	r3, [r3, #12]
 801b1ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	3304      	adds	r3, #4
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f7fe fa0b 	bl	801960c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b1f6:	4b0d      	ldr	r3, [pc, #52]	@ (801b22c <prvCheckTasksWaitingTermination+0x54>)
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	3b01      	subs	r3, #1
 801b1fc:	4a0b      	ldr	r2, [pc, #44]	@ (801b22c <prvCheckTasksWaitingTermination+0x54>)
 801b1fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b200:	4b0b      	ldr	r3, [pc, #44]	@ (801b230 <prvCheckTasksWaitingTermination+0x58>)
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	3b01      	subs	r3, #1
 801b206:	4a0a      	ldr	r2, [pc, #40]	@ (801b230 <prvCheckTasksWaitingTermination+0x58>)
 801b208:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b20a:	f001 f91f 	bl	801c44c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b20e:	6878      	ldr	r0, [r7, #4]
 801b210:	f000 f810 	bl	801b234 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b214:	4b06      	ldr	r3, [pc, #24]	@ (801b230 <prvCheckTasksWaitingTermination+0x58>)
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d1e1      	bne.n	801b1e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b21c:	bf00      	nop
 801b21e:	bf00      	nop
 801b220:	3708      	adds	r7, #8
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}
 801b226:	bf00      	nop
 801b228:	20008c20 	.word	0x20008c20
 801b22c:	20008c4c 	.word	0x20008c4c
 801b230:	20008c34 	.word	0x20008c34

0801b234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b234:	b580      	push	{r7, lr}
 801b236:	b084      	sub	sp, #16
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	3354      	adds	r3, #84	@ 0x54
 801b240:	4618      	mov	r0, r3
 801b242:	f001 fe57 	bl	801cef4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d108      	bne.n	801b262 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b254:	4618      	mov	r0, r3
 801b256:	f001 fab7 	bl	801c7c8 <vPortFree>
				vPortFree( pxTCB );
 801b25a:	6878      	ldr	r0, [r7, #4]
 801b25c:	f001 fab4 	bl	801c7c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b260:	e019      	b.n	801b296 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b268:	2b01      	cmp	r3, #1
 801b26a:	d103      	bne.n	801b274 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b26c:	6878      	ldr	r0, [r7, #4]
 801b26e:	f001 faab 	bl	801c7c8 <vPortFree>
	}
 801b272:	e010      	b.n	801b296 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b27a:	2b02      	cmp	r3, #2
 801b27c:	d00b      	beq.n	801b296 <prvDeleteTCB+0x62>
	__asm volatile
 801b27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b282:	f383 8811 	msr	BASEPRI, r3
 801b286:	f3bf 8f6f 	isb	sy
 801b28a:	f3bf 8f4f 	dsb	sy
 801b28e:	60fb      	str	r3, [r7, #12]
}
 801b290:	bf00      	nop
 801b292:	bf00      	nop
 801b294:	e7fd      	b.n	801b292 <prvDeleteTCB+0x5e>
	}
 801b296:	bf00      	nop
 801b298:	3710      	adds	r7, #16
 801b29a:	46bd      	mov	sp, r7
 801b29c:	bd80      	pop	{r7, pc}
	...

0801b2a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b2a0:	b480      	push	{r7}
 801b2a2:	b083      	sub	sp, #12
 801b2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b2a6:	4b0c      	ldr	r3, [pc, #48]	@ (801b2d8 <prvResetNextTaskUnblockTime+0x38>)
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d104      	bne.n	801b2ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b2b0:	4b0a      	ldr	r3, [pc, #40]	@ (801b2dc <prvResetNextTaskUnblockTime+0x3c>)
 801b2b2:	f04f 32ff 	mov.w	r2, #4294967295
 801b2b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b2b8:	e008      	b.n	801b2cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b2ba:	4b07      	ldr	r3, [pc, #28]	@ (801b2d8 <prvResetNextTaskUnblockTime+0x38>)
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	68db      	ldr	r3, [r3, #12]
 801b2c0:	68db      	ldr	r3, [r3, #12]
 801b2c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	685b      	ldr	r3, [r3, #4]
 801b2c8:	4a04      	ldr	r2, [pc, #16]	@ (801b2dc <prvResetNextTaskUnblockTime+0x3c>)
 801b2ca:	6013      	str	r3, [r2, #0]
}
 801b2cc:	bf00      	nop
 801b2ce:	370c      	adds	r7, #12
 801b2d0:	46bd      	mov	sp, r7
 801b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d6:	4770      	bx	lr
 801b2d8:	20008c04 	.word	0x20008c04
 801b2dc:	20008c6c 	.word	0x20008c6c

0801b2e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801b2e0:	b480      	push	{r7}
 801b2e2:	b083      	sub	sp, #12
 801b2e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801b2e6:	4b05      	ldr	r3, [pc, #20]	@ (801b2fc <xTaskGetCurrentTaskHandle+0x1c>)
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 801b2ec:	687b      	ldr	r3, [r7, #4]
	}
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	370c      	adds	r7, #12
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f8:	4770      	bx	lr
 801b2fa:	bf00      	nop
 801b2fc:	20008778 	.word	0x20008778

0801b300 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b300:	b480      	push	{r7}
 801b302:	b083      	sub	sp, #12
 801b304:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b306:	4b0b      	ldr	r3, [pc, #44]	@ (801b334 <xTaskGetSchedulerState+0x34>)
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d102      	bne.n	801b314 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b30e:	2301      	movs	r3, #1
 801b310:	607b      	str	r3, [r7, #4]
 801b312:	e008      	b.n	801b326 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b314:	4b08      	ldr	r3, [pc, #32]	@ (801b338 <xTaskGetSchedulerState+0x38>)
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d102      	bne.n	801b322 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b31c:	2302      	movs	r3, #2
 801b31e:	607b      	str	r3, [r7, #4]
 801b320:	e001      	b.n	801b326 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b322:	2300      	movs	r3, #0
 801b324:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b326:	687b      	ldr	r3, [r7, #4]
	}
 801b328:	4618      	mov	r0, r3
 801b32a:	370c      	adds	r7, #12
 801b32c:	46bd      	mov	sp, r7
 801b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b332:	4770      	bx	lr
 801b334:	20008c58 	.word	0x20008c58
 801b338:	20008c74 	.word	0x20008c74

0801b33c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b084      	sub	sp, #16
 801b340:	af00      	add	r7, sp, #0
 801b342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b348:	2300      	movs	r3, #0
 801b34a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d051      	beq.n	801b3f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b352:	68bb      	ldr	r3, [r7, #8]
 801b354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b356:	4b2a      	ldr	r3, [pc, #168]	@ (801b400 <xTaskPriorityInherit+0xc4>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b35c:	429a      	cmp	r2, r3
 801b35e:	d241      	bcs.n	801b3e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b360:	68bb      	ldr	r3, [r7, #8]
 801b362:	699b      	ldr	r3, [r3, #24]
 801b364:	2b00      	cmp	r3, #0
 801b366:	db06      	blt.n	801b376 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b368:	4b25      	ldr	r3, [pc, #148]	@ (801b400 <xTaskPriorityInherit+0xc4>)
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b36e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b372:	68bb      	ldr	r3, [r7, #8]
 801b374:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b376:	68bb      	ldr	r3, [r7, #8]
 801b378:	6959      	ldr	r1, [r3, #20]
 801b37a:	68bb      	ldr	r3, [r7, #8]
 801b37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b37e:	4613      	mov	r3, r2
 801b380:	009b      	lsls	r3, r3, #2
 801b382:	4413      	add	r3, r2
 801b384:	009b      	lsls	r3, r3, #2
 801b386:	4a1f      	ldr	r2, [pc, #124]	@ (801b404 <xTaskPriorityInherit+0xc8>)
 801b388:	4413      	add	r3, r2
 801b38a:	4299      	cmp	r1, r3
 801b38c:	d122      	bne.n	801b3d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b38e:	68bb      	ldr	r3, [r7, #8]
 801b390:	3304      	adds	r3, #4
 801b392:	4618      	mov	r0, r3
 801b394:	f7fe f93a 	bl	801960c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b398:	4b19      	ldr	r3, [pc, #100]	@ (801b400 <xTaskPriorityInherit+0xc4>)
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b39e:	68bb      	ldr	r3, [r7, #8]
 801b3a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b3a2:	68bb      	ldr	r3, [r7, #8]
 801b3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3a6:	4b18      	ldr	r3, [pc, #96]	@ (801b408 <xTaskPriorityInherit+0xcc>)
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	429a      	cmp	r2, r3
 801b3ac:	d903      	bls.n	801b3b6 <xTaskPriorityInherit+0x7a>
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3b2:	4a15      	ldr	r2, [pc, #84]	@ (801b408 <xTaskPriorityInherit+0xcc>)
 801b3b4:	6013      	str	r3, [r2, #0]
 801b3b6:	68bb      	ldr	r3, [r7, #8]
 801b3b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3ba:	4613      	mov	r3, r2
 801b3bc:	009b      	lsls	r3, r3, #2
 801b3be:	4413      	add	r3, r2
 801b3c0:	009b      	lsls	r3, r3, #2
 801b3c2:	4a10      	ldr	r2, [pc, #64]	@ (801b404 <xTaskPriorityInherit+0xc8>)
 801b3c4:	441a      	add	r2, r3
 801b3c6:	68bb      	ldr	r3, [r7, #8]
 801b3c8:	3304      	adds	r3, #4
 801b3ca:	4619      	mov	r1, r3
 801b3cc:	4610      	mov	r0, r2
 801b3ce:	f7fe f8c0 	bl	8019552 <vListInsertEnd>
 801b3d2:	e004      	b.n	801b3de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b3d4:	4b0a      	ldr	r3, [pc, #40]	@ (801b400 <xTaskPriorityInherit+0xc4>)
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b3de:	2301      	movs	r3, #1
 801b3e0:	60fb      	str	r3, [r7, #12]
 801b3e2:	e008      	b.n	801b3f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b3e8:	4b05      	ldr	r3, [pc, #20]	@ (801b400 <xTaskPriorityInherit+0xc4>)
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	d201      	bcs.n	801b3f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b3f2:	2301      	movs	r3, #1
 801b3f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b3f6:	68fb      	ldr	r3, [r7, #12]
	}
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	3710      	adds	r7, #16
 801b3fc:	46bd      	mov	sp, r7
 801b3fe:	bd80      	pop	{r7, pc}
 801b400:	20008778 	.word	0x20008778
 801b404:	2000877c 	.word	0x2000877c
 801b408:	20008c54 	.word	0x20008c54

0801b40c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b086      	sub	sp, #24
 801b410:	af00      	add	r7, sp, #0
 801b412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b418:	2300      	movs	r3, #0
 801b41a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d058      	beq.n	801b4d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b422:	4b2f      	ldr	r3, [pc, #188]	@ (801b4e0 <xTaskPriorityDisinherit+0xd4>)
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	693a      	ldr	r2, [r7, #16]
 801b428:	429a      	cmp	r2, r3
 801b42a:	d00b      	beq.n	801b444 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801b42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b430:	f383 8811 	msr	BASEPRI, r3
 801b434:	f3bf 8f6f 	isb	sy
 801b438:	f3bf 8f4f 	dsb	sy
 801b43c:	60fb      	str	r3, [r7, #12]
}
 801b43e:	bf00      	nop
 801b440:	bf00      	nop
 801b442:	e7fd      	b.n	801b440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b444:	693b      	ldr	r3, [r7, #16]
 801b446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d10b      	bne.n	801b464 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801b44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b450:	f383 8811 	msr	BASEPRI, r3
 801b454:	f3bf 8f6f 	isb	sy
 801b458:	f3bf 8f4f 	dsb	sy
 801b45c:	60bb      	str	r3, [r7, #8]
}
 801b45e:	bf00      	nop
 801b460:	bf00      	nop
 801b462:	e7fd      	b.n	801b460 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801b464:	693b      	ldr	r3, [r7, #16]
 801b466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b468:	1e5a      	subs	r2, r3, #1
 801b46a:	693b      	ldr	r3, [r7, #16]
 801b46c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b46e:	693b      	ldr	r3, [r7, #16]
 801b470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b472:	693b      	ldr	r3, [r7, #16]
 801b474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b476:	429a      	cmp	r2, r3
 801b478:	d02c      	beq.n	801b4d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b47a:	693b      	ldr	r3, [r7, #16]
 801b47c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d128      	bne.n	801b4d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b482:	693b      	ldr	r3, [r7, #16]
 801b484:	3304      	adds	r3, #4
 801b486:	4618      	mov	r0, r3
 801b488:	f7fe f8c0 	bl	801960c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b48c:	693b      	ldr	r3, [r7, #16]
 801b48e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b490:	693b      	ldr	r3, [r7, #16]
 801b492:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b494:	693b      	ldr	r3, [r7, #16]
 801b496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b498:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b49c:	693b      	ldr	r3, [r7, #16]
 801b49e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b4a4:	4b0f      	ldr	r3, [pc, #60]	@ (801b4e4 <xTaskPriorityDisinherit+0xd8>)
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	d903      	bls.n	801b4b4 <xTaskPriorityDisinherit+0xa8>
 801b4ac:	693b      	ldr	r3, [r7, #16]
 801b4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b4b0:	4a0c      	ldr	r2, [pc, #48]	@ (801b4e4 <xTaskPriorityDisinherit+0xd8>)
 801b4b2:	6013      	str	r3, [r2, #0]
 801b4b4:	693b      	ldr	r3, [r7, #16]
 801b4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b4b8:	4613      	mov	r3, r2
 801b4ba:	009b      	lsls	r3, r3, #2
 801b4bc:	4413      	add	r3, r2
 801b4be:	009b      	lsls	r3, r3, #2
 801b4c0:	4a09      	ldr	r2, [pc, #36]	@ (801b4e8 <xTaskPriorityDisinherit+0xdc>)
 801b4c2:	441a      	add	r2, r3
 801b4c4:	693b      	ldr	r3, [r7, #16]
 801b4c6:	3304      	adds	r3, #4
 801b4c8:	4619      	mov	r1, r3
 801b4ca:	4610      	mov	r0, r2
 801b4cc:	f7fe f841 	bl	8019552 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b4d0:	2301      	movs	r3, #1
 801b4d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b4d4:	697b      	ldr	r3, [r7, #20]
	}
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	3718      	adds	r7, #24
 801b4da:	46bd      	mov	sp, r7
 801b4dc:	bd80      	pop	{r7, pc}
 801b4de:	bf00      	nop
 801b4e0:	20008778 	.word	0x20008778
 801b4e4:	20008c54 	.word	0x20008c54
 801b4e8:	2000877c 	.word	0x2000877c

0801b4ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b088      	sub	sp, #32
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
 801b4f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b4fa:	2301      	movs	r3, #1
 801b4fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	2b00      	cmp	r3, #0
 801b502:	d06c      	beq.n	801b5de <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b504:	69bb      	ldr	r3, [r7, #24]
 801b506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d10b      	bne.n	801b524 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801b50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b510:	f383 8811 	msr	BASEPRI, r3
 801b514:	f3bf 8f6f 	isb	sy
 801b518:	f3bf 8f4f 	dsb	sy
 801b51c:	60fb      	str	r3, [r7, #12]
}
 801b51e:	bf00      	nop
 801b520:	bf00      	nop
 801b522:	e7fd      	b.n	801b520 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b524:	69bb      	ldr	r3, [r7, #24]
 801b526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b528:	683a      	ldr	r2, [r7, #0]
 801b52a:	429a      	cmp	r2, r3
 801b52c:	d902      	bls.n	801b534 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b52e:	683b      	ldr	r3, [r7, #0]
 801b530:	61fb      	str	r3, [r7, #28]
 801b532:	e002      	b.n	801b53a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b534:	69bb      	ldr	r3, [r7, #24]
 801b536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b538:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b53a:	69bb      	ldr	r3, [r7, #24]
 801b53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b53e:	69fa      	ldr	r2, [r7, #28]
 801b540:	429a      	cmp	r2, r3
 801b542:	d04c      	beq.n	801b5de <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b544:	69bb      	ldr	r3, [r7, #24]
 801b546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b548:	697a      	ldr	r2, [r7, #20]
 801b54a:	429a      	cmp	r2, r3
 801b54c:	d147      	bne.n	801b5de <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b54e:	4b26      	ldr	r3, [pc, #152]	@ (801b5e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	69ba      	ldr	r2, [r7, #24]
 801b554:	429a      	cmp	r2, r3
 801b556:	d10b      	bne.n	801b570 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801b558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b55c:	f383 8811 	msr	BASEPRI, r3
 801b560:	f3bf 8f6f 	isb	sy
 801b564:	f3bf 8f4f 	dsb	sy
 801b568:	60bb      	str	r3, [r7, #8]
}
 801b56a:	bf00      	nop
 801b56c:	bf00      	nop
 801b56e:	e7fd      	b.n	801b56c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b570:	69bb      	ldr	r3, [r7, #24]
 801b572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b574:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b576:	69bb      	ldr	r3, [r7, #24]
 801b578:	69fa      	ldr	r2, [r7, #28]
 801b57a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b57c:	69bb      	ldr	r3, [r7, #24]
 801b57e:	699b      	ldr	r3, [r3, #24]
 801b580:	2b00      	cmp	r3, #0
 801b582:	db04      	blt.n	801b58e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b584:	69fb      	ldr	r3, [r7, #28]
 801b586:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b58a:	69bb      	ldr	r3, [r7, #24]
 801b58c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b58e:	69bb      	ldr	r3, [r7, #24]
 801b590:	6959      	ldr	r1, [r3, #20]
 801b592:	693a      	ldr	r2, [r7, #16]
 801b594:	4613      	mov	r3, r2
 801b596:	009b      	lsls	r3, r3, #2
 801b598:	4413      	add	r3, r2
 801b59a:	009b      	lsls	r3, r3, #2
 801b59c:	4a13      	ldr	r2, [pc, #76]	@ (801b5ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b59e:	4413      	add	r3, r2
 801b5a0:	4299      	cmp	r1, r3
 801b5a2:	d11c      	bne.n	801b5de <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b5a4:	69bb      	ldr	r3, [r7, #24]
 801b5a6:	3304      	adds	r3, #4
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7fe f82f 	bl	801960c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b5ae:	69bb      	ldr	r3, [r7, #24]
 801b5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b5b2:	4b0f      	ldr	r3, [pc, #60]	@ (801b5f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	429a      	cmp	r2, r3
 801b5b8:	d903      	bls.n	801b5c2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801b5ba:	69bb      	ldr	r3, [r7, #24]
 801b5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b5be:	4a0c      	ldr	r2, [pc, #48]	@ (801b5f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801b5c0:	6013      	str	r3, [r2, #0]
 801b5c2:	69bb      	ldr	r3, [r7, #24]
 801b5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b5c6:	4613      	mov	r3, r2
 801b5c8:	009b      	lsls	r3, r3, #2
 801b5ca:	4413      	add	r3, r2
 801b5cc:	009b      	lsls	r3, r3, #2
 801b5ce:	4a07      	ldr	r2, [pc, #28]	@ (801b5ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b5d0:	441a      	add	r2, r3
 801b5d2:	69bb      	ldr	r3, [r7, #24]
 801b5d4:	3304      	adds	r3, #4
 801b5d6:	4619      	mov	r1, r3
 801b5d8:	4610      	mov	r0, r2
 801b5da:	f7fd ffba 	bl	8019552 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b5de:	bf00      	nop
 801b5e0:	3720      	adds	r7, #32
 801b5e2:	46bd      	mov	sp, r7
 801b5e4:	bd80      	pop	{r7, pc}
 801b5e6:	bf00      	nop
 801b5e8:	20008778 	.word	0x20008778
 801b5ec:	2000877c 	.word	0x2000877c
 801b5f0:	20008c54 	.word	0x20008c54

0801b5f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801b5f4:	b480      	push	{r7}
 801b5f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801b5f8:	4b07      	ldr	r3, [pc, #28]	@ (801b618 <pvTaskIncrementMutexHeldCount+0x24>)
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d004      	beq.n	801b60a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801b600:	4b05      	ldr	r3, [pc, #20]	@ (801b618 <pvTaskIncrementMutexHeldCount+0x24>)
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b606:	3201      	adds	r2, #1
 801b608:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801b60a:	4b03      	ldr	r3, [pc, #12]	@ (801b618 <pvTaskIncrementMutexHeldCount+0x24>)
 801b60c:	681b      	ldr	r3, [r3, #0]
	}
 801b60e:	4618      	mov	r0, r3
 801b610:	46bd      	mov	sp, r7
 801b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b616:	4770      	bx	lr
 801b618:	20008778 	.word	0x20008778

0801b61c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b086      	sub	sp, #24
 801b620:	af00      	add	r7, sp, #0
 801b622:	60f8      	str	r0, [r7, #12]
 801b624:	60b9      	str	r1, [r7, #8]
 801b626:	607a      	str	r2, [r7, #4]
 801b628:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801b62a:	f000 fedd 	bl	801c3e8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801b62e:	4b29      	ldr	r3, [pc, #164]	@ (801b6d4 <xTaskNotifyWait+0xb8>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801b636:	b2db      	uxtb	r3, r3
 801b638:	2b02      	cmp	r3, #2
 801b63a:	d01c      	beq.n	801b676 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801b63c:	4b25      	ldr	r3, [pc, #148]	@ (801b6d4 <xTaskNotifyWait+0xb8>)
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801b644:	68fa      	ldr	r2, [r7, #12]
 801b646:	43d2      	mvns	r2, r2
 801b648:	400a      	ands	r2, r1
 801b64a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801b64e:	4b21      	ldr	r3, [pc, #132]	@ (801b6d4 <xTaskNotifyWait+0xb8>)
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	2201      	movs	r2, #1
 801b654:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 801b658:	683b      	ldr	r3, [r7, #0]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d00b      	beq.n	801b676 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b65e:	2101      	movs	r1, #1
 801b660:	6838      	ldr	r0, [r7, #0]
 801b662:	f000 f9e3 	bl	801ba2c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801b666:	4b1c      	ldr	r3, [pc, #112]	@ (801b6d8 <xTaskNotifyWait+0xbc>)
 801b668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b66c:	601a      	str	r2, [r3, #0]
 801b66e:	f3bf 8f4f 	dsb	sy
 801b672:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801b676:	f000 fee9 	bl	801c44c <vPortExitCritical>

		taskENTER_CRITICAL();
 801b67a:	f000 feb5 	bl	801c3e8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d005      	beq.n	801b690 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801b684:	4b13      	ldr	r3, [pc, #76]	@ (801b6d4 <xTaskNotifyWait+0xb8>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801b690:	4b10      	ldr	r3, [pc, #64]	@ (801b6d4 <xTaskNotifyWait+0xb8>)
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801b698:	b2db      	uxtb	r3, r3
 801b69a:	2b02      	cmp	r3, #2
 801b69c:	d002      	beq.n	801b6a4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801b69e:	2300      	movs	r3, #0
 801b6a0:	617b      	str	r3, [r7, #20]
 801b6a2:	e00a      	b.n	801b6ba <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801b6a4:	4b0b      	ldr	r3, [pc, #44]	@ (801b6d4 <xTaskNotifyWait+0xb8>)
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801b6ac:	68ba      	ldr	r2, [r7, #8]
 801b6ae:	43d2      	mvns	r2, r2
 801b6b0:	400a      	ands	r2, r1
 801b6b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 801b6b6:	2301      	movs	r3, #1
 801b6b8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b6ba:	4b06      	ldr	r3, [pc, #24]	@ (801b6d4 <xTaskNotifyWait+0xb8>)
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	2200      	movs	r2, #0
 801b6c0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 801b6c4:	f000 fec2 	bl	801c44c <vPortExitCritical>

		return xReturn;
 801b6c8:	697b      	ldr	r3, [r7, #20]
	}
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	3718      	adds	r7, #24
 801b6ce:	46bd      	mov	sp, r7
 801b6d0:	bd80      	pop	{r7, pc}
 801b6d2:	bf00      	nop
 801b6d4:	20008778 	.word	0x20008778
 801b6d8:	e000ed04 	.word	0xe000ed04

0801b6dc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	b08a      	sub	sp, #40	@ 0x28
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	60f8      	str	r0, [r7, #12]
 801b6e4:	60b9      	str	r1, [r7, #8]
 801b6e6:	603b      	str	r3, [r7, #0]
 801b6e8:	4613      	mov	r3, r2
 801b6ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801b6ec:	2301      	movs	r3, #1
 801b6ee:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d10b      	bne.n	801b70e <xTaskGenericNotify+0x32>
	__asm volatile
 801b6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b6fa:	f383 8811 	msr	BASEPRI, r3
 801b6fe:	f3bf 8f6f 	isb	sy
 801b702:	f3bf 8f4f 	dsb	sy
 801b706:	61bb      	str	r3, [r7, #24]
}
 801b708:	bf00      	nop
 801b70a:	bf00      	nop
 801b70c:	e7fd      	b.n	801b70a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801b712:	f000 fe69 	bl	801c3e8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801b716:	683b      	ldr	r3, [r7, #0]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d004      	beq.n	801b726 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801b71c:	6a3b      	ldr	r3, [r7, #32]
 801b71e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801b722:	683b      	ldr	r3, [r7, #0]
 801b724:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801b726:	6a3b      	ldr	r3, [r7, #32]
 801b728:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801b72c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801b72e:	6a3b      	ldr	r3, [r7, #32]
 801b730:	2202      	movs	r2, #2
 801b732:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801b736:	79fb      	ldrb	r3, [r7, #7]
 801b738:	2b04      	cmp	r3, #4
 801b73a:	d82e      	bhi.n	801b79a <xTaskGenericNotify+0xbe>
 801b73c:	a201      	add	r2, pc, #4	@ (adr r2, 801b744 <xTaskGenericNotify+0x68>)
 801b73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b742:	bf00      	nop
 801b744:	0801b7bf 	.word	0x0801b7bf
 801b748:	0801b759 	.word	0x0801b759
 801b74c:	0801b76b 	.word	0x0801b76b
 801b750:	0801b77b 	.word	0x0801b77b
 801b754:	0801b785 	.word	0x0801b785
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801b758:	6a3b      	ldr	r3, [r7, #32]
 801b75a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801b75e:	68bb      	ldr	r3, [r7, #8]
 801b760:	431a      	orrs	r2, r3
 801b762:	6a3b      	ldr	r3, [r7, #32]
 801b764:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801b768:	e02c      	b.n	801b7c4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801b76a:	6a3b      	ldr	r3, [r7, #32]
 801b76c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801b770:	1c5a      	adds	r2, r3, #1
 801b772:	6a3b      	ldr	r3, [r7, #32]
 801b774:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801b778:	e024      	b.n	801b7c4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801b77a:	6a3b      	ldr	r3, [r7, #32]
 801b77c:	68ba      	ldr	r2, [r7, #8]
 801b77e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801b782:	e01f      	b.n	801b7c4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801b784:	7ffb      	ldrb	r3, [r7, #31]
 801b786:	2b02      	cmp	r3, #2
 801b788:	d004      	beq.n	801b794 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801b78a:	6a3b      	ldr	r3, [r7, #32]
 801b78c:	68ba      	ldr	r2, [r7, #8]
 801b78e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801b792:	e017      	b.n	801b7c4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 801b794:	2300      	movs	r3, #0
 801b796:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801b798:	e014      	b.n	801b7c4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801b79a:	6a3b      	ldr	r3, [r7, #32]
 801b79c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801b7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7a4:	d00d      	beq.n	801b7c2 <xTaskGenericNotify+0xe6>
	__asm volatile
 801b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b7aa:	f383 8811 	msr	BASEPRI, r3
 801b7ae:	f3bf 8f6f 	isb	sy
 801b7b2:	f3bf 8f4f 	dsb	sy
 801b7b6:	617b      	str	r3, [r7, #20]
}
 801b7b8:	bf00      	nop
 801b7ba:	bf00      	nop
 801b7bc:	e7fd      	b.n	801b7ba <xTaskGenericNotify+0xde>
					break;
 801b7be:	bf00      	nop
 801b7c0:	e000      	b.n	801b7c4 <xTaskGenericNotify+0xe8>

					break;
 801b7c2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801b7c4:	7ffb      	ldrb	r3, [r7, #31]
 801b7c6:	2b01      	cmp	r3, #1
 801b7c8:	d13b      	bne.n	801b842 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b7ca:	6a3b      	ldr	r3, [r7, #32]
 801b7cc:	3304      	adds	r3, #4
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	f7fd ff1c 	bl	801960c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801b7d4:	6a3b      	ldr	r3, [r7, #32]
 801b7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b7d8:	4b1d      	ldr	r3, [pc, #116]	@ (801b850 <xTaskGenericNotify+0x174>)
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	429a      	cmp	r2, r3
 801b7de:	d903      	bls.n	801b7e8 <xTaskGenericNotify+0x10c>
 801b7e0:	6a3b      	ldr	r3, [r7, #32]
 801b7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7e4:	4a1a      	ldr	r2, [pc, #104]	@ (801b850 <xTaskGenericNotify+0x174>)
 801b7e6:	6013      	str	r3, [r2, #0]
 801b7e8:	6a3b      	ldr	r3, [r7, #32]
 801b7ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b7ec:	4613      	mov	r3, r2
 801b7ee:	009b      	lsls	r3, r3, #2
 801b7f0:	4413      	add	r3, r2
 801b7f2:	009b      	lsls	r3, r3, #2
 801b7f4:	4a17      	ldr	r2, [pc, #92]	@ (801b854 <xTaskGenericNotify+0x178>)
 801b7f6:	441a      	add	r2, r3
 801b7f8:	6a3b      	ldr	r3, [r7, #32]
 801b7fa:	3304      	adds	r3, #4
 801b7fc:	4619      	mov	r1, r3
 801b7fe:	4610      	mov	r0, r2
 801b800:	f7fd fea7 	bl	8019552 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801b804:	6a3b      	ldr	r3, [r7, #32]
 801b806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d00b      	beq.n	801b824 <xTaskGenericNotify+0x148>
	__asm volatile
 801b80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b810:	f383 8811 	msr	BASEPRI, r3
 801b814:	f3bf 8f6f 	isb	sy
 801b818:	f3bf 8f4f 	dsb	sy
 801b81c:	613b      	str	r3, [r7, #16]
}
 801b81e:	bf00      	nop
 801b820:	bf00      	nop
 801b822:	e7fd      	b.n	801b820 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b824:	6a3b      	ldr	r3, [r7, #32]
 801b826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b828:	4b0b      	ldr	r3, [pc, #44]	@ (801b858 <xTaskGenericNotify+0x17c>)
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b82e:	429a      	cmp	r2, r3
 801b830:	d907      	bls.n	801b842 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801b832:	4b0a      	ldr	r3, [pc, #40]	@ (801b85c <xTaskGenericNotify+0x180>)
 801b834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b838:	601a      	str	r2, [r3, #0]
 801b83a:	f3bf 8f4f 	dsb	sy
 801b83e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801b842:	f000 fe03 	bl	801c44c <vPortExitCritical>

		return xReturn;
 801b846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801b848:	4618      	mov	r0, r3
 801b84a:	3728      	adds	r7, #40	@ 0x28
 801b84c:	46bd      	mov	sp, r7
 801b84e:	bd80      	pop	{r7, pc}
 801b850:	20008c54 	.word	0x20008c54
 801b854:	2000877c 	.word	0x2000877c
 801b858:	20008778 	.word	0x20008778
 801b85c:	e000ed04 	.word	0xe000ed04

0801b860 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801b860:	b580      	push	{r7, lr}
 801b862:	b08e      	sub	sp, #56	@ 0x38
 801b864:	af00      	add	r7, sp, #0
 801b866:	60f8      	str	r0, [r7, #12]
 801b868:	60b9      	str	r1, [r7, #8]
 801b86a:	603b      	str	r3, [r7, #0]
 801b86c:	4613      	mov	r3, r2
 801b86e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801b870:	2301      	movs	r3, #1
 801b872:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d10b      	bne.n	801b892 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801b87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b87e:	f383 8811 	msr	BASEPRI, r3
 801b882:	f3bf 8f6f 	isb	sy
 801b886:	f3bf 8f4f 	dsb	sy
 801b88a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801b88c:	bf00      	nop
 801b88e:	bf00      	nop
 801b890:	e7fd      	b.n	801b88e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801b892:	f000 fe89 	bl	801c5a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801b89a:	f3ef 8211 	mrs	r2, BASEPRI
 801b89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b8a2:	f383 8811 	msr	BASEPRI, r3
 801b8a6:	f3bf 8f6f 	isb	sy
 801b8aa:	f3bf 8f4f 	dsb	sy
 801b8ae:	623a      	str	r2, [r7, #32]
 801b8b0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801b8b2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801b8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801b8b6:	683b      	ldr	r3, [r7, #0]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d004      	beq.n	801b8c6 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801b8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8be:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801b8c2:	683b      	ldr	r3, [r7, #0]
 801b8c4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8c8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801b8cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801b8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8d2:	2202      	movs	r2, #2
 801b8d4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801b8d8:	79fb      	ldrb	r3, [r7, #7]
 801b8da:	2b04      	cmp	r3, #4
 801b8dc:	d82e      	bhi.n	801b93c <xTaskGenericNotifyFromISR+0xdc>
 801b8de:	a201      	add	r2, pc, #4	@ (adr r2, 801b8e4 <xTaskGenericNotifyFromISR+0x84>)
 801b8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8e4:	0801b961 	.word	0x0801b961
 801b8e8:	0801b8f9 	.word	0x0801b8f9
 801b8ec:	0801b90b 	.word	0x0801b90b
 801b8f0:	0801b91b 	.word	0x0801b91b
 801b8f4:	0801b925 	.word	0x0801b925
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801b8fe:	68bb      	ldr	r3, [r7, #8]
 801b900:	431a      	orrs	r2, r3
 801b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b904:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801b908:	e02d      	b.n	801b966 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801b90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b90c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801b910:	1c5a      	adds	r2, r3, #1
 801b912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b914:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801b918:	e025      	b.n	801b966 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b91c:	68ba      	ldr	r2, [r7, #8]
 801b91e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801b922:	e020      	b.n	801b966 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801b924:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801b928:	2b02      	cmp	r3, #2
 801b92a:	d004      	beq.n	801b936 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801b92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b92e:	68ba      	ldr	r2, [r7, #8]
 801b930:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801b934:	e017      	b.n	801b966 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801b936:	2300      	movs	r3, #0
 801b938:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 801b93a:	e014      	b.n	801b966 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801b93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b93e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801b942:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b946:	d00d      	beq.n	801b964 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 801b948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b94c:	f383 8811 	msr	BASEPRI, r3
 801b950:	f3bf 8f6f 	isb	sy
 801b954:	f3bf 8f4f 	dsb	sy
 801b958:	61bb      	str	r3, [r7, #24]
}
 801b95a:	bf00      	nop
 801b95c:	bf00      	nop
 801b95e:	e7fd      	b.n	801b95c <xTaskGenericNotifyFromISR+0xfc>
					break;
 801b960:	bf00      	nop
 801b962:	e000      	b.n	801b966 <xTaskGenericNotifyFromISR+0x106>
					break;
 801b964:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801b966:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801b96a:	2b01      	cmp	r3, #1
 801b96c:	d147      	bne.n	801b9fe <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b972:	2b00      	cmp	r3, #0
 801b974:	d00b      	beq.n	801b98e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801b976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b97a:	f383 8811 	msr	BASEPRI, r3
 801b97e:	f3bf 8f6f 	isb	sy
 801b982:	f3bf 8f4f 	dsb	sy
 801b986:	617b      	str	r3, [r7, #20]
}
 801b988:	bf00      	nop
 801b98a:	bf00      	nop
 801b98c:	e7fd      	b.n	801b98a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b98e:	4b21      	ldr	r3, [pc, #132]	@ (801ba14 <xTaskGenericNotifyFromISR+0x1b4>)
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d11d      	bne.n	801b9d2 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b998:	3304      	adds	r3, #4
 801b99a:	4618      	mov	r0, r3
 801b99c:	f7fd fe36 	bl	801960c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b9a4:	4b1c      	ldr	r3, [pc, #112]	@ (801ba18 <xTaskGenericNotifyFromISR+0x1b8>)
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	429a      	cmp	r2, r3
 801b9aa:	d903      	bls.n	801b9b4 <xTaskGenericNotifyFromISR+0x154>
 801b9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9b0:	4a19      	ldr	r2, [pc, #100]	@ (801ba18 <xTaskGenericNotifyFromISR+0x1b8>)
 801b9b2:	6013      	str	r3, [r2, #0]
 801b9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b9b8:	4613      	mov	r3, r2
 801b9ba:	009b      	lsls	r3, r3, #2
 801b9bc:	4413      	add	r3, r2
 801b9be:	009b      	lsls	r3, r3, #2
 801b9c0:	4a16      	ldr	r2, [pc, #88]	@ (801ba1c <xTaskGenericNotifyFromISR+0x1bc>)
 801b9c2:	441a      	add	r2, r3
 801b9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9c6:	3304      	adds	r3, #4
 801b9c8:	4619      	mov	r1, r3
 801b9ca:	4610      	mov	r0, r2
 801b9cc:	f7fd fdc1 	bl	8019552 <vListInsertEnd>
 801b9d0:	e005      	b.n	801b9de <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801b9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9d4:	3318      	adds	r3, #24
 801b9d6:	4619      	mov	r1, r3
 801b9d8:	4811      	ldr	r0, [pc, #68]	@ (801ba20 <xTaskGenericNotifyFromISR+0x1c0>)
 801b9da:	f7fd fdba 	bl	8019552 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b9e2:	4b10      	ldr	r3, [pc, #64]	@ (801ba24 <xTaskGenericNotifyFromISR+0x1c4>)
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9e8:	429a      	cmp	r2, r3
 801b9ea:	d908      	bls.n	801b9fe <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801b9ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d002      	beq.n	801b9f8 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801b9f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b9f4:	2201      	movs	r2, #1
 801b9f6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801b9f8:	4b0b      	ldr	r3, [pc, #44]	@ (801ba28 <xTaskGenericNotifyFromISR+0x1c8>)
 801b9fa:	2201      	movs	r2, #1
 801b9fc:	601a      	str	r2, [r3, #0]
 801b9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba00:	613b      	str	r3, [r7, #16]
	__asm volatile
 801ba02:	693b      	ldr	r3, [r7, #16]
 801ba04:	f383 8811 	msr	BASEPRI, r3
}
 801ba08:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801ba0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	3738      	adds	r7, #56	@ 0x38
 801ba10:	46bd      	mov	sp, r7
 801ba12:	bd80      	pop	{r7, pc}
 801ba14:	20008c74 	.word	0x20008c74
 801ba18:	20008c54 	.word	0x20008c54
 801ba1c:	2000877c 	.word	0x2000877c
 801ba20:	20008c0c 	.word	0x20008c0c
 801ba24:	20008778 	.word	0x20008778
 801ba28:	20008c60 	.word	0x20008c60

0801ba2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b084      	sub	sp, #16
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]
 801ba34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801ba36:	4b21      	ldr	r3, [pc, #132]	@ (801babc <prvAddCurrentTaskToDelayedList+0x90>)
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ba3c:	4b20      	ldr	r3, [pc, #128]	@ (801bac0 <prvAddCurrentTaskToDelayedList+0x94>)
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	3304      	adds	r3, #4
 801ba42:	4618      	mov	r0, r3
 801ba44:	f7fd fde2 	bl	801960c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba4e:	d10a      	bne.n	801ba66 <prvAddCurrentTaskToDelayedList+0x3a>
 801ba50:	683b      	ldr	r3, [r7, #0]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d007      	beq.n	801ba66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba56:	4b1a      	ldr	r3, [pc, #104]	@ (801bac0 <prvAddCurrentTaskToDelayedList+0x94>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	3304      	adds	r3, #4
 801ba5c:	4619      	mov	r1, r3
 801ba5e:	4819      	ldr	r0, [pc, #100]	@ (801bac4 <prvAddCurrentTaskToDelayedList+0x98>)
 801ba60:	f7fd fd77 	bl	8019552 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801ba64:	e026      	b.n	801bab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801ba66:	68fa      	ldr	r2, [r7, #12]
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	4413      	add	r3, r2
 801ba6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801ba6e:	4b14      	ldr	r3, [pc, #80]	@ (801bac0 <prvAddCurrentTaskToDelayedList+0x94>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	68ba      	ldr	r2, [r7, #8]
 801ba74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801ba76:	68ba      	ldr	r2, [r7, #8]
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	429a      	cmp	r2, r3
 801ba7c:	d209      	bcs.n	801ba92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba7e:	4b12      	ldr	r3, [pc, #72]	@ (801bac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 801ba80:	681a      	ldr	r2, [r3, #0]
 801ba82:	4b0f      	ldr	r3, [pc, #60]	@ (801bac0 <prvAddCurrentTaskToDelayedList+0x94>)
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	3304      	adds	r3, #4
 801ba88:	4619      	mov	r1, r3
 801ba8a:	4610      	mov	r0, r2
 801ba8c:	f7fd fd85 	bl	801959a <vListInsert>
}
 801ba90:	e010      	b.n	801bab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba92:	4b0e      	ldr	r3, [pc, #56]	@ (801bacc <prvAddCurrentTaskToDelayedList+0xa0>)
 801ba94:	681a      	ldr	r2, [r3, #0]
 801ba96:	4b0a      	ldr	r3, [pc, #40]	@ (801bac0 <prvAddCurrentTaskToDelayedList+0x94>)
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	3304      	adds	r3, #4
 801ba9c:	4619      	mov	r1, r3
 801ba9e:	4610      	mov	r0, r2
 801baa0:	f7fd fd7b 	bl	801959a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801baa4:	4b0a      	ldr	r3, [pc, #40]	@ (801bad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	68ba      	ldr	r2, [r7, #8]
 801baaa:	429a      	cmp	r2, r3
 801baac:	d202      	bcs.n	801bab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801baae:	4a08      	ldr	r2, [pc, #32]	@ (801bad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 801bab0:	68bb      	ldr	r3, [r7, #8]
 801bab2:	6013      	str	r3, [r2, #0]
}
 801bab4:	bf00      	nop
 801bab6:	3710      	adds	r7, #16
 801bab8:	46bd      	mov	sp, r7
 801baba:	bd80      	pop	{r7, pc}
 801babc:	20008c50 	.word	0x20008c50
 801bac0:	20008778 	.word	0x20008778
 801bac4:	20008c38 	.word	0x20008c38
 801bac8:	20008c08 	.word	0x20008c08
 801bacc:	20008c04 	.word	0x20008c04
 801bad0:	20008c6c 	.word	0x20008c6c

0801bad4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b08a      	sub	sp, #40	@ 0x28
 801bad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801bada:	2300      	movs	r3, #0
 801badc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801bade:	f000 fb13 	bl	801c108 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801bae2:	4b1d      	ldr	r3, [pc, #116]	@ (801bb58 <xTimerCreateTimerTask+0x84>)
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d021      	beq.n	801bb2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801baea:	2300      	movs	r3, #0
 801baec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801baee:	2300      	movs	r3, #0
 801baf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801baf2:	1d3a      	adds	r2, r7, #4
 801baf4:	f107 0108 	add.w	r1, r7, #8
 801baf8:	f107 030c 	add.w	r3, r7, #12
 801bafc:	4618      	mov	r0, r3
 801bafe:	f7fd fce1 	bl	80194c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801bb02:	6879      	ldr	r1, [r7, #4]
 801bb04:	68bb      	ldr	r3, [r7, #8]
 801bb06:	68fa      	ldr	r2, [r7, #12]
 801bb08:	9202      	str	r2, [sp, #8]
 801bb0a:	9301      	str	r3, [sp, #4]
 801bb0c:	2302      	movs	r3, #2
 801bb0e:	9300      	str	r3, [sp, #0]
 801bb10:	2300      	movs	r3, #0
 801bb12:	460a      	mov	r2, r1
 801bb14:	4911      	ldr	r1, [pc, #68]	@ (801bb5c <xTimerCreateTimerTask+0x88>)
 801bb16:	4812      	ldr	r0, [pc, #72]	@ (801bb60 <xTimerCreateTimerTask+0x8c>)
 801bb18:	f7fe fd78 	bl	801a60c <xTaskCreateStatic>
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	4a11      	ldr	r2, [pc, #68]	@ (801bb64 <xTimerCreateTimerTask+0x90>)
 801bb20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801bb22:	4b10      	ldr	r3, [pc, #64]	@ (801bb64 <xTimerCreateTimerTask+0x90>)
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d001      	beq.n	801bb2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bb2a:	2301      	movs	r3, #1
 801bb2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d10b      	bne.n	801bb4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 801bb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb38:	f383 8811 	msr	BASEPRI, r3
 801bb3c:	f3bf 8f6f 	isb	sy
 801bb40:	f3bf 8f4f 	dsb	sy
 801bb44:	613b      	str	r3, [r7, #16]
}
 801bb46:	bf00      	nop
 801bb48:	bf00      	nop
 801bb4a:	e7fd      	b.n	801bb48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bb4c:	697b      	ldr	r3, [r7, #20]
}
 801bb4e:	4618      	mov	r0, r3
 801bb50:	3718      	adds	r7, #24
 801bb52:	46bd      	mov	sp, r7
 801bb54:	bd80      	pop	{r7, pc}
 801bb56:	bf00      	nop
 801bb58:	20008ca8 	.word	0x20008ca8
 801bb5c:	0801e140 	.word	0x0801e140
 801bb60:	0801bca1 	.word	0x0801bca1
 801bb64:	20008cac 	.word	0x20008cac

0801bb68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b08a      	sub	sp, #40	@ 0x28
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	60f8      	str	r0, [r7, #12]
 801bb70:	60b9      	str	r1, [r7, #8]
 801bb72:	607a      	str	r2, [r7, #4]
 801bb74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801bb76:	2300      	movs	r3, #0
 801bb78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d10b      	bne.n	801bb98 <xTimerGenericCommand+0x30>
	__asm volatile
 801bb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb84:	f383 8811 	msr	BASEPRI, r3
 801bb88:	f3bf 8f6f 	isb	sy
 801bb8c:	f3bf 8f4f 	dsb	sy
 801bb90:	623b      	str	r3, [r7, #32]
}
 801bb92:	bf00      	nop
 801bb94:	bf00      	nop
 801bb96:	e7fd      	b.n	801bb94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801bb98:	4b19      	ldr	r3, [pc, #100]	@ (801bc00 <xTimerGenericCommand+0x98>)
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d02a      	beq.n	801bbf6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801bbac:	68bb      	ldr	r3, [r7, #8]
 801bbae:	2b05      	cmp	r3, #5
 801bbb0:	dc18      	bgt.n	801bbe4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801bbb2:	f7ff fba5 	bl	801b300 <xTaskGetSchedulerState>
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	2b02      	cmp	r3, #2
 801bbba:	d109      	bne.n	801bbd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801bbbc:	4b10      	ldr	r3, [pc, #64]	@ (801bc00 <xTimerGenericCommand+0x98>)
 801bbbe:	6818      	ldr	r0, [r3, #0]
 801bbc0:	f107 0110 	add.w	r1, r7, #16
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bbc8:	f7fd ff48 	bl	8019a5c <xQueueGenericSend>
 801bbcc:	6278      	str	r0, [r7, #36]	@ 0x24
 801bbce:	e012      	b.n	801bbf6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801bbd0:	4b0b      	ldr	r3, [pc, #44]	@ (801bc00 <xTimerGenericCommand+0x98>)
 801bbd2:	6818      	ldr	r0, [r3, #0]
 801bbd4:	f107 0110 	add.w	r1, r7, #16
 801bbd8:	2300      	movs	r3, #0
 801bbda:	2200      	movs	r2, #0
 801bbdc:	f7fd ff3e 	bl	8019a5c <xQueueGenericSend>
 801bbe0:	6278      	str	r0, [r7, #36]	@ 0x24
 801bbe2:	e008      	b.n	801bbf6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bbe4:	4b06      	ldr	r3, [pc, #24]	@ (801bc00 <xTimerGenericCommand+0x98>)
 801bbe6:	6818      	ldr	r0, [r3, #0]
 801bbe8:	f107 0110 	add.w	r1, r7, #16
 801bbec:	2300      	movs	r3, #0
 801bbee:	683a      	ldr	r2, [r7, #0]
 801bbf0:	f7fe f836 	bl	8019c60 <xQueueGenericSendFromISR>
 801bbf4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	3728      	adds	r7, #40	@ 0x28
 801bbfc:	46bd      	mov	sp, r7
 801bbfe:	bd80      	pop	{r7, pc}
 801bc00:	20008ca8 	.word	0x20008ca8

0801bc04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b088      	sub	sp, #32
 801bc08:	af02      	add	r7, sp, #8
 801bc0a:	6078      	str	r0, [r7, #4]
 801bc0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bc0e:	4b23      	ldr	r3, [pc, #140]	@ (801bc9c <prvProcessExpiredTimer+0x98>)
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	68db      	ldr	r3, [r3, #12]
 801bc14:	68db      	ldr	r3, [r3, #12]
 801bc16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bc18:	697b      	ldr	r3, [r7, #20]
 801bc1a:	3304      	adds	r3, #4
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	f7fd fcf5 	bl	801960c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bc22:	697b      	ldr	r3, [r7, #20]
 801bc24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bc28:	f003 0304 	and.w	r3, r3, #4
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d023      	beq.n	801bc78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	699a      	ldr	r2, [r3, #24]
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	18d1      	adds	r1, r2, r3
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	683a      	ldr	r2, [r7, #0]
 801bc3c:	6978      	ldr	r0, [r7, #20]
 801bc3e:	f000 f8d5 	bl	801bdec <prvInsertTimerInActiveList>
 801bc42:	4603      	mov	r3, r0
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d020      	beq.n	801bc8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bc48:	2300      	movs	r3, #0
 801bc4a:	9300      	str	r3, [sp, #0]
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	687a      	ldr	r2, [r7, #4]
 801bc50:	2100      	movs	r1, #0
 801bc52:	6978      	ldr	r0, [r7, #20]
 801bc54:	f7ff ff88 	bl	801bb68 <xTimerGenericCommand>
 801bc58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801bc5a:	693b      	ldr	r3, [r7, #16]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d114      	bne.n	801bc8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 801bc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bc64:	f383 8811 	msr	BASEPRI, r3
 801bc68:	f3bf 8f6f 	isb	sy
 801bc6c:	f3bf 8f4f 	dsb	sy
 801bc70:	60fb      	str	r3, [r7, #12]
}
 801bc72:	bf00      	nop
 801bc74:	bf00      	nop
 801bc76:	e7fd      	b.n	801bc74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bc78:	697b      	ldr	r3, [r7, #20]
 801bc7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bc7e:	f023 0301 	bic.w	r3, r3, #1
 801bc82:	b2da      	uxtb	r2, r3
 801bc84:	697b      	ldr	r3, [r7, #20]
 801bc86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bc8a:	697b      	ldr	r3, [r7, #20]
 801bc8c:	6a1b      	ldr	r3, [r3, #32]
 801bc8e:	6978      	ldr	r0, [r7, #20]
 801bc90:	4798      	blx	r3
}
 801bc92:	bf00      	nop
 801bc94:	3718      	adds	r7, #24
 801bc96:	46bd      	mov	sp, r7
 801bc98:	bd80      	pop	{r7, pc}
 801bc9a:	bf00      	nop
 801bc9c:	20008ca0 	.word	0x20008ca0

0801bca0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b084      	sub	sp, #16
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bca8:	f107 0308 	add.w	r3, r7, #8
 801bcac:	4618      	mov	r0, r3
 801bcae:	f000 f859 	bl	801bd64 <prvGetNextExpireTime>
 801bcb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bcb4:	68bb      	ldr	r3, [r7, #8]
 801bcb6:	4619      	mov	r1, r3
 801bcb8:	68f8      	ldr	r0, [r7, #12]
 801bcba:	f000 f805 	bl	801bcc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801bcbe:	f000 f8d7 	bl	801be70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bcc2:	bf00      	nop
 801bcc4:	e7f0      	b.n	801bca8 <prvTimerTask+0x8>
	...

0801bcc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b084      	sub	sp, #16
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
 801bcd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bcd2:	f7fe feff 	bl	801aad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bcd6:	f107 0308 	add.w	r3, r7, #8
 801bcda:	4618      	mov	r0, r3
 801bcdc:	f000 f866 	bl	801bdac <prvSampleTimeNow>
 801bce0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801bce2:	68bb      	ldr	r3, [r7, #8]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d130      	bne.n	801bd4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bce8:	683b      	ldr	r3, [r7, #0]
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d10a      	bne.n	801bd04 <prvProcessTimerOrBlockTask+0x3c>
 801bcee:	687a      	ldr	r2, [r7, #4]
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	429a      	cmp	r2, r3
 801bcf4:	d806      	bhi.n	801bd04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bcf6:	f7fe fefb 	bl	801aaf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bcfa:	68f9      	ldr	r1, [r7, #12]
 801bcfc:	6878      	ldr	r0, [r7, #4]
 801bcfe:	f7ff ff81 	bl	801bc04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bd02:	e024      	b.n	801bd4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bd04:	683b      	ldr	r3, [r7, #0]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d008      	beq.n	801bd1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bd0a:	4b13      	ldr	r3, [pc, #76]	@ (801bd58 <prvProcessTimerOrBlockTask+0x90>)
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d101      	bne.n	801bd18 <prvProcessTimerOrBlockTask+0x50>
 801bd14:	2301      	movs	r3, #1
 801bd16:	e000      	b.n	801bd1a <prvProcessTimerOrBlockTask+0x52>
 801bd18:	2300      	movs	r3, #0
 801bd1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bd1c:	4b0f      	ldr	r3, [pc, #60]	@ (801bd5c <prvProcessTimerOrBlockTask+0x94>)
 801bd1e:	6818      	ldr	r0, [r3, #0]
 801bd20:	687a      	ldr	r2, [r7, #4]
 801bd22:	68fb      	ldr	r3, [r7, #12]
 801bd24:	1ad3      	subs	r3, r2, r3
 801bd26:	683a      	ldr	r2, [r7, #0]
 801bd28:	4619      	mov	r1, r3
 801bd2a:	f7fe fc3b 	bl	801a5a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bd2e:	f7fe fedf 	bl	801aaf0 <xTaskResumeAll>
 801bd32:	4603      	mov	r3, r0
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d10a      	bne.n	801bd4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bd38:	4b09      	ldr	r3, [pc, #36]	@ (801bd60 <prvProcessTimerOrBlockTask+0x98>)
 801bd3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bd3e:	601a      	str	r2, [r3, #0]
 801bd40:	f3bf 8f4f 	dsb	sy
 801bd44:	f3bf 8f6f 	isb	sy
}
 801bd48:	e001      	b.n	801bd4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bd4a:	f7fe fed1 	bl	801aaf0 <xTaskResumeAll>
}
 801bd4e:	bf00      	nop
 801bd50:	3710      	adds	r7, #16
 801bd52:	46bd      	mov	sp, r7
 801bd54:	bd80      	pop	{r7, pc}
 801bd56:	bf00      	nop
 801bd58:	20008ca4 	.word	0x20008ca4
 801bd5c:	20008ca8 	.word	0x20008ca8
 801bd60:	e000ed04 	.word	0xe000ed04

0801bd64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bd64:	b480      	push	{r7}
 801bd66:	b085      	sub	sp, #20
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bd6c:	4b0e      	ldr	r3, [pc, #56]	@ (801bda8 <prvGetNextExpireTime+0x44>)
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d101      	bne.n	801bd7a <prvGetNextExpireTime+0x16>
 801bd76:	2201      	movs	r2, #1
 801bd78:	e000      	b.n	801bd7c <prvGetNextExpireTime+0x18>
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d105      	bne.n	801bd94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bd88:	4b07      	ldr	r3, [pc, #28]	@ (801bda8 <prvGetNextExpireTime+0x44>)
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	68db      	ldr	r3, [r3, #12]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	60fb      	str	r3, [r7, #12]
 801bd92:	e001      	b.n	801bd98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801bd94:	2300      	movs	r3, #0
 801bd96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801bd98:	68fb      	ldr	r3, [r7, #12]
}
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	3714      	adds	r7, #20
 801bd9e:	46bd      	mov	sp, r7
 801bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda4:	4770      	bx	lr
 801bda6:	bf00      	nop
 801bda8:	20008ca0 	.word	0x20008ca0

0801bdac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801bdac:	b580      	push	{r7, lr}
 801bdae:	b084      	sub	sp, #16
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801bdb4:	f7fe ff3a 	bl	801ac2c <xTaskGetTickCount>
 801bdb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801bdba:	4b0b      	ldr	r3, [pc, #44]	@ (801bde8 <prvSampleTimeNow+0x3c>)
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	68fa      	ldr	r2, [r7, #12]
 801bdc0:	429a      	cmp	r2, r3
 801bdc2:	d205      	bcs.n	801bdd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801bdc4:	f000 f93a 	bl	801c03c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	2201      	movs	r2, #1
 801bdcc:	601a      	str	r2, [r3, #0]
 801bdce:	e002      	b.n	801bdd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	2200      	movs	r2, #0
 801bdd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801bdd6:	4a04      	ldr	r2, [pc, #16]	@ (801bde8 <prvSampleTimeNow+0x3c>)
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801bddc:	68fb      	ldr	r3, [r7, #12]
}
 801bdde:	4618      	mov	r0, r3
 801bde0:	3710      	adds	r7, #16
 801bde2:	46bd      	mov	sp, r7
 801bde4:	bd80      	pop	{r7, pc}
 801bde6:	bf00      	nop
 801bde8:	20008cb0 	.word	0x20008cb0

0801bdec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b086      	sub	sp, #24
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	60f8      	str	r0, [r7, #12]
 801bdf4:	60b9      	str	r1, [r7, #8]
 801bdf6:	607a      	str	r2, [r7, #4]
 801bdf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	68ba      	ldr	r2, [r7, #8]
 801be02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	68fa      	ldr	r2, [r7, #12]
 801be08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801be0a:	68ba      	ldr	r2, [r7, #8]
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	429a      	cmp	r2, r3
 801be10:	d812      	bhi.n	801be38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801be12:	687a      	ldr	r2, [r7, #4]
 801be14:	683b      	ldr	r3, [r7, #0]
 801be16:	1ad2      	subs	r2, r2, r3
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	699b      	ldr	r3, [r3, #24]
 801be1c:	429a      	cmp	r2, r3
 801be1e:	d302      	bcc.n	801be26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801be20:	2301      	movs	r3, #1
 801be22:	617b      	str	r3, [r7, #20]
 801be24:	e01b      	b.n	801be5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801be26:	4b10      	ldr	r3, [pc, #64]	@ (801be68 <prvInsertTimerInActiveList+0x7c>)
 801be28:	681a      	ldr	r2, [r3, #0]
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	3304      	adds	r3, #4
 801be2e:	4619      	mov	r1, r3
 801be30:	4610      	mov	r0, r2
 801be32:	f7fd fbb2 	bl	801959a <vListInsert>
 801be36:	e012      	b.n	801be5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801be38:	687a      	ldr	r2, [r7, #4]
 801be3a:	683b      	ldr	r3, [r7, #0]
 801be3c:	429a      	cmp	r2, r3
 801be3e:	d206      	bcs.n	801be4e <prvInsertTimerInActiveList+0x62>
 801be40:	68ba      	ldr	r2, [r7, #8]
 801be42:	683b      	ldr	r3, [r7, #0]
 801be44:	429a      	cmp	r2, r3
 801be46:	d302      	bcc.n	801be4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801be48:	2301      	movs	r3, #1
 801be4a:	617b      	str	r3, [r7, #20]
 801be4c:	e007      	b.n	801be5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801be4e:	4b07      	ldr	r3, [pc, #28]	@ (801be6c <prvInsertTimerInActiveList+0x80>)
 801be50:	681a      	ldr	r2, [r3, #0]
 801be52:	68fb      	ldr	r3, [r7, #12]
 801be54:	3304      	adds	r3, #4
 801be56:	4619      	mov	r1, r3
 801be58:	4610      	mov	r0, r2
 801be5a:	f7fd fb9e 	bl	801959a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801be5e:	697b      	ldr	r3, [r7, #20]
}
 801be60:	4618      	mov	r0, r3
 801be62:	3718      	adds	r7, #24
 801be64:	46bd      	mov	sp, r7
 801be66:	bd80      	pop	{r7, pc}
 801be68:	20008ca4 	.word	0x20008ca4
 801be6c:	20008ca0 	.word	0x20008ca0

0801be70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801be70:	b580      	push	{r7, lr}
 801be72:	b08e      	sub	sp, #56	@ 0x38
 801be74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801be76:	e0ce      	b.n	801c016 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	da19      	bge.n	801beb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801be7e:	1d3b      	adds	r3, r7, #4
 801be80:	3304      	adds	r3, #4
 801be82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be86:	2b00      	cmp	r3, #0
 801be88:	d10b      	bne.n	801bea2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801be8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be8e:	f383 8811 	msr	BASEPRI, r3
 801be92:	f3bf 8f6f 	isb	sy
 801be96:	f3bf 8f4f 	dsb	sy
 801be9a:	61fb      	str	r3, [r7, #28]
}
 801be9c:	bf00      	nop
 801be9e:	bf00      	nop
 801bea0:	e7fd      	b.n	801be9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801bea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bea8:	6850      	ldr	r0, [r2, #4]
 801beaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801beac:	6892      	ldr	r2, [r2, #8]
 801beae:	4611      	mov	r1, r2
 801beb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	f2c0 80ae 	blt.w	801c016 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801bebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bec0:	695b      	ldr	r3, [r3, #20]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d004      	beq.n	801bed0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bec8:	3304      	adds	r3, #4
 801beca:	4618      	mov	r0, r3
 801becc:	f7fd fb9e 	bl	801960c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bed0:	463b      	mov	r3, r7
 801bed2:	4618      	mov	r0, r3
 801bed4:	f7ff ff6a 	bl	801bdac <prvSampleTimeNow>
 801bed8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	2b09      	cmp	r3, #9
 801bede:	f200 8097 	bhi.w	801c010 <prvProcessReceivedCommands+0x1a0>
 801bee2:	a201      	add	r2, pc, #4	@ (adr r2, 801bee8 <prvProcessReceivedCommands+0x78>)
 801bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bee8:	0801bf11 	.word	0x0801bf11
 801beec:	0801bf11 	.word	0x0801bf11
 801bef0:	0801bf11 	.word	0x0801bf11
 801bef4:	0801bf87 	.word	0x0801bf87
 801bef8:	0801bf9b 	.word	0x0801bf9b
 801befc:	0801bfe7 	.word	0x0801bfe7
 801bf00:	0801bf11 	.word	0x0801bf11
 801bf04:	0801bf11 	.word	0x0801bf11
 801bf08:	0801bf87 	.word	0x0801bf87
 801bf0c:	0801bf9b 	.word	0x0801bf9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf16:	f043 0301 	orr.w	r3, r3, #1
 801bf1a:	b2da      	uxtb	r2, r3
 801bf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801bf22:	68ba      	ldr	r2, [r7, #8]
 801bf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf26:	699b      	ldr	r3, [r3, #24]
 801bf28:	18d1      	adds	r1, r2, r3
 801bf2a:	68bb      	ldr	r3, [r7, #8]
 801bf2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf30:	f7ff ff5c 	bl	801bdec <prvInsertTimerInActiveList>
 801bf34:	4603      	mov	r3, r0
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d06c      	beq.n	801c014 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bf3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf3c:	6a1b      	ldr	r3, [r3, #32]
 801bf3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf48:	f003 0304 	and.w	r3, r3, #4
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d061      	beq.n	801c014 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801bf50:	68ba      	ldr	r2, [r7, #8]
 801bf52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf54:	699b      	ldr	r3, [r3, #24]
 801bf56:	441a      	add	r2, r3
 801bf58:	2300      	movs	r3, #0
 801bf5a:	9300      	str	r3, [sp, #0]
 801bf5c:	2300      	movs	r3, #0
 801bf5e:	2100      	movs	r1, #0
 801bf60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf62:	f7ff fe01 	bl	801bb68 <xTimerGenericCommand>
 801bf66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801bf68:	6a3b      	ldr	r3, [r7, #32]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d152      	bne.n	801c014 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801bf6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf72:	f383 8811 	msr	BASEPRI, r3
 801bf76:	f3bf 8f6f 	isb	sy
 801bf7a:	f3bf 8f4f 	dsb	sy
 801bf7e:	61bb      	str	r3, [r7, #24]
}
 801bf80:	bf00      	nop
 801bf82:	bf00      	nop
 801bf84:	e7fd      	b.n	801bf82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf8c:	f023 0301 	bic.w	r3, r3, #1
 801bf90:	b2da      	uxtb	r2, r3
 801bf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801bf98:	e03d      	b.n	801c016 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bfa0:	f043 0301 	orr.w	r3, r3, #1
 801bfa4:	b2da      	uxtb	r2, r3
 801bfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfa8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801bfac:	68ba      	ldr	r2, [r7, #8]
 801bfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfb4:	699b      	ldr	r3, [r3, #24]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d10b      	bne.n	801bfd2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801bfba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bfbe:	f383 8811 	msr	BASEPRI, r3
 801bfc2:	f3bf 8f6f 	isb	sy
 801bfc6:	f3bf 8f4f 	dsb	sy
 801bfca:	617b      	str	r3, [r7, #20]
}
 801bfcc:	bf00      	nop
 801bfce:	bf00      	nop
 801bfd0:	e7fd      	b.n	801bfce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801bfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfd4:	699a      	ldr	r2, [r3, #24]
 801bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfd8:	18d1      	adds	r1, r2, r3
 801bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bfde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bfe0:	f7ff ff04 	bl	801bdec <prvInsertTimerInActiveList>
					break;
 801bfe4:	e017      	b.n	801c016 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bfec:	f003 0302 	and.w	r3, r3, #2
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d103      	bne.n	801bffc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801bff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bff6:	f000 fbe7 	bl	801c7c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801bffa:	e00c      	b.n	801c016 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c002:	f023 0301 	bic.w	r3, r3, #1
 801c006:	b2da      	uxtb	r2, r3
 801c008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c00a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801c00e:	e002      	b.n	801c016 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801c010:	bf00      	nop
 801c012:	e000      	b.n	801c016 <prvProcessReceivedCommands+0x1a6>
					break;
 801c014:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c016:	4b08      	ldr	r3, [pc, #32]	@ (801c038 <prvProcessReceivedCommands+0x1c8>)
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	1d39      	adds	r1, r7, #4
 801c01c:	2200      	movs	r2, #0
 801c01e:	4618      	mov	r0, r3
 801c020:	f7fd febc 	bl	8019d9c <xQueueReceive>
 801c024:	4603      	mov	r3, r0
 801c026:	2b00      	cmp	r3, #0
 801c028:	f47f af26 	bne.w	801be78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c02c:	bf00      	nop
 801c02e:	bf00      	nop
 801c030:	3730      	adds	r7, #48	@ 0x30
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}
 801c036:	bf00      	nop
 801c038:	20008ca8 	.word	0x20008ca8

0801c03c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b088      	sub	sp, #32
 801c040:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c042:	e049      	b.n	801c0d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c044:	4b2e      	ldr	r3, [pc, #184]	@ (801c100 <prvSwitchTimerLists+0xc4>)
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	68db      	ldr	r3, [r3, #12]
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c04e:	4b2c      	ldr	r3, [pc, #176]	@ (801c100 <prvSwitchTimerLists+0xc4>)
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	68db      	ldr	r3, [r3, #12]
 801c054:	68db      	ldr	r3, [r3, #12]
 801c056:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	3304      	adds	r3, #4
 801c05c:	4618      	mov	r0, r3
 801c05e:	f7fd fad5 	bl	801960c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	6a1b      	ldr	r3, [r3, #32]
 801c066:	68f8      	ldr	r0, [r7, #12]
 801c068:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c070:	f003 0304 	and.w	r3, r3, #4
 801c074:	2b00      	cmp	r3, #0
 801c076:	d02f      	beq.n	801c0d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	699b      	ldr	r3, [r3, #24]
 801c07c:	693a      	ldr	r2, [r7, #16]
 801c07e:	4413      	add	r3, r2
 801c080:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c082:	68ba      	ldr	r2, [r7, #8]
 801c084:	693b      	ldr	r3, [r7, #16]
 801c086:	429a      	cmp	r2, r3
 801c088:	d90e      	bls.n	801c0a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	68ba      	ldr	r2, [r7, #8]
 801c08e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	68fa      	ldr	r2, [r7, #12]
 801c094:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c096:	4b1a      	ldr	r3, [pc, #104]	@ (801c100 <prvSwitchTimerLists+0xc4>)
 801c098:	681a      	ldr	r2, [r3, #0]
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	3304      	adds	r3, #4
 801c09e:	4619      	mov	r1, r3
 801c0a0:	4610      	mov	r0, r2
 801c0a2:	f7fd fa7a 	bl	801959a <vListInsert>
 801c0a6:	e017      	b.n	801c0d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c0a8:	2300      	movs	r3, #0
 801c0aa:	9300      	str	r3, [sp, #0]
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	693a      	ldr	r2, [r7, #16]
 801c0b0:	2100      	movs	r1, #0
 801c0b2:	68f8      	ldr	r0, [r7, #12]
 801c0b4:	f7ff fd58 	bl	801bb68 <xTimerGenericCommand>
 801c0b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d10b      	bne.n	801c0d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801c0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c0c4:	f383 8811 	msr	BASEPRI, r3
 801c0c8:	f3bf 8f6f 	isb	sy
 801c0cc:	f3bf 8f4f 	dsb	sy
 801c0d0:	603b      	str	r3, [r7, #0]
}
 801c0d2:	bf00      	nop
 801c0d4:	bf00      	nop
 801c0d6:	e7fd      	b.n	801c0d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c0d8:	4b09      	ldr	r3, [pc, #36]	@ (801c100 <prvSwitchTimerLists+0xc4>)
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d1b0      	bne.n	801c044 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c0e2:	4b07      	ldr	r3, [pc, #28]	@ (801c100 <prvSwitchTimerLists+0xc4>)
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c0e8:	4b06      	ldr	r3, [pc, #24]	@ (801c104 <prvSwitchTimerLists+0xc8>)
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	4a04      	ldr	r2, [pc, #16]	@ (801c100 <prvSwitchTimerLists+0xc4>)
 801c0ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c0f0:	4a04      	ldr	r2, [pc, #16]	@ (801c104 <prvSwitchTimerLists+0xc8>)
 801c0f2:	697b      	ldr	r3, [r7, #20]
 801c0f4:	6013      	str	r3, [r2, #0]
}
 801c0f6:	bf00      	nop
 801c0f8:	3718      	adds	r7, #24
 801c0fa:	46bd      	mov	sp, r7
 801c0fc:	bd80      	pop	{r7, pc}
 801c0fe:	bf00      	nop
 801c100:	20008ca0 	.word	0x20008ca0
 801c104:	20008ca4 	.word	0x20008ca4

0801c108 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c108:	b580      	push	{r7, lr}
 801c10a:	b082      	sub	sp, #8
 801c10c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c10e:	f000 f96b 	bl	801c3e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c112:	4b15      	ldr	r3, [pc, #84]	@ (801c168 <prvCheckForValidListAndQueue+0x60>)
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d120      	bne.n	801c15c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c11a:	4814      	ldr	r0, [pc, #80]	@ (801c16c <prvCheckForValidListAndQueue+0x64>)
 801c11c:	f7fd f9ec 	bl	80194f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c120:	4813      	ldr	r0, [pc, #76]	@ (801c170 <prvCheckForValidListAndQueue+0x68>)
 801c122:	f7fd f9e9 	bl	80194f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c126:	4b13      	ldr	r3, [pc, #76]	@ (801c174 <prvCheckForValidListAndQueue+0x6c>)
 801c128:	4a10      	ldr	r2, [pc, #64]	@ (801c16c <prvCheckForValidListAndQueue+0x64>)
 801c12a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c12c:	4b12      	ldr	r3, [pc, #72]	@ (801c178 <prvCheckForValidListAndQueue+0x70>)
 801c12e:	4a10      	ldr	r2, [pc, #64]	@ (801c170 <prvCheckForValidListAndQueue+0x68>)
 801c130:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c132:	2300      	movs	r3, #0
 801c134:	9300      	str	r3, [sp, #0]
 801c136:	4b11      	ldr	r3, [pc, #68]	@ (801c17c <prvCheckForValidListAndQueue+0x74>)
 801c138:	4a11      	ldr	r2, [pc, #68]	@ (801c180 <prvCheckForValidListAndQueue+0x78>)
 801c13a:	2110      	movs	r1, #16
 801c13c:	200a      	movs	r0, #10
 801c13e:	f7fd faf9 	bl	8019734 <xQueueGenericCreateStatic>
 801c142:	4603      	mov	r3, r0
 801c144:	4a08      	ldr	r2, [pc, #32]	@ (801c168 <prvCheckForValidListAndQueue+0x60>)
 801c146:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c148:	4b07      	ldr	r3, [pc, #28]	@ (801c168 <prvCheckForValidListAndQueue+0x60>)
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d005      	beq.n	801c15c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c150:	4b05      	ldr	r3, [pc, #20]	@ (801c168 <prvCheckForValidListAndQueue+0x60>)
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	490b      	ldr	r1, [pc, #44]	@ (801c184 <prvCheckForValidListAndQueue+0x7c>)
 801c156:	4618      	mov	r0, r3
 801c158:	f7fe f9fa 	bl	801a550 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c15c:	f000 f976 	bl	801c44c <vPortExitCritical>
}
 801c160:	bf00      	nop
 801c162:	46bd      	mov	sp, r7
 801c164:	bd80      	pop	{r7, pc}
 801c166:	bf00      	nop
 801c168:	20008ca8 	.word	0x20008ca8
 801c16c:	20008c78 	.word	0x20008c78
 801c170:	20008c8c 	.word	0x20008c8c
 801c174:	20008ca0 	.word	0x20008ca0
 801c178:	20008ca4 	.word	0x20008ca4
 801c17c:	20008d54 	.word	0x20008d54
 801c180:	20008cb4 	.word	0x20008cb4
 801c184:	0801e148 	.word	0x0801e148

0801c188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c188:	b480      	push	{r7}
 801c18a:	b085      	sub	sp, #20
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	60f8      	str	r0, [r7, #12]
 801c190:	60b9      	str	r1, [r7, #8]
 801c192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	3b04      	subs	r3, #4
 801c198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801c1a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	3b04      	subs	r3, #4
 801c1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c1a8:	68bb      	ldr	r3, [r7, #8]
 801c1aa:	f023 0201 	bic.w	r2, r3, #1
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	3b04      	subs	r3, #4
 801c1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c1b8:	4a0c      	ldr	r2, [pc, #48]	@ (801c1ec <pxPortInitialiseStack+0x64>)
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	3b14      	subs	r3, #20
 801c1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c1c4:	687a      	ldr	r2, [r7, #4]
 801c1c6:	68fb      	ldr	r3, [r7, #12]
 801c1c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	3b04      	subs	r3, #4
 801c1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	f06f 0202 	mvn.w	r2, #2
 801c1d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	3b20      	subs	r3, #32
 801c1dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c1de:	68fb      	ldr	r3, [r7, #12]
}
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	3714      	adds	r7, #20
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ea:	4770      	bx	lr
 801c1ec:	0801c1f1 	.word	0x0801c1f1

0801c1f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c1f0:	b480      	push	{r7}
 801c1f2:	b085      	sub	sp, #20
 801c1f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c1fa:	4b13      	ldr	r3, [pc, #76]	@ (801c248 <prvTaskExitError+0x58>)
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c202:	d00b      	beq.n	801c21c <prvTaskExitError+0x2c>
	__asm volatile
 801c204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c208:	f383 8811 	msr	BASEPRI, r3
 801c20c:	f3bf 8f6f 	isb	sy
 801c210:	f3bf 8f4f 	dsb	sy
 801c214:	60fb      	str	r3, [r7, #12]
}
 801c216:	bf00      	nop
 801c218:	bf00      	nop
 801c21a:	e7fd      	b.n	801c218 <prvTaskExitError+0x28>
	__asm volatile
 801c21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c220:	f383 8811 	msr	BASEPRI, r3
 801c224:	f3bf 8f6f 	isb	sy
 801c228:	f3bf 8f4f 	dsb	sy
 801c22c:	60bb      	str	r3, [r7, #8]
}
 801c22e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c230:	bf00      	nop
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d0fc      	beq.n	801c232 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c238:	bf00      	nop
 801c23a:	bf00      	nop
 801c23c:	3714      	adds	r7, #20
 801c23e:	46bd      	mov	sp, r7
 801c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c244:	4770      	bx	lr
 801c246:	bf00      	nop
 801c248:	20000078 	.word	0x20000078
 801c24c:	00000000 	.word	0x00000000

0801c250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c250:	4b07      	ldr	r3, [pc, #28]	@ (801c270 <pxCurrentTCBConst2>)
 801c252:	6819      	ldr	r1, [r3, #0]
 801c254:	6808      	ldr	r0, [r1, #0]
 801c256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c25a:	f380 8809 	msr	PSP, r0
 801c25e:	f3bf 8f6f 	isb	sy
 801c262:	f04f 0000 	mov.w	r0, #0
 801c266:	f380 8811 	msr	BASEPRI, r0
 801c26a:	4770      	bx	lr
 801c26c:	f3af 8000 	nop.w

0801c270 <pxCurrentTCBConst2>:
 801c270:	20008778 	.word	0x20008778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c274:	bf00      	nop
 801c276:	bf00      	nop

0801c278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c278:	4808      	ldr	r0, [pc, #32]	@ (801c29c <prvPortStartFirstTask+0x24>)
 801c27a:	6800      	ldr	r0, [r0, #0]
 801c27c:	6800      	ldr	r0, [r0, #0]
 801c27e:	f380 8808 	msr	MSP, r0
 801c282:	f04f 0000 	mov.w	r0, #0
 801c286:	f380 8814 	msr	CONTROL, r0
 801c28a:	b662      	cpsie	i
 801c28c:	b661      	cpsie	f
 801c28e:	f3bf 8f4f 	dsb	sy
 801c292:	f3bf 8f6f 	isb	sy
 801c296:	df00      	svc	0
 801c298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c29a:	bf00      	nop
 801c29c:	e000ed08 	.word	0xe000ed08

0801c2a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c2a0:	b580      	push	{r7, lr}
 801c2a2:	b086      	sub	sp, #24
 801c2a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c2a6:	4b47      	ldr	r3, [pc, #284]	@ (801c3c4 <xPortStartScheduler+0x124>)
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	4a47      	ldr	r2, [pc, #284]	@ (801c3c8 <xPortStartScheduler+0x128>)
 801c2ac:	4293      	cmp	r3, r2
 801c2ae:	d10b      	bne.n	801c2c8 <xPortStartScheduler+0x28>
	__asm volatile
 801c2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c2b4:	f383 8811 	msr	BASEPRI, r3
 801c2b8:	f3bf 8f6f 	isb	sy
 801c2bc:	f3bf 8f4f 	dsb	sy
 801c2c0:	613b      	str	r3, [r7, #16]
}
 801c2c2:	bf00      	nop
 801c2c4:	bf00      	nop
 801c2c6:	e7fd      	b.n	801c2c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c2c8:	4b3e      	ldr	r3, [pc, #248]	@ (801c3c4 <xPortStartScheduler+0x124>)
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	4a3f      	ldr	r2, [pc, #252]	@ (801c3cc <xPortStartScheduler+0x12c>)
 801c2ce:	4293      	cmp	r3, r2
 801c2d0:	d10b      	bne.n	801c2ea <xPortStartScheduler+0x4a>
	__asm volatile
 801c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c2d6:	f383 8811 	msr	BASEPRI, r3
 801c2da:	f3bf 8f6f 	isb	sy
 801c2de:	f3bf 8f4f 	dsb	sy
 801c2e2:	60fb      	str	r3, [r7, #12]
}
 801c2e4:	bf00      	nop
 801c2e6:	bf00      	nop
 801c2e8:	e7fd      	b.n	801c2e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c2ea:	4b39      	ldr	r3, [pc, #228]	@ (801c3d0 <xPortStartScheduler+0x130>)
 801c2ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c2ee:	697b      	ldr	r3, [r7, #20]
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	b2db      	uxtb	r3, r3
 801c2f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c2f6:	697b      	ldr	r3, [r7, #20]
 801c2f8:	22ff      	movs	r2, #255	@ 0xff
 801c2fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c2fc:	697b      	ldr	r3, [r7, #20]
 801c2fe:	781b      	ldrb	r3, [r3, #0]
 801c300:	b2db      	uxtb	r3, r3
 801c302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c304:	78fb      	ldrb	r3, [r7, #3]
 801c306:	b2db      	uxtb	r3, r3
 801c308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801c30c:	b2da      	uxtb	r2, r3
 801c30e:	4b31      	ldr	r3, [pc, #196]	@ (801c3d4 <xPortStartScheduler+0x134>)
 801c310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c312:	4b31      	ldr	r3, [pc, #196]	@ (801c3d8 <xPortStartScheduler+0x138>)
 801c314:	2207      	movs	r2, #7
 801c316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c318:	e009      	b.n	801c32e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801c31a:	4b2f      	ldr	r3, [pc, #188]	@ (801c3d8 <xPortStartScheduler+0x138>)
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	3b01      	subs	r3, #1
 801c320:	4a2d      	ldr	r2, [pc, #180]	@ (801c3d8 <xPortStartScheduler+0x138>)
 801c322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c324:	78fb      	ldrb	r3, [r7, #3]
 801c326:	b2db      	uxtb	r3, r3
 801c328:	005b      	lsls	r3, r3, #1
 801c32a:	b2db      	uxtb	r3, r3
 801c32c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c32e:	78fb      	ldrb	r3, [r7, #3]
 801c330:	b2db      	uxtb	r3, r3
 801c332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c336:	2b80      	cmp	r3, #128	@ 0x80
 801c338:	d0ef      	beq.n	801c31a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c33a:	4b27      	ldr	r3, [pc, #156]	@ (801c3d8 <xPortStartScheduler+0x138>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	f1c3 0307 	rsb	r3, r3, #7
 801c342:	2b04      	cmp	r3, #4
 801c344:	d00b      	beq.n	801c35e <xPortStartScheduler+0xbe>
	__asm volatile
 801c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c34a:	f383 8811 	msr	BASEPRI, r3
 801c34e:	f3bf 8f6f 	isb	sy
 801c352:	f3bf 8f4f 	dsb	sy
 801c356:	60bb      	str	r3, [r7, #8]
}
 801c358:	bf00      	nop
 801c35a:	bf00      	nop
 801c35c:	e7fd      	b.n	801c35a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c35e:	4b1e      	ldr	r3, [pc, #120]	@ (801c3d8 <xPortStartScheduler+0x138>)
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	021b      	lsls	r3, r3, #8
 801c364:	4a1c      	ldr	r2, [pc, #112]	@ (801c3d8 <xPortStartScheduler+0x138>)
 801c366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c368:	4b1b      	ldr	r3, [pc, #108]	@ (801c3d8 <xPortStartScheduler+0x138>)
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c370:	4a19      	ldr	r2, [pc, #100]	@ (801c3d8 <xPortStartScheduler+0x138>)
 801c372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	b2da      	uxtb	r2, r3
 801c378:	697b      	ldr	r3, [r7, #20]
 801c37a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c37c:	4b17      	ldr	r3, [pc, #92]	@ (801c3dc <xPortStartScheduler+0x13c>)
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	4a16      	ldr	r2, [pc, #88]	@ (801c3dc <xPortStartScheduler+0x13c>)
 801c382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801c386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c388:	4b14      	ldr	r3, [pc, #80]	@ (801c3dc <xPortStartScheduler+0x13c>)
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	4a13      	ldr	r2, [pc, #76]	@ (801c3dc <xPortStartScheduler+0x13c>)
 801c38e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801c392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c394:	f000 f8da 	bl	801c54c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c398:	4b11      	ldr	r3, [pc, #68]	@ (801c3e0 <xPortStartScheduler+0x140>)
 801c39a:	2200      	movs	r2, #0
 801c39c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c39e:	f000 f8f9 	bl	801c594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c3a2:	4b10      	ldr	r3, [pc, #64]	@ (801c3e4 <xPortStartScheduler+0x144>)
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	4a0f      	ldr	r2, [pc, #60]	@ (801c3e4 <xPortStartScheduler+0x144>)
 801c3a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801c3ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c3ae:	f7ff ff63 	bl	801c278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c3b2:	f7fe fd17 	bl	801ade4 <vTaskSwitchContext>
	prvTaskExitError();
 801c3b6:	f7ff ff1b 	bl	801c1f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c3ba:	2300      	movs	r3, #0
}
 801c3bc:	4618      	mov	r0, r3
 801c3be:	3718      	adds	r7, #24
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	e000ed00 	.word	0xe000ed00
 801c3c8:	410fc271 	.word	0x410fc271
 801c3cc:	410fc270 	.word	0x410fc270
 801c3d0:	e000e400 	.word	0xe000e400
 801c3d4:	20008da4 	.word	0x20008da4
 801c3d8:	20008da8 	.word	0x20008da8
 801c3dc:	e000ed20 	.word	0xe000ed20
 801c3e0:	20000078 	.word	0x20000078
 801c3e4:	e000ef34 	.word	0xe000ef34

0801c3e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c3e8:	b480      	push	{r7}
 801c3ea:	b083      	sub	sp, #12
 801c3ec:	af00      	add	r7, sp, #0
	__asm volatile
 801c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c3f2:	f383 8811 	msr	BASEPRI, r3
 801c3f6:	f3bf 8f6f 	isb	sy
 801c3fa:	f3bf 8f4f 	dsb	sy
 801c3fe:	607b      	str	r3, [r7, #4]
}
 801c400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c402:	4b10      	ldr	r3, [pc, #64]	@ (801c444 <vPortEnterCritical+0x5c>)
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	3301      	adds	r3, #1
 801c408:	4a0e      	ldr	r2, [pc, #56]	@ (801c444 <vPortEnterCritical+0x5c>)
 801c40a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c40c:	4b0d      	ldr	r3, [pc, #52]	@ (801c444 <vPortEnterCritical+0x5c>)
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	2b01      	cmp	r3, #1
 801c412:	d110      	bne.n	801c436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c414:	4b0c      	ldr	r3, [pc, #48]	@ (801c448 <vPortEnterCritical+0x60>)
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	b2db      	uxtb	r3, r3
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d00b      	beq.n	801c436 <vPortEnterCritical+0x4e>
	__asm volatile
 801c41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c422:	f383 8811 	msr	BASEPRI, r3
 801c426:	f3bf 8f6f 	isb	sy
 801c42a:	f3bf 8f4f 	dsb	sy
 801c42e:	603b      	str	r3, [r7, #0]
}
 801c430:	bf00      	nop
 801c432:	bf00      	nop
 801c434:	e7fd      	b.n	801c432 <vPortEnterCritical+0x4a>
	}
}
 801c436:	bf00      	nop
 801c438:	370c      	adds	r7, #12
 801c43a:	46bd      	mov	sp, r7
 801c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c440:	4770      	bx	lr
 801c442:	bf00      	nop
 801c444:	20000078 	.word	0x20000078
 801c448:	e000ed04 	.word	0xe000ed04

0801c44c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c44c:	b480      	push	{r7}
 801c44e:	b083      	sub	sp, #12
 801c450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c452:	4b12      	ldr	r3, [pc, #72]	@ (801c49c <vPortExitCritical+0x50>)
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	2b00      	cmp	r3, #0
 801c458:	d10b      	bne.n	801c472 <vPortExitCritical+0x26>
	__asm volatile
 801c45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c45e:	f383 8811 	msr	BASEPRI, r3
 801c462:	f3bf 8f6f 	isb	sy
 801c466:	f3bf 8f4f 	dsb	sy
 801c46a:	607b      	str	r3, [r7, #4]
}
 801c46c:	bf00      	nop
 801c46e:	bf00      	nop
 801c470:	e7fd      	b.n	801c46e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c472:	4b0a      	ldr	r3, [pc, #40]	@ (801c49c <vPortExitCritical+0x50>)
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	3b01      	subs	r3, #1
 801c478:	4a08      	ldr	r2, [pc, #32]	@ (801c49c <vPortExitCritical+0x50>)
 801c47a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c47c:	4b07      	ldr	r3, [pc, #28]	@ (801c49c <vPortExitCritical+0x50>)
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d105      	bne.n	801c490 <vPortExitCritical+0x44>
 801c484:	2300      	movs	r3, #0
 801c486:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c488:	683b      	ldr	r3, [r7, #0]
 801c48a:	f383 8811 	msr	BASEPRI, r3
}
 801c48e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c490:	bf00      	nop
 801c492:	370c      	adds	r7, #12
 801c494:	46bd      	mov	sp, r7
 801c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c49a:	4770      	bx	lr
 801c49c:	20000078 	.word	0x20000078

0801c4a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c4a0:	f3ef 8009 	mrs	r0, PSP
 801c4a4:	f3bf 8f6f 	isb	sy
 801c4a8:	4b15      	ldr	r3, [pc, #84]	@ (801c500 <pxCurrentTCBConst>)
 801c4aa:	681a      	ldr	r2, [r3, #0]
 801c4ac:	f01e 0f10 	tst.w	lr, #16
 801c4b0:	bf08      	it	eq
 801c4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4ba:	6010      	str	r0, [r2, #0]
 801c4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c4c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801c4c4:	f380 8811 	msr	BASEPRI, r0
 801c4c8:	f3bf 8f4f 	dsb	sy
 801c4cc:	f3bf 8f6f 	isb	sy
 801c4d0:	f7fe fc88 	bl	801ade4 <vTaskSwitchContext>
 801c4d4:	f04f 0000 	mov.w	r0, #0
 801c4d8:	f380 8811 	msr	BASEPRI, r0
 801c4dc:	bc09      	pop	{r0, r3}
 801c4de:	6819      	ldr	r1, [r3, #0]
 801c4e0:	6808      	ldr	r0, [r1, #0]
 801c4e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4e6:	f01e 0f10 	tst.w	lr, #16
 801c4ea:	bf08      	it	eq
 801c4ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c4f0:	f380 8809 	msr	PSP, r0
 801c4f4:	f3bf 8f6f 	isb	sy
 801c4f8:	4770      	bx	lr
 801c4fa:	bf00      	nop
 801c4fc:	f3af 8000 	nop.w

0801c500 <pxCurrentTCBConst>:
 801c500:	20008778 	.word	0x20008778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c504:	bf00      	nop
 801c506:	bf00      	nop

0801c508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c508:	b580      	push	{r7, lr}
 801c50a:	b082      	sub	sp, #8
 801c50c:	af00      	add	r7, sp, #0
	__asm volatile
 801c50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c512:	f383 8811 	msr	BASEPRI, r3
 801c516:	f3bf 8f6f 	isb	sy
 801c51a:	f3bf 8f4f 	dsb	sy
 801c51e:	607b      	str	r3, [r7, #4]
}
 801c520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c522:	f7fe fba5 	bl	801ac70 <xTaskIncrementTick>
 801c526:	4603      	mov	r3, r0
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d003      	beq.n	801c534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c52c:	4b06      	ldr	r3, [pc, #24]	@ (801c548 <xPortSysTickHandler+0x40>)
 801c52e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c532:	601a      	str	r2, [r3, #0]
 801c534:	2300      	movs	r3, #0
 801c536:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c538:	683b      	ldr	r3, [r7, #0]
 801c53a:	f383 8811 	msr	BASEPRI, r3
}
 801c53e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c540:	bf00      	nop
 801c542:	3708      	adds	r7, #8
 801c544:	46bd      	mov	sp, r7
 801c546:	bd80      	pop	{r7, pc}
 801c548:	e000ed04 	.word	0xe000ed04

0801c54c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c54c:	b480      	push	{r7}
 801c54e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c550:	4b0b      	ldr	r3, [pc, #44]	@ (801c580 <vPortSetupTimerInterrupt+0x34>)
 801c552:	2200      	movs	r2, #0
 801c554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c556:	4b0b      	ldr	r3, [pc, #44]	@ (801c584 <vPortSetupTimerInterrupt+0x38>)
 801c558:	2200      	movs	r2, #0
 801c55a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c55c:	4b0a      	ldr	r3, [pc, #40]	@ (801c588 <vPortSetupTimerInterrupt+0x3c>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	4a0a      	ldr	r2, [pc, #40]	@ (801c58c <vPortSetupTimerInterrupt+0x40>)
 801c562:	fba2 2303 	umull	r2, r3, r2, r3
 801c566:	099b      	lsrs	r3, r3, #6
 801c568:	4a09      	ldr	r2, [pc, #36]	@ (801c590 <vPortSetupTimerInterrupt+0x44>)
 801c56a:	3b01      	subs	r3, #1
 801c56c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c56e:	4b04      	ldr	r3, [pc, #16]	@ (801c580 <vPortSetupTimerInterrupt+0x34>)
 801c570:	2207      	movs	r2, #7
 801c572:	601a      	str	r2, [r3, #0]
}
 801c574:	bf00      	nop
 801c576:	46bd      	mov	sp, r7
 801c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c57c:	4770      	bx	lr
 801c57e:	bf00      	nop
 801c580:	e000e010 	.word	0xe000e010
 801c584:	e000e018 	.word	0xe000e018
 801c588:	20000008 	.word	0x20000008
 801c58c:	10624dd3 	.word	0x10624dd3
 801c590:	e000e014 	.word	0xe000e014

0801c594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801c5a4 <vPortEnableVFP+0x10>
 801c598:	6801      	ldr	r1, [r0, #0]
 801c59a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801c59e:	6001      	str	r1, [r0, #0]
 801c5a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c5a2:	bf00      	nop
 801c5a4:	e000ed88 	.word	0xe000ed88

0801c5a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c5a8:	b480      	push	{r7}
 801c5aa:	b085      	sub	sp, #20
 801c5ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c5ae:	f3ef 8305 	mrs	r3, IPSR
 801c5b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	2b0f      	cmp	r3, #15
 801c5b8:	d915      	bls.n	801c5e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c5ba:	4a18      	ldr	r2, [pc, #96]	@ (801c61c <vPortValidateInterruptPriority+0x74>)
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	4413      	add	r3, r2
 801c5c0:	781b      	ldrb	r3, [r3, #0]
 801c5c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c5c4:	4b16      	ldr	r3, [pc, #88]	@ (801c620 <vPortValidateInterruptPriority+0x78>)
 801c5c6:	781b      	ldrb	r3, [r3, #0]
 801c5c8:	7afa      	ldrb	r2, [r7, #11]
 801c5ca:	429a      	cmp	r2, r3
 801c5cc:	d20b      	bcs.n	801c5e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801c5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c5d2:	f383 8811 	msr	BASEPRI, r3
 801c5d6:	f3bf 8f6f 	isb	sy
 801c5da:	f3bf 8f4f 	dsb	sy
 801c5de:	607b      	str	r3, [r7, #4]
}
 801c5e0:	bf00      	nop
 801c5e2:	bf00      	nop
 801c5e4:	e7fd      	b.n	801c5e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c5e6:	4b0f      	ldr	r3, [pc, #60]	@ (801c624 <vPortValidateInterruptPriority+0x7c>)
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801c5ee:	4b0e      	ldr	r3, [pc, #56]	@ (801c628 <vPortValidateInterruptPriority+0x80>)
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	429a      	cmp	r2, r3
 801c5f4:	d90b      	bls.n	801c60e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801c5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c5fa:	f383 8811 	msr	BASEPRI, r3
 801c5fe:	f3bf 8f6f 	isb	sy
 801c602:	f3bf 8f4f 	dsb	sy
 801c606:	603b      	str	r3, [r7, #0]
}
 801c608:	bf00      	nop
 801c60a:	bf00      	nop
 801c60c:	e7fd      	b.n	801c60a <vPortValidateInterruptPriority+0x62>
	}
 801c60e:	bf00      	nop
 801c610:	3714      	adds	r7, #20
 801c612:	46bd      	mov	sp, r7
 801c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c618:	4770      	bx	lr
 801c61a:	bf00      	nop
 801c61c:	e000e3f0 	.word	0xe000e3f0
 801c620:	20008da4 	.word	0x20008da4
 801c624:	e000ed0c 	.word	0xe000ed0c
 801c628:	20008da8 	.word	0x20008da8

0801c62c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c62c:	b580      	push	{r7, lr}
 801c62e:	b08a      	sub	sp, #40	@ 0x28
 801c630:	af00      	add	r7, sp, #0
 801c632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c634:	2300      	movs	r3, #0
 801c636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c638:	f7fe fa4c 	bl	801aad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c63c:	4b5c      	ldr	r3, [pc, #368]	@ (801c7b0 <pvPortMalloc+0x184>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d101      	bne.n	801c648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c644:	f000 f924 	bl	801c890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c648:	4b5a      	ldr	r3, [pc, #360]	@ (801c7b4 <pvPortMalloc+0x188>)
 801c64a:	681a      	ldr	r2, [r3, #0]
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	4013      	ands	r3, r2
 801c650:	2b00      	cmp	r3, #0
 801c652:	f040 8095 	bne.w	801c780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d01e      	beq.n	801c69a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801c65c:	2208      	movs	r2, #8
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	4413      	add	r3, r2
 801c662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	f003 0307 	and.w	r3, r3, #7
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d015      	beq.n	801c69a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	f023 0307 	bic.w	r3, r3, #7
 801c674:	3308      	adds	r3, #8
 801c676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	f003 0307 	and.w	r3, r3, #7
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d00b      	beq.n	801c69a <pvPortMalloc+0x6e>
	__asm volatile
 801c682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c686:	f383 8811 	msr	BASEPRI, r3
 801c68a:	f3bf 8f6f 	isb	sy
 801c68e:	f3bf 8f4f 	dsb	sy
 801c692:	617b      	str	r3, [r7, #20]
}
 801c694:	bf00      	nop
 801c696:	bf00      	nop
 801c698:	e7fd      	b.n	801c696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d06f      	beq.n	801c780 <pvPortMalloc+0x154>
 801c6a0:	4b45      	ldr	r3, [pc, #276]	@ (801c7b8 <pvPortMalloc+0x18c>)
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	687a      	ldr	r2, [r7, #4]
 801c6a6:	429a      	cmp	r2, r3
 801c6a8:	d86a      	bhi.n	801c780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c6aa:	4b44      	ldr	r3, [pc, #272]	@ (801c7bc <pvPortMalloc+0x190>)
 801c6ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c6ae:	4b43      	ldr	r3, [pc, #268]	@ (801c7bc <pvPortMalloc+0x190>)
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c6b4:	e004      	b.n	801c6c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6c2:	685b      	ldr	r3, [r3, #4]
 801c6c4:	687a      	ldr	r2, [r7, #4]
 801c6c6:	429a      	cmp	r2, r3
 801c6c8:	d903      	bls.n	801c6d2 <pvPortMalloc+0xa6>
 801c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d1f1      	bne.n	801c6b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c6d2:	4b37      	ldr	r3, [pc, #220]	@ (801c7b0 <pvPortMalloc+0x184>)
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6d8:	429a      	cmp	r2, r3
 801c6da:	d051      	beq.n	801c780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c6dc:	6a3b      	ldr	r3, [r7, #32]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	2208      	movs	r2, #8
 801c6e2:	4413      	add	r3, r2
 801c6e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6e8:	681a      	ldr	r2, [r3, #0]
 801c6ea:	6a3b      	ldr	r3, [r7, #32]
 801c6ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6f0:	685a      	ldr	r2, [r3, #4]
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	1ad2      	subs	r2, r2, r3
 801c6f6:	2308      	movs	r3, #8
 801c6f8:	005b      	lsls	r3, r3, #1
 801c6fa:	429a      	cmp	r2, r3
 801c6fc:	d920      	bls.n	801c740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	4413      	add	r3, r2
 801c704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c706:	69bb      	ldr	r3, [r7, #24]
 801c708:	f003 0307 	and.w	r3, r3, #7
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d00b      	beq.n	801c728 <pvPortMalloc+0xfc>
	__asm volatile
 801c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c714:	f383 8811 	msr	BASEPRI, r3
 801c718:	f3bf 8f6f 	isb	sy
 801c71c:	f3bf 8f4f 	dsb	sy
 801c720:	613b      	str	r3, [r7, #16]
}
 801c722:	bf00      	nop
 801c724:	bf00      	nop
 801c726:	e7fd      	b.n	801c724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c72a:	685a      	ldr	r2, [r3, #4]
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	1ad2      	subs	r2, r2, r3
 801c730:	69bb      	ldr	r3, [r7, #24]
 801c732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c736:	687a      	ldr	r2, [r7, #4]
 801c738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c73a:	69b8      	ldr	r0, [r7, #24]
 801c73c:	f000 f90a 	bl	801c954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c740:	4b1d      	ldr	r3, [pc, #116]	@ (801c7b8 <pvPortMalloc+0x18c>)
 801c742:	681a      	ldr	r2, [r3, #0]
 801c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c746:	685b      	ldr	r3, [r3, #4]
 801c748:	1ad3      	subs	r3, r2, r3
 801c74a:	4a1b      	ldr	r2, [pc, #108]	@ (801c7b8 <pvPortMalloc+0x18c>)
 801c74c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c74e:	4b1a      	ldr	r3, [pc, #104]	@ (801c7b8 <pvPortMalloc+0x18c>)
 801c750:	681a      	ldr	r2, [r3, #0]
 801c752:	4b1b      	ldr	r3, [pc, #108]	@ (801c7c0 <pvPortMalloc+0x194>)
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	429a      	cmp	r2, r3
 801c758:	d203      	bcs.n	801c762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c75a:	4b17      	ldr	r3, [pc, #92]	@ (801c7b8 <pvPortMalloc+0x18c>)
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	4a18      	ldr	r2, [pc, #96]	@ (801c7c0 <pvPortMalloc+0x194>)
 801c760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c764:	685a      	ldr	r2, [r3, #4]
 801c766:	4b13      	ldr	r3, [pc, #76]	@ (801c7b4 <pvPortMalloc+0x188>)
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	431a      	orrs	r2, r3
 801c76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c76e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c772:	2200      	movs	r2, #0
 801c774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c776:	4b13      	ldr	r3, [pc, #76]	@ (801c7c4 <pvPortMalloc+0x198>)
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	3301      	adds	r3, #1
 801c77c:	4a11      	ldr	r2, [pc, #68]	@ (801c7c4 <pvPortMalloc+0x198>)
 801c77e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c780:	f7fe f9b6 	bl	801aaf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c784:	69fb      	ldr	r3, [r7, #28]
 801c786:	f003 0307 	and.w	r3, r3, #7
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d00b      	beq.n	801c7a6 <pvPortMalloc+0x17a>
	__asm volatile
 801c78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c792:	f383 8811 	msr	BASEPRI, r3
 801c796:	f3bf 8f6f 	isb	sy
 801c79a:	f3bf 8f4f 	dsb	sy
 801c79e:	60fb      	str	r3, [r7, #12]
}
 801c7a0:	bf00      	nop
 801c7a2:	bf00      	nop
 801c7a4:	e7fd      	b.n	801c7a2 <pvPortMalloc+0x176>
	return pvReturn;
 801c7a6:	69fb      	ldr	r3, [r7, #28]
}
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	3728      	adds	r7, #40	@ 0x28
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	bd80      	pop	{r7, pc}
 801c7b0:	2000bdb4 	.word	0x2000bdb4
 801c7b4:	2000bdc8 	.word	0x2000bdc8
 801c7b8:	2000bdb8 	.word	0x2000bdb8
 801c7bc:	2000bdac 	.word	0x2000bdac
 801c7c0:	2000bdbc 	.word	0x2000bdbc
 801c7c4:	2000bdc0 	.word	0x2000bdc0

0801c7c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b086      	sub	sp, #24
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d04f      	beq.n	801c87a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c7da:	2308      	movs	r3, #8
 801c7dc:	425b      	negs	r3, r3
 801c7de:	697a      	ldr	r2, [r7, #20]
 801c7e0:	4413      	add	r3, r2
 801c7e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c7e4:	697b      	ldr	r3, [r7, #20]
 801c7e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c7e8:	693b      	ldr	r3, [r7, #16]
 801c7ea:	685a      	ldr	r2, [r3, #4]
 801c7ec:	4b25      	ldr	r3, [pc, #148]	@ (801c884 <vPortFree+0xbc>)
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	4013      	ands	r3, r2
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d10b      	bne.n	801c80e <vPortFree+0x46>
	__asm volatile
 801c7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7fa:	f383 8811 	msr	BASEPRI, r3
 801c7fe:	f3bf 8f6f 	isb	sy
 801c802:	f3bf 8f4f 	dsb	sy
 801c806:	60fb      	str	r3, [r7, #12]
}
 801c808:	bf00      	nop
 801c80a:	bf00      	nop
 801c80c:	e7fd      	b.n	801c80a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c80e:	693b      	ldr	r3, [r7, #16]
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	2b00      	cmp	r3, #0
 801c814:	d00b      	beq.n	801c82e <vPortFree+0x66>
	__asm volatile
 801c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c81a:	f383 8811 	msr	BASEPRI, r3
 801c81e:	f3bf 8f6f 	isb	sy
 801c822:	f3bf 8f4f 	dsb	sy
 801c826:	60bb      	str	r3, [r7, #8]
}
 801c828:	bf00      	nop
 801c82a:	bf00      	nop
 801c82c:	e7fd      	b.n	801c82a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c82e:	693b      	ldr	r3, [r7, #16]
 801c830:	685a      	ldr	r2, [r3, #4]
 801c832:	4b14      	ldr	r3, [pc, #80]	@ (801c884 <vPortFree+0xbc>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	4013      	ands	r3, r2
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d01e      	beq.n	801c87a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c83c:	693b      	ldr	r3, [r7, #16]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d11a      	bne.n	801c87a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c844:	693b      	ldr	r3, [r7, #16]
 801c846:	685a      	ldr	r2, [r3, #4]
 801c848:	4b0e      	ldr	r3, [pc, #56]	@ (801c884 <vPortFree+0xbc>)
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	43db      	mvns	r3, r3
 801c84e:	401a      	ands	r2, r3
 801c850:	693b      	ldr	r3, [r7, #16]
 801c852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c854:	f7fe f93e 	bl	801aad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c858:	693b      	ldr	r3, [r7, #16]
 801c85a:	685a      	ldr	r2, [r3, #4]
 801c85c:	4b0a      	ldr	r3, [pc, #40]	@ (801c888 <vPortFree+0xc0>)
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	4413      	add	r3, r2
 801c862:	4a09      	ldr	r2, [pc, #36]	@ (801c888 <vPortFree+0xc0>)
 801c864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c866:	6938      	ldr	r0, [r7, #16]
 801c868:	f000 f874 	bl	801c954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c86c:	4b07      	ldr	r3, [pc, #28]	@ (801c88c <vPortFree+0xc4>)
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	3301      	adds	r3, #1
 801c872:	4a06      	ldr	r2, [pc, #24]	@ (801c88c <vPortFree+0xc4>)
 801c874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c876:	f7fe f93b 	bl	801aaf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c87a:	bf00      	nop
 801c87c:	3718      	adds	r7, #24
 801c87e:	46bd      	mov	sp, r7
 801c880:	bd80      	pop	{r7, pc}
 801c882:	bf00      	nop
 801c884:	2000bdc8 	.word	0x2000bdc8
 801c888:	2000bdb8 	.word	0x2000bdb8
 801c88c:	2000bdc4 	.word	0x2000bdc4

0801c890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c890:	b480      	push	{r7}
 801c892:	b085      	sub	sp, #20
 801c894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c896:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 801c89a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c89c:	4b27      	ldr	r3, [pc, #156]	@ (801c93c <prvHeapInit+0xac>)
 801c89e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	f003 0307 	and.w	r3, r3, #7
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d00c      	beq.n	801c8c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	3307      	adds	r3, #7
 801c8ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	f023 0307 	bic.w	r3, r3, #7
 801c8b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c8b8:	68ba      	ldr	r2, [r7, #8]
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	1ad3      	subs	r3, r2, r3
 801c8be:	4a1f      	ldr	r2, [pc, #124]	@ (801c93c <prvHeapInit+0xac>)
 801c8c0:	4413      	add	r3, r2
 801c8c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c8c8:	4a1d      	ldr	r2, [pc, #116]	@ (801c940 <prvHeapInit+0xb0>)
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c8ce:	4b1c      	ldr	r3, [pc, #112]	@ (801c940 <prvHeapInit+0xb0>)
 801c8d0:	2200      	movs	r2, #0
 801c8d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	68ba      	ldr	r2, [r7, #8]
 801c8d8:	4413      	add	r3, r2
 801c8da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c8dc:	2208      	movs	r2, #8
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	1a9b      	subs	r3, r3, r2
 801c8e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	f023 0307 	bic.w	r3, r3, #7
 801c8ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	4a15      	ldr	r2, [pc, #84]	@ (801c944 <prvHeapInit+0xb4>)
 801c8f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c8f2:	4b14      	ldr	r3, [pc, #80]	@ (801c944 <prvHeapInit+0xb4>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c8fa:	4b12      	ldr	r3, [pc, #72]	@ (801c944 <prvHeapInit+0xb4>)
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	2200      	movs	r2, #0
 801c900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c906:	683b      	ldr	r3, [r7, #0]
 801c908:	68fa      	ldr	r2, [r7, #12]
 801c90a:	1ad2      	subs	r2, r2, r3
 801c90c:	683b      	ldr	r3, [r7, #0]
 801c90e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c910:	4b0c      	ldr	r3, [pc, #48]	@ (801c944 <prvHeapInit+0xb4>)
 801c912:	681a      	ldr	r2, [r3, #0]
 801c914:	683b      	ldr	r3, [r7, #0]
 801c916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c918:	683b      	ldr	r3, [r7, #0]
 801c91a:	685b      	ldr	r3, [r3, #4]
 801c91c:	4a0a      	ldr	r2, [pc, #40]	@ (801c948 <prvHeapInit+0xb8>)
 801c91e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	685b      	ldr	r3, [r3, #4]
 801c924:	4a09      	ldr	r2, [pc, #36]	@ (801c94c <prvHeapInit+0xbc>)
 801c926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c928:	4b09      	ldr	r3, [pc, #36]	@ (801c950 <prvHeapInit+0xc0>)
 801c92a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801c92e:	601a      	str	r2, [r3, #0]
}
 801c930:	bf00      	nop
 801c932:	3714      	adds	r7, #20
 801c934:	46bd      	mov	sp, r7
 801c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c93a:	4770      	bx	lr
 801c93c:	20008dac 	.word	0x20008dac
 801c940:	2000bdac 	.word	0x2000bdac
 801c944:	2000bdb4 	.word	0x2000bdb4
 801c948:	2000bdbc 	.word	0x2000bdbc
 801c94c:	2000bdb8 	.word	0x2000bdb8
 801c950:	2000bdc8 	.word	0x2000bdc8

0801c954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c954:	b480      	push	{r7}
 801c956:	b085      	sub	sp, #20
 801c958:	af00      	add	r7, sp, #0
 801c95a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c95c:	4b28      	ldr	r3, [pc, #160]	@ (801ca00 <prvInsertBlockIntoFreeList+0xac>)
 801c95e:	60fb      	str	r3, [r7, #12]
 801c960:	e002      	b.n	801c968 <prvInsertBlockIntoFreeList+0x14>
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	60fb      	str	r3, [r7, #12]
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	687a      	ldr	r2, [r7, #4]
 801c96e:	429a      	cmp	r2, r3
 801c970:	d8f7      	bhi.n	801c962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	685b      	ldr	r3, [r3, #4]
 801c97a:	68ba      	ldr	r2, [r7, #8]
 801c97c:	4413      	add	r3, r2
 801c97e:	687a      	ldr	r2, [r7, #4]
 801c980:	429a      	cmp	r2, r3
 801c982:	d108      	bne.n	801c996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	685a      	ldr	r2, [r3, #4]
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	685b      	ldr	r3, [r3, #4]
 801c98c:	441a      	add	r2, r3
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	685b      	ldr	r3, [r3, #4]
 801c99e:	68ba      	ldr	r2, [r7, #8]
 801c9a0:	441a      	add	r2, r3
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	429a      	cmp	r2, r3
 801c9a8:	d118      	bne.n	801c9dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	681a      	ldr	r2, [r3, #0]
 801c9ae:	4b15      	ldr	r3, [pc, #84]	@ (801ca04 <prvInsertBlockIntoFreeList+0xb0>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	429a      	cmp	r2, r3
 801c9b4:	d00d      	beq.n	801c9d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	685a      	ldr	r2, [r3, #4]
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	685b      	ldr	r3, [r3, #4]
 801c9c0:	441a      	add	r2, r3
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	681a      	ldr	r2, [r3, #0]
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	601a      	str	r2, [r3, #0]
 801c9d0:	e008      	b.n	801c9e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c9d2:	4b0c      	ldr	r3, [pc, #48]	@ (801ca04 <prvInsertBlockIntoFreeList+0xb0>)
 801c9d4:	681a      	ldr	r2, [r3, #0]
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	601a      	str	r2, [r3, #0]
 801c9da:	e003      	b.n	801c9e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	681a      	ldr	r2, [r3, #0]
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c9e4:	68fa      	ldr	r2, [r7, #12]
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	429a      	cmp	r2, r3
 801c9ea:	d002      	beq.n	801c9f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	687a      	ldr	r2, [r7, #4]
 801c9f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c9f2:	bf00      	nop
 801c9f4:	3714      	adds	r7, #20
 801c9f6:	46bd      	mov	sp, r7
 801c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9fc:	4770      	bx	lr
 801c9fe:	bf00      	nop
 801ca00:	2000bdac 	.word	0x2000bdac
 801ca04:	2000bdb4 	.word	0x2000bdb4

0801ca08 <std>:
 801ca08:	2300      	movs	r3, #0
 801ca0a:	b510      	push	{r4, lr}
 801ca0c:	4604      	mov	r4, r0
 801ca0e:	e9c0 3300 	strd	r3, r3, [r0]
 801ca12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ca16:	6083      	str	r3, [r0, #8]
 801ca18:	8181      	strh	r1, [r0, #12]
 801ca1a:	6643      	str	r3, [r0, #100]	@ 0x64
 801ca1c:	81c2      	strh	r2, [r0, #14]
 801ca1e:	6183      	str	r3, [r0, #24]
 801ca20:	4619      	mov	r1, r3
 801ca22:	2208      	movs	r2, #8
 801ca24:	305c      	adds	r0, #92	@ 0x5c
 801ca26:	f000 fa39 	bl	801ce9c <memset>
 801ca2a:	4b0d      	ldr	r3, [pc, #52]	@ (801ca60 <std+0x58>)
 801ca2c:	6263      	str	r3, [r4, #36]	@ 0x24
 801ca2e:	4b0d      	ldr	r3, [pc, #52]	@ (801ca64 <std+0x5c>)
 801ca30:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ca32:	4b0d      	ldr	r3, [pc, #52]	@ (801ca68 <std+0x60>)
 801ca34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ca36:	4b0d      	ldr	r3, [pc, #52]	@ (801ca6c <std+0x64>)
 801ca38:	6323      	str	r3, [r4, #48]	@ 0x30
 801ca3a:	4b0d      	ldr	r3, [pc, #52]	@ (801ca70 <std+0x68>)
 801ca3c:	6224      	str	r4, [r4, #32]
 801ca3e:	429c      	cmp	r4, r3
 801ca40:	d006      	beq.n	801ca50 <std+0x48>
 801ca42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ca46:	4294      	cmp	r4, r2
 801ca48:	d002      	beq.n	801ca50 <std+0x48>
 801ca4a:	33d0      	adds	r3, #208	@ 0xd0
 801ca4c:	429c      	cmp	r4, r3
 801ca4e:	d105      	bne.n	801ca5c <std+0x54>
 801ca50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ca54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca58:	f000 bb02 	b.w	801d060 <__retarget_lock_init_recursive>
 801ca5c:	bd10      	pop	{r4, pc}
 801ca5e:	bf00      	nop
 801ca60:	0801cc7d 	.word	0x0801cc7d
 801ca64:	0801cc9f 	.word	0x0801cc9f
 801ca68:	0801ccd7 	.word	0x0801ccd7
 801ca6c:	0801ccfb 	.word	0x0801ccfb
 801ca70:	2000bdcc 	.word	0x2000bdcc

0801ca74 <stdio_exit_handler>:
 801ca74:	4a02      	ldr	r2, [pc, #8]	@ (801ca80 <stdio_exit_handler+0xc>)
 801ca76:	4903      	ldr	r1, [pc, #12]	@ (801ca84 <stdio_exit_handler+0x10>)
 801ca78:	4803      	ldr	r0, [pc, #12]	@ (801ca88 <stdio_exit_handler+0x14>)
 801ca7a:	f000 b869 	b.w	801cb50 <_fwalk_sglue>
 801ca7e:	bf00      	nop
 801ca80:	2000007c 	.word	0x2000007c
 801ca84:	0801dbcd 	.word	0x0801dbcd
 801ca88:	2000008c 	.word	0x2000008c

0801ca8c <cleanup_stdio>:
 801ca8c:	6841      	ldr	r1, [r0, #4]
 801ca8e:	4b0c      	ldr	r3, [pc, #48]	@ (801cac0 <cleanup_stdio+0x34>)
 801ca90:	4299      	cmp	r1, r3
 801ca92:	b510      	push	{r4, lr}
 801ca94:	4604      	mov	r4, r0
 801ca96:	d001      	beq.n	801ca9c <cleanup_stdio+0x10>
 801ca98:	f001 f898 	bl	801dbcc <_fflush_r>
 801ca9c:	68a1      	ldr	r1, [r4, #8]
 801ca9e:	4b09      	ldr	r3, [pc, #36]	@ (801cac4 <cleanup_stdio+0x38>)
 801caa0:	4299      	cmp	r1, r3
 801caa2:	d002      	beq.n	801caaa <cleanup_stdio+0x1e>
 801caa4:	4620      	mov	r0, r4
 801caa6:	f001 f891 	bl	801dbcc <_fflush_r>
 801caaa:	68e1      	ldr	r1, [r4, #12]
 801caac:	4b06      	ldr	r3, [pc, #24]	@ (801cac8 <cleanup_stdio+0x3c>)
 801caae:	4299      	cmp	r1, r3
 801cab0:	d004      	beq.n	801cabc <cleanup_stdio+0x30>
 801cab2:	4620      	mov	r0, r4
 801cab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cab8:	f001 b888 	b.w	801dbcc <_fflush_r>
 801cabc:	bd10      	pop	{r4, pc}
 801cabe:	bf00      	nop
 801cac0:	2000bdcc 	.word	0x2000bdcc
 801cac4:	2000be34 	.word	0x2000be34
 801cac8:	2000be9c 	.word	0x2000be9c

0801cacc <global_stdio_init.part.0>:
 801cacc:	b510      	push	{r4, lr}
 801cace:	4b0b      	ldr	r3, [pc, #44]	@ (801cafc <global_stdio_init.part.0+0x30>)
 801cad0:	4c0b      	ldr	r4, [pc, #44]	@ (801cb00 <global_stdio_init.part.0+0x34>)
 801cad2:	4a0c      	ldr	r2, [pc, #48]	@ (801cb04 <global_stdio_init.part.0+0x38>)
 801cad4:	601a      	str	r2, [r3, #0]
 801cad6:	4620      	mov	r0, r4
 801cad8:	2200      	movs	r2, #0
 801cada:	2104      	movs	r1, #4
 801cadc:	f7ff ff94 	bl	801ca08 <std>
 801cae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cae4:	2201      	movs	r2, #1
 801cae6:	2109      	movs	r1, #9
 801cae8:	f7ff ff8e 	bl	801ca08 <std>
 801caec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801caf0:	2202      	movs	r2, #2
 801caf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801caf6:	2112      	movs	r1, #18
 801caf8:	f7ff bf86 	b.w	801ca08 <std>
 801cafc:	2000bf04 	.word	0x2000bf04
 801cb00:	2000bdcc 	.word	0x2000bdcc
 801cb04:	0801ca75 	.word	0x0801ca75

0801cb08 <__sfp_lock_acquire>:
 801cb08:	4801      	ldr	r0, [pc, #4]	@ (801cb10 <__sfp_lock_acquire+0x8>)
 801cb0a:	f000 baaa 	b.w	801d062 <__retarget_lock_acquire_recursive>
 801cb0e:	bf00      	nop
 801cb10:	2000bf0d 	.word	0x2000bf0d

0801cb14 <__sfp_lock_release>:
 801cb14:	4801      	ldr	r0, [pc, #4]	@ (801cb1c <__sfp_lock_release+0x8>)
 801cb16:	f000 baa5 	b.w	801d064 <__retarget_lock_release_recursive>
 801cb1a:	bf00      	nop
 801cb1c:	2000bf0d 	.word	0x2000bf0d

0801cb20 <__sinit>:
 801cb20:	b510      	push	{r4, lr}
 801cb22:	4604      	mov	r4, r0
 801cb24:	f7ff fff0 	bl	801cb08 <__sfp_lock_acquire>
 801cb28:	6a23      	ldr	r3, [r4, #32]
 801cb2a:	b11b      	cbz	r3, 801cb34 <__sinit+0x14>
 801cb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb30:	f7ff bff0 	b.w	801cb14 <__sfp_lock_release>
 801cb34:	4b04      	ldr	r3, [pc, #16]	@ (801cb48 <__sinit+0x28>)
 801cb36:	6223      	str	r3, [r4, #32]
 801cb38:	4b04      	ldr	r3, [pc, #16]	@ (801cb4c <__sinit+0x2c>)
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d1f5      	bne.n	801cb2c <__sinit+0xc>
 801cb40:	f7ff ffc4 	bl	801cacc <global_stdio_init.part.0>
 801cb44:	e7f2      	b.n	801cb2c <__sinit+0xc>
 801cb46:	bf00      	nop
 801cb48:	0801ca8d 	.word	0x0801ca8d
 801cb4c:	2000bf04 	.word	0x2000bf04

0801cb50 <_fwalk_sglue>:
 801cb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb54:	4607      	mov	r7, r0
 801cb56:	4688      	mov	r8, r1
 801cb58:	4614      	mov	r4, r2
 801cb5a:	2600      	movs	r6, #0
 801cb5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cb60:	f1b9 0901 	subs.w	r9, r9, #1
 801cb64:	d505      	bpl.n	801cb72 <_fwalk_sglue+0x22>
 801cb66:	6824      	ldr	r4, [r4, #0]
 801cb68:	2c00      	cmp	r4, #0
 801cb6a:	d1f7      	bne.n	801cb5c <_fwalk_sglue+0xc>
 801cb6c:	4630      	mov	r0, r6
 801cb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb72:	89ab      	ldrh	r3, [r5, #12]
 801cb74:	2b01      	cmp	r3, #1
 801cb76:	d907      	bls.n	801cb88 <_fwalk_sglue+0x38>
 801cb78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cb7c:	3301      	adds	r3, #1
 801cb7e:	d003      	beq.n	801cb88 <_fwalk_sglue+0x38>
 801cb80:	4629      	mov	r1, r5
 801cb82:	4638      	mov	r0, r7
 801cb84:	47c0      	blx	r8
 801cb86:	4306      	orrs	r6, r0
 801cb88:	3568      	adds	r5, #104	@ 0x68
 801cb8a:	e7e9      	b.n	801cb60 <_fwalk_sglue+0x10>

0801cb8c <iprintf>:
 801cb8c:	b40f      	push	{r0, r1, r2, r3}
 801cb8e:	b507      	push	{r0, r1, r2, lr}
 801cb90:	4906      	ldr	r1, [pc, #24]	@ (801cbac <iprintf+0x20>)
 801cb92:	ab04      	add	r3, sp, #16
 801cb94:	6808      	ldr	r0, [r1, #0]
 801cb96:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb9a:	6881      	ldr	r1, [r0, #8]
 801cb9c:	9301      	str	r3, [sp, #4]
 801cb9e:	f000 fceb 	bl	801d578 <_vfiprintf_r>
 801cba2:	b003      	add	sp, #12
 801cba4:	f85d eb04 	ldr.w	lr, [sp], #4
 801cba8:	b004      	add	sp, #16
 801cbaa:	4770      	bx	lr
 801cbac:	20000088 	.word	0x20000088

0801cbb0 <putchar>:
 801cbb0:	4b02      	ldr	r3, [pc, #8]	@ (801cbbc <putchar+0xc>)
 801cbb2:	4601      	mov	r1, r0
 801cbb4:	6818      	ldr	r0, [r3, #0]
 801cbb6:	6882      	ldr	r2, [r0, #8]
 801cbb8:	f001 b892 	b.w	801dce0 <_putc_r>
 801cbbc:	20000088 	.word	0x20000088

0801cbc0 <_puts_r>:
 801cbc0:	6a03      	ldr	r3, [r0, #32]
 801cbc2:	b570      	push	{r4, r5, r6, lr}
 801cbc4:	6884      	ldr	r4, [r0, #8]
 801cbc6:	4605      	mov	r5, r0
 801cbc8:	460e      	mov	r6, r1
 801cbca:	b90b      	cbnz	r3, 801cbd0 <_puts_r+0x10>
 801cbcc:	f7ff ffa8 	bl	801cb20 <__sinit>
 801cbd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cbd2:	07db      	lsls	r3, r3, #31
 801cbd4:	d405      	bmi.n	801cbe2 <_puts_r+0x22>
 801cbd6:	89a3      	ldrh	r3, [r4, #12]
 801cbd8:	0598      	lsls	r0, r3, #22
 801cbda:	d402      	bmi.n	801cbe2 <_puts_r+0x22>
 801cbdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cbde:	f000 fa40 	bl	801d062 <__retarget_lock_acquire_recursive>
 801cbe2:	89a3      	ldrh	r3, [r4, #12]
 801cbe4:	0719      	lsls	r1, r3, #28
 801cbe6:	d502      	bpl.n	801cbee <_puts_r+0x2e>
 801cbe8:	6923      	ldr	r3, [r4, #16]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d135      	bne.n	801cc5a <_puts_r+0x9a>
 801cbee:	4621      	mov	r1, r4
 801cbf0:	4628      	mov	r0, r5
 801cbf2:	f000 f8fd 	bl	801cdf0 <__swsetup_r>
 801cbf6:	b380      	cbz	r0, 801cc5a <_puts_r+0x9a>
 801cbf8:	f04f 35ff 	mov.w	r5, #4294967295
 801cbfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cbfe:	07da      	lsls	r2, r3, #31
 801cc00:	d405      	bmi.n	801cc0e <_puts_r+0x4e>
 801cc02:	89a3      	ldrh	r3, [r4, #12]
 801cc04:	059b      	lsls	r3, r3, #22
 801cc06:	d402      	bmi.n	801cc0e <_puts_r+0x4e>
 801cc08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cc0a:	f000 fa2b 	bl	801d064 <__retarget_lock_release_recursive>
 801cc0e:	4628      	mov	r0, r5
 801cc10:	bd70      	pop	{r4, r5, r6, pc}
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	da04      	bge.n	801cc20 <_puts_r+0x60>
 801cc16:	69a2      	ldr	r2, [r4, #24]
 801cc18:	429a      	cmp	r2, r3
 801cc1a:	dc17      	bgt.n	801cc4c <_puts_r+0x8c>
 801cc1c:	290a      	cmp	r1, #10
 801cc1e:	d015      	beq.n	801cc4c <_puts_r+0x8c>
 801cc20:	6823      	ldr	r3, [r4, #0]
 801cc22:	1c5a      	adds	r2, r3, #1
 801cc24:	6022      	str	r2, [r4, #0]
 801cc26:	7019      	strb	r1, [r3, #0]
 801cc28:	68a3      	ldr	r3, [r4, #8]
 801cc2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801cc2e:	3b01      	subs	r3, #1
 801cc30:	60a3      	str	r3, [r4, #8]
 801cc32:	2900      	cmp	r1, #0
 801cc34:	d1ed      	bne.n	801cc12 <_puts_r+0x52>
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	da11      	bge.n	801cc5e <_puts_r+0x9e>
 801cc3a:	4622      	mov	r2, r4
 801cc3c:	210a      	movs	r1, #10
 801cc3e:	4628      	mov	r0, r5
 801cc40:	f000 f898 	bl	801cd74 <__swbuf_r>
 801cc44:	3001      	adds	r0, #1
 801cc46:	d0d7      	beq.n	801cbf8 <_puts_r+0x38>
 801cc48:	250a      	movs	r5, #10
 801cc4a:	e7d7      	b.n	801cbfc <_puts_r+0x3c>
 801cc4c:	4622      	mov	r2, r4
 801cc4e:	4628      	mov	r0, r5
 801cc50:	f000 f890 	bl	801cd74 <__swbuf_r>
 801cc54:	3001      	adds	r0, #1
 801cc56:	d1e7      	bne.n	801cc28 <_puts_r+0x68>
 801cc58:	e7ce      	b.n	801cbf8 <_puts_r+0x38>
 801cc5a:	3e01      	subs	r6, #1
 801cc5c:	e7e4      	b.n	801cc28 <_puts_r+0x68>
 801cc5e:	6823      	ldr	r3, [r4, #0]
 801cc60:	1c5a      	adds	r2, r3, #1
 801cc62:	6022      	str	r2, [r4, #0]
 801cc64:	220a      	movs	r2, #10
 801cc66:	701a      	strb	r2, [r3, #0]
 801cc68:	e7ee      	b.n	801cc48 <_puts_r+0x88>
	...

0801cc6c <puts>:
 801cc6c:	4b02      	ldr	r3, [pc, #8]	@ (801cc78 <puts+0xc>)
 801cc6e:	4601      	mov	r1, r0
 801cc70:	6818      	ldr	r0, [r3, #0]
 801cc72:	f7ff bfa5 	b.w	801cbc0 <_puts_r>
 801cc76:	bf00      	nop
 801cc78:	20000088 	.word	0x20000088

0801cc7c <__sread>:
 801cc7c:	b510      	push	{r4, lr}
 801cc7e:	460c      	mov	r4, r1
 801cc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc84:	f000 f99e 	bl	801cfc4 <_read_r>
 801cc88:	2800      	cmp	r0, #0
 801cc8a:	bfab      	itete	ge
 801cc8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cc8e:	89a3      	ldrhlt	r3, [r4, #12]
 801cc90:	181b      	addge	r3, r3, r0
 801cc92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cc96:	bfac      	ite	ge
 801cc98:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cc9a:	81a3      	strhlt	r3, [r4, #12]
 801cc9c:	bd10      	pop	{r4, pc}

0801cc9e <__swrite>:
 801cc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cca2:	461f      	mov	r7, r3
 801cca4:	898b      	ldrh	r3, [r1, #12]
 801cca6:	05db      	lsls	r3, r3, #23
 801cca8:	4605      	mov	r5, r0
 801ccaa:	460c      	mov	r4, r1
 801ccac:	4616      	mov	r6, r2
 801ccae:	d505      	bpl.n	801ccbc <__swrite+0x1e>
 801ccb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccb4:	2302      	movs	r3, #2
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	f000 f972 	bl	801cfa0 <_lseek_r>
 801ccbc:	89a3      	ldrh	r3, [r4, #12]
 801ccbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ccc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ccc6:	81a3      	strh	r3, [r4, #12]
 801ccc8:	4632      	mov	r2, r6
 801ccca:	463b      	mov	r3, r7
 801cccc:	4628      	mov	r0, r5
 801ccce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ccd2:	f000 b989 	b.w	801cfe8 <_write_r>

0801ccd6 <__sseek>:
 801ccd6:	b510      	push	{r4, lr}
 801ccd8:	460c      	mov	r4, r1
 801ccda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccde:	f000 f95f 	bl	801cfa0 <_lseek_r>
 801cce2:	1c43      	adds	r3, r0, #1
 801cce4:	89a3      	ldrh	r3, [r4, #12]
 801cce6:	bf15      	itete	ne
 801cce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ccea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ccee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ccf2:	81a3      	strheq	r3, [r4, #12]
 801ccf4:	bf18      	it	ne
 801ccf6:	81a3      	strhne	r3, [r4, #12]
 801ccf8:	bd10      	pop	{r4, pc}

0801ccfa <__sclose>:
 801ccfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccfe:	f000 b8e9 	b.w	801ced4 <_close_r>

0801cd02 <_vsniprintf_r>:
 801cd02:	b530      	push	{r4, r5, lr}
 801cd04:	4614      	mov	r4, r2
 801cd06:	2c00      	cmp	r4, #0
 801cd08:	b09b      	sub	sp, #108	@ 0x6c
 801cd0a:	4605      	mov	r5, r0
 801cd0c:	461a      	mov	r2, r3
 801cd0e:	da05      	bge.n	801cd1c <_vsniprintf_r+0x1a>
 801cd10:	238b      	movs	r3, #139	@ 0x8b
 801cd12:	6003      	str	r3, [r0, #0]
 801cd14:	f04f 30ff 	mov.w	r0, #4294967295
 801cd18:	b01b      	add	sp, #108	@ 0x6c
 801cd1a:	bd30      	pop	{r4, r5, pc}
 801cd1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cd20:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cd24:	bf14      	ite	ne
 801cd26:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cd2a:	4623      	moveq	r3, r4
 801cd2c:	9302      	str	r3, [sp, #8]
 801cd2e:	9305      	str	r3, [sp, #20]
 801cd30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cd34:	9100      	str	r1, [sp, #0]
 801cd36:	9104      	str	r1, [sp, #16]
 801cd38:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cd3c:	4669      	mov	r1, sp
 801cd3e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cd40:	f000 faf4 	bl	801d32c <_svfiprintf_r>
 801cd44:	1c43      	adds	r3, r0, #1
 801cd46:	bfbc      	itt	lt
 801cd48:	238b      	movlt	r3, #139	@ 0x8b
 801cd4a:	602b      	strlt	r3, [r5, #0]
 801cd4c:	2c00      	cmp	r4, #0
 801cd4e:	d0e3      	beq.n	801cd18 <_vsniprintf_r+0x16>
 801cd50:	9b00      	ldr	r3, [sp, #0]
 801cd52:	2200      	movs	r2, #0
 801cd54:	701a      	strb	r2, [r3, #0]
 801cd56:	e7df      	b.n	801cd18 <_vsniprintf_r+0x16>

0801cd58 <vsniprintf>:
 801cd58:	b507      	push	{r0, r1, r2, lr}
 801cd5a:	9300      	str	r3, [sp, #0]
 801cd5c:	4613      	mov	r3, r2
 801cd5e:	460a      	mov	r2, r1
 801cd60:	4601      	mov	r1, r0
 801cd62:	4803      	ldr	r0, [pc, #12]	@ (801cd70 <vsniprintf+0x18>)
 801cd64:	6800      	ldr	r0, [r0, #0]
 801cd66:	f7ff ffcc 	bl	801cd02 <_vsniprintf_r>
 801cd6a:	b003      	add	sp, #12
 801cd6c:	f85d fb04 	ldr.w	pc, [sp], #4
 801cd70:	20000088 	.word	0x20000088

0801cd74 <__swbuf_r>:
 801cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd76:	460e      	mov	r6, r1
 801cd78:	4614      	mov	r4, r2
 801cd7a:	4605      	mov	r5, r0
 801cd7c:	b118      	cbz	r0, 801cd86 <__swbuf_r+0x12>
 801cd7e:	6a03      	ldr	r3, [r0, #32]
 801cd80:	b90b      	cbnz	r3, 801cd86 <__swbuf_r+0x12>
 801cd82:	f7ff fecd 	bl	801cb20 <__sinit>
 801cd86:	69a3      	ldr	r3, [r4, #24]
 801cd88:	60a3      	str	r3, [r4, #8]
 801cd8a:	89a3      	ldrh	r3, [r4, #12]
 801cd8c:	071a      	lsls	r2, r3, #28
 801cd8e:	d501      	bpl.n	801cd94 <__swbuf_r+0x20>
 801cd90:	6923      	ldr	r3, [r4, #16]
 801cd92:	b943      	cbnz	r3, 801cda6 <__swbuf_r+0x32>
 801cd94:	4621      	mov	r1, r4
 801cd96:	4628      	mov	r0, r5
 801cd98:	f000 f82a 	bl	801cdf0 <__swsetup_r>
 801cd9c:	b118      	cbz	r0, 801cda6 <__swbuf_r+0x32>
 801cd9e:	f04f 37ff 	mov.w	r7, #4294967295
 801cda2:	4638      	mov	r0, r7
 801cda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cda6:	6823      	ldr	r3, [r4, #0]
 801cda8:	6922      	ldr	r2, [r4, #16]
 801cdaa:	1a98      	subs	r0, r3, r2
 801cdac:	6963      	ldr	r3, [r4, #20]
 801cdae:	b2f6      	uxtb	r6, r6
 801cdb0:	4283      	cmp	r3, r0
 801cdb2:	4637      	mov	r7, r6
 801cdb4:	dc05      	bgt.n	801cdc2 <__swbuf_r+0x4e>
 801cdb6:	4621      	mov	r1, r4
 801cdb8:	4628      	mov	r0, r5
 801cdba:	f000 ff07 	bl	801dbcc <_fflush_r>
 801cdbe:	2800      	cmp	r0, #0
 801cdc0:	d1ed      	bne.n	801cd9e <__swbuf_r+0x2a>
 801cdc2:	68a3      	ldr	r3, [r4, #8]
 801cdc4:	3b01      	subs	r3, #1
 801cdc6:	60a3      	str	r3, [r4, #8]
 801cdc8:	6823      	ldr	r3, [r4, #0]
 801cdca:	1c5a      	adds	r2, r3, #1
 801cdcc:	6022      	str	r2, [r4, #0]
 801cdce:	701e      	strb	r6, [r3, #0]
 801cdd0:	6962      	ldr	r2, [r4, #20]
 801cdd2:	1c43      	adds	r3, r0, #1
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	d004      	beq.n	801cde2 <__swbuf_r+0x6e>
 801cdd8:	89a3      	ldrh	r3, [r4, #12]
 801cdda:	07db      	lsls	r3, r3, #31
 801cddc:	d5e1      	bpl.n	801cda2 <__swbuf_r+0x2e>
 801cdde:	2e0a      	cmp	r6, #10
 801cde0:	d1df      	bne.n	801cda2 <__swbuf_r+0x2e>
 801cde2:	4621      	mov	r1, r4
 801cde4:	4628      	mov	r0, r5
 801cde6:	f000 fef1 	bl	801dbcc <_fflush_r>
 801cdea:	2800      	cmp	r0, #0
 801cdec:	d0d9      	beq.n	801cda2 <__swbuf_r+0x2e>
 801cdee:	e7d6      	b.n	801cd9e <__swbuf_r+0x2a>

0801cdf0 <__swsetup_r>:
 801cdf0:	b538      	push	{r3, r4, r5, lr}
 801cdf2:	4b29      	ldr	r3, [pc, #164]	@ (801ce98 <__swsetup_r+0xa8>)
 801cdf4:	4605      	mov	r5, r0
 801cdf6:	6818      	ldr	r0, [r3, #0]
 801cdf8:	460c      	mov	r4, r1
 801cdfa:	b118      	cbz	r0, 801ce04 <__swsetup_r+0x14>
 801cdfc:	6a03      	ldr	r3, [r0, #32]
 801cdfe:	b90b      	cbnz	r3, 801ce04 <__swsetup_r+0x14>
 801ce00:	f7ff fe8e 	bl	801cb20 <__sinit>
 801ce04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce08:	0719      	lsls	r1, r3, #28
 801ce0a:	d422      	bmi.n	801ce52 <__swsetup_r+0x62>
 801ce0c:	06da      	lsls	r2, r3, #27
 801ce0e:	d407      	bmi.n	801ce20 <__swsetup_r+0x30>
 801ce10:	2209      	movs	r2, #9
 801ce12:	602a      	str	r2, [r5, #0]
 801ce14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce18:	81a3      	strh	r3, [r4, #12]
 801ce1a:	f04f 30ff 	mov.w	r0, #4294967295
 801ce1e:	e033      	b.n	801ce88 <__swsetup_r+0x98>
 801ce20:	0758      	lsls	r0, r3, #29
 801ce22:	d512      	bpl.n	801ce4a <__swsetup_r+0x5a>
 801ce24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ce26:	b141      	cbz	r1, 801ce3a <__swsetup_r+0x4a>
 801ce28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ce2c:	4299      	cmp	r1, r3
 801ce2e:	d002      	beq.n	801ce36 <__swsetup_r+0x46>
 801ce30:	4628      	mov	r0, r5
 801ce32:	f000 f927 	bl	801d084 <_free_r>
 801ce36:	2300      	movs	r3, #0
 801ce38:	6363      	str	r3, [r4, #52]	@ 0x34
 801ce3a:	89a3      	ldrh	r3, [r4, #12]
 801ce3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ce40:	81a3      	strh	r3, [r4, #12]
 801ce42:	2300      	movs	r3, #0
 801ce44:	6063      	str	r3, [r4, #4]
 801ce46:	6923      	ldr	r3, [r4, #16]
 801ce48:	6023      	str	r3, [r4, #0]
 801ce4a:	89a3      	ldrh	r3, [r4, #12]
 801ce4c:	f043 0308 	orr.w	r3, r3, #8
 801ce50:	81a3      	strh	r3, [r4, #12]
 801ce52:	6923      	ldr	r3, [r4, #16]
 801ce54:	b94b      	cbnz	r3, 801ce6a <__swsetup_r+0x7a>
 801ce56:	89a3      	ldrh	r3, [r4, #12]
 801ce58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ce5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ce60:	d003      	beq.n	801ce6a <__swsetup_r+0x7a>
 801ce62:	4621      	mov	r1, r4
 801ce64:	4628      	mov	r0, r5
 801ce66:	f000 feff 	bl	801dc68 <__smakebuf_r>
 801ce6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce6e:	f013 0201 	ands.w	r2, r3, #1
 801ce72:	d00a      	beq.n	801ce8a <__swsetup_r+0x9a>
 801ce74:	2200      	movs	r2, #0
 801ce76:	60a2      	str	r2, [r4, #8]
 801ce78:	6962      	ldr	r2, [r4, #20]
 801ce7a:	4252      	negs	r2, r2
 801ce7c:	61a2      	str	r2, [r4, #24]
 801ce7e:	6922      	ldr	r2, [r4, #16]
 801ce80:	b942      	cbnz	r2, 801ce94 <__swsetup_r+0xa4>
 801ce82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ce86:	d1c5      	bne.n	801ce14 <__swsetup_r+0x24>
 801ce88:	bd38      	pop	{r3, r4, r5, pc}
 801ce8a:	0799      	lsls	r1, r3, #30
 801ce8c:	bf58      	it	pl
 801ce8e:	6962      	ldrpl	r2, [r4, #20]
 801ce90:	60a2      	str	r2, [r4, #8]
 801ce92:	e7f4      	b.n	801ce7e <__swsetup_r+0x8e>
 801ce94:	2000      	movs	r0, #0
 801ce96:	e7f7      	b.n	801ce88 <__swsetup_r+0x98>
 801ce98:	20000088 	.word	0x20000088

0801ce9c <memset>:
 801ce9c:	4402      	add	r2, r0
 801ce9e:	4603      	mov	r3, r0
 801cea0:	4293      	cmp	r3, r2
 801cea2:	d100      	bne.n	801cea6 <memset+0xa>
 801cea4:	4770      	bx	lr
 801cea6:	f803 1b01 	strb.w	r1, [r3], #1
 801ceaa:	e7f9      	b.n	801cea0 <memset+0x4>

0801ceac <strncpy>:
 801ceac:	b510      	push	{r4, lr}
 801ceae:	3901      	subs	r1, #1
 801ceb0:	4603      	mov	r3, r0
 801ceb2:	b132      	cbz	r2, 801cec2 <strncpy+0x16>
 801ceb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ceb8:	f803 4b01 	strb.w	r4, [r3], #1
 801cebc:	3a01      	subs	r2, #1
 801cebe:	2c00      	cmp	r4, #0
 801cec0:	d1f7      	bne.n	801ceb2 <strncpy+0x6>
 801cec2:	441a      	add	r2, r3
 801cec4:	2100      	movs	r1, #0
 801cec6:	4293      	cmp	r3, r2
 801cec8:	d100      	bne.n	801cecc <strncpy+0x20>
 801ceca:	bd10      	pop	{r4, pc}
 801cecc:	f803 1b01 	strb.w	r1, [r3], #1
 801ced0:	e7f9      	b.n	801cec6 <strncpy+0x1a>
	...

0801ced4 <_close_r>:
 801ced4:	b538      	push	{r3, r4, r5, lr}
 801ced6:	4d06      	ldr	r5, [pc, #24]	@ (801cef0 <_close_r+0x1c>)
 801ced8:	2300      	movs	r3, #0
 801ceda:	4604      	mov	r4, r0
 801cedc:	4608      	mov	r0, r1
 801cede:	602b      	str	r3, [r5, #0]
 801cee0:	f7e4 fb5b 	bl	800159a <_close>
 801cee4:	1c43      	adds	r3, r0, #1
 801cee6:	d102      	bne.n	801ceee <_close_r+0x1a>
 801cee8:	682b      	ldr	r3, [r5, #0]
 801ceea:	b103      	cbz	r3, 801ceee <_close_r+0x1a>
 801ceec:	6023      	str	r3, [r4, #0]
 801ceee:	bd38      	pop	{r3, r4, r5, pc}
 801cef0:	2000bf08 	.word	0x2000bf08

0801cef4 <_reclaim_reent>:
 801cef4:	4b29      	ldr	r3, [pc, #164]	@ (801cf9c <_reclaim_reent+0xa8>)
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	4283      	cmp	r3, r0
 801cefa:	b570      	push	{r4, r5, r6, lr}
 801cefc:	4604      	mov	r4, r0
 801cefe:	d04b      	beq.n	801cf98 <_reclaim_reent+0xa4>
 801cf00:	69c3      	ldr	r3, [r0, #28]
 801cf02:	b1ab      	cbz	r3, 801cf30 <_reclaim_reent+0x3c>
 801cf04:	68db      	ldr	r3, [r3, #12]
 801cf06:	b16b      	cbz	r3, 801cf24 <_reclaim_reent+0x30>
 801cf08:	2500      	movs	r5, #0
 801cf0a:	69e3      	ldr	r3, [r4, #28]
 801cf0c:	68db      	ldr	r3, [r3, #12]
 801cf0e:	5959      	ldr	r1, [r3, r5]
 801cf10:	2900      	cmp	r1, #0
 801cf12:	d13b      	bne.n	801cf8c <_reclaim_reent+0x98>
 801cf14:	3504      	adds	r5, #4
 801cf16:	2d80      	cmp	r5, #128	@ 0x80
 801cf18:	d1f7      	bne.n	801cf0a <_reclaim_reent+0x16>
 801cf1a:	69e3      	ldr	r3, [r4, #28]
 801cf1c:	4620      	mov	r0, r4
 801cf1e:	68d9      	ldr	r1, [r3, #12]
 801cf20:	f000 f8b0 	bl	801d084 <_free_r>
 801cf24:	69e3      	ldr	r3, [r4, #28]
 801cf26:	6819      	ldr	r1, [r3, #0]
 801cf28:	b111      	cbz	r1, 801cf30 <_reclaim_reent+0x3c>
 801cf2a:	4620      	mov	r0, r4
 801cf2c:	f000 f8aa 	bl	801d084 <_free_r>
 801cf30:	6961      	ldr	r1, [r4, #20]
 801cf32:	b111      	cbz	r1, 801cf3a <_reclaim_reent+0x46>
 801cf34:	4620      	mov	r0, r4
 801cf36:	f000 f8a5 	bl	801d084 <_free_r>
 801cf3a:	69e1      	ldr	r1, [r4, #28]
 801cf3c:	b111      	cbz	r1, 801cf44 <_reclaim_reent+0x50>
 801cf3e:	4620      	mov	r0, r4
 801cf40:	f000 f8a0 	bl	801d084 <_free_r>
 801cf44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cf46:	b111      	cbz	r1, 801cf4e <_reclaim_reent+0x5a>
 801cf48:	4620      	mov	r0, r4
 801cf4a:	f000 f89b 	bl	801d084 <_free_r>
 801cf4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cf50:	b111      	cbz	r1, 801cf58 <_reclaim_reent+0x64>
 801cf52:	4620      	mov	r0, r4
 801cf54:	f000 f896 	bl	801d084 <_free_r>
 801cf58:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801cf5a:	b111      	cbz	r1, 801cf62 <_reclaim_reent+0x6e>
 801cf5c:	4620      	mov	r0, r4
 801cf5e:	f000 f891 	bl	801d084 <_free_r>
 801cf62:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801cf64:	b111      	cbz	r1, 801cf6c <_reclaim_reent+0x78>
 801cf66:	4620      	mov	r0, r4
 801cf68:	f000 f88c 	bl	801d084 <_free_r>
 801cf6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801cf6e:	b111      	cbz	r1, 801cf76 <_reclaim_reent+0x82>
 801cf70:	4620      	mov	r0, r4
 801cf72:	f000 f887 	bl	801d084 <_free_r>
 801cf76:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801cf78:	b111      	cbz	r1, 801cf80 <_reclaim_reent+0x8c>
 801cf7a:	4620      	mov	r0, r4
 801cf7c:	f000 f882 	bl	801d084 <_free_r>
 801cf80:	6a23      	ldr	r3, [r4, #32]
 801cf82:	b14b      	cbz	r3, 801cf98 <_reclaim_reent+0xa4>
 801cf84:	4620      	mov	r0, r4
 801cf86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf8a:	4718      	bx	r3
 801cf8c:	680e      	ldr	r6, [r1, #0]
 801cf8e:	4620      	mov	r0, r4
 801cf90:	f000 f878 	bl	801d084 <_free_r>
 801cf94:	4631      	mov	r1, r6
 801cf96:	e7bb      	b.n	801cf10 <_reclaim_reent+0x1c>
 801cf98:	bd70      	pop	{r4, r5, r6, pc}
 801cf9a:	bf00      	nop
 801cf9c:	20000088 	.word	0x20000088

0801cfa0 <_lseek_r>:
 801cfa0:	b538      	push	{r3, r4, r5, lr}
 801cfa2:	4d07      	ldr	r5, [pc, #28]	@ (801cfc0 <_lseek_r+0x20>)
 801cfa4:	4604      	mov	r4, r0
 801cfa6:	4608      	mov	r0, r1
 801cfa8:	4611      	mov	r1, r2
 801cfaa:	2200      	movs	r2, #0
 801cfac:	602a      	str	r2, [r5, #0]
 801cfae:	461a      	mov	r2, r3
 801cfb0:	f7e4 fb1a 	bl	80015e8 <_lseek>
 801cfb4:	1c43      	adds	r3, r0, #1
 801cfb6:	d102      	bne.n	801cfbe <_lseek_r+0x1e>
 801cfb8:	682b      	ldr	r3, [r5, #0]
 801cfba:	b103      	cbz	r3, 801cfbe <_lseek_r+0x1e>
 801cfbc:	6023      	str	r3, [r4, #0]
 801cfbe:	bd38      	pop	{r3, r4, r5, pc}
 801cfc0:	2000bf08 	.word	0x2000bf08

0801cfc4 <_read_r>:
 801cfc4:	b538      	push	{r3, r4, r5, lr}
 801cfc6:	4d07      	ldr	r5, [pc, #28]	@ (801cfe4 <_read_r+0x20>)
 801cfc8:	4604      	mov	r4, r0
 801cfca:	4608      	mov	r0, r1
 801cfcc:	4611      	mov	r1, r2
 801cfce:	2200      	movs	r2, #0
 801cfd0:	602a      	str	r2, [r5, #0]
 801cfd2:	461a      	mov	r2, r3
 801cfd4:	f7e4 fac4 	bl	8001560 <_read>
 801cfd8:	1c43      	adds	r3, r0, #1
 801cfda:	d102      	bne.n	801cfe2 <_read_r+0x1e>
 801cfdc:	682b      	ldr	r3, [r5, #0]
 801cfde:	b103      	cbz	r3, 801cfe2 <_read_r+0x1e>
 801cfe0:	6023      	str	r3, [r4, #0]
 801cfe2:	bd38      	pop	{r3, r4, r5, pc}
 801cfe4:	2000bf08 	.word	0x2000bf08

0801cfe8 <_write_r>:
 801cfe8:	b538      	push	{r3, r4, r5, lr}
 801cfea:	4d07      	ldr	r5, [pc, #28]	@ (801d008 <_write_r+0x20>)
 801cfec:	4604      	mov	r4, r0
 801cfee:	4608      	mov	r0, r1
 801cff0:	4611      	mov	r1, r2
 801cff2:	2200      	movs	r2, #0
 801cff4:	602a      	str	r2, [r5, #0]
 801cff6:	461a      	mov	r2, r3
 801cff8:	f7e3 fb38 	bl	800066c <_write>
 801cffc:	1c43      	adds	r3, r0, #1
 801cffe:	d102      	bne.n	801d006 <_write_r+0x1e>
 801d000:	682b      	ldr	r3, [r5, #0]
 801d002:	b103      	cbz	r3, 801d006 <_write_r+0x1e>
 801d004:	6023      	str	r3, [r4, #0]
 801d006:	bd38      	pop	{r3, r4, r5, pc}
 801d008:	2000bf08 	.word	0x2000bf08

0801d00c <__errno>:
 801d00c:	4b01      	ldr	r3, [pc, #4]	@ (801d014 <__errno+0x8>)
 801d00e:	6818      	ldr	r0, [r3, #0]
 801d010:	4770      	bx	lr
 801d012:	bf00      	nop
 801d014:	20000088 	.word	0x20000088

0801d018 <__libc_init_array>:
 801d018:	b570      	push	{r4, r5, r6, lr}
 801d01a:	4d0d      	ldr	r5, [pc, #52]	@ (801d050 <__libc_init_array+0x38>)
 801d01c:	4c0d      	ldr	r4, [pc, #52]	@ (801d054 <__libc_init_array+0x3c>)
 801d01e:	1b64      	subs	r4, r4, r5
 801d020:	10a4      	asrs	r4, r4, #2
 801d022:	2600      	movs	r6, #0
 801d024:	42a6      	cmp	r6, r4
 801d026:	d109      	bne.n	801d03c <__libc_init_array+0x24>
 801d028:	4d0b      	ldr	r5, [pc, #44]	@ (801d058 <__libc_init_array+0x40>)
 801d02a:	4c0c      	ldr	r4, [pc, #48]	@ (801d05c <__libc_init_array+0x44>)
 801d02c:	f000 ff0e 	bl	801de4c <_init>
 801d030:	1b64      	subs	r4, r4, r5
 801d032:	10a4      	asrs	r4, r4, #2
 801d034:	2600      	movs	r6, #0
 801d036:	42a6      	cmp	r6, r4
 801d038:	d105      	bne.n	801d046 <__libc_init_array+0x2e>
 801d03a:	bd70      	pop	{r4, r5, r6, pc}
 801d03c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d040:	4798      	blx	r3
 801d042:	3601      	adds	r6, #1
 801d044:	e7ee      	b.n	801d024 <__libc_init_array+0xc>
 801d046:	f855 3b04 	ldr.w	r3, [r5], #4
 801d04a:	4798      	blx	r3
 801d04c:	3601      	adds	r6, #1
 801d04e:	e7f2      	b.n	801d036 <__libc_init_array+0x1e>
 801d050:	0801e348 	.word	0x0801e348
 801d054:	0801e348 	.word	0x0801e348
 801d058:	0801e348 	.word	0x0801e348
 801d05c:	0801e34c 	.word	0x0801e34c

0801d060 <__retarget_lock_init_recursive>:
 801d060:	4770      	bx	lr

0801d062 <__retarget_lock_acquire_recursive>:
 801d062:	4770      	bx	lr

0801d064 <__retarget_lock_release_recursive>:
 801d064:	4770      	bx	lr

0801d066 <memcpy>:
 801d066:	440a      	add	r2, r1
 801d068:	4291      	cmp	r1, r2
 801d06a:	f100 33ff 	add.w	r3, r0, #4294967295
 801d06e:	d100      	bne.n	801d072 <memcpy+0xc>
 801d070:	4770      	bx	lr
 801d072:	b510      	push	{r4, lr}
 801d074:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d078:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d07c:	4291      	cmp	r1, r2
 801d07e:	d1f9      	bne.n	801d074 <memcpy+0xe>
 801d080:	bd10      	pop	{r4, pc}
	...

0801d084 <_free_r>:
 801d084:	b538      	push	{r3, r4, r5, lr}
 801d086:	4605      	mov	r5, r0
 801d088:	2900      	cmp	r1, #0
 801d08a:	d041      	beq.n	801d110 <_free_r+0x8c>
 801d08c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d090:	1f0c      	subs	r4, r1, #4
 801d092:	2b00      	cmp	r3, #0
 801d094:	bfb8      	it	lt
 801d096:	18e4      	addlt	r4, r4, r3
 801d098:	f000 f8e0 	bl	801d25c <__malloc_lock>
 801d09c:	4a1d      	ldr	r2, [pc, #116]	@ (801d114 <_free_r+0x90>)
 801d09e:	6813      	ldr	r3, [r2, #0]
 801d0a0:	b933      	cbnz	r3, 801d0b0 <_free_r+0x2c>
 801d0a2:	6063      	str	r3, [r4, #4]
 801d0a4:	6014      	str	r4, [r2, #0]
 801d0a6:	4628      	mov	r0, r5
 801d0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d0ac:	f000 b8dc 	b.w	801d268 <__malloc_unlock>
 801d0b0:	42a3      	cmp	r3, r4
 801d0b2:	d908      	bls.n	801d0c6 <_free_r+0x42>
 801d0b4:	6820      	ldr	r0, [r4, #0]
 801d0b6:	1821      	adds	r1, r4, r0
 801d0b8:	428b      	cmp	r3, r1
 801d0ba:	bf01      	itttt	eq
 801d0bc:	6819      	ldreq	r1, [r3, #0]
 801d0be:	685b      	ldreq	r3, [r3, #4]
 801d0c0:	1809      	addeq	r1, r1, r0
 801d0c2:	6021      	streq	r1, [r4, #0]
 801d0c4:	e7ed      	b.n	801d0a2 <_free_r+0x1e>
 801d0c6:	461a      	mov	r2, r3
 801d0c8:	685b      	ldr	r3, [r3, #4]
 801d0ca:	b10b      	cbz	r3, 801d0d0 <_free_r+0x4c>
 801d0cc:	42a3      	cmp	r3, r4
 801d0ce:	d9fa      	bls.n	801d0c6 <_free_r+0x42>
 801d0d0:	6811      	ldr	r1, [r2, #0]
 801d0d2:	1850      	adds	r0, r2, r1
 801d0d4:	42a0      	cmp	r0, r4
 801d0d6:	d10b      	bne.n	801d0f0 <_free_r+0x6c>
 801d0d8:	6820      	ldr	r0, [r4, #0]
 801d0da:	4401      	add	r1, r0
 801d0dc:	1850      	adds	r0, r2, r1
 801d0de:	4283      	cmp	r3, r0
 801d0e0:	6011      	str	r1, [r2, #0]
 801d0e2:	d1e0      	bne.n	801d0a6 <_free_r+0x22>
 801d0e4:	6818      	ldr	r0, [r3, #0]
 801d0e6:	685b      	ldr	r3, [r3, #4]
 801d0e8:	6053      	str	r3, [r2, #4]
 801d0ea:	4408      	add	r0, r1
 801d0ec:	6010      	str	r0, [r2, #0]
 801d0ee:	e7da      	b.n	801d0a6 <_free_r+0x22>
 801d0f0:	d902      	bls.n	801d0f8 <_free_r+0x74>
 801d0f2:	230c      	movs	r3, #12
 801d0f4:	602b      	str	r3, [r5, #0]
 801d0f6:	e7d6      	b.n	801d0a6 <_free_r+0x22>
 801d0f8:	6820      	ldr	r0, [r4, #0]
 801d0fa:	1821      	adds	r1, r4, r0
 801d0fc:	428b      	cmp	r3, r1
 801d0fe:	bf04      	itt	eq
 801d100:	6819      	ldreq	r1, [r3, #0]
 801d102:	685b      	ldreq	r3, [r3, #4]
 801d104:	6063      	str	r3, [r4, #4]
 801d106:	bf04      	itt	eq
 801d108:	1809      	addeq	r1, r1, r0
 801d10a:	6021      	streq	r1, [r4, #0]
 801d10c:	6054      	str	r4, [r2, #4]
 801d10e:	e7ca      	b.n	801d0a6 <_free_r+0x22>
 801d110:	bd38      	pop	{r3, r4, r5, pc}
 801d112:	bf00      	nop
 801d114:	2000bf14 	.word	0x2000bf14

0801d118 <sbrk_aligned>:
 801d118:	b570      	push	{r4, r5, r6, lr}
 801d11a:	4e0f      	ldr	r6, [pc, #60]	@ (801d158 <sbrk_aligned+0x40>)
 801d11c:	460c      	mov	r4, r1
 801d11e:	6831      	ldr	r1, [r6, #0]
 801d120:	4605      	mov	r5, r0
 801d122:	b911      	cbnz	r1, 801d12a <sbrk_aligned+0x12>
 801d124:	f000 fe4c 	bl	801ddc0 <_sbrk_r>
 801d128:	6030      	str	r0, [r6, #0]
 801d12a:	4621      	mov	r1, r4
 801d12c:	4628      	mov	r0, r5
 801d12e:	f000 fe47 	bl	801ddc0 <_sbrk_r>
 801d132:	1c43      	adds	r3, r0, #1
 801d134:	d103      	bne.n	801d13e <sbrk_aligned+0x26>
 801d136:	f04f 34ff 	mov.w	r4, #4294967295
 801d13a:	4620      	mov	r0, r4
 801d13c:	bd70      	pop	{r4, r5, r6, pc}
 801d13e:	1cc4      	adds	r4, r0, #3
 801d140:	f024 0403 	bic.w	r4, r4, #3
 801d144:	42a0      	cmp	r0, r4
 801d146:	d0f8      	beq.n	801d13a <sbrk_aligned+0x22>
 801d148:	1a21      	subs	r1, r4, r0
 801d14a:	4628      	mov	r0, r5
 801d14c:	f000 fe38 	bl	801ddc0 <_sbrk_r>
 801d150:	3001      	adds	r0, #1
 801d152:	d1f2      	bne.n	801d13a <sbrk_aligned+0x22>
 801d154:	e7ef      	b.n	801d136 <sbrk_aligned+0x1e>
 801d156:	bf00      	nop
 801d158:	2000bf10 	.word	0x2000bf10

0801d15c <_malloc_r>:
 801d15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d160:	1ccd      	adds	r5, r1, #3
 801d162:	f025 0503 	bic.w	r5, r5, #3
 801d166:	3508      	adds	r5, #8
 801d168:	2d0c      	cmp	r5, #12
 801d16a:	bf38      	it	cc
 801d16c:	250c      	movcc	r5, #12
 801d16e:	2d00      	cmp	r5, #0
 801d170:	4606      	mov	r6, r0
 801d172:	db01      	blt.n	801d178 <_malloc_r+0x1c>
 801d174:	42a9      	cmp	r1, r5
 801d176:	d904      	bls.n	801d182 <_malloc_r+0x26>
 801d178:	230c      	movs	r3, #12
 801d17a:	6033      	str	r3, [r6, #0]
 801d17c:	2000      	movs	r0, #0
 801d17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d258 <_malloc_r+0xfc>
 801d186:	f000 f869 	bl	801d25c <__malloc_lock>
 801d18a:	f8d8 3000 	ldr.w	r3, [r8]
 801d18e:	461c      	mov	r4, r3
 801d190:	bb44      	cbnz	r4, 801d1e4 <_malloc_r+0x88>
 801d192:	4629      	mov	r1, r5
 801d194:	4630      	mov	r0, r6
 801d196:	f7ff ffbf 	bl	801d118 <sbrk_aligned>
 801d19a:	1c43      	adds	r3, r0, #1
 801d19c:	4604      	mov	r4, r0
 801d19e:	d158      	bne.n	801d252 <_malloc_r+0xf6>
 801d1a0:	f8d8 4000 	ldr.w	r4, [r8]
 801d1a4:	4627      	mov	r7, r4
 801d1a6:	2f00      	cmp	r7, #0
 801d1a8:	d143      	bne.n	801d232 <_malloc_r+0xd6>
 801d1aa:	2c00      	cmp	r4, #0
 801d1ac:	d04b      	beq.n	801d246 <_malloc_r+0xea>
 801d1ae:	6823      	ldr	r3, [r4, #0]
 801d1b0:	4639      	mov	r1, r7
 801d1b2:	4630      	mov	r0, r6
 801d1b4:	eb04 0903 	add.w	r9, r4, r3
 801d1b8:	f000 fe02 	bl	801ddc0 <_sbrk_r>
 801d1bc:	4581      	cmp	r9, r0
 801d1be:	d142      	bne.n	801d246 <_malloc_r+0xea>
 801d1c0:	6821      	ldr	r1, [r4, #0]
 801d1c2:	1a6d      	subs	r5, r5, r1
 801d1c4:	4629      	mov	r1, r5
 801d1c6:	4630      	mov	r0, r6
 801d1c8:	f7ff ffa6 	bl	801d118 <sbrk_aligned>
 801d1cc:	3001      	adds	r0, #1
 801d1ce:	d03a      	beq.n	801d246 <_malloc_r+0xea>
 801d1d0:	6823      	ldr	r3, [r4, #0]
 801d1d2:	442b      	add	r3, r5
 801d1d4:	6023      	str	r3, [r4, #0]
 801d1d6:	f8d8 3000 	ldr.w	r3, [r8]
 801d1da:	685a      	ldr	r2, [r3, #4]
 801d1dc:	bb62      	cbnz	r2, 801d238 <_malloc_r+0xdc>
 801d1de:	f8c8 7000 	str.w	r7, [r8]
 801d1e2:	e00f      	b.n	801d204 <_malloc_r+0xa8>
 801d1e4:	6822      	ldr	r2, [r4, #0]
 801d1e6:	1b52      	subs	r2, r2, r5
 801d1e8:	d420      	bmi.n	801d22c <_malloc_r+0xd0>
 801d1ea:	2a0b      	cmp	r2, #11
 801d1ec:	d917      	bls.n	801d21e <_malloc_r+0xc2>
 801d1ee:	1961      	adds	r1, r4, r5
 801d1f0:	42a3      	cmp	r3, r4
 801d1f2:	6025      	str	r5, [r4, #0]
 801d1f4:	bf18      	it	ne
 801d1f6:	6059      	strne	r1, [r3, #4]
 801d1f8:	6863      	ldr	r3, [r4, #4]
 801d1fa:	bf08      	it	eq
 801d1fc:	f8c8 1000 	streq.w	r1, [r8]
 801d200:	5162      	str	r2, [r4, r5]
 801d202:	604b      	str	r3, [r1, #4]
 801d204:	4630      	mov	r0, r6
 801d206:	f000 f82f 	bl	801d268 <__malloc_unlock>
 801d20a:	f104 000b 	add.w	r0, r4, #11
 801d20e:	1d23      	adds	r3, r4, #4
 801d210:	f020 0007 	bic.w	r0, r0, #7
 801d214:	1ac2      	subs	r2, r0, r3
 801d216:	bf1c      	itt	ne
 801d218:	1a1b      	subne	r3, r3, r0
 801d21a:	50a3      	strne	r3, [r4, r2]
 801d21c:	e7af      	b.n	801d17e <_malloc_r+0x22>
 801d21e:	6862      	ldr	r2, [r4, #4]
 801d220:	42a3      	cmp	r3, r4
 801d222:	bf0c      	ite	eq
 801d224:	f8c8 2000 	streq.w	r2, [r8]
 801d228:	605a      	strne	r2, [r3, #4]
 801d22a:	e7eb      	b.n	801d204 <_malloc_r+0xa8>
 801d22c:	4623      	mov	r3, r4
 801d22e:	6864      	ldr	r4, [r4, #4]
 801d230:	e7ae      	b.n	801d190 <_malloc_r+0x34>
 801d232:	463c      	mov	r4, r7
 801d234:	687f      	ldr	r7, [r7, #4]
 801d236:	e7b6      	b.n	801d1a6 <_malloc_r+0x4a>
 801d238:	461a      	mov	r2, r3
 801d23a:	685b      	ldr	r3, [r3, #4]
 801d23c:	42a3      	cmp	r3, r4
 801d23e:	d1fb      	bne.n	801d238 <_malloc_r+0xdc>
 801d240:	2300      	movs	r3, #0
 801d242:	6053      	str	r3, [r2, #4]
 801d244:	e7de      	b.n	801d204 <_malloc_r+0xa8>
 801d246:	230c      	movs	r3, #12
 801d248:	6033      	str	r3, [r6, #0]
 801d24a:	4630      	mov	r0, r6
 801d24c:	f000 f80c 	bl	801d268 <__malloc_unlock>
 801d250:	e794      	b.n	801d17c <_malloc_r+0x20>
 801d252:	6005      	str	r5, [r0, #0]
 801d254:	e7d6      	b.n	801d204 <_malloc_r+0xa8>
 801d256:	bf00      	nop
 801d258:	2000bf14 	.word	0x2000bf14

0801d25c <__malloc_lock>:
 801d25c:	4801      	ldr	r0, [pc, #4]	@ (801d264 <__malloc_lock+0x8>)
 801d25e:	f7ff bf00 	b.w	801d062 <__retarget_lock_acquire_recursive>
 801d262:	bf00      	nop
 801d264:	2000bf0c 	.word	0x2000bf0c

0801d268 <__malloc_unlock>:
 801d268:	4801      	ldr	r0, [pc, #4]	@ (801d270 <__malloc_unlock+0x8>)
 801d26a:	f7ff befb 	b.w	801d064 <__retarget_lock_release_recursive>
 801d26e:	bf00      	nop
 801d270:	2000bf0c 	.word	0x2000bf0c

0801d274 <__ssputs_r>:
 801d274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d278:	688e      	ldr	r6, [r1, #8]
 801d27a:	461f      	mov	r7, r3
 801d27c:	42be      	cmp	r6, r7
 801d27e:	680b      	ldr	r3, [r1, #0]
 801d280:	4682      	mov	sl, r0
 801d282:	460c      	mov	r4, r1
 801d284:	4690      	mov	r8, r2
 801d286:	d82d      	bhi.n	801d2e4 <__ssputs_r+0x70>
 801d288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d28c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d290:	d026      	beq.n	801d2e0 <__ssputs_r+0x6c>
 801d292:	6965      	ldr	r5, [r4, #20]
 801d294:	6909      	ldr	r1, [r1, #16]
 801d296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d29a:	eba3 0901 	sub.w	r9, r3, r1
 801d29e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d2a2:	1c7b      	adds	r3, r7, #1
 801d2a4:	444b      	add	r3, r9
 801d2a6:	106d      	asrs	r5, r5, #1
 801d2a8:	429d      	cmp	r5, r3
 801d2aa:	bf38      	it	cc
 801d2ac:	461d      	movcc	r5, r3
 801d2ae:	0553      	lsls	r3, r2, #21
 801d2b0:	d527      	bpl.n	801d302 <__ssputs_r+0x8e>
 801d2b2:	4629      	mov	r1, r5
 801d2b4:	f7ff ff52 	bl	801d15c <_malloc_r>
 801d2b8:	4606      	mov	r6, r0
 801d2ba:	b360      	cbz	r0, 801d316 <__ssputs_r+0xa2>
 801d2bc:	6921      	ldr	r1, [r4, #16]
 801d2be:	464a      	mov	r2, r9
 801d2c0:	f7ff fed1 	bl	801d066 <memcpy>
 801d2c4:	89a3      	ldrh	r3, [r4, #12]
 801d2c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d2ce:	81a3      	strh	r3, [r4, #12]
 801d2d0:	6126      	str	r6, [r4, #16]
 801d2d2:	6165      	str	r5, [r4, #20]
 801d2d4:	444e      	add	r6, r9
 801d2d6:	eba5 0509 	sub.w	r5, r5, r9
 801d2da:	6026      	str	r6, [r4, #0]
 801d2dc:	60a5      	str	r5, [r4, #8]
 801d2de:	463e      	mov	r6, r7
 801d2e0:	42be      	cmp	r6, r7
 801d2e2:	d900      	bls.n	801d2e6 <__ssputs_r+0x72>
 801d2e4:	463e      	mov	r6, r7
 801d2e6:	6820      	ldr	r0, [r4, #0]
 801d2e8:	4632      	mov	r2, r6
 801d2ea:	4641      	mov	r1, r8
 801d2ec:	f000 fd2c 	bl	801dd48 <memmove>
 801d2f0:	68a3      	ldr	r3, [r4, #8]
 801d2f2:	1b9b      	subs	r3, r3, r6
 801d2f4:	60a3      	str	r3, [r4, #8]
 801d2f6:	6823      	ldr	r3, [r4, #0]
 801d2f8:	4433      	add	r3, r6
 801d2fa:	6023      	str	r3, [r4, #0]
 801d2fc:	2000      	movs	r0, #0
 801d2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d302:	462a      	mov	r2, r5
 801d304:	f000 fd6c 	bl	801dde0 <_realloc_r>
 801d308:	4606      	mov	r6, r0
 801d30a:	2800      	cmp	r0, #0
 801d30c:	d1e0      	bne.n	801d2d0 <__ssputs_r+0x5c>
 801d30e:	6921      	ldr	r1, [r4, #16]
 801d310:	4650      	mov	r0, sl
 801d312:	f7ff feb7 	bl	801d084 <_free_r>
 801d316:	230c      	movs	r3, #12
 801d318:	f8ca 3000 	str.w	r3, [sl]
 801d31c:	89a3      	ldrh	r3, [r4, #12]
 801d31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d322:	81a3      	strh	r3, [r4, #12]
 801d324:	f04f 30ff 	mov.w	r0, #4294967295
 801d328:	e7e9      	b.n	801d2fe <__ssputs_r+0x8a>
	...

0801d32c <_svfiprintf_r>:
 801d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d330:	4698      	mov	r8, r3
 801d332:	898b      	ldrh	r3, [r1, #12]
 801d334:	061b      	lsls	r3, r3, #24
 801d336:	b09d      	sub	sp, #116	@ 0x74
 801d338:	4607      	mov	r7, r0
 801d33a:	460d      	mov	r5, r1
 801d33c:	4614      	mov	r4, r2
 801d33e:	d510      	bpl.n	801d362 <_svfiprintf_r+0x36>
 801d340:	690b      	ldr	r3, [r1, #16]
 801d342:	b973      	cbnz	r3, 801d362 <_svfiprintf_r+0x36>
 801d344:	2140      	movs	r1, #64	@ 0x40
 801d346:	f7ff ff09 	bl	801d15c <_malloc_r>
 801d34a:	6028      	str	r0, [r5, #0]
 801d34c:	6128      	str	r0, [r5, #16]
 801d34e:	b930      	cbnz	r0, 801d35e <_svfiprintf_r+0x32>
 801d350:	230c      	movs	r3, #12
 801d352:	603b      	str	r3, [r7, #0]
 801d354:	f04f 30ff 	mov.w	r0, #4294967295
 801d358:	b01d      	add	sp, #116	@ 0x74
 801d35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d35e:	2340      	movs	r3, #64	@ 0x40
 801d360:	616b      	str	r3, [r5, #20]
 801d362:	2300      	movs	r3, #0
 801d364:	9309      	str	r3, [sp, #36]	@ 0x24
 801d366:	2320      	movs	r3, #32
 801d368:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d36c:	f8cd 800c 	str.w	r8, [sp, #12]
 801d370:	2330      	movs	r3, #48	@ 0x30
 801d372:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d510 <_svfiprintf_r+0x1e4>
 801d376:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d37a:	f04f 0901 	mov.w	r9, #1
 801d37e:	4623      	mov	r3, r4
 801d380:	469a      	mov	sl, r3
 801d382:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d386:	b10a      	cbz	r2, 801d38c <_svfiprintf_r+0x60>
 801d388:	2a25      	cmp	r2, #37	@ 0x25
 801d38a:	d1f9      	bne.n	801d380 <_svfiprintf_r+0x54>
 801d38c:	ebba 0b04 	subs.w	fp, sl, r4
 801d390:	d00b      	beq.n	801d3aa <_svfiprintf_r+0x7e>
 801d392:	465b      	mov	r3, fp
 801d394:	4622      	mov	r2, r4
 801d396:	4629      	mov	r1, r5
 801d398:	4638      	mov	r0, r7
 801d39a:	f7ff ff6b 	bl	801d274 <__ssputs_r>
 801d39e:	3001      	adds	r0, #1
 801d3a0:	f000 80a7 	beq.w	801d4f2 <_svfiprintf_r+0x1c6>
 801d3a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d3a6:	445a      	add	r2, fp
 801d3a8:	9209      	str	r2, [sp, #36]	@ 0x24
 801d3aa:	f89a 3000 	ldrb.w	r3, [sl]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	f000 809f 	beq.w	801d4f2 <_svfiprintf_r+0x1c6>
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	f04f 32ff 	mov.w	r2, #4294967295
 801d3ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d3be:	f10a 0a01 	add.w	sl, sl, #1
 801d3c2:	9304      	str	r3, [sp, #16]
 801d3c4:	9307      	str	r3, [sp, #28]
 801d3c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d3ca:	931a      	str	r3, [sp, #104]	@ 0x68
 801d3cc:	4654      	mov	r4, sl
 801d3ce:	2205      	movs	r2, #5
 801d3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3d4:	484e      	ldr	r0, [pc, #312]	@ (801d510 <_svfiprintf_r+0x1e4>)
 801d3d6:	f7e2 fedb 	bl	8000190 <memchr>
 801d3da:	9a04      	ldr	r2, [sp, #16]
 801d3dc:	b9d8      	cbnz	r0, 801d416 <_svfiprintf_r+0xea>
 801d3de:	06d0      	lsls	r0, r2, #27
 801d3e0:	bf44      	itt	mi
 801d3e2:	2320      	movmi	r3, #32
 801d3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d3e8:	0711      	lsls	r1, r2, #28
 801d3ea:	bf44      	itt	mi
 801d3ec:	232b      	movmi	r3, #43	@ 0x2b
 801d3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d3f2:	f89a 3000 	ldrb.w	r3, [sl]
 801d3f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801d3f8:	d015      	beq.n	801d426 <_svfiprintf_r+0xfa>
 801d3fa:	9a07      	ldr	r2, [sp, #28]
 801d3fc:	4654      	mov	r4, sl
 801d3fe:	2000      	movs	r0, #0
 801d400:	f04f 0c0a 	mov.w	ip, #10
 801d404:	4621      	mov	r1, r4
 801d406:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d40a:	3b30      	subs	r3, #48	@ 0x30
 801d40c:	2b09      	cmp	r3, #9
 801d40e:	d94b      	bls.n	801d4a8 <_svfiprintf_r+0x17c>
 801d410:	b1b0      	cbz	r0, 801d440 <_svfiprintf_r+0x114>
 801d412:	9207      	str	r2, [sp, #28]
 801d414:	e014      	b.n	801d440 <_svfiprintf_r+0x114>
 801d416:	eba0 0308 	sub.w	r3, r0, r8
 801d41a:	fa09 f303 	lsl.w	r3, r9, r3
 801d41e:	4313      	orrs	r3, r2
 801d420:	9304      	str	r3, [sp, #16]
 801d422:	46a2      	mov	sl, r4
 801d424:	e7d2      	b.n	801d3cc <_svfiprintf_r+0xa0>
 801d426:	9b03      	ldr	r3, [sp, #12]
 801d428:	1d19      	adds	r1, r3, #4
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	9103      	str	r1, [sp, #12]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	bfbb      	ittet	lt
 801d432:	425b      	neglt	r3, r3
 801d434:	f042 0202 	orrlt.w	r2, r2, #2
 801d438:	9307      	strge	r3, [sp, #28]
 801d43a:	9307      	strlt	r3, [sp, #28]
 801d43c:	bfb8      	it	lt
 801d43e:	9204      	strlt	r2, [sp, #16]
 801d440:	7823      	ldrb	r3, [r4, #0]
 801d442:	2b2e      	cmp	r3, #46	@ 0x2e
 801d444:	d10a      	bne.n	801d45c <_svfiprintf_r+0x130>
 801d446:	7863      	ldrb	r3, [r4, #1]
 801d448:	2b2a      	cmp	r3, #42	@ 0x2a
 801d44a:	d132      	bne.n	801d4b2 <_svfiprintf_r+0x186>
 801d44c:	9b03      	ldr	r3, [sp, #12]
 801d44e:	1d1a      	adds	r2, r3, #4
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	9203      	str	r2, [sp, #12]
 801d454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d458:	3402      	adds	r4, #2
 801d45a:	9305      	str	r3, [sp, #20]
 801d45c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d520 <_svfiprintf_r+0x1f4>
 801d460:	7821      	ldrb	r1, [r4, #0]
 801d462:	2203      	movs	r2, #3
 801d464:	4650      	mov	r0, sl
 801d466:	f7e2 fe93 	bl	8000190 <memchr>
 801d46a:	b138      	cbz	r0, 801d47c <_svfiprintf_r+0x150>
 801d46c:	9b04      	ldr	r3, [sp, #16]
 801d46e:	eba0 000a 	sub.w	r0, r0, sl
 801d472:	2240      	movs	r2, #64	@ 0x40
 801d474:	4082      	lsls	r2, r0
 801d476:	4313      	orrs	r3, r2
 801d478:	3401      	adds	r4, #1
 801d47a:	9304      	str	r3, [sp, #16]
 801d47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d480:	4824      	ldr	r0, [pc, #144]	@ (801d514 <_svfiprintf_r+0x1e8>)
 801d482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d486:	2206      	movs	r2, #6
 801d488:	f7e2 fe82 	bl	8000190 <memchr>
 801d48c:	2800      	cmp	r0, #0
 801d48e:	d036      	beq.n	801d4fe <_svfiprintf_r+0x1d2>
 801d490:	4b21      	ldr	r3, [pc, #132]	@ (801d518 <_svfiprintf_r+0x1ec>)
 801d492:	bb1b      	cbnz	r3, 801d4dc <_svfiprintf_r+0x1b0>
 801d494:	9b03      	ldr	r3, [sp, #12]
 801d496:	3307      	adds	r3, #7
 801d498:	f023 0307 	bic.w	r3, r3, #7
 801d49c:	3308      	adds	r3, #8
 801d49e:	9303      	str	r3, [sp, #12]
 801d4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4a2:	4433      	add	r3, r6
 801d4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4a6:	e76a      	b.n	801d37e <_svfiprintf_r+0x52>
 801d4a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801d4ac:	460c      	mov	r4, r1
 801d4ae:	2001      	movs	r0, #1
 801d4b0:	e7a8      	b.n	801d404 <_svfiprintf_r+0xd8>
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	3401      	adds	r4, #1
 801d4b6:	9305      	str	r3, [sp, #20]
 801d4b8:	4619      	mov	r1, r3
 801d4ba:	f04f 0c0a 	mov.w	ip, #10
 801d4be:	4620      	mov	r0, r4
 801d4c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d4c4:	3a30      	subs	r2, #48	@ 0x30
 801d4c6:	2a09      	cmp	r2, #9
 801d4c8:	d903      	bls.n	801d4d2 <_svfiprintf_r+0x1a6>
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d0c6      	beq.n	801d45c <_svfiprintf_r+0x130>
 801d4ce:	9105      	str	r1, [sp, #20]
 801d4d0:	e7c4      	b.n	801d45c <_svfiprintf_r+0x130>
 801d4d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801d4d6:	4604      	mov	r4, r0
 801d4d8:	2301      	movs	r3, #1
 801d4da:	e7f0      	b.n	801d4be <_svfiprintf_r+0x192>
 801d4dc:	ab03      	add	r3, sp, #12
 801d4de:	9300      	str	r3, [sp, #0]
 801d4e0:	462a      	mov	r2, r5
 801d4e2:	4b0e      	ldr	r3, [pc, #56]	@ (801d51c <_svfiprintf_r+0x1f0>)
 801d4e4:	a904      	add	r1, sp, #16
 801d4e6:	4638      	mov	r0, r7
 801d4e8:	f3af 8000 	nop.w
 801d4ec:	1c42      	adds	r2, r0, #1
 801d4ee:	4606      	mov	r6, r0
 801d4f0:	d1d6      	bne.n	801d4a0 <_svfiprintf_r+0x174>
 801d4f2:	89ab      	ldrh	r3, [r5, #12]
 801d4f4:	065b      	lsls	r3, r3, #25
 801d4f6:	f53f af2d 	bmi.w	801d354 <_svfiprintf_r+0x28>
 801d4fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d4fc:	e72c      	b.n	801d358 <_svfiprintf_r+0x2c>
 801d4fe:	ab03      	add	r3, sp, #12
 801d500:	9300      	str	r3, [sp, #0]
 801d502:	462a      	mov	r2, r5
 801d504:	4b05      	ldr	r3, [pc, #20]	@ (801d51c <_svfiprintf_r+0x1f0>)
 801d506:	a904      	add	r1, sp, #16
 801d508:	4638      	mov	r0, r7
 801d50a:	f000 f9bb 	bl	801d884 <_printf_i>
 801d50e:	e7ed      	b.n	801d4ec <_svfiprintf_r+0x1c0>
 801d510:	0801e30c 	.word	0x0801e30c
 801d514:	0801e316 	.word	0x0801e316
 801d518:	00000000 	.word	0x00000000
 801d51c:	0801d275 	.word	0x0801d275
 801d520:	0801e312 	.word	0x0801e312

0801d524 <__sfputc_r>:
 801d524:	6893      	ldr	r3, [r2, #8]
 801d526:	3b01      	subs	r3, #1
 801d528:	2b00      	cmp	r3, #0
 801d52a:	b410      	push	{r4}
 801d52c:	6093      	str	r3, [r2, #8]
 801d52e:	da08      	bge.n	801d542 <__sfputc_r+0x1e>
 801d530:	6994      	ldr	r4, [r2, #24]
 801d532:	42a3      	cmp	r3, r4
 801d534:	db01      	blt.n	801d53a <__sfputc_r+0x16>
 801d536:	290a      	cmp	r1, #10
 801d538:	d103      	bne.n	801d542 <__sfputc_r+0x1e>
 801d53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d53e:	f7ff bc19 	b.w	801cd74 <__swbuf_r>
 801d542:	6813      	ldr	r3, [r2, #0]
 801d544:	1c58      	adds	r0, r3, #1
 801d546:	6010      	str	r0, [r2, #0]
 801d548:	7019      	strb	r1, [r3, #0]
 801d54a:	4608      	mov	r0, r1
 801d54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d550:	4770      	bx	lr

0801d552 <__sfputs_r>:
 801d552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d554:	4606      	mov	r6, r0
 801d556:	460f      	mov	r7, r1
 801d558:	4614      	mov	r4, r2
 801d55a:	18d5      	adds	r5, r2, r3
 801d55c:	42ac      	cmp	r4, r5
 801d55e:	d101      	bne.n	801d564 <__sfputs_r+0x12>
 801d560:	2000      	movs	r0, #0
 801d562:	e007      	b.n	801d574 <__sfputs_r+0x22>
 801d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d568:	463a      	mov	r2, r7
 801d56a:	4630      	mov	r0, r6
 801d56c:	f7ff ffda 	bl	801d524 <__sfputc_r>
 801d570:	1c43      	adds	r3, r0, #1
 801d572:	d1f3      	bne.n	801d55c <__sfputs_r+0xa>
 801d574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d578 <_vfiprintf_r>:
 801d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d57c:	460d      	mov	r5, r1
 801d57e:	b09d      	sub	sp, #116	@ 0x74
 801d580:	4614      	mov	r4, r2
 801d582:	4698      	mov	r8, r3
 801d584:	4606      	mov	r6, r0
 801d586:	b118      	cbz	r0, 801d590 <_vfiprintf_r+0x18>
 801d588:	6a03      	ldr	r3, [r0, #32]
 801d58a:	b90b      	cbnz	r3, 801d590 <_vfiprintf_r+0x18>
 801d58c:	f7ff fac8 	bl	801cb20 <__sinit>
 801d590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d592:	07d9      	lsls	r1, r3, #31
 801d594:	d405      	bmi.n	801d5a2 <_vfiprintf_r+0x2a>
 801d596:	89ab      	ldrh	r3, [r5, #12]
 801d598:	059a      	lsls	r2, r3, #22
 801d59a:	d402      	bmi.n	801d5a2 <_vfiprintf_r+0x2a>
 801d59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d59e:	f7ff fd60 	bl	801d062 <__retarget_lock_acquire_recursive>
 801d5a2:	89ab      	ldrh	r3, [r5, #12]
 801d5a4:	071b      	lsls	r3, r3, #28
 801d5a6:	d501      	bpl.n	801d5ac <_vfiprintf_r+0x34>
 801d5a8:	692b      	ldr	r3, [r5, #16]
 801d5aa:	b99b      	cbnz	r3, 801d5d4 <_vfiprintf_r+0x5c>
 801d5ac:	4629      	mov	r1, r5
 801d5ae:	4630      	mov	r0, r6
 801d5b0:	f7ff fc1e 	bl	801cdf0 <__swsetup_r>
 801d5b4:	b170      	cbz	r0, 801d5d4 <_vfiprintf_r+0x5c>
 801d5b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d5b8:	07dc      	lsls	r4, r3, #31
 801d5ba:	d504      	bpl.n	801d5c6 <_vfiprintf_r+0x4e>
 801d5bc:	f04f 30ff 	mov.w	r0, #4294967295
 801d5c0:	b01d      	add	sp, #116	@ 0x74
 801d5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5c6:	89ab      	ldrh	r3, [r5, #12]
 801d5c8:	0598      	lsls	r0, r3, #22
 801d5ca:	d4f7      	bmi.n	801d5bc <_vfiprintf_r+0x44>
 801d5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d5ce:	f7ff fd49 	bl	801d064 <__retarget_lock_release_recursive>
 801d5d2:	e7f3      	b.n	801d5bc <_vfiprintf_r+0x44>
 801d5d4:	2300      	movs	r3, #0
 801d5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5d8:	2320      	movs	r3, #32
 801d5da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d5de:	f8cd 800c 	str.w	r8, [sp, #12]
 801d5e2:	2330      	movs	r3, #48	@ 0x30
 801d5e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d794 <_vfiprintf_r+0x21c>
 801d5e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d5ec:	f04f 0901 	mov.w	r9, #1
 801d5f0:	4623      	mov	r3, r4
 801d5f2:	469a      	mov	sl, r3
 801d5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d5f8:	b10a      	cbz	r2, 801d5fe <_vfiprintf_r+0x86>
 801d5fa:	2a25      	cmp	r2, #37	@ 0x25
 801d5fc:	d1f9      	bne.n	801d5f2 <_vfiprintf_r+0x7a>
 801d5fe:	ebba 0b04 	subs.w	fp, sl, r4
 801d602:	d00b      	beq.n	801d61c <_vfiprintf_r+0xa4>
 801d604:	465b      	mov	r3, fp
 801d606:	4622      	mov	r2, r4
 801d608:	4629      	mov	r1, r5
 801d60a:	4630      	mov	r0, r6
 801d60c:	f7ff ffa1 	bl	801d552 <__sfputs_r>
 801d610:	3001      	adds	r0, #1
 801d612:	f000 80a7 	beq.w	801d764 <_vfiprintf_r+0x1ec>
 801d616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d618:	445a      	add	r2, fp
 801d61a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d61c:	f89a 3000 	ldrb.w	r3, [sl]
 801d620:	2b00      	cmp	r3, #0
 801d622:	f000 809f 	beq.w	801d764 <_vfiprintf_r+0x1ec>
 801d626:	2300      	movs	r3, #0
 801d628:	f04f 32ff 	mov.w	r2, #4294967295
 801d62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d630:	f10a 0a01 	add.w	sl, sl, #1
 801d634:	9304      	str	r3, [sp, #16]
 801d636:	9307      	str	r3, [sp, #28]
 801d638:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d63c:	931a      	str	r3, [sp, #104]	@ 0x68
 801d63e:	4654      	mov	r4, sl
 801d640:	2205      	movs	r2, #5
 801d642:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d646:	4853      	ldr	r0, [pc, #332]	@ (801d794 <_vfiprintf_r+0x21c>)
 801d648:	f7e2 fda2 	bl	8000190 <memchr>
 801d64c:	9a04      	ldr	r2, [sp, #16]
 801d64e:	b9d8      	cbnz	r0, 801d688 <_vfiprintf_r+0x110>
 801d650:	06d1      	lsls	r1, r2, #27
 801d652:	bf44      	itt	mi
 801d654:	2320      	movmi	r3, #32
 801d656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d65a:	0713      	lsls	r3, r2, #28
 801d65c:	bf44      	itt	mi
 801d65e:	232b      	movmi	r3, #43	@ 0x2b
 801d660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d664:	f89a 3000 	ldrb.w	r3, [sl]
 801d668:	2b2a      	cmp	r3, #42	@ 0x2a
 801d66a:	d015      	beq.n	801d698 <_vfiprintf_r+0x120>
 801d66c:	9a07      	ldr	r2, [sp, #28]
 801d66e:	4654      	mov	r4, sl
 801d670:	2000      	movs	r0, #0
 801d672:	f04f 0c0a 	mov.w	ip, #10
 801d676:	4621      	mov	r1, r4
 801d678:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d67c:	3b30      	subs	r3, #48	@ 0x30
 801d67e:	2b09      	cmp	r3, #9
 801d680:	d94b      	bls.n	801d71a <_vfiprintf_r+0x1a2>
 801d682:	b1b0      	cbz	r0, 801d6b2 <_vfiprintf_r+0x13a>
 801d684:	9207      	str	r2, [sp, #28]
 801d686:	e014      	b.n	801d6b2 <_vfiprintf_r+0x13a>
 801d688:	eba0 0308 	sub.w	r3, r0, r8
 801d68c:	fa09 f303 	lsl.w	r3, r9, r3
 801d690:	4313      	orrs	r3, r2
 801d692:	9304      	str	r3, [sp, #16]
 801d694:	46a2      	mov	sl, r4
 801d696:	e7d2      	b.n	801d63e <_vfiprintf_r+0xc6>
 801d698:	9b03      	ldr	r3, [sp, #12]
 801d69a:	1d19      	adds	r1, r3, #4
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	9103      	str	r1, [sp, #12]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	bfbb      	ittet	lt
 801d6a4:	425b      	neglt	r3, r3
 801d6a6:	f042 0202 	orrlt.w	r2, r2, #2
 801d6aa:	9307      	strge	r3, [sp, #28]
 801d6ac:	9307      	strlt	r3, [sp, #28]
 801d6ae:	bfb8      	it	lt
 801d6b0:	9204      	strlt	r2, [sp, #16]
 801d6b2:	7823      	ldrb	r3, [r4, #0]
 801d6b4:	2b2e      	cmp	r3, #46	@ 0x2e
 801d6b6:	d10a      	bne.n	801d6ce <_vfiprintf_r+0x156>
 801d6b8:	7863      	ldrb	r3, [r4, #1]
 801d6ba:	2b2a      	cmp	r3, #42	@ 0x2a
 801d6bc:	d132      	bne.n	801d724 <_vfiprintf_r+0x1ac>
 801d6be:	9b03      	ldr	r3, [sp, #12]
 801d6c0:	1d1a      	adds	r2, r3, #4
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	9203      	str	r2, [sp, #12]
 801d6c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d6ca:	3402      	adds	r4, #2
 801d6cc:	9305      	str	r3, [sp, #20]
 801d6ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d7a4 <_vfiprintf_r+0x22c>
 801d6d2:	7821      	ldrb	r1, [r4, #0]
 801d6d4:	2203      	movs	r2, #3
 801d6d6:	4650      	mov	r0, sl
 801d6d8:	f7e2 fd5a 	bl	8000190 <memchr>
 801d6dc:	b138      	cbz	r0, 801d6ee <_vfiprintf_r+0x176>
 801d6de:	9b04      	ldr	r3, [sp, #16]
 801d6e0:	eba0 000a 	sub.w	r0, r0, sl
 801d6e4:	2240      	movs	r2, #64	@ 0x40
 801d6e6:	4082      	lsls	r2, r0
 801d6e8:	4313      	orrs	r3, r2
 801d6ea:	3401      	adds	r4, #1
 801d6ec:	9304      	str	r3, [sp, #16]
 801d6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6f2:	4829      	ldr	r0, [pc, #164]	@ (801d798 <_vfiprintf_r+0x220>)
 801d6f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d6f8:	2206      	movs	r2, #6
 801d6fa:	f7e2 fd49 	bl	8000190 <memchr>
 801d6fe:	2800      	cmp	r0, #0
 801d700:	d03f      	beq.n	801d782 <_vfiprintf_r+0x20a>
 801d702:	4b26      	ldr	r3, [pc, #152]	@ (801d79c <_vfiprintf_r+0x224>)
 801d704:	bb1b      	cbnz	r3, 801d74e <_vfiprintf_r+0x1d6>
 801d706:	9b03      	ldr	r3, [sp, #12]
 801d708:	3307      	adds	r3, #7
 801d70a:	f023 0307 	bic.w	r3, r3, #7
 801d70e:	3308      	adds	r3, #8
 801d710:	9303      	str	r3, [sp, #12]
 801d712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d714:	443b      	add	r3, r7
 801d716:	9309      	str	r3, [sp, #36]	@ 0x24
 801d718:	e76a      	b.n	801d5f0 <_vfiprintf_r+0x78>
 801d71a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d71e:	460c      	mov	r4, r1
 801d720:	2001      	movs	r0, #1
 801d722:	e7a8      	b.n	801d676 <_vfiprintf_r+0xfe>
 801d724:	2300      	movs	r3, #0
 801d726:	3401      	adds	r4, #1
 801d728:	9305      	str	r3, [sp, #20]
 801d72a:	4619      	mov	r1, r3
 801d72c:	f04f 0c0a 	mov.w	ip, #10
 801d730:	4620      	mov	r0, r4
 801d732:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d736:	3a30      	subs	r2, #48	@ 0x30
 801d738:	2a09      	cmp	r2, #9
 801d73a:	d903      	bls.n	801d744 <_vfiprintf_r+0x1cc>
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d0c6      	beq.n	801d6ce <_vfiprintf_r+0x156>
 801d740:	9105      	str	r1, [sp, #20]
 801d742:	e7c4      	b.n	801d6ce <_vfiprintf_r+0x156>
 801d744:	fb0c 2101 	mla	r1, ip, r1, r2
 801d748:	4604      	mov	r4, r0
 801d74a:	2301      	movs	r3, #1
 801d74c:	e7f0      	b.n	801d730 <_vfiprintf_r+0x1b8>
 801d74e:	ab03      	add	r3, sp, #12
 801d750:	9300      	str	r3, [sp, #0]
 801d752:	462a      	mov	r2, r5
 801d754:	4b12      	ldr	r3, [pc, #72]	@ (801d7a0 <_vfiprintf_r+0x228>)
 801d756:	a904      	add	r1, sp, #16
 801d758:	4630      	mov	r0, r6
 801d75a:	f3af 8000 	nop.w
 801d75e:	4607      	mov	r7, r0
 801d760:	1c78      	adds	r0, r7, #1
 801d762:	d1d6      	bne.n	801d712 <_vfiprintf_r+0x19a>
 801d764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d766:	07d9      	lsls	r1, r3, #31
 801d768:	d405      	bmi.n	801d776 <_vfiprintf_r+0x1fe>
 801d76a:	89ab      	ldrh	r3, [r5, #12]
 801d76c:	059a      	lsls	r2, r3, #22
 801d76e:	d402      	bmi.n	801d776 <_vfiprintf_r+0x1fe>
 801d770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d772:	f7ff fc77 	bl	801d064 <__retarget_lock_release_recursive>
 801d776:	89ab      	ldrh	r3, [r5, #12]
 801d778:	065b      	lsls	r3, r3, #25
 801d77a:	f53f af1f 	bmi.w	801d5bc <_vfiprintf_r+0x44>
 801d77e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d780:	e71e      	b.n	801d5c0 <_vfiprintf_r+0x48>
 801d782:	ab03      	add	r3, sp, #12
 801d784:	9300      	str	r3, [sp, #0]
 801d786:	462a      	mov	r2, r5
 801d788:	4b05      	ldr	r3, [pc, #20]	@ (801d7a0 <_vfiprintf_r+0x228>)
 801d78a:	a904      	add	r1, sp, #16
 801d78c:	4630      	mov	r0, r6
 801d78e:	f000 f879 	bl	801d884 <_printf_i>
 801d792:	e7e4      	b.n	801d75e <_vfiprintf_r+0x1e6>
 801d794:	0801e30c 	.word	0x0801e30c
 801d798:	0801e316 	.word	0x0801e316
 801d79c:	00000000 	.word	0x00000000
 801d7a0:	0801d553 	.word	0x0801d553
 801d7a4:	0801e312 	.word	0x0801e312

0801d7a8 <_printf_common>:
 801d7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7ac:	4616      	mov	r6, r2
 801d7ae:	4698      	mov	r8, r3
 801d7b0:	688a      	ldr	r2, [r1, #8]
 801d7b2:	690b      	ldr	r3, [r1, #16]
 801d7b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d7b8:	4293      	cmp	r3, r2
 801d7ba:	bfb8      	it	lt
 801d7bc:	4613      	movlt	r3, r2
 801d7be:	6033      	str	r3, [r6, #0]
 801d7c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d7c4:	4607      	mov	r7, r0
 801d7c6:	460c      	mov	r4, r1
 801d7c8:	b10a      	cbz	r2, 801d7ce <_printf_common+0x26>
 801d7ca:	3301      	adds	r3, #1
 801d7cc:	6033      	str	r3, [r6, #0]
 801d7ce:	6823      	ldr	r3, [r4, #0]
 801d7d0:	0699      	lsls	r1, r3, #26
 801d7d2:	bf42      	ittt	mi
 801d7d4:	6833      	ldrmi	r3, [r6, #0]
 801d7d6:	3302      	addmi	r3, #2
 801d7d8:	6033      	strmi	r3, [r6, #0]
 801d7da:	6825      	ldr	r5, [r4, #0]
 801d7dc:	f015 0506 	ands.w	r5, r5, #6
 801d7e0:	d106      	bne.n	801d7f0 <_printf_common+0x48>
 801d7e2:	f104 0a19 	add.w	sl, r4, #25
 801d7e6:	68e3      	ldr	r3, [r4, #12]
 801d7e8:	6832      	ldr	r2, [r6, #0]
 801d7ea:	1a9b      	subs	r3, r3, r2
 801d7ec:	42ab      	cmp	r3, r5
 801d7ee:	dc26      	bgt.n	801d83e <_printf_common+0x96>
 801d7f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d7f4:	6822      	ldr	r2, [r4, #0]
 801d7f6:	3b00      	subs	r3, #0
 801d7f8:	bf18      	it	ne
 801d7fa:	2301      	movne	r3, #1
 801d7fc:	0692      	lsls	r2, r2, #26
 801d7fe:	d42b      	bmi.n	801d858 <_printf_common+0xb0>
 801d800:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d804:	4641      	mov	r1, r8
 801d806:	4638      	mov	r0, r7
 801d808:	47c8      	blx	r9
 801d80a:	3001      	adds	r0, #1
 801d80c:	d01e      	beq.n	801d84c <_printf_common+0xa4>
 801d80e:	6823      	ldr	r3, [r4, #0]
 801d810:	6922      	ldr	r2, [r4, #16]
 801d812:	f003 0306 	and.w	r3, r3, #6
 801d816:	2b04      	cmp	r3, #4
 801d818:	bf02      	ittt	eq
 801d81a:	68e5      	ldreq	r5, [r4, #12]
 801d81c:	6833      	ldreq	r3, [r6, #0]
 801d81e:	1aed      	subeq	r5, r5, r3
 801d820:	68a3      	ldr	r3, [r4, #8]
 801d822:	bf0c      	ite	eq
 801d824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d828:	2500      	movne	r5, #0
 801d82a:	4293      	cmp	r3, r2
 801d82c:	bfc4      	itt	gt
 801d82e:	1a9b      	subgt	r3, r3, r2
 801d830:	18ed      	addgt	r5, r5, r3
 801d832:	2600      	movs	r6, #0
 801d834:	341a      	adds	r4, #26
 801d836:	42b5      	cmp	r5, r6
 801d838:	d11a      	bne.n	801d870 <_printf_common+0xc8>
 801d83a:	2000      	movs	r0, #0
 801d83c:	e008      	b.n	801d850 <_printf_common+0xa8>
 801d83e:	2301      	movs	r3, #1
 801d840:	4652      	mov	r2, sl
 801d842:	4641      	mov	r1, r8
 801d844:	4638      	mov	r0, r7
 801d846:	47c8      	blx	r9
 801d848:	3001      	adds	r0, #1
 801d84a:	d103      	bne.n	801d854 <_printf_common+0xac>
 801d84c:	f04f 30ff 	mov.w	r0, #4294967295
 801d850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d854:	3501      	adds	r5, #1
 801d856:	e7c6      	b.n	801d7e6 <_printf_common+0x3e>
 801d858:	18e1      	adds	r1, r4, r3
 801d85a:	1c5a      	adds	r2, r3, #1
 801d85c:	2030      	movs	r0, #48	@ 0x30
 801d85e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d862:	4422      	add	r2, r4
 801d864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d868:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d86c:	3302      	adds	r3, #2
 801d86e:	e7c7      	b.n	801d800 <_printf_common+0x58>
 801d870:	2301      	movs	r3, #1
 801d872:	4622      	mov	r2, r4
 801d874:	4641      	mov	r1, r8
 801d876:	4638      	mov	r0, r7
 801d878:	47c8      	blx	r9
 801d87a:	3001      	adds	r0, #1
 801d87c:	d0e6      	beq.n	801d84c <_printf_common+0xa4>
 801d87e:	3601      	adds	r6, #1
 801d880:	e7d9      	b.n	801d836 <_printf_common+0x8e>
	...

0801d884 <_printf_i>:
 801d884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d888:	7e0f      	ldrb	r7, [r1, #24]
 801d88a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d88c:	2f78      	cmp	r7, #120	@ 0x78
 801d88e:	4691      	mov	r9, r2
 801d890:	4680      	mov	r8, r0
 801d892:	460c      	mov	r4, r1
 801d894:	469a      	mov	sl, r3
 801d896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d89a:	d807      	bhi.n	801d8ac <_printf_i+0x28>
 801d89c:	2f62      	cmp	r7, #98	@ 0x62
 801d89e:	d80a      	bhi.n	801d8b6 <_printf_i+0x32>
 801d8a0:	2f00      	cmp	r7, #0
 801d8a2:	f000 80d2 	beq.w	801da4a <_printf_i+0x1c6>
 801d8a6:	2f58      	cmp	r7, #88	@ 0x58
 801d8a8:	f000 80b9 	beq.w	801da1e <_printf_i+0x19a>
 801d8ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d8b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d8b4:	e03a      	b.n	801d92c <_printf_i+0xa8>
 801d8b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d8ba:	2b15      	cmp	r3, #21
 801d8bc:	d8f6      	bhi.n	801d8ac <_printf_i+0x28>
 801d8be:	a101      	add	r1, pc, #4	@ (adr r1, 801d8c4 <_printf_i+0x40>)
 801d8c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d8c4:	0801d91d 	.word	0x0801d91d
 801d8c8:	0801d931 	.word	0x0801d931
 801d8cc:	0801d8ad 	.word	0x0801d8ad
 801d8d0:	0801d8ad 	.word	0x0801d8ad
 801d8d4:	0801d8ad 	.word	0x0801d8ad
 801d8d8:	0801d8ad 	.word	0x0801d8ad
 801d8dc:	0801d931 	.word	0x0801d931
 801d8e0:	0801d8ad 	.word	0x0801d8ad
 801d8e4:	0801d8ad 	.word	0x0801d8ad
 801d8e8:	0801d8ad 	.word	0x0801d8ad
 801d8ec:	0801d8ad 	.word	0x0801d8ad
 801d8f0:	0801da31 	.word	0x0801da31
 801d8f4:	0801d95b 	.word	0x0801d95b
 801d8f8:	0801d9eb 	.word	0x0801d9eb
 801d8fc:	0801d8ad 	.word	0x0801d8ad
 801d900:	0801d8ad 	.word	0x0801d8ad
 801d904:	0801da53 	.word	0x0801da53
 801d908:	0801d8ad 	.word	0x0801d8ad
 801d90c:	0801d95b 	.word	0x0801d95b
 801d910:	0801d8ad 	.word	0x0801d8ad
 801d914:	0801d8ad 	.word	0x0801d8ad
 801d918:	0801d9f3 	.word	0x0801d9f3
 801d91c:	6833      	ldr	r3, [r6, #0]
 801d91e:	1d1a      	adds	r2, r3, #4
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	6032      	str	r2, [r6, #0]
 801d924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d92c:	2301      	movs	r3, #1
 801d92e:	e09d      	b.n	801da6c <_printf_i+0x1e8>
 801d930:	6833      	ldr	r3, [r6, #0]
 801d932:	6820      	ldr	r0, [r4, #0]
 801d934:	1d19      	adds	r1, r3, #4
 801d936:	6031      	str	r1, [r6, #0]
 801d938:	0606      	lsls	r6, r0, #24
 801d93a:	d501      	bpl.n	801d940 <_printf_i+0xbc>
 801d93c:	681d      	ldr	r5, [r3, #0]
 801d93e:	e003      	b.n	801d948 <_printf_i+0xc4>
 801d940:	0645      	lsls	r5, r0, #25
 801d942:	d5fb      	bpl.n	801d93c <_printf_i+0xb8>
 801d944:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d948:	2d00      	cmp	r5, #0
 801d94a:	da03      	bge.n	801d954 <_printf_i+0xd0>
 801d94c:	232d      	movs	r3, #45	@ 0x2d
 801d94e:	426d      	negs	r5, r5
 801d950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d954:	4859      	ldr	r0, [pc, #356]	@ (801dabc <_printf_i+0x238>)
 801d956:	230a      	movs	r3, #10
 801d958:	e011      	b.n	801d97e <_printf_i+0xfa>
 801d95a:	6821      	ldr	r1, [r4, #0]
 801d95c:	6833      	ldr	r3, [r6, #0]
 801d95e:	0608      	lsls	r0, r1, #24
 801d960:	f853 5b04 	ldr.w	r5, [r3], #4
 801d964:	d402      	bmi.n	801d96c <_printf_i+0xe8>
 801d966:	0649      	lsls	r1, r1, #25
 801d968:	bf48      	it	mi
 801d96a:	b2ad      	uxthmi	r5, r5
 801d96c:	2f6f      	cmp	r7, #111	@ 0x6f
 801d96e:	4853      	ldr	r0, [pc, #332]	@ (801dabc <_printf_i+0x238>)
 801d970:	6033      	str	r3, [r6, #0]
 801d972:	bf14      	ite	ne
 801d974:	230a      	movne	r3, #10
 801d976:	2308      	moveq	r3, #8
 801d978:	2100      	movs	r1, #0
 801d97a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d97e:	6866      	ldr	r6, [r4, #4]
 801d980:	60a6      	str	r6, [r4, #8]
 801d982:	2e00      	cmp	r6, #0
 801d984:	bfa2      	ittt	ge
 801d986:	6821      	ldrge	r1, [r4, #0]
 801d988:	f021 0104 	bicge.w	r1, r1, #4
 801d98c:	6021      	strge	r1, [r4, #0]
 801d98e:	b90d      	cbnz	r5, 801d994 <_printf_i+0x110>
 801d990:	2e00      	cmp	r6, #0
 801d992:	d04b      	beq.n	801da2c <_printf_i+0x1a8>
 801d994:	4616      	mov	r6, r2
 801d996:	fbb5 f1f3 	udiv	r1, r5, r3
 801d99a:	fb03 5711 	mls	r7, r3, r1, r5
 801d99e:	5dc7      	ldrb	r7, [r0, r7]
 801d9a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d9a4:	462f      	mov	r7, r5
 801d9a6:	42bb      	cmp	r3, r7
 801d9a8:	460d      	mov	r5, r1
 801d9aa:	d9f4      	bls.n	801d996 <_printf_i+0x112>
 801d9ac:	2b08      	cmp	r3, #8
 801d9ae:	d10b      	bne.n	801d9c8 <_printf_i+0x144>
 801d9b0:	6823      	ldr	r3, [r4, #0]
 801d9b2:	07df      	lsls	r7, r3, #31
 801d9b4:	d508      	bpl.n	801d9c8 <_printf_i+0x144>
 801d9b6:	6923      	ldr	r3, [r4, #16]
 801d9b8:	6861      	ldr	r1, [r4, #4]
 801d9ba:	4299      	cmp	r1, r3
 801d9bc:	bfde      	ittt	le
 801d9be:	2330      	movle	r3, #48	@ 0x30
 801d9c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d9c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d9c8:	1b92      	subs	r2, r2, r6
 801d9ca:	6122      	str	r2, [r4, #16]
 801d9cc:	f8cd a000 	str.w	sl, [sp]
 801d9d0:	464b      	mov	r3, r9
 801d9d2:	aa03      	add	r2, sp, #12
 801d9d4:	4621      	mov	r1, r4
 801d9d6:	4640      	mov	r0, r8
 801d9d8:	f7ff fee6 	bl	801d7a8 <_printf_common>
 801d9dc:	3001      	adds	r0, #1
 801d9de:	d14a      	bne.n	801da76 <_printf_i+0x1f2>
 801d9e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d9e4:	b004      	add	sp, #16
 801d9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9ea:	6823      	ldr	r3, [r4, #0]
 801d9ec:	f043 0320 	orr.w	r3, r3, #32
 801d9f0:	6023      	str	r3, [r4, #0]
 801d9f2:	4833      	ldr	r0, [pc, #204]	@ (801dac0 <_printf_i+0x23c>)
 801d9f4:	2778      	movs	r7, #120	@ 0x78
 801d9f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d9fa:	6823      	ldr	r3, [r4, #0]
 801d9fc:	6831      	ldr	r1, [r6, #0]
 801d9fe:	061f      	lsls	r7, r3, #24
 801da00:	f851 5b04 	ldr.w	r5, [r1], #4
 801da04:	d402      	bmi.n	801da0c <_printf_i+0x188>
 801da06:	065f      	lsls	r7, r3, #25
 801da08:	bf48      	it	mi
 801da0a:	b2ad      	uxthmi	r5, r5
 801da0c:	6031      	str	r1, [r6, #0]
 801da0e:	07d9      	lsls	r1, r3, #31
 801da10:	bf44      	itt	mi
 801da12:	f043 0320 	orrmi.w	r3, r3, #32
 801da16:	6023      	strmi	r3, [r4, #0]
 801da18:	b11d      	cbz	r5, 801da22 <_printf_i+0x19e>
 801da1a:	2310      	movs	r3, #16
 801da1c:	e7ac      	b.n	801d978 <_printf_i+0xf4>
 801da1e:	4827      	ldr	r0, [pc, #156]	@ (801dabc <_printf_i+0x238>)
 801da20:	e7e9      	b.n	801d9f6 <_printf_i+0x172>
 801da22:	6823      	ldr	r3, [r4, #0]
 801da24:	f023 0320 	bic.w	r3, r3, #32
 801da28:	6023      	str	r3, [r4, #0]
 801da2a:	e7f6      	b.n	801da1a <_printf_i+0x196>
 801da2c:	4616      	mov	r6, r2
 801da2e:	e7bd      	b.n	801d9ac <_printf_i+0x128>
 801da30:	6833      	ldr	r3, [r6, #0]
 801da32:	6825      	ldr	r5, [r4, #0]
 801da34:	6961      	ldr	r1, [r4, #20]
 801da36:	1d18      	adds	r0, r3, #4
 801da38:	6030      	str	r0, [r6, #0]
 801da3a:	062e      	lsls	r6, r5, #24
 801da3c:	681b      	ldr	r3, [r3, #0]
 801da3e:	d501      	bpl.n	801da44 <_printf_i+0x1c0>
 801da40:	6019      	str	r1, [r3, #0]
 801da42:	e002      	b.n	801da4a <_printf_i+0x1c6>
 801da44:	0668      	lsls	r0, r5, #25
 801da46:	d5fb      	bpl.n	801da40 <_printf_i+0x1bc>
 801da48:	8019      	strh	r1, [r3, #0]
 801da4a:	2300      	movs	r3, #0
 801da4c:	6123      	str	r3, [r4, #16]
 801da4e:	4616      	mov	r6, r2
 801da50:	e7bc      	b.n	801d9cc <_printf_i+0x148>
 801da52:	6833      	ldr	r3, [r6, #0]
 801da54:	1d1a      	adds	r2, r3, #4
 801da56:	6032      	str	r2, [r6, #0]
 801da58:	681e      	ldr	r6, [r3, #0]
 801da5a:	6862      	ldr	r2, [r4, #4]
 801da5c:	2100      	movs	r1, #0
 801da5e:	4630      	mov	r0, r6
 801da60:	f7e2 fb96 	bl	8000190 <memchr>
 801da64:	b108      	cbz	r0, 801da6a <_printf_i+0x1e6>
 801da66:	1b80      	subs	r0, r0, r6
 801da68:	6060      	str	r0, [r4, #4]
 801da6a:	6863      	ldr	r3, [r4, #4]
 801da6c:	6123      	str	r3, [r4, #16]
 801da6e:	2300      	movs	r3, #0
 801da70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801da74:	e7aa      	b.n	801d9cc <_printf_i+0x148>
 801da76:	6923      	ldr	r3, [r4, #16]
 801da78:	4632      	mov	r2, r6
 801da7a:	4649      	mov	r1, r9
 801da7c:	4640      	mov	r0, r8
 801da7e:	47d0      	blx	sl
 801da80:	3001      	adds	r0, #1
 801da82:	d0ad      	beq.n	801d9e0 <_printf_i+0x15c>
 801da84:	6823      	ldr	r3, [r4, #0]
 801da86:	079b      	lsls	r3, r3, #30
 801da88:	d413      	bmi.n	801dab2 <_printf_i+0x22e>
 801da8a:	68e0      	ldr	r0, [r4, #12]
 801da8c:	9b03      	ldr	r3, [sp, #12]
 801da8e:	4298      	cmp	r0, r3
 801da90:	bfb8      	it	lt
 801da92:	4618      	movlt	r0, r3
 801da94:	e7a6      	b.n	801d9e4 <_printf_i+0x160>
 801da96:	2301      	movs	r3, #1
 801da98:	4632      	mov	r2, r6
 801da9a:	4649      	mov	r1, r9
 801da9c:	4640      	mov	r0, r8
 801da9e:	47d0      	blx	sl
 801daa0:	3001      	adds	r0, #1
 801daa2:	d09d      	beq.n	801d9e0 <_printf_i+0x15c>
 801daa4:	3501      	adds	r5, #1
 801daa6:	68e3      	ldr	r3, [r4, #12]
 801daa8:	9903      	ldr	r1, [sp, #12]
 801daaa:	1a5b      	subs	r3, r3, r1
 801daac:	42ab      	cmp	r3, r5
 801daae:	dcf2      	bgt.n	801da96 <_printf_i+0x212>
 801dab0:	e7eb      	b.n	801da8a <_printf_i+0x206>
 801dab2:	2500      	movs	r5, #0
 801dab4:	f104 0619 	add.w	r6, r4, #25
 801dab8:	e7f5      	b.n	801daa6 <_printf_i+0x222>
 801daba:	bf00      	nop
 801dabc:	0801e31d 	.word	0x0801e31d
 801dac0:	0801e32e 	.word	0x0801e32e

0801dac4 <__sflush_r>:
 801dac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dacc:	0716      	lsls	r6, r2, #28
 801dace:	4605      	mov	r5, r0
 801dad0:	460c      	mov	r4, r1
 801dad2:	d454      	bmi.n	801db7e <__sflush_r+0xba>
 801dad4:	684b      	ldr	r3, [r1, #4]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	dc02      	bgt.n	801dae0 <__sflush_r+0x1c>
 801dada:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dadc:	2b00      	cmp	r3, #0
 801dade:	dd48      	ble.n	801db72 <__sflush_r+0xae>
 801dae0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dae2:	2e00      	cmp	r6, #0
 801dae4:	d045      	beq.n	801db72 <__sflush_r+0xae>
 801dae6:	2300      	movs	r3, #0
 801dae8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801daec:	682f      	ldr	r7, [r5, #0]
 801daee:	6a21      	ldr	r1, [r4, #32]
 801daf0:	602b      	str	r3, [r5, #0]
 801daf2:	d030      	beq.n	801db56 <__sflush_r+0x92>
 801daf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801daf6:	89a3      	ldrh	r3, [r4, #12]
 801daf8:	0759      	lsls	r1, r3, #29
 801dafa:	d505      	bpl.n	801db08 <__sflush_r+0x44>
 801dafc:	6863      	ldr	r3, [r4, #4]
 801dafe:	1ad2      	subs	r2, r2, r3
 801db00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801db02:	b10b      	cbz	r3, 801db08 <__sflush_r+0x44>
 801db04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801db06:	1ad2      	subs	r2, r2, r3
 801db08:	2300      	movs	r3, #0
 801db0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801db0c:	6a21      	ldr	r1, [r4, #32]
 801db0e:	4628      	mov	r0, r5
 801db10:	47b0      	blx	r6
 801db12:	1c43      	adds	r3, r0, #1
 801db14:	89a3      	ldrh	r3, [r4, #12]
 801db16:	d106      	bne.n	801db26 <__sflush_r+0x62>
 801db18:	6829      	ldr	r1, [r5, #0]
 801db1a:	291d      	cmp	r1, #29
 801db1c:	d82b      	bhi.n	801db76 <__sflush_r+0xb2>
 801db1e:	4a2a      	ldr	r2, [pc, #168]	@ (801dbc8 <__sflush_r+0x104>)
 801db20:	410a      	asrs	r2, r1
 801db22:	07d6      	lsls	r6, r2, #31
 801db24:	d427      	bmi.n	801db76 <__sflush_r+0xb2>
 801db26:	2200      	movs	r2, #0
 801db28:	6062      	str	r2, [r4, #4]
 801db2a:	04d9      	lsls	r1, r3, #19
 801db2c:	6922      	ldr	r2, [r4, #16]
 801db2e:	6022      	str	r2, [r4, #0]
 801db30:	d504      	bpl.n	801db3c <__sflush_r+0x78>
 801db32:	1c42      	adds	r2, r0, #1
 801db34:	d101      	bne.n	801db3a <__sflush_r+0x76>
 801db36:	682b      	ldr	r3, [r5, #0]
 801db38:	b903      	cbnz	r3, 801db3c <__sflush_r+0x78>
 801db3a:	6560      	str	r0, [r4, #84]	@ 0x54
 801db3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801db3e:	602f      	str	r7, [r5, #0]
 801db40:	b1b9      	cbz	r1, 801db72 <__sflush_r+0xae>
 801db42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801db46:	4299      	cmp	r1, r3
 801db48:	d002      	beq.n	801db50 <__sflush_r+0x8c>
 801db4a:	4628      	mov	r0, r5
 801db4c:	f7ff fa9a 	bl	801d084 <_free_r>
 801db50:	2300      	movs	r3, #0
 801db52:	6363      	str	r3, [r4, #52]	@ 0x34
 801db54:	e00d      	b.n	801db72 <__sflush_r+0xae>
 801db56:	2301      	movs	r3, #1
 801db58:	4628      	mov	r0, r5
 801db5a:	47b0      	blx	r6
 801db5c:	4602      	mov	r2, r0
 801db5e:	1c50      	adds	r0, r2, #1
 801db60:	d1c9      	bne.n	801daf6 <__sflush_r+0x32>
 801db62:	682b      	ldr	r3, [r5, #0]
 801db64:	2b00      	cmp	r3, #0
 801db66:	d0c6      	beq.n	801daf6 <__sflush_r+0x32>
 801db68:	2b1d      	cmp	r3, #29
 801db6a:	d001      	beq.n	801db70 <__sflush_r+0xac>
 801db6c:	2b16      	cmp	r3, #22
 801db6e:	d11e      	bne.n	801dbae <__sflush_r+0xea>
 801db70:	602f      	str	r7, [r5, #0]
 801db72:	2000      	movs	r0, #0
 801db74:	e022      	b.n	801dbbc <__sflush_r+0xf8>
 801db76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801db7a:	b21b      	sxth	r3, r3
 801db7c:	e01b      	b.n	801dbb6 <__sflush_r+0xf2>
 801db7e:	690f      	ldr	r7, [r1, #16]
 801db80:	2f00      	cmp	r7, #0
 801db82:	d0f6      	beq.n	801db72 <__sflush_r+0xae>
 801db84:	0793      	lsls	r3, r2, #30
 801db86:	680e      	ldr	r6, [r1, #0]
 801db88:	bf08      	it	eq
 801db8a:	694b      	ldreq	r3, [r1, #20]
 801db8c:	600f      	str	r7, [r1, #0]
 801db8e:	bf18      	it	ne
 801db90:	2300      	movne	r3, #0
 801db92:	eba6 0807 	sub.w	r8, r6, r7
 801db96:	608b      	str	r3, [r1, #8]
 801db98:	f1b8 0f00 	cmp.w	r8, #0
 801db9c:	dde9      	ble.n	801db72 <__sflush_r+0xae>
 801db9e:	6a21      	ldr	r1, [r4, #32]
 801dba0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dba2:	4643      	mov	r3, r8
 801dba4:	463a      	mov	r2, r7
 801dba6:	4628      	mov	r0, r5
 801dba8:	47b0      	blx	r6
 801dbaa:	2800      	cmp	r0, #0
 801dbac:	dc08      	bgt.n	801dbc0 <__sflush_r+0xfc>
 801dbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dbb6:	81a3      	strh	r3, [r4, #12]
 801dbb8:	f04f 30ff 	mov.w	r0, #4294967295
 801dbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbc0:	4407      	add	r7, r0
 801dbc2:	eba8 0800 	sub.w	r8, r8, r0
 801dbc6:	e7e7      	b.n	801db98 <__sflush_r+0xd4>
 801dbc8:	dfbffffe 	.word	0xdfbffffe

0801dbcc <_fflush_r>:
 801dbcc:	b538      	push	{r3, r4, r5, lr}
 801dbce:	690b      	ldr	r3, [r1, #16]
 801dbd0:	4605      	mov	r5, r0
 801dbd2:	460c      	mov	r4, r1
 801dbd4:	b913      	cbnz	r3, 801dbdc <_fflush_r+0x10>
 801dbd6:	2500      	movs	r5, #0
 801dbd8:	4628      	mov	r0, r5
 801dbda:	bd38      	pop	{r3, r4, r5, pc}
 801dbdc:	b118      	cbz	r0, 801dbe6 <_fflush_r+0x1a>
 801dbde:	6a03      	ldr	r3, [r0, #32]
 801dbe0:	b90b      	cbnz	r3, 801dbe6 <_fflush_r+0x1a>
 801dbe2:	f7fe ff9d 	bl	801cb20 <__sinit>
 801dbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d0f3      	beq.n	801dbd6 <_fflush_r+0xa>
 801dbee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dbf0:	07d0      	lsls	r0, r2, #31
 801dbf2:	d404      	bmi.n	801dbfe <_fflush_r+0x32>
 801dbf4:	0599      	lsls	r1, r3, #22
 801dbf6:	d402      	bmi.n	801dbfe <_fflush_r+0x32>
 801dbf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dbfa:	f7ff fa32 	bl	801d062 <__retarget_lock_acquire_recursive>
 801dbfe:	4628      	mov	r0, r5
 801dc00:	4621      	mov	r1, r4
 801dc02:	f7ff ff5f 	bl	801dac4 <__sflush_r>
 801dc06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dc08:	07da      	lsls	r2, r3, #31
 801dc0a:	4605      	mov	r5, r0
 801dc0c:	d4e4      	bmi.n	801dbd8 <_fflush_r+0xc>
 801dc0e:	89a3      	ldrh	r3, [r4, #12]
 801dc10:	059b      	lsls	r3, r3, #22
 801dc12:	d4e1      	bmi.n	801dbd8 <_fflush_r+0xc>
 801dc14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dc16:	f7ff fa25 	bl	801d064 <__retarget_lock_release_recursive>
 801dc1a:	e7dd      	b.n	801dbd8 <_fflush_r+0xc>

0801dc1c <__swhatbuf_r>:
 801dc1c:	b570      	push	{r4, r5, r6, lr}
 801dc1e:	460c      	mov	r4, r1
 801dc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc24:	2900      	cmp	r1, #0
 801dc26:	b096      	sub	sp, #88	@ 0x58
 801dc28:	4615      	mov	r5, r2
 801dc2a:	461e      	mov	r6, r3
 801dc2c:	da0d      	bge.n	801dc4a <__swhatbuf_r+0x2e>
 801dc2e:	89a3      	ldrh	r3, [r4, #12]
 801dc30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dc34:	f04f 0100 	mov.w	r1, #0
 801dc38:	bf14      	ite	ne
 801dc3a:	2340      	movne	r3, #64	@ 0x40
 801dc3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dc40:	2000      	movs	r0, #0
 801dc42:	6031      	str	r1, [r6, #0]
 801dc44:	602b      	str	r3, [r5, #0]
 801dc46:	b016      	add	sp, #88	@ 0x58
 801dc48:	bd70      	pop	{r4, r5, r6, pc}
 801dc4a:	466a      	mov	r2, sp
 801dc4c:	f000 f896 	bl	801dd7c <_fstat_r>
 801dc50:	2800      	cmp	r0, #0
 801dc52:	dbec      	blt.n	801dc2e <__swhatbuf_r+0x12>
 801dc54:	9901      	ldr	r1, [sp, #4]
 801dc56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dc5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dc5e:	4259      	negs	r1, r3
 801dc60:	4159      	adcs	r1, r3
 801dc62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dc66:	e7eb      	b.n	801dc40 <__swhatbuf_r+0x24>

0801dc68 <__smakebuf_r>:
 801dc68:	898b      	ldrh	r3, [r1, #12]
 801dc6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc6c:	079d      	lsls	r5, r3, #30
 801dc6e:	4606      	mov	r6, r0
 801dc70:	460c      	mov	r4, r1
 801dc72:	d507      	bpl.n	801dc84 <__smakebuf_r+0x1c>
 801dc74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dc78:	6023      	str	r3, [r4, #0]
 801dc7a:	6123      	str	r3, [r4, #16]
 801dc7c:	2301      	movs	r3, #1
 801dc7e:	6163      	str	r3, [r4, #20]
 801dc80:	b003      	add	sp, #12
 801dc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc84:	ab01      	add	r3, sp, #4
 801dc86:	466a      	mov	r2, sp
 801dc88:	f7ff ffc8 	bl	801dc1c <__swhatbuf_r>
 801dc8c:	9f00      	ldr	r7, [sp, #0]
 801dc8e:	4605      	mov	r5, r0
 801dc90:	4639      	mov	r1, r7
 801dc92:	4630      	mov	r0, r6
 801dc94:	f7ff fa62 	bl	801d15c <_malloc_r>
 801dc98:	b948      	cbnz	r0, 801dcae <__smakebuf_r+0x46>
 801dc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc9e:	059a      	lsls	r2, r3, #22
 801dca0:	d4ee      	bmi.n	801dc80 <__smakebuf_r+0x18>
 801dca2:	f023 0303 	bic.w	r3, r3, #3
 801dca6:	f043 0302 	orr.w	r3, r3, #2
 801dcaa:	81a3      	strh	r3, [r4, #12]
 801dcac:	e7e2      	b.n	801dc74 <__smakebuf_r+0xc>
 801dcae:	89a3      	ldrh	r3, [r4, #12]
 801dcb0:	6020      	str	r0, [r4, #0]
 801dcb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dcb6:	81a3      	strh	r3, [r4, #12]
 801dcb8:	9b01      	ldr	r3, [sp, #4]
 801dcba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dcbe:	b15b      	cbz	r3, 801dcd8 <__smakebuf_r+0x70>
 801dcc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dcc4:	4630      	mov	r0, r6
 801dcc6:	f000 f86b 	bl	801dda0 <_isatty_r>
 801dcca:	b128      	cbz	r0, 801dcd8 <__smakebuf_r+0x70>
 801dccc:	89a3      	ldrh	r3, [r4, #12]
 801dcce:	f023 0303 	bic.w	r3, r3, #3
 801dcd2:	f043 0301 	orr.w	r3, r3, #1
 801dcd6:	81a3      	strh	r3, [r4, #12]
 801dcd8:	89a3      	ldrh	r3, [r4, #12]
 801dcda:	431d      	orrs	r5, r3
 801dcdc:	81a5      	strh	r5, [r4, #12]
 801dcde:	e7cf      	b.n	801dc80 <__smakebuf_r+0x18>

0801dce0 <_putc_r>:
 801dce0:	b570      	push	{r4, r5, r6, lr}
 801dce2:	460d      	mov	r5, r1
 801dce4:	4614      	mov	r4, r2
 801dce6:	4606      	mov	r6, r0
 801dce8:	b118      	cbz	r0, 801dcf2 <_putc_r+0x12>
 801dcea:	6a03      	ldr	r3, [r0, #32]
 801dcec:	b90b      	cbnz	r3, 801dcf2 <_putc_r+0x12>
 801dcee:	f7fe ff17 	bl	801cb20 <__sinit>
 801dcf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dcf4:	07d8      	lsls	r0, r3, #31
 801dcf6:	d405      	bmi.n	801dd04 <_putc_r+0x24>
 801dcf8:	89a3      	ldrh	r3, [r4, #12]
 801dcfa:	0599      	lsls	r1, r3, #22
 801dcfc:	d402      	bmi.n	801dd04 <_putc_r+0x24>
 801dcfe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd00:	f7ff f9af 	bl	801d062 <__retarget_lock_acquire_recursive>
 801dd04:	68a3      	ldr	r3, [r4, #8]
 801dd06:	3b01      	subs	r3, #1
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	60a3      	str	r3, [r4, #8]
 801dd0c:	da05      	bge.n	801dd1a <_putc_r+0x3a>
 801dd0e:	69a2      	ldr	r2, [r4, #24]
 801dd10:	4293      	cmp	r3, r2
 801dd12:	db12      	blt.n	801dd3a <_putc_r+0x5a>
 801dd14:	b2eb      	uxtb	r3, r5
 801dd16:	2b0a      	cmp	r3, #10
 801dd18:	d00f      	beq.n	801dd3a <_putc_r+0x5a>
 801dd1a:	6823      	ldr	r3, [r4, #0]
 801dd1c:	1c5a      	adds	r2, r3, #1
 801dd1e:	6022      	str	r2, [r4, #0]
 801dd20:	701d      	strb	r5, [r3, #0]
 801dd22:	b2ed      	uxtb	r5, r5
 801dd24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd26:	07da      	lsls	r2, r3, #31
 801dd28:	d405      	bmi.n	801dd36 <_putc_r+0x56>
 801dd2a:	89a3      	ldrh	r3, [r4, #12]
 801dd2c:	059b      	lsls	r3, r3, #22
 801dd2e:	d402      	bmi.n	801dd36 <_putc_r+0x56>
 801dd30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd32:	f7ff f997 	bl	801d064 <__retarget_lock_release_recursive>
 801dd36:	4628      	mov	r0, r5
 801dd38:	bd70      	pop	{r4, r5, r6, pc}
 801dd3a:	4629      	mov	r1, r5
 801dd3c:	4622      	mov	r2, r4
 801dd3e:	4630      	mov	r0, r6
 801dd40:	f7ff f818 	bl	801cd74 <__swbuf_r>
 801dd44:	4605      	mov	r5, r0
 801dd46:	e7ed      	b.n	801dd24 <_putc_r+0x44>

0801dd48 <memmove>:
 801dd48:	4288      	cmp	r0, r1
 801dd4a:	b510      	push	{r4, lr}
 801dd4c:	eb01 0402 	add.w	r4, r1, r2
 801dd50:	d902      	bls.n	801dd58 <memmove+0x10>
 801dd52:	4284      	cmp	r4, r0
 801dd54:	4623      	mov	r3, r4
 801dd56:	d807      	bhi.n	801dd68 <memmove+0x20>
 801dd58:	1e43      	subs	r3, r0, #1
 801dd5a:	42a1      	cmp	r1, r4
 801dd5c:	d008      	beq.n	801dd70 <memmove+0x28>
 801dd5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dd62:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dd66:	e7f8      	b.n	801dd5a <memmove+0x12>
 801dd68:	4402      	add	r2, r0
 801dd6a:	4601      	mov	r1, r0
 801dd6c:	428a      	cmp	r2, r1
 801dd6e:	d100      	bne.n	801dd72 <memmove+0x2a>
 801dd70:	bd10      	pop	{r4, pc}
 801dd72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dd76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dd7a:	e7f7      	b.n	801dd6c <memmove+0x24>

0801dd7c <_fstat_r>:
 801dd7c:	b538      	push	{r3, r4, r5, lr}
 801dd7e:	4d07      	ldr	r5, [pc, #28]	@ (801dd9c <_fstat_r+0x20>)
 801dd80:	2300      	movs	r3, #0
 801dd82:	4604      	mov	r4, r0
 801dd84:	4608      	mov	r0, r1
 801dd86:	4611      	mov	r1, r2
 801dd88:	602b      	str	r3, [r5, #0]
 801dd8a:	f7e3 fc12 	bl	80015b2 <_fstat>
 801dd8e:	1c43      	adds	r3, r0, #1
 801dd90:	d102      	bne.n	801dd98 <_fstat_r+0x1c>
 801dd92:	682b      	ldr	r3, [r5, #0]
 801dd94:	b103      	cbz	r3, 801dd98 <_fstat_r+0x1c>
 801dd96:	6023      	str	r3, [r4, #0]
 801dd98:	bd38      	pop	{r3, r4, r5, pc}
 801dd9a:	bf00      	nop
 801dd9c:	2000bf08 	.word	0x2000bf08

0801dda0 <_isatty_r>:
 801dda0:	b538      	push	{r3, r4, r5, lr}
 801dda2:	4d06      	ldr	r5, [pc, #24]	@ (801ddbc <_isatty_r+0x1c>)
 801dda4:	2300      	movs	r3, #0
 801dda6:	4604      	mov	r4, r0
 801dda8:	4608      	mov	r0, r1
 801ddaa:	602b      	str	r3, [r5, #0]
 801ddac:	f7e3 fc11 	bl	80015d2 <_isatty>
 801ddb0:	1c43      	adds	r3, r0, #1
 801ddb2:	d102      	bne.n	801ddba <_isatty_r+0x1a>
 801ddb4:	682b      	ldr	r3, [r5, #0]
 801ddb6:	b103      	cbz	r3, 801ddba <_isatty_r+0x1a>
 801ddb8:	6023      	str	r3, [r4, #0]
 801ddba:	bd38      	pop	{r3, r4, r5, pc}
 801ddbc:	2000bf08 	.word	0x2000bf08

0801ddc0 <_sbrk_r>:
 801ddc0:	b538      	push	{r3, r4, r5, lr}
 801ddc2:	4d06      	ldr	r5, [pc, #24]	@ (801dddc <_sbrk_r+0x1c>)
 801ddc4:	2300      	movs	r3, #0
 801ddc6:	4604      	mov	r4, r0
 801ddc8:	4608      	mov	r0, r1
 801ddca:	602b      	str	r3, [r5, #0]
 801ddcc:	f7e3 fc1a 	bl	8001604 <_sbrk>
 801ddd0:	1c43      	adds	r3, r0, #1
 801ddd2:	d102      	bne.n	801ddda <_sbrk_r+0x1a>
 801ddd4:	682b      	ldr	r3, [r5, #0]
 801ddd6:	b103      	cbz	r3, 801ddda <_sbrk_r+0x1a>
 801ddd8:	6023      	str	r3, [r4, #0]
 801ddda:	bd38      	pop	{r3, r4, r5, pc}
 801dddc:	2000bf08 	.word	0x2000bf08

0801dde0 <_realloc_r>:
 801dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dde4:	4680      	mov	r8, r0
 801dde6:	4615      	mov	r5, r2
 801dde8:	460c      	mov	r4, r1
 801ddea:	b921      	cbnz	r1, 801ddf6 <_realloc_r+0x16>
 801ddec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ddf0:	4611      	mov	r1, r2
 801ddf2:	f7ff b9b3 	b.w	801d15c <_malloc_r>
 801ddf6:	b92a      	cbnz	r2, 801de04 <_realloc_r+0x24>
 801ddf8:	f7ff f944 	bl	801d084 <_free_r>
 801ddfc:	2400      	movs	r4, #0
 801ddfe:	4620      	mov	r0, r4
 801de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de04:	f000 f81a 	bl	801de3c <_malloc_usable_size_r>
 801de08:	4285      	cmp	r5, r0
 801de0a:	4606      	mov	r6, r0
 801de0c:	d802      	bhi.n	801de14 <_realloc_r+0x34>
 801de0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801de12:	d8f4      	bhi.n	801ddfe <_realloc_r+0x1e>
 801de14:	4629      	mov	r1, r5
 801de16:	4640      	mov	r0, r8
 801de18:	f7ff f9a0 	bl	801d15c <_malloc_r>
 801de1c:	4607      	mov	r7, r0
 801de1e:	2800      	cmp	r0, #0
 801de20:	d0ec      	beq.n	801ddfc <_realloc_r+0x1c>
 801de22:	42b5      	cmp	r5, r6
 801de24:	462a      	mov	r2, r5
 801de26:	4621      	mov	r1, r4
 801de28:	bf28      	it	cs
 801de2a:	4632      	movcs	r2, r6
 801de2c:	f7ff f91b 	bl	801d066 <memcpy>
 801de30:	4621      	mov	r1, r4
 801de32:	4640      	mov	r0, r8
 801de34:	f7ff f926 	bl	801d084 <_free_r>
 801de38:	463c      	mov	r4, r7
 801de3a:	e7e0      	b.n	801ddfe <_realloc_r+0x1e>

0801de3c <_malloc_usable_size_r>:
 801de3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de40:	1f18      	subs	r0, r3, #4
 801de42:	2b00      	cmp	r3, #0
 801de44:	bfbc      	itt	lt
 801de46:	580b      	ldrlt	r3, [r1, r0]
 801de48:	18c0      	addlt	r0, r0, r3
 801de4a:	4770      	bx	lr

0801de4c <_init>:
 801de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de4e:	bf00      	nop
 801de50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801de52:	bc08      	pop	{r3}
 801de54:	469e      	mov	lr, r3
 801de56:	4770      	bx	lr

0801de58 <_fini>:
 801de58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de5a:	bf00      	nop
 801de5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801de5e:	bc08      	pop	{r3}
 801de60:	469e      	mov	lr, r3
 801de62:	4770      	bx	lr
